<?php declare(strict_types=1);
// Generated code
namespace MplusKASSA\MplusQapi;
use MplusKASSA\Wsdl2PhpGenerator\BaseSoapParser;
use Brick\Math\BigDecimal;
class SoapParser extends BaseSoapParser {
	protected function loadSoapObjectByName(\XMLReader $in) {
		switch ($in->localName) {
			case 'SoapMplusDateTime': return $this->load_SoapMplusDateTime($in);
			case 'SoapMplusDate': return $this->load_SoapMplusDate($in);
			case 'NumberList': return $this->load_NumberList($in);
			case 'CategoryIdSet': return $this->load_CategoryIdSet($in);
			case 'CustomField': return $this->load_CustomField($in);
			case 'CustomFieldList': return $this->load_CustomFieldList($in);
			case 'Employee': return $this->load_Employee($in);
			case 'EmployeeList': return $this->load_EmployeeList($in);
			case 'Image': return $this->load_Image($in);
			case 'ImageList': return $this->load_ImageList($in);
			case 'RelationArticleDiscount': return $this->load_RelationArticleDiscount($in);
			case 'RelationArticleDiscountList': return $this->load_RelationArticleDiscountList($in);
			case 'VatGroup': return $this->load_VatGroup($in);
			case 'VatGroupList': return $this->load_VatGroupList($in);
			case 'RelationList': return $this->load_RelationList($in);
			case 'Relation': return $this->load_Relation($in);
			case 'Colour': return $this->load_Colour($in);
			case 'EmployeeIdentifier': return $this->load_EmployeeIdentifier($in);
			case 'RelationIdentifier': return $this->load_RelationIdentifier($in);
			case 'TableIdentifier': return $this->load_TableIdentifier($in);
			case 'WorkplaceIdentifier': return $this->load_WorkplaceIdentifier($in);
			case 'WorkplaceIdentifierSet': return $this->load_WorkplaceIdentifierSet($in);
			case 'BranchAccountNumber': return $this->load_BranchAccountNumber($in);
			case 'BranchAccountNumberList': return $this->load_BranchAccountNumberList($in);
			case 'GiftcardType': return $this->load_GiftcardType($in);
			case 'BpeConfiguration': return $this->load_BpeConfiguration($in);
			case 'EftReceiptLine': return $this->load_EftReceiptLine($in);
			case 'EftReceipt': return $this->load_EftReceipt($in);
			case 'EftTransactionDetails': return $this->load_EftTransactionDetails($in);
			case 'ExternalPaymentReceiptText': return $this->load_ExternalPaymentReceiptText($in);
			case 'ExternalPaymentTransactionDetails': return $this->load_ExternalPaymentTransactionDetails($in);
			case 'Payment': return $this->load_Payment($in);
			case 'PaymentList': return $this->load_PaymentList($in);
			case 'PaymentMethod': return $this->load_PaymentMethod($in);
			case 'PaymentMethodList': return $this->load_PaymentMethodList($in);
			case 'SalePromotionLineData': return $this->load_SalePromotionLineData($in);
			case 'SalePromotionLineDataInput': return $this->load_SalePromotionLineDataInput($in);
			case 'TerminalId': return $this->load_TerminalId($in);
			case 'Terminal': return $this->load_Terminal($in);
			case 'IdempotentReq': return $this->load_IdempotentReq($in);
			case 'IdempotentResp': return $this->load_IdempotentResp($in);
			case 'WebhookExternalDiscount': return $this->load_WebhookExternalDiscount($in);
			case 'BranchFilter': return $this->load_BranchFilter($in);
			case 'AuthorizationsList': return $this->load_AuthorizationsList($in);
			case 'Authorization': return $this->load_Authorization($in);
			case 'BranchGroupFilter': return $this->load_BranchGroupFilter($in);
			case 'OwnerLabelFilter': return $this->load_OwnerLabelFilter($in);
			case 'IdList': return $this->load_IdList($in);
			case 'IdSet': return $this->load_IdSet($in);
			case 'Order': return $this->load_Order($in);
			case 'OrderList': return $this->load_OrderList($in);
			case 'OrderInput': return $this->load_OrderInput($in);
			case 'OrderTypeList': return $this->load_OrderTypeList($in);
			case 'YearNumber': return $this->load_YearNumber($in);
			case 'YearNumberList': return $this->load_YearNumberList($in);
			case 'YearNumberPart': return $this->load_YearNumberPart($in);
			case 'Address': return $this->load_Address($in);
			case 'ContractFrequencyList': return $this->load_ContractFrequencyList($in);
			case 'SalesLineContractLine': return $this->load_SalesLineContractLine($in);
			case 'SalesLineContractLineList': return $this->load_SalesLineContractLineList($in);
			case 'WebhookLineData': return $this->load_WebhookLineData($in);
			case 'LineList': return $this->load_LineList($in);
			case 'LineData': return $this->load_LineData($in);
			case 'Line': return $this->load_Line($in);
			case 'LineDataInput': return $this->load_LineDataInput($in);
			case 'LineInputList': return $this->load_LineInputList($in);
			case 'LineInput': return $this->load_LineInput($in);
			case 'Answer': return $this->load_Answer($in);
			case 'AnswerList': return $this->load_AnswerList($in);
			case 'Invoice': return $this->load_Invoice($in);
			case 'InvoiceList': return $this->load_InvoiceList($in);
			case 'InvoiceInput': return $this->load_InvoiceInput($in);
			case 'Text': return $this->load_Text($in);
			case 'TextList': return $this->load_TextList($in);
			case 'VoucherId': return $this->load_VoucherId($in);
			case 'VoucherIdList': return $this->load_VoucherIdList($in);
			case 'VoucherView': return $this->load_VoucherView($in);
			case 'VoucherViewList': return $this->load_VoucherViewList($in);
			case 'VoucherIssuanceRedeem': return $this->load_VoucherIssuanceRedeem($in);
			case 'VoucherIssuanceRedeemList': return $this->load_VoucherIssuanceRedeemList($in);
			case 'VoucherIssuance': return $this->load_VoucherIssuance($in);
			case 'VoucherIssuanceList': return $this->load_VoucherIssuanceList($in);
			case 'VoucherIssuanceCompact': return $this->load_VoucherIssuanceCompact($in);
			case 'VoucherIssuanceCompactList': return $this->load_VoucherIssuanceCompactList($in);
			case 'VoucherIssuanceCandidate': return $this->load_VoucherIssuanceCandidate($in);
			case 'VoucherIssuanceCandidateList': return $this->load_VoucherIssuanceCandidateList($in);
			case 'VoucherIssuanceScanCode': return $this->load_VoucherIssuanceScanCode($in);
			case 'VoucherRedeemCount': return $this->load_VoucherRedeemCount($in);
			case 'VoucherRedeemCountList': return $this->load_VoucherRedeemCountList($in);
			case 'VoucherCanApplyResult': return $this->load_VoucherCanApplyResult($in);
			case 'UnappliedVoucherIssuance': return $this->load_UnappliedVoucherIssuance($in);
			case 'UnappliedVoucherIssuanceList': return $this->load_UnappliedVoucherIssuanceList($in);
			case 'VoucherIssuanceRedeemable': return $this->load_VoucherIssuanceRedeemable($in);
			case 'VoucherIssuanceRedeemableList': return $this->load_VoucherIssuanceRedeemableList($in);
			case 'RequestSalesRepeatTemplateTypeFilter': return $this->load_RequestSalesRepeatTemplateTypeFilter($in);
			case 'RequestSalesRepeatTemplateIdsFilter': return $this->load_RequestSalesRepeatTemplateIdsFilter($in);
			case 'YearNumberVersion': return $this->load_YearNumberVersion($in);
			case 'WorkplaceYearNumber': return $this->load_WorkplaceYearNumber($in);
			case 'NumberSet': return $this->load_NumberSet($in);
			case 'SalesPrice': return $this->load_SalesPrice($in);
			case 'SalesPriceList': return $this->load_SalesPriceList($in);
			case 'PriceGroup': return $this->load_PriceGroup($in);
			case 'PriceGroupList': return $this->load_PriceGroupList($in);
			case 'Mistake': return $this->load_Mistake($in);
			case 'MistakeList': return $this->load_MistakeList($in);
			case 'LogMistakeRequest': return $this->load_LogMistakeRequest($in);
			case 'GetRelationsRequest': return $this->load_GetRelationsRequest($in);
			case 'CardCategory': return $this->load_CardCategory($in);
			case 'CardCategoryList': return $this->load_CardCategoryList($in);
			case 'AdjustPointsRequest': return $this->load_AdjustPointsRequest($in);
			case 'GetRelationPoints': return $this->load_GetRelationPoints($in);
			case 'GetRelationPointsRequest': return $this->load_GetRelationPointsRequest($in);
			case 'getEmployeesRequest': return $this->load_getEmployeesRequest($in);
			case 'EmployeeName': return $this->load_EmployeeName($in);
			case 'TableNumberList': return $this->load_TableNumberList($in);
			case 'Table': return $this->load_Table($in);
			case 'TableNumber': return $this->load_TableNumber($in);
			case 'TableRelation': return $this->load_TableRelation($in);
			case 'TableCourse': return $this->load_TableCourse($in);
			case 'OccupiedTableDetails': return $this->load_OccupiedTableDetails($in);
			case 'SubTableState': return $this->load_SubTableState($in);
			case 'SubTableList': return $this->load_SubTableList($in);
			case 'WholeTable': return $this->load_WholeTable($in);
			case 'getTableListV3Request': return $this->load_getTableListV3Request($in);
			case 'MainTable': return $this->load_MainTable($in);
			case 'getMainTableListRequest': return $this->load_getMainTableListRequest($in);
			case 'getSubTableListRequest': return $this->load_getSubTableListRequest($in);
			case 'Course': return $this->load_Course($in);
			case 'CourseInfo': return $this->load_CourseInfo($in);
			case 'GetCourseListV2Request': return $this->load_GetCourseListV2Request($in);
			case 'WebhookSessionData': return $this->load_WebhookSessionData($in);
			case 'SaveTableOrderRequest': return $this->load_SaveTableOrderRequest($in);
			case 'CreateAndPayTableOrderRequest': return $this->load_CreateAndPayTableOrderRequest($in);
			case 'MoveTableOrderRequest': return $this->load_MoveTableOrderRequest($in);
			case 'MoveTableLine': return $this->load_MoveTableLine($in);
			case 'MoveTableLineList': return $this->load_MoveTableLineList($in);
			case 'MoveTableOrderV3Request': return $this->load_MoveTableOrderV3Request($in);
			case 'GetTableOrderRequest': return $this->load_GetTableOrderRequest($in);
			case 'GetTableOrderV3Request': return $this->load_GetTableOrderV3Request($in);
			case 'ReleaseTableRequest': return $this->load_ReleaseTableRequest($in);
			case 'ReleaseTableV2Request': return $this->load_ReleaseTableV2Request($in);
			case 'SetSubtableCountRequest': return $this->load_SetSubtableCountRequest($in);
			case 'CourseList': return $this->load_CourseList($in);
			case 'GetTableOrderCourseListRequest': return $this->load_GetTableOrderCourseListRequest($in);
			case 'RequestNextTableOrderCourseRequest': return $this->load_RequestNextTableOrderCourseRequest($in);
			case 'RequestNextTableOrderCourseV3Request': return $this->load_RequestNextTableOrderCourseV3Request($in);
			case 'QueueBranchOrderInfo': return $this->load_QueueBranchOrderInfo($in);
			case 'QueueBranchOrderPaymentRequest': return $this->load_QueueBranchOrderPaymentRequest($in);
			case 'UpdateOrderInfo': return $this->load_UpdateOrderInfo($in);
			case 'UpdateOrderV2Request': return $this->load_UpdateOrderV2Request($in);
			case 'SaveOrderInfo': return $this->load_SaveOrderInfo($in);
			case 'PackingSlip': return $this->load_PackingSlip($in);
			case 'PackingSlipList': return $this->load_PackingSlipList($in);
			case 'GetPackingSlipsRequest': return $this->load_GetPackingSlipsRequest($in);
			case 'GetPackingSlipsByOrderRequest': return $this->load_GetPackingSlipsByOrderRequest($in);
			case 'LineChangeList': return $this->load_LineChangeList($in);
			case 'LineChangeData': return $this->load_LineChangeData($in);
			case 'LineChange': return $this->load_LineChange($in);
			case 'OrderChange': return $this->load_OrderChange($in);
			case 'OrderChangeList': return $this->load_OrderChangeList($in);
			case 'GetOrderChangesRequest': return $this->load_GetOrderChangesRequest($in);
			case 'OrderPaymentList': return $this->load_OrderPaymentList($in);
			case 'LineChangeEventList': return $this->load_LineChangeEventList($in);
			case 'LONG64-DataChange': return $this->load_LONG64_DataChange($in);
			case 'Decimal-DataChange': return $this->load_Decimal_DataChange($in);
			case 'SoapMplusDate-DataChange': return $this->load_SoapMplusDate_DataChange($in);
			case 'SoapMplusDateTime-DataChange': return $this->load_SoapMplusDateTime_DataChange($in);
			case 'Int-DataChange': return $this->load_Int_DataChange($in);
			case 'Bool-DataChange': return $this->load_Bool_DataChange($in);
			case 'String-DataChange': return $this->load_String_DataChange($in);
			case 'TableNumber-DataChange': return $this->load_TableNumber_DataChange($in);
			case 'OrderCancelState-DataChange': return $this->load_OrderCancelState_DataChange($in);
			case 'OrderDeliveryState-DataChange': return $this->load_OrderDeliveryState_DataChange($in);
			case 'OrderCompleteState-DataChange': return $this->load_OrderCompleteState_DataChange($in);
			case 'VatMethod-DataChange': return $this->load_VatMethod_DataChange($in);
			case 'VatChange-DataChange': return $this->load_VatChange_DataChange($in);
			case 'TableSplitEvent': return $this->load_TableSplitEvent($in);
			case 'TurnoverGroupType-DataChange': return $this->load_TurnoverGroupType_DataChange($in);
			case 'DiscountType-DataChange': return $this->load_DiscountType_DataChange($in);
			case 'LineChangeEventData': return $this->load_LineChangeEventData($in);
			case 'LineChangeEvent': return $this->load_LineChangeEvent($in);
			case 'OrderPayment': return $this->load_OrderPayment($in);
			case 'OrderHistory': return $this->load_OrderHistory($in);
			case 'OrderHistoryList': return $this->load_OrderHistoryList($in);
			case 'OrderHistoryOrderDetails': return $this->load_OrderHistoryOrderDetails($in);
			case 'OrderHistoryOrderDetailsList': return $this->load_OrderHistoryOrderDetailsList($in);
			case 'GetOrderHistoryRequest': return $this->load_GetOrderHistoryRequest($in);
			case 'CancelOrderRequest': return $this->load_CancelOrderRequest($in);
			case 'CancelOrderV2Request': return $this->load_CancelOrderV2Request($in);
			case 'CancelTableOrderRequest': return $this->load_CancelTableOrderRequest($in);
			case 'PayInvoiceRequest': return $this->load_PayInvoiceRequest($in);
			case 'DeliverOrderRequest': return $this->load_DeliverOrderRequest($in);
			case 'OrderDeliveryLine': return $this->load_OrderDeliveryLine($in);
			case 'OrderDeliveryLineList': return $this->load_OrderDeliveryLineList($in);
			case 'OrderDelivery': return $this->load_OrderDelivery($in);
			case 'DeliverOrderV2Request': return $this->load_DeliverOrderV2Request($in);
			case 'OrderCategory': return $this->load_OrderCategory($in);
			case 'Receipt': return $this->load_Receipt($in);
			case 'ReceiptList': return $this->load_ReceiptList($in);
			case 'GetReceiptsRequest': return $this->load_GetReceiptsRequest($in);
			case 'GetReceiptsByCashCountRequest': return $this->load_GetReceiptsByCashCountRequest($in);
			case 'PrintReceiptV2Request': return $this->load_PrintReceiptV2Request($in);
			case 'PrintTableReceiptRequest': return $this->load_PrintTableReceiptRequest($in);
			case 'PrintTableReceiptV3Request': return $this->load_PrintTableReceiptV3Request($in);
			case 'GetInvoicesRequest': return $this->load_GetInvoicesRequest($in);
			case 'SaveInvoiceInfo': return $this->load_SaveInvoiceInfo($in);
			case 'JournalFilterList': return $this->load_JournalFilterList($in);
			case 'TurnoverGroup': return $this->load_TurnoverGroup($in);
			case 'TurnoverGroupList': return $this->load_TurnoverGroupList($in);
			case 'CashCountLine': return $this->load_CashCountLine($in);
			case 'CashCountLineList': return $this->load_CashCountLineList($in);
			case 'Transaction': return $this->load_Transaction($in);
			case 'CashCountExtraWorkplace': return $this->load_CashCountExtraWorkplace($in);
			case 'CashCountExtraWorkplaceList': return $this->load_CashCountExtraWorkplaceList($in);
			case 'CashCount': return $this->load_CashCount($in);
			case 'CashCountList': return $this->load_CashCountList($in);
			case 'Journal': return $this->load_Journal($in);
			case 'JournalList': return $this->load_JournalList($in);
			case 'GetJournalsRequest': return $this->load_GetJournalsRequest($in);
			case 'FinancialGroup': return $this->load_FinancialGroup($in);
			case 'FinancialGroupList': return $this->load_FinancialGroupList($in);
			case 'GetFinancialJournalRequest': return $this->load_GetFinancialJournalRequest($in);
			case 'GetFinancialJournalByCashCountRequest': return $this->load_GetFinancialJournalByCashCountRequest($in);
			case 'GetCashCountListRequest': return $this->load_GetCashCountListRequest($in);
			case 'CashDrawerCountLineDenomination': return $this->load_CashDrawerCountLineDenomination($in);
			case 'CashDrawerCountLineDenominationList': return $this->load_CashDrawerCountLineDenominationList($in);
			case 'CashDrawerCountLine': return $this->load_CashDrawerCountLine($in);
			case 'CashDrawerCountLineList': return $this->load_CashDrawerCountLineList($in);
			case 'CashDrawerCount': return $this->load_CashDrawerCount($in);
			case 'CashDrawerCountList': return $this->load_CashDrawerCountList($in);
			case 'CashDrawerBalancing': return $this->load_CashDrawerBalancing($in);
			case 'CashDrawerBalancingList': return $this->load_CashDrawerBalancingList($in);
			case 'GetCashDrawerBalancingListRequest': return $this->load_GetCashDrawerBalancingListRequest($in);
			case 'GetTurnoverGroupsRequest': return $this->load_GetTurnoverGroupsRequest($in);
			case 'UpdateTurnoverGroupsRequest': return $this->load_UpdateTurnoverGroupsRequest($in);
			case 'NutritionalCharacteristic': return $this->load_NutritionalCharacteristic($in);
			case 'AllergenList': return $this->load_AllergenList($in);
			case 'DietRestrictionList': return $this->load_DietRestrictionList($in);
			case 'NutritionalCharacteristics': return $this->load_NutritionalCharacteristics($in);
			case 'LinkedArticle': return $this->load_LinkedArticle($in);
			case 'LinkedArticleList': return $this->load_LinkedArticleList($in);
			case 'Barcode': return $this->load_Barcode($in);
			case 'BarcodeList': return $this->load_BarcodeList($in);
			case 'PreparationMethod': return $this->load_PreparationMethod($in);
			case 'PreparationMethodList': return $this->load_PreparationMethodList($in);
			case 'ComponentArticle': return $this->load_ComponentArticle($in);
			case 'ComponentArticleList': return $this->load_ComponentArticleList($in);
			case 'Article': return $this->load_Article($in);
			case 'ArticleList': return $this->load_ArticleList($in);
			case 'SortOrderGroupList': return $this->load_SortOrderGroupList($in);
			case 'SortOrderGroup': return $this->load_SortOrderGroup($in);
			case 'Product': return $this->load_Product($in);
			case 'ProductList': return $this->load_ProductList($in);
			case 'GetProductsRequest': return $this->load_GetProductsRequest($in);
			case 'ArticleVariantList': return $this->load_ArticleVariantList($in);
			case 'ArticleVariantSupplier': return $this->load_ArticleVariantSupplier($in);
			case 'ArticleVariantSupplierList': return $this->load_ArticleVariantSupplierList($in);
			case 'ArticleVariant': return $this->load_ArticleVariant($in);
			case 'GetArticleVariantsRequest': return $this->load_GetArticleVariantsRequest($in);
			case 'GetArticlesVariantsRequest': return $this->load_GetArticlesVariantsRequest($in);
			case 'GetArticlesVariantsResponseElem': return $this->load_GetArticlesVariantsResponseElem($in);
			case 'NewArticleVariantRequest': return $this->load_NewArticleVariantRequest($in);
			case 'UpdateArticleVariantRequest': return $this->load_UpdateArticleVariantRequest($in);
			case 'DeleteArticleVariantsRequest': return $this->load_DeleteArticleVariantsRequest($in);
			case 'ArticleStock': return $this->load_ArticleStock($in);
			case 'ArticleNumberList': return $this->load_ArticleNumberList($in);
			case 'GetStockRequest': return $this->load_GetStockRequest($in);
			case 'ArticleStockHistory': return $this->load_ArticleStockHistory($in);
			case 'GetStockHistoryRequest': return $this->load_GetStockHistoryRequest($in);
			case 'GetStockHistoryV2Request': return $this->load_GetStockHistoryV2Request($in);
			case 'UpdateStockRequest': return $this->load_UpdateStockRequest($in);
			case 'SetStockRequest': return $this->load_SetStockRequest($in);
			case 'GetArticleGroupsRequest': return $this->load_GetArticleGroupsRequest($in);
			case 'ArticleGroupList': return $this->load_ArticleGroupList($in);
			case 'ArticleGroup': return $this->load_ArticleGroup($in);
			case 'GetArticleGroupChangesRequest': return $this->load_GetArticleGroupChangesRequest($in);
			case 'ChangedArticleGroup': return $this->load_ChangedArticleGroup($in);
			case 'ChangedArticleGroupList': return $this->load_ChangedArticleGroupList($in);
			case 'UpdateArticleGroupRequest': return $this->load_UpdateArticleGroupRequest($in);
			case 'NewArticleGroupRequest': return $this->load_NewArticleGroupRequest($in);
			case 'DeleteArticleGroupRequest': return $this->load_DeleteArticleGroupRequest($in);
			case 'AddProductsToArticleGroupRequest': return $this->load_AddProductsToArticleGroupRequest($in);
			case 'ReplaceProductsOfArticleGroupRequest': return $this->load_ReplaceProductsOfArticleGroupRequest($in);
			case 'DeleteProductsFromArticleGroupRequest': return $this->load_DeleteProductsFromArticleGroupRequest($in);
			case 'SendMessageRequest': return $this->load_SendMessageRequest($in);
			case 'GetMessagesRequest': return $this->load_GetMessagesRequest($in);
			case 'Message': return $this->load_Message($in);
			case 'MessageList': return $this->load_MessageList($in);
			case 'Shift': return $this->load_Shift($in);
			case 'ShiftList': return $this->load_ShiftList($in);
			case 'GetShiftsRequest': return $this->load_GetShiftsRequest($in);
			case 'PurchaseOrderLineList': return $this->load_PurchaseOrderLineList($in);
			case 'PurchaseOrderLineData': return $this->load_PurchaseOrderLineData($in);
			case 'PurchaseOrderLine': return $this->load_PurchaseOrderLine($in);
			case 'PurchaseOrder': return $this->load_PurchaseOrder($in);
			case 'PurchaseOrderList': return $this->load_PurchaseOrderList($in);
			case 'GetPurchaseOrdersRequest': return $this->load_GetPurchaseOrdersRequest($in);
			case 'SavePurchaseOrderInfo': return $this->load_SavePurchaseOrderInfo($in);
			case 'PurchaseOrderV2LineList': return $this->load_PurchaseOrderV2LineList($in);
			case 'PurchaseOrderV2LineData': return $this->load_PurchaseOrderV2LineData($in);
			case 'PurchaseOrderV2Line': return $this->load_PurchaseOrderV2Line($in);
			case 'PurchaseOrderV2': return $this->load_PurchaseOrderV2($in);
			case 'PurchaseOrderV2List': return $this->load_PurchaseOrderV2List($in);
			case 'GetPurchaseOrdersV2Request': return $this->load_GetPurchaseOrdersV2Request($in);
			case 'SavePurchaseOrderV2LineList': return $this->load_SavePurchaseOrderV2LineList($in);
			case 'SavePurchaseOrderV2LineData': return $this->load_SavePurchaseOrderV2LineData($in);
			case 'SavePurchaseOrderV2Line': return $this->load_SavePurchaseOrderV2Line($in);
			case 'SavePurchaseOrderV2': return $this->load_SavePurchaseOrderV2($in);
			case 'SavePurchaseOrderV2Request': return $this->load_SavePurchaseOrderV2Request($in);
			case 'ErrorDetails': return $this->load_ErrorDetails($in);
			case 'PurchaseDeliveryLineList': return $this->load_PurchaseDeliveryLineList($in);
			case 'PurchaseDeliveryLineData': return $this->load_PurchaseDeliveryLineData($in);
			case 'PurchaseDeliveryLine': return $this->load_PurchaseDeliveryLine($in);
			case 'PurchaseDelivery': return $this->load_PurchaseDelivery($in);
			case 'PurchaseDeliveryList': return $this->load_PurchaseDeliveryList($in);
			case 'GetPurchaseDeliveriesRequest': return $this->load_GetPurchaseDeliveriesRequest($in);
			case 'SavePurchaseDeliveryInfo': return $this->load_SavePurchaseDeliveryInfo($in);
			case 'PurchaseDeliveryV2LineList': return $this->load_PurchaseDeliveryV2LineList($in);
			case 'PurchaseDeliveryV2LineData': return $this->load_PurchaseDeliveryV2LineData($in);
			case 'PurchaseDeliveryV2Line': return $this->load_PurchaseDeliveryV2Line($in);
			case 'PurchaseDeliveryV2': return $this->load_PurchaseDeliveryV2($in);
			case 'GetPurchaseDeliveriesV2Request': return $this->load_GetPurchaseDeliveriesV2Request($in);
			case 'PurchaseDeliveryV2List': return $this->load_PurchaseDeliveryV2List($in);
			case 'SavePurchaseDeliveryV2LineList': return $this->load_SavePurchaseDeliveryV2LineList($in);
			case 'SavePurchaseDeliveryV2LineData': return $this->load_SavePurchaseDeliveryV2LineData($in);
			case 'SavePurchaseDeliveryV2Line': return $this->load_SavePurchaseDeliveryV2Line($in);
			case 'SavePurchaseDeliveryV2': return $this->load_SavePurchaseDeliveryV2($in);
			case 'SavePurchaseDeliveryV2Request': return $this->load_SavePurchaseDeliveryV2Request($in);
			case 'EncryptStringRequest': return $this->load_EncryptStringRequest($in);
			case 'CardLayoutField': return $this->load_CardLayoutField($in);
			case 'CardLayoutFieldList': return $this->load_CardLayoutFieldList($in);
			case 'GetArticleCardLayoutRequest': return $this->load_GetArticleCardLayoutRequest($in);
			case 'UpdateArticleCardLayoutRequest': return $this->load_UpdateArticleCardLayoutRequest($in);
			case 'RetailSpaceRental': return $this->load_RetailSpaceRental($in);
			case 'RetailSpaceRentalList': return $this->load_RetailSpaceRentalList($in);
			case 'GetRetailSpaceRentalRequest': return $this->load_GetRetailSpaceRentalRequest($in);
			case 'GetRetailSpaceRentalsRequest': return $this->load_GetRetailSpaceRentalsRequest($in);
			case 'EntityTypeList': return $this->load_EntityTypeList($in);
			case 'EidSearchRequest': return $this->load_EidSearchRequest($in);
			case 'OverviewFilter': return $this->load_OverviewFilter($in);
			case 'OverviewFilterList': return $this->load_OverviewFilterList($in);
			case 'OverviewSearch': return $this->load_OverviewSearch($in);
			case 'ScopeValues': return $this->load_ScopeValues($in);
			case 'OverviewRequest': return $this->load_OverviewRequest($in);
			case 'OverviewField': return $this->load_OverviewField($in);
			case 'SimpleImage': return $this->load_SimpleImage($in);
			case 'SimpleImageList': return $this->load_SimpleImageList($in);
			case 'OverviewFieldList': return $this->load_OverviewFieldList($in);
			case 'OverviewList': return $this->load_OverviewList($in);
			case 'GetOverviewError': return $this->load_GetOverviewError($in);
			case 'GetOverviewErrorList': return $this->load_GetOverviewErrorList($in);
			case 'GetOverviewFieldsRequest': return $this->load_GetOverviewFieldsRequest($in);
			case 'FieldSelectValue': return $this->load_FieldSelectValue($in);
			case 'OverviewFieldsField': return $this->load_OverviewFieldsField($in);
			case 'OverviewFieldsList': return $this->load_OverviewFieldsList($in);
			case 'GetOverviewFieldsError': return $this->load_GetOverviewFieldsError($in);
			case 'GetOverviewFieldsErrorList': return $this->load_GetOverviewFieldsErrorList($in);
			case 'UpdateBatchField': return $this->load_UpdateBatchField($in);
			case 'UpdateBatchFieldList': return $this->load_UpdateBatchFieldList($in);
			case 'UpdateBatchRequest': return $this->load_UpdateBatchRequest($in);
			case 'UpdateBatchError': return $this->load_UpdateBatchError($in);
			case 'UpdateBatchErrorList': return $this->load_UpdateBatchErrorList($in);
			case 'PrintRequest': return $this->load_PrintRequest($in);
			case 'GetKitchenTicketsRequest': return $this->load_GetKitchenTicketsRequest($in);
			case 'KitchenTicketLine': return $this->load_KitchenTicketLine($in);
			case 'KitchenTicketLineList': return $this->load_KitchenTicketLineList($in);
			case 'KitchenTicketCourse': return $this->load_KitchenTicketCourse($in);
			case 'KitchenTicketCourseList': return $this->load_KitchenTicketCourseList($in);
			case 'KitchenTicket': return $this->load_KitchenTicket($in);
			case 'KitchenTicketList': return $this->load_KitchenTicketList($in);
			case 'StockCorrection': return $this->load_StockCorrection($in);
			case 'StockCorrectionList': return $this->load_StockCorrectionList($in);
			case 'SaveStockCorrectionsRequest': return $this->load_SaveStockCorrectionsRequest($in);
			case 'PurchaseBookEntry': return $this->load_PurchaseBookEntry($in);
			case 'PurchaseBook': return $this->load_PurchaseBook($in);
			case 'GetPurchaseBookRequest': return $this->load_GetPurchaseBookRequest($in);
			case 'AddToPurchaseBookRequest': return $this->load_AddToPurchaseBookRequest($in);
			case 'GetStockCorrectionsRequest': return $this->load_GetStockCorrectionsRequest($in);
			case 'StockCorrectionLineV2': return $this->load_StockCorrectionLineV2($in);
			case 'StockCorrectionLineV2List': return $this->load_StockCorrectionLineV2List($in);
			case 'StockCorrectionV2': return $this->load_StockCorrectionV2($in);
			case 'StockCorrectionV2List': return $this->load_StockCorrectionV2List($in);
			case 'GetArticlesNutritionalCharacteristicsRequest': return $this->load_GetArticlesNutritionalCharacteristicsRequest($in);
			case 'GetArticlesNutritionalCharacteristicsResponseElem': return $this->load_GetArticlesNutritionalCharacteristicsResponseElem($in);
			case 'NutritionalCharacteristicInput': return $this->load_NutritionalCharacteristicInput($in);
			case 'NutritionalCharacteristicsInput': return $this->load_NutritionalCharacteristicsInput($in);
			case 'UpdateArticleNutritionalCharacteristicsRequest': return $this->load_UpdateArticleNutritionalCharacteristicsRequest($in);
			case 'GetPreparationMethodGroupsRequest': return $this->load_GetPreparationMethodGroupsRequest($in);
			case 'PreparationMethodItem': return $this->load_PreparationMethodItem($in);
			case 'PreparationMethodItemList': return $this->load_PreparationMethodItemList($in);
			case 'PreparationMethodGroup': return $this->load_PreparationMethodGroup($in);
			case 'PreparationMethodGroupList': return $this->load_PreparationMethodGroupList($in);
			case 'DeletePreparationMethodGroupRequest': return $this->load_DeletePreparationMethodGroupRequest($in);
			case 'GetArticlesPreparationMethodGroupsRequest': return $this->load_GetArticlesPreparationMethodGroupsRequest($in);
			case 'ArticlePreparationMethodGroups': return $this->load_ArticlePreparationMethodGroups($in);
			case 'ArticlePreparationMethodGroupsList': return $this->load_ArticlePreparationMethodGroupsList($in);
			case 'UpdateArticlePreparationMethodGroupsRequest': return $this->load_UpdateArticlePreparationMethodGroupsRequest($in);
			case 'PlaceTableOrderLineDataElem': return $this->load_PlaceTableOrderLineDataElem($in);
			case 'PlaceTableOrderLineElem': return $this->load_PlaceTableOrderLineElem($in);
			case 'PlaceTableOrderPaymentElem': return $this->load_PlaceTableOrderPaymentElem($in);
			case 'TableOrderIdentifierElem': return $this->load_TableOrderIdentifierElem($in);
			case 'PlaceTableOrderReq': return $this->load_PlaceTableOrderReq($in);
			case 'TapTickTotalsRequest': return $this->load_TapTickTotalsRequest($in);
			case 'TapTickTotal': return $this->load_TapTickTotal($in);
			case 'BranchTapTickTotals': return $this->load_BranchTapTickTotals($in);
			case 'TapTickHistoryRequest': return $this->load_TapTickHistoryRequest($in);
			case 'TapTickHistory': return $this->load_TapTickHistory($in);
			case 'FindRelationV2Request': return $this->load_FindRelationV2Request($in);
			case 'TodoListEntry': return $this->load_TodoListEntry($in);
			case 'GetTodoListsRequest': return $this->load_GetTodoListsRequest($in);
			case 'CreateTodoListRequest': return $this->load_CreateTodoListRequest($in);
			case 'SaveTodoListRequest': return $this->load_SaveTodoListRequest($in);
			case 'SaveTodoListV2Request': return $this->load_SaveTodoListV2Request($in);
			case 'AddToTodoListRequest': return $this->load_AddToTodoListRequest($in);
			case 'Struct-1': return $this->load_Struct_1($in);
			case 'Struct-2': return $this->load_Struct_2($in);
			case 'Struct-3': return $this->load_Struct_3($in);
			case 'GetFilterProfilesRequest': return $this->load_GetFilterProfilesRequest($in);
			case 'FilterProfile': return $this->load_FilterProfile($in);
			case 'SavePreparationMethodItem': return $this->load_SavePreparationMethodItem($in);
			case 'SavePreparationMethodGroupRequest': return $this->load_SavePreparationMethodGroupRequest($in);
			case 'GetNutritionalCharacteristicsRequest': return $this->load_GetNutritionalCharacteristicsRequest($in);
			case 'GetNutritionalCharacteristicsResponseElem': return $this->load_GetNutritionalCharacteristicsResponseElem($in);
			case 'UpdateNutritionalCharacteristicsRequest': return $this->load_UpdateNutritionalCharacteristicsRequest($in);
			case 'DeterminePricingRequest': return $this->load_DeterminePricingRequest($in);
			case 'DeterminePricingResponseLine': return $this->load_DeterminePricingResponseLine($in);
			case 'RelationPresence': return $this->load_RelationPresence($in);
			case 'SetRelationPresenceRequest': return $this->load_SetRelationPresenceRequest($in);
			case 'GetRelationPresenceRequest': return $this->load_GetRelationPresenceRequest($in);
			case 'GetArticleBranchDeviationsRequest': return $this->load_GetArticleBranchDeviationsRequest($in);
			case 'ArticleBranchDeviationLine': return $this->load_ArticleBranchDeviationLine($in);
			case 'SaveArticleBranchDeviationsRequest': return $this->load_SaveArticleBranchDeviationsRequest($in);
			case 'ArticleNutrient': return $this->load_ArticleNutrient($in);
			case 'UpdateArticleNutrientsRequest': return $this->load_UpdateArticleNutrientsRequest($in);
			case 'ArticleDynamicMinMaxStock': return $this->load_ArticleDynamicMinMaxStock($in);
			case 'ArticleDynamicMinMaxStockList': return $this->load_ArticleDynamicMinMaxStockList($in);
			case 'UpdateArticleDynamicMinMaxStockRequest': return $this->load_UpdateArticleDynamicMinMaxStockRequest($in);
			case 'GetArticleDynamicMinMaxStockRequest': return $this->load_GetArticleDynamicMinMaxStockRequest($in);
			case 'TableEmployee': return $this->load_TableEmployee($in);
			case 'CardFieldInfo': return $this->load_CardFieldInfo($in);
			case 'CardFieldInfoList': return $this->load_CardFieldInfoList($in);
			case 'CardFieldInfoResponse': return $this->load_CardFieldInfoResponse($in);
			case 'CardFieldInfoResponseList': return $this->load_CardFieldInfoResponseList($in);
			case 'GetCardFilterOptionsRequest': return $this->load_GetCardFilterOptionsRequest($in);
			case 'PlannedCycleCount': return $this->load_PlannedCycleCount($in);
			case 'PlannedCycleCountList': return $this->load_PlannedCycleCountList($in);
			case 'GetPlannedCycleCountsRequest': return $this->load_GetPlannedCycleCountsRequest($in);
			case 'ActiveCycleCountLine': return $this->load_ActiveCycleCountLine($in);
			case 'ActiveCycleCountLineList': return $this->load_ActiveCycleCountLineList($in);
			case 'ActiveCycleCount': return $this->load_ActiveCycleCount($in);
			case 'GetActiveCycleCountRequest': return $this->load_GetActiveCycleCountRequest($in);
			case 'SetArticleRecalledRequest': return $this->load_SetArticleRecalledRequest($in);
			case 'GetArticleComponentsRequest': return $this->load_GetArticleComponentsRequest($in);
			case 'ArticleComponent': return $this->load_ArticleComponent($in);
			case 'ArticleComponentList': return $this->load_ArticleComponentList($in);
			case 'SaveArticleComponentsRequest': return $this->load_SaveArticleComponentsRequest($in);
			case 'getSalesPriceListResponse': return $this->load_getSalesPriceListResponse($in);
			case 'getPriceGroupListResponse': return $this->load_getPriceGroupListResponse($in);
			case 'LogMistakeResponse': return $this->load_LogMistakeResponse($in);
			case 'CreateRelationResponse': return $this->load_CreateRelationResponse($in);
			case 'UpdateRelationResponse': return $this->load_UpdateRelationResponse($in);
			case 'GetRelationResponse': return $this->load_GetRelationResponse($in);
			case 'FindRelationResponse': return $this->load_FindRelationResponse($in);
			case 'GetRelationsResponse': return $this->load_GetRelationsResponse($in);
			case 'GetCustomFieldListsResponse': return $this->load_GetCustomFieldListsResponse($in);
			case 'GetCardCategoriesResponse': return $this->load_GetCardCategoriesResponse($in);
			case 'AdjustPointsResponse': return $this->load_AdjustPointsResponse($in);
			case 'GetRelationPointsResponse': return $this->load_GetRelationPointsResponse($in);
			case 'GetEmployeesResponse': return $this->load_GetEmployeesResponse($in);
			case 'GetEmployeeResponse': return $this->load_GetEmployeeResponse($in);
			case 'FindEmployeeResponse': return $this->load_FindEmployeeResponse($in);
			case 'CreateEmployeeResponse': return $this->load_CreateEmployeeResponse($in);
			case 'UpdateEmployeeResponse': return $this->load_UpdateEmployeeResponse($in);
			case 'getEmployeeListResponse': return $this->load_getEmployeeListResponse($in);
			case 'getTableListResponse': return $this->load_getTableListResponse($in);
			case 'getTableListV2Response': return $this->load_getTableListV2Response($in);
			case 'getTableListV3Response': return $this->load_getTableListV3Response($in);
			case 'getMainTableListResponse': return $this->load_getMainTableListResponse($in);
			case 'getSubTableListResponse': return $this->load_getSubTableListResponse($in);
			case 'getCourseListResponse': return $this->load_getCourseListResponse($in);
			case 'GetCourseListV2Response': return $this->load_GetCourseListV2Response($in);
			case 'getVatGroupListResponse': return $this->load_getVatGroupListResponse($in);
			case 'SaveTableOrderResponse': return $this->load_SaveTableOrderResponse($in);
			case 'CreateAndPayTableOrderResponse': return $this->load_CreateAndPayTableOrderResponse($in);
			case 'MoveTableOrderResponse': return $this->load_MoveTableOrderResponse($in);
			case 'MoveTableOrderV3Response': return $this->load_MoveTableOrderV3Response($in);
			case 'GetTableOrderResponse': return $this->load_GetTableOrderResponse($in);
			case 'ReleaseTableResponse': return $this->load_ReleaseTableResponse($in);
			case 'ReleaseTableV2Response': return $this->load_ReleaseTableV2Response($in);
			case 'SetSubtableCountResponse': return $this->load_SetSubtableCountResponse($in);
			case 'GetTableOrderCourseListResponse': return $this->load_GetTableOrderCourseListResponse($in);
			case 'RequestTableOrderCourseResponse': return $this->load_RequestTableOrderCourseResponse($in);
			case 'StoreSinglyEftTransactionResponse': return $this->load_StoreSinglyEftTransactionResponse($in);
			case 'QueueBranchOrderResponse': return $this->load_QueueBranchOrderResponse($in);
			case 'QueueBranchOrderPaymentResponse': return $this->load_QueueBranchOrderPaymentResponse($in);
			case 'GetQueueBranchOrderPaymentStatusResponse': return $this->load_GetQueueBranchOrderPaymentStatusResponse($in);
			case 'UpdateOrderResponse': return $this->load_UpdateOrderResponse($in);
			case 'UpdateOrderV2Response': return $this->load_UpdateOrderV2Response($in);
			case 'SaveOrderResponse': return $this->load_SaveOrderResponse($in);
			case 'GetOrderResponse': return $this->load_GetOrderResponse($in);
			case 'GetPackingSlipsResponse': return $this->load_GetPackingSlipsResponse($in);
			case 'GetPackingSlipsByOrderResponse': return $this->load_GetPackingSlipsByOrderResponse($in);
			case 'GetOrderChangesResponse': return $this->load_GetOrderChangesResponse($in);
			case 'GetOrderHistoryResponse': return $this->load_GetOrderHistoryResponse($in);
			case 'CancelOrderResponse': return $this->load_CancelOrderResponse($in);
			case 'PayInvoiceResponse': return $this->load_PayInvoiceResponse($in);
			case 'DeliverOrderResponse': return $this->load_DeliverOrderResponse($in);
			case 'DeliverOrderV2Response': return $this->load_DeliverOrderV2Response($in);
			case 'GetOrderCategoriesResponse': return $this->load_GetOrderCategoriesResponse($in);
			case 'GetReceiptsResponse': return $this->load_GetReceiptsResponse($in);
			case 'GetReceiptResponse': return $this->load_GetReceiptResponse($in);
			case 'GetReceiptsByOrderResponse': return $this->load_GetReceiptsByOrderResponse($in);
			case 'GetReceiptsByCashCountResponse': return $this->load_GetReceiptsByCashCountResponse($in);
			case 'PrintReceiptResponse': return $this->load_PrintReceiptResponse($in);
			case 'PrintReceiptV2Response': return $this->load_PrintReceiptV2Response($in);
			case 'PrintTableReceiptResponse': return $this->load_PrintTableReceiptResponse($in);
			case 'PrintTableReceiptV3Response': return $this->load_PrintTableReceiptV3Response($in);
			case 'GetInvoicesResponse': return $this->load_GetInvoicesResponse($in);
			case 'SaveInvoiceResponse': return $this->load_SaveInvoiceResponse($in);
			case 'GetInvoiceResponse': return $this->load_GetInvoiceResponse($in);
			case 'CreditInvoiceResponse': return $this->load_CreditInvoiceResponse($in);
			case 'GetJournalsResponse': return $this->load_GetJournalsResponse($in);
			case 'GetFinancialJournalResponse': return $this->load_GetFinancialJournalResponse($in);
			case 'GetCashCountListResponse': return $this->load_GetCashCountListResponse($in);
			case 'GetCashDrawerBalancingListResponse': return $this->load_GetCashDrawerBalancingListResponse($in);
			case 'GetTurnoverGroupsResponse': return $this->load_GetTurnoverGroupsResponse($in);
			case 'UpdateTurnoverGroupsResponse': return $this->load_UpdateTurnoverGroupsResponse($in);
			case 'GetProductsResponse': return $this->load_GetProductsResponse($in);
			case 'CreateProductResponse': return $this->load_CreateProductResponse($in);
			case 'UpdateProductResponse': return $this->load_UpdateProductResponse($in);
			case 'GetArticleVariantsResponse': return $this->load_GetArticleVariantsResponse($in);
			case 'GetArticlesVariantsResponse': return $this->load_GetArticlesVariantsResponse($in);
			case 'NewArticleVariantResponse': return $this->load_NewArticleVariantResponse($in);
			case 'UpdateArticleVariantResponse': return $this->load_UpdateArticleVariantResponse($in);
			case 'DeleteArticleVariantsResponse': return $this->load_DeleteArticleVariantsResponse($in);
			case 'GetStockResponse': return $this->load_GetStockResponse($in);
			case 'GetStockHistoryResponse': return $this->load_GetStockHistoryResponse($in);
			case 'UpdateStockResponse': return $this->load_UpdateStockResponse($in);
			case 'SetStockResponse': return $this->load_SetStockResponse($in);
			case 'GetArticleGroupsResponse': return $this->load_GetArticleGroupsResponse($in);
			case 'GetArticleGroupChangesResponse': return $this->load_GetArticleGroupChangesResponse($in);
			case 'UpdateArticleGroupResponse': return $this->load_UpdateArticleGroupResponse($in);
			case 'NewArticleGroupResponse': return $this->load_NewArticleGroupResponse($in);
			case 'DeleteArticleGroupResponse': return $this->load_DeleteArticleGroupResponse($in);
			case 'AddProductsToArticleGroupResponse': return $this->load_AddProductsToArticleGroupResponse($in);
			case 'ReplaceProductsOfArticleGroupResponse': return $this->load_ReplaceProductsOfArticleGroupResponse($in);
			case 'DeleteProductsFromArticleGroupResponse': return $this->load_DeleteProductsFromArticleGroupResponse($in);
			case 'GetMessagesResponse': return $this->load_GetMessagesResponse($in);
			case 'GetShiftsResponse': return $this->load_GetShiftsResponse($in);
			case 'GetPurchaseOrdersResponse': return $this->load_GetPurchaseOrdersResponse($in);
			case 'SavePurchaseOrderResponse': return $this->load_SavePurchaseOrderResponse($in);
			case 'GetPurchaseOrdersV2Response': return $this->load_GetPurchaseOrdersV2Response($in);
			case 'SavePurchaseOrderV2Response': return $this->load_SavePurchaseOrderV2Response($in);
			case 'GetPurchaseDeliveriesResponse': return $this->load_GetPurchaseDeliveriesResponse($in);
			case 'SavePurchaseDeliveryResponse': return $this->load_SavePurchaseDeliveryResponse($in);
			case 'GetPurchaseDeliveriesV2Response': return $this->load_GetPurchaseDeliveriesV2Response($in);
			case 'SavePurchaseDeliveryV2Response': return $this->load_SavePurchaseDeliveryV2Response($in);
			case 'EncryptStringResponse': return $this->load_EncryptStringResponse($in);
			case 'GetArticleCardLayoutResponse': return $this->load_GetArticleCardLayoutResponse($in);
			case 'UpdateArticleCardLayoutResponse': return $this->load_UpdateArticleCardLayoutResponse($in);
			case 'GetRetailSpaceRentalResponse': return $this->load_GetRetailSpaceRentalResponse($in);
			case 'GetRetailSpaceRentalsResponse': return $this->load_GetRetailSpaceRentalsResponse($in);
			case 'EidSearchResponse': return $this->load_EidSearchResponse($in);
			case 'OverviewResponse': return $this->load_OverviewResponse($in);
			case 'GetOverviewFieldsResponse': return $this->load_GetOverviewFieldsResponse($in);
			case 'UpdateBatchResponse': return $this->load_UpdateBatchResponse($in);
			case 'PrintResponse': return $this->load_PrintResponse($in);
			case 'GetKitchenTicketsResponse': return $this->load_GetKitchenTicketsResponse($in);
			case 'SaveStockCorrectionsResponse': return $this->load_SaveStockCorrectionsResponse($in);
			case 'GetPurchaseBookResponse': return $this->load_GetPurchaseBookResponse($in);
			case 'SavePurchaseBookResponse': return $this->load_SavePurchaseBookResponse($in);
			case 'AddToPurchaseBookResponse': return $this->load_AddToPurchaseBookResponse($in);
			case 'GetStockCorrectionsResponse': return $this->load_GetStockCorrectionsResponse($in);
			case 'GetArticlesNutritionalCharacteristicsResponse': return $this->load_GetArticlesNutritionalCharacteristicsResponse($in);
			case 'UpdateArticleNutritionalCharacteristicsResponse': return $this->load_UpdateArticleNutritionalCharacteristicsResponse($in);
			case 'GetPreparationMethodGroupsResponse': return $this->load_GetPreparationMethodGroupsResponse($in);
			case 'DeletePreparationMethodGroupResponse': return $this->load_DeletePreparationMethodGroupResponse($in);
			case 'GetArticlesPreparationMethodGroupsResponse': return $this->load_GetArticlesPreparationMethodGroupsResponse($in);
			case 'UpdateArticlePreparationMethodGroupsResponse': return $this->load_UpdateArticlePreparationMethodGroupsResponse($in);
			case 'PlaceTableOrderResp': return $this->load_PlaceTableOrderResp($in);
			case 'TapTickTotalsResponse': return $this->load_TapTickTotalsResponse($in);
			case 'TapTickHistoryResponse': return $this->load_TapTickHistoryResponse($in);
			case 'FindRelationV2Response': return $this->load_FindRelationV2Response($in);
			case 'GetTodoListsResponse': return $this->load_GetTodoListsResponse($in);
			case 'TodoList': return $this->load_TodoList($in);
			case 'CreateTodoListResponse': return $this->load_CreateTodoListResponse($in);
			case 'SaveTodoListV2Response': return $this->load_SaveTodoListV2Response($in);
			case 'GetFilterProfilesResponse': return $this->load_GetFilterProfilesResponse($in);
			case 'SavePreparationMethodGroupResponse': return $this->load_SavePreparationMethodGroupResponse($in);
			case 'GetNutritionalCharacteristicsResponse': return $this->load_GetNutritionalCharacteristicsResponse($in);
			case 'UpdateNutritionalCharacteristicsResponse': return $this->load_UpdateNutritionalCharacteristicsResponse($in);
			case 'DeterminePricingResponse': return $this->load_DeterminePricingResponse($in);
			case 'SetRelationPresenceResponse': return $this->load_SetRelationPresenceResponse($in);
			case 'GetRelationPresenceResponse': return $this->load_GetRelationPresenceResponse($in);
			case 'GetArticleBranchDeviationsResponse': return $this->load_GetArticleBranchDeviationsResponse($in);
			case 'SaveArticleBranchDeviationsResponse': return $this->load_SaveArticleBranchDeviationsResponse($in);
			case 'UpdateArticleNutrientsResponse': return $this->load_UpdateArticleNutrientsResponse($in);
			case 'UpdateArticleDynamicMinMaxStockResponse': return $this->load_UpdateArticleDynamicMinMaxStockResponse($in);
			case 'GetArticleDynamicMinMaxStockResponse': return $this->load_GetArticleDynamicMinMaxStockResponse($in);
			case 'GetCardFilterOptionsResponse': return $this->load_GetCardFilterOptionsResponse($in);
			case 'GetPlannedCycleCountsResponse': return $this->load_GetPlannedCycleCountsResponse($in);
			case 'GetActiveCycleCountResponse': return $this->load_GetActiveCycleCountResponse($in);
			case 'SetArticleRecalledResponse': return $this->load_SetArticleRecalledResponse($in);
			case 'GetArticleComponentsResponse': return $this->load_GetArticleComponentsResponse($in);
			case 'SaveArticleComponentsResponse': return $this->load_SaveArticleComponentsResponse($in);
			case 'RequestDateFilter': return $this->load_RequestDateFilter($in);
			case 'RequestBranchFilter': return $this->load_RequestBranchFilter($in);
			case 'RequestEmployeeFilter': return $this->load_RequestEmployeeFilter($in);
			case 'RequestTurnoverGroupFilter': return $this->load_RequestTurnoverGroupFilter($in);
			case 'RequestTurnoverGroupTypeFilter': return $this->load_RequestTurnoverGroupTypeFilter($in);
			case 'RequestArticleFilter': return $this->load_RequestArticleFilter($in);
			case 'RequestActivityFilter': return $this->load_RequestActivityFilter($in);
			case 'RequestRelationFilter': return $this->load_RequestRelationFilter($in);
			case 'RequestSyncMarkerFilter': return $this->load_RequestSyncMarkerFilter($in);
			case 'ConfigurationList': return $this->load_ConfigurationList($in);
			case 'Configuration': return $this->load_Configuration($in);
			case 'GetConfigurationRequest': return $this->load_GetConfigurationRequest($in);
			case 'UpdateConfigurationRequest': return $this->load_UpdateConfigurationRequest($in);
			case 'ConfigurationOption': return $this->load_ConfigurationOption($in);
			case 'ConfigurationItem': return $this->load_ConfigurationItem($in);
			case 'ConfigurationGroup': return $this->load_ConfigurationGroup($in);
			case 'GetConfigurationTreeRequest': return $this->load_GetConfigurationTreeRequest($in);
			case 'GetConfigurationValuesRequest': return $this->load_GetConfigurationValuesRequest($in);
			case 'ConfigurationValue': return $this->load_ConfigurationValue($in);
			case 'ConfigurationKeyValues': return $this->load_ConfigurationKeyValues($in);
			case 'UpdateConfigurationValuesRequest': return $this->load_UpdateConfigurationValuesRequest($in);
			case 'ButtonLayout-Button': return $this->load_ButtonLayout_Button($in);
			case 'ButtonLayout-ButtonList': return $this->load_ButtonLayout_ButtonList($in);
			case 'ButtonLayout-SubGroup': return $this->load_ButtonLayout_SubGroup($in);
			case 'ButtonLayout-SubGroupList': return $this->load_ButtonLayout_SubGroupList($in);
			case 'ButtonLayout-MainGroup': return $this->load_ButtonLayout_MainGroup($in);
			case 'ButtonLayout-MainGroupList': return $this->load_ButtonLayout_MainGroupList($in);
			case 'ButtonLayout': return $this->load_ButtonLayout($in);
			case 'ButtonLayoutTabBranchLayout': return $this->load_ButtonLayoutTabBranchLayout($in);
			case 'ButtonLayoutTab': return $this->load_ButtonLayoutTab($in);
			case 'ButtonLayoutGroup': return $this->load_ButtonLayoutGroup($in);
			case 'ButtonLayoutGroupForBranchRequest': return $this->load_ButtonLayoutGroupForBranchRequest($in);
			case 'GetButtonLayoutGroupsWithAssignedWorkplacesRequest': return $this->load_GetButtonLayoutGroupsWithAssignedWorkplacesRequest($in);
			case 'ButtonLayoutGroupsWithAssignedWorkplaces': return $this->load_ButtonLayoutGroupsWithAssignedWorkplaces($in);
			case 'GetButtonLayoutGroupDetailsRequest': return $this->load_GetButtonLayoutGroupDetailsRequest($in);
			case 'SaveButtonLayoutGroupDetailsRequest': return $this->load_SaveButtonLayoutGroupDetailsRequest($in);
			case 'DeleteButtonLayoutGroupRequest': return $this->load_DeleteButtonLayoutGroupRequest($in);
			case 'AssignButtonLayoutGroupToWorkplacesRequest': return $this->load_AssignButtonLayoutGroupToWorkplacesRequest($in);
			case 'PreparationMethodSimple': return $this->load_PreparationMethodSimple($in);
			case 'PreparationMethodSimpleList': return $this->load_PreparationMethodSimpleList($in);
			case 'ComponentArticleSimple': return $this->load_ComponentArticleSimple($in);
			case 'ComponentArticleSimpleList': return $this->load_ComponentArticleSimpleList($in);
			case 'ArticleSimple': return $this->load_ArticleSimple($in);
			case 'GetDayStockConfigurationRequest': return $this->load_GetDayStockConfigurationRequest($in);
			case 'DayStockConfiguration': return $this->load_DayStockConfiguration($in);
			case 'DayStockConfigurationList': return $this->load_DayStockConfigurationList($in);
			case 'SaveDayStockConfiguration': return $this->load_SaveDayStockConfiguration($in);
			case 'SaveDayStockConfigurationList': return $this->load_SaveDayStockConfigurationList($in);
			case 'SaveDayStockConfigurationRequest': return $this->load_SaveDayStockConfigurationRequest($in);
			case 'Activity': return $this->load_Activity($in);
			case 'ActivityList': return $this->load_ActivityList($in);
			case 'GetActivitiesRequest': return $this->load_GetActivitiesRequest($in);
			case 'GetActivityTypesRequest': return $this->load_GetActivityTypesRequest($in);
			case 'ActivityType': return $this->load_ActivityType($in);
			case 'ActivityTypeList': return $this->load_ActivityTypeList($in);
			case 'SaveActivityType': return $this->load_SaveActivityType($in);
			case 'SaveActivityTypeList': return $this->load_SaveActivityTypeList($in);
			case 'SaveActivityTypesRequest': return $this->load_SaveActivityTypesRequest($in);
			case 'CreateActivity': return $this->load_CreateActivity($in);
			case 'CreateActivityRequest': return $this->load_CreateActivityRequest($in);
			case 'UpdateActivity': return $this->load_UpdateActivity($in);
			case 'UpdateActivityRequest': return $this->load_UpdateActivityRequest($in);
			case 'SaveActivity': return $this->load_SaveActivity($in);
			case 'SaveActivityRequest': return $this->load_SaveActivityRequest($in);
			case 'DeleteActivityRequest': return $this->load_DeleteActivityRequest($in);
			case 'GetGksInformationRequest': return $this->load_GetGksInformationRequest($in);
			case 'GetMealplanMomentsConfigurationRequest': return $this->load_GetMealplanMomentsConfigurationRequest($in);
			case 'MealmomentConfiguration': return $this->load_MealmomentConfiguration($in);
			case 'GetScheduledMealPlansRequest': return $this->load_GetScheduledMealPlansRequest($in);
			case 'MealPlanArticleGroup': return $this->load_MealPlanArticleGroup($in);
			case 'Mealmoment': return $this->load_Mealmoment($in);
			case 'MealPlan': return $this->load_MealPlan($in);
			case 'ScheduledMealPlan': return $this->load_ScheduledMealPlan($in);
			case 'GetArticleAlterationsGroupsRequest': return $this->load_GetArticleAlterationsGroupsRequest($in);
			case 'ArticleAlteration': return $this->load_ArticleAlteration($in);
			case 'ArticleAlterationList': return $this->load_ArticleAlterationList($in);
			case 'ArticleAlterationsGroup': return $this->load_ArticleAlterationsGroup($in);
			case 'ArticleAlterationsGroupList': return $this->load_ArticleAlterationsGroupList($in);
			case 'SaveArticleAlteration': return $this->load_SaveArticleAlteration($in);
			case 'SaveArticleAlterationList': return $this->load_SaveArticleAlterationList($in);
			case 'SaveArticleAlterationsGroupRequest': return $this->load_SaveArticleAlterationsGroupRequest($in);
			case 'DeleteArticleAlterationsGroupRequest': return $this->load_DeleteArticleAlterationsGroupRequest($in);
			case 'UpdateAttachedArticleAlterationsGroupsRequest': return $this->load_UpdateAttachedArticleAlterationsGroupsRequest($in);
			case 'SaveArticleMenuArticleSettings': return $this->load_SaveArticleMenuArticleSettings($in);
			case 'SaveArticleMenuArticleSettingsList': return $this->load_SaveArticleMenuArticleSettingsList($in);
			case 'UpdateArticleMenuRequest': return $this->load_UpdateArticleMenuRequest($in);
			case 'UpdateOnlineAuthorizationTreeRequest': return $this->load_UpdateOnlineAuthorizationTreeRequest($in);
			case 'GetOwnerLabelsRequest': return $this->load_GetOwnerLabelsRequest($in);
			case 'OwnerLabel': return $this->load_OwnerLabel($in);
			case 'WordAlias': return $this->load_WordAlias($in);
			case 'WordAliasList': return $this->load_WordAliasList($in);
			case 'GetWordAliasesRequest': return $this->load_GetWordAliasesRequest($in);
			case 'LicensedModule': return $this->load_LicensedModule($in);
			case 'LicensedModuleList': return $this->load_LicensedModuleList($in);
			case 'LicensedBranch': return $this->load_LicensedBranch($in);
			case 'LicensedBranchList': return $this->load_LicensedBranchList($in);
			case 'GetBranchInformationRequest': return $this->load_GetBranchInformationRequest($in);
			case 'DeliveryAddressSupplier': return $this->load_DeliveryAddressSupplier($in);
			case 'DeliveryAddressSupplierList': return $this->load_DeliveryAddressSupplierList($in);
			case 'DeliveryAddress': return $this->load_DeliveryAddress($in);
			case 'DeliveryAddressList': return $this->load_DeliveryAddressList($in);
			case 'BranchInformation': return $this->load_BranchInformation($in);
			case 'GetBranchGroupsRequest': return $this->load_GetBranchGroupsRequest($in);
			case 'BranchGroup': return $this->load_BranchGroup($in);
			case 'BranchGroups': return $this->load_BranchGroups($in);
			case 'BranchGroupsList': return $this->load_BranchGroupsList($in);
			case 'DeliveryMethod': return $this->load_DeliveryMethod($in);
			case 'DeliveryMethodList': return $this->load_DeliveryMethodList($in);
			case 'GetDeliveryMethodsV2Request': return $this->load_GetDeliveryMethodsV2Request($in);
			case 'CreateDeliveryMethodRequest': return $this->load_CreateDeliveryMethodRequest($in);
			case 'UpdateDeliveryMethodRequest': return $this->load_UpdateDeliveryMethodRequest($in);
			case 'Workplace': return $this->load_Workplace($in);
			case 'WorkplaceList': return $this->load_WorkplaceList($in);
			case 'Branch': return $this->load_Branch($in);
			case 'BranchList': return $this->load_BranchList($in);
			case 'GetCurrentSyncMarkersV2Request': return $this->load_GetCurrentSyncMarkersV2Request($in);
			case 'ns-NutrientType': return $this->load_ns_NutrientType($in);
			case 'GetNutrientTypesRequest': return $this->load_GetNutrientTypesRequest($in);
			case 'VerifyCredentialsRequest': return $this->load_VerifyCredentialsRequest($in);
			case 'SaveCredentialsRequest': return $this->load_SaveCredentialsRequest($in);
			case 'PasswordRequirementsRequest': return $this->load_PasswordRequirementsRequest($in);
			case 'PasswordResetRequest': return $this->load_PasswordResetRequest($in);
			case 'FloorplanNeighbourhood': return $this->load_FloorplanNeighbourhood($in);
			case 'FloorplanNeighbourhoodList': return $this->load_FloorplanNeighbourhoodList($in);
			case 'Floorplan': return $this->load_Floorplan($in);
			case 'FloorplanList': return $this->load_FloorplanList($in);
			case 'GetFloorplansRequest': return $this->load_GetFloorplansRequest($in);
			case 'TableProperties': return $this->load_TableProperties($in);
			case 'ChangeTablePropertyReq': return $this->load_ChangeTablePropertyReq($in);
			case 'AuthorizationGroup': return $this->load_AuthorizationGroup($in);
			case 'GroupAuthorization': return $this->load_GroupAuthorization($in);
			case 'GroupAuthorizationsList': return $this->load_GroupAuthorizationsList($in);
			case 'GetEmployeeAuthorizationsRequest': return $this->load_GetEmployeeAuthorizationsRequest($in);
			case 'EmployeeAuthorization': return $this->load_EmployeeAuthorization($in);
			case 'EmployeeAuthorizationsList': return $this->load_EmployeeAuthorizationsList($in);
			case 'GetGroupAuthorizationsRequest': return $this->load_GetGroupAuthorizationsRequest($in);
			case 'GroupAuthorizationV2': return $this->load_GroupAuthorizationV2($in);
			case 'GroupAuthorizationsV2List': return $this->load_GroupAuthorizationsV2List($in);
			case 'UpdateGroupAuthorizationsRequest': return $this->load_UpdateGroupAuthorizationsRequest($in);
			case 'GetAuthorizationGroupsRequest': return $this->load_GetAuthorizationGroupsRequest($in);
			case 'AuthorizationGroupList': return $this->load_AuthorizationGroupList($in);
			case 'GetAuthorizationTreeRequest': return $this->load_GetAuthorizationTreeRequest($in);
			case 'GetEmployeeBranchAuthorizationsRequest': return $this->load_GetEmployeeBranchAuthorizationsRequest($in);
			case 'EmployeeBranchAuthorization': return $this->load_EmployeeBranchAuthorization($in);
			case 'EmployeeBranchAuthorizationsList': return $this->load_EmployeeBranchAuthorizationsList($in);
			case 'SaveAuthorizationGroupRequest': return $this->load_SaveAuthorizationGroupRequest($in);
			case 'DeleteAuthorizationGroupRequest': return $this->load_DeleteAuthorizationGroupRequest($in);
			case 'GetEmployeeAuthorizationGroupsRequest': return $this->load_GetEmployeeAuthorizationGroupsRequest($in);
			case 'BranchAuthorizationGroup': return $this->load_BranchAuthorizationGroup($in);
			case 'BranchGroupAuthorizationGroup': return $this->load_BranchGroupAuthorizationGroup($in);
			case 'BranchAuthorizationGroupNumber': return $this->load_BranchAuthorizationGroupNumber($in);
			case 'BranchGroupAuthorizationGroupNumber': return $this->load_BranchGroupAuthorizationGroupNumber($in);
			case 'UpdateEmployeeAuthorizationGroupsRequest': return $this->load_UpdateEmployeeAuthorizationGroupsRequest($in);
			case 'GetEmployeeAuthorizationSyncMarkersRequest': return $this->load_GetEmployeeAuthorizationSyncMarkersRequest($in);
			case 'GetSpecialBarcodePatternsRequest': return $this->load_GetSpecialBarcodePatternsRequest($in);
			case 'BarcodePattern': return $this->load_BarcodePattern($in);
			case 'ParseSpecialBarcodeRequest': return $this->load_ParseSpecialBarcodeRequest($in);
			case 'SpecialBarcodeArticleResult': return $this->load_SpecialBarcodeArticleResult($in);
			case 'WorkplaceLoginStateInfo': return $this->load_WorkplaceLoginStateInfo($in);
			case 'GetEmployeeWorkplaceLoginStatesRequest': return $this->load_GetEmployeeWorkplaceLoginStatesRequest($in);
			case 'GetConfigurationResponse': return $this->load_GetConfigurationResponse($in);
			case 'UpdateConfigurationResponse': return $this->load_UpdateConfigurationResponse($in);
			case 'GetConfigurationTreeResponse': return $this->load_GetConfigurationTreeResponse($in);
			case 'GetConfigurationValuesResponse': return $this->load_GetConfigurationValuesResponse($in);
			case 'UpdateConfigurationValuesResponse': return $this->load_UpdateConfigurationValuesResponse($in);
			case 'getButtonLayoutResponse': return $this->load_getButtonLayoutResponse($in);
			case 'ButtonLayoutGroupForBranchResponse': return $this->load_ButtonLayoutGroupForBranchResponse($in);
			case 'GetButtonLayoutGroupsWithAssignedWorkplacesResponse': return $this->load_GetButtonLayoutGroupsWithAssignedWorkplacesResponse($in);
			case 'GetButtonLayoutGroupDetailsResponse': return $this->load_GetButtonLayoutGroupDetailsResponse($in);
			case 'SaveButtonLayoutGroupDetailsResponse': return $this->load_SaveButtonLayoutGroupDetailsResponse($in);
			case 'DeleteButtonLayoutGroupResponse': return $this->load_DeleteButtonLayoutGroupResponse($in);
			case 'AssignButtonLayoutGroupToWorkplacesResponse': return $this->load_AssignButtonLayoutGroupToWorkplacesResponse($in);
			case 'getArticlesInLayoutResponse': return $this->load_getArticlesInLayoutResponse($in);
			case 'GetDayStockConfigurationResponse': return $this->load_GetDayStockConfigurationResponse($in);
			case 'SaveDayStockConfigurationResponse': return $this->load_SaveDayStockConfigurationResponse($in);
			case 'GetActivitiesResponse': return $this->load_GetActivitiesResponse($in);
			case 'GetActivityTypesResponse': return $this->load_GetActivityTypesResponse($in);
			case 'SaveActivityTypesResponse': return $this->load_SaveActivityTypesResponse($in);
			case 'CreateActivityResponse': return $this->load_CreateActivityResponse($in);
			case 'UpdateActivityResponse': return $this->load_UpdateActivityResponse($in);
			case 'SaveActivityResponse': return $this->load_SaveActivityResponse($in);
			case 'DeleteActivityResponse': return $this->load_DeleteActivityResponse($in);
			case 'GetGksInformationResponse': return $this->load_GetGksInformationResponse($in);
			case 'GetMealplanMomentsConfigurationResponse': return $this->load_GetMealplanMomentsConfigurationResponse($in);
			case 'GetScheduledMealPlansResponse': return $this->load_GetScheduledMealPlansResponse($in);
			case 'GetArticleAlterationsGroupsResponse': return $this->load_GetArticleAlterationsGroupsResponse($in);
			case 'SaveArticleAlterationsGroupResponse': return $this->load_SaveArticleAlterationsGroupResponse($in);
			case 'DeleteArticleAlterationsGroupResponse': return $this->load_DeleteArticleAlterationsGroupResponse($in);
			case 'UpdateAttachedArticleAlterationsGroupsResponse': return $this->load_UpdateAttachedArticleAlterationsGroupsResponse($in);
			case 'UpdateArticleMenuResponse': return $this->load_UpdateArticleMenuResponse($in);
			case 'UpdateOnlineAuthorizationTreeResponse': return $this->load_UpdateOnlineAuthorizationTreeResponse($in);
			case 'GetOwnerLabelsResponse': return $this->load_GetOwnerLabelsResponse($in);
			case 'GetWordAliasesResponse': return $this->load_GetWordAliasesResponse($in);
			case 'getApiVersionResponse': return $this->load_getApiVersionResponse($in);
			case 'getDatabaseVersionResponse': return $this->load_getDatabaseVersionResponse($in);
			case 'GetLicenseInformationResponse': return $this->load_GetLicenseInformationResponse($in);
			case 'getAvailableTerminalListResponse': return $this->load_getAvailableTerminalListResponse($in);
			case 'RegisterTerminalResponse': return $this->load_RegisterTerminalResponse($in);
			case 'GetTerminalSettingsResponse': return $this->load_GetTerminalSettingsResponse($in);
			case 'GetBranchInformationResponse': return $this->load_GetBranchInformationResponse($in);
			case 'GetBranchGroupsResponse': return $this->load_GetBranchGroupsResponse($in);
			case 'GetDeliveryMethodsResponse': return $this->load_GetDeliveryMethodsResponse($in);
			case 'GetDeliveryMethodsV2Response': return $this->load_GetDeliveryMethodsV2Response($in);
			case 'CreateDeliveryMethodResponse': return $this->load_CreateDeliveryMethodResponse($in);
			case 'UpdateDeliveryMethodResponse': return $this->load_UpdateDeliveryMethodResponse($in);
			case 'getBranchesResponse': return $this->load_getBranchesResponse($in);
			case 'getCurrentSyncMarkersResponse': return $this->load_getCurrentSyncMarkersResponse($in);
			case 'GetCurrentSyncMarkersV2Response': return $this->load_GetCurrentSyncMarkersV2Response($in);
			case 'GetNutrientTypesResponse': return $this->load_GetNutrientTypesResponse($in);
			case 'VerifyCredentialsResponse': return $this->load_VerifyCredentialsResponse($in);
			case 'SaveCredentialsResponse': return $this->load_SaveCredentialsResponse($in);
			case 'PasswordRequirementsResponse': return $this->load_PasswordRequirementsResponse($in);
			case 'PasswordResetResponse': return $this->load_PasswordResetResponse($in);
			case 'GetFloorplansResponse': return $this->load_GetFloorplansResponse($in);
			case 'ChangeTablePropertyResp': return $this->load_ChangeTablePropertyResp($in);
			case 'GetEmployeeAuthorizationsResponse': return $this->load_GetEmployeeAuthorizationsResponse($in);
			case 'GetGroupAuthorizationsResponse': return $this->load_GetGroupAuthorizationsResponse($in);
			case 'UpdateGroupAuthorizationsResponse': return $this->load_UpdateGroupAuthorizationsResponse($in);
			case 'GetAuthorizationGroupsResponse': return $this->load_GetAuthorizationGroupsResponse($in);
			case 'GetAuthorizationTreeResponse': return $this->load_GetAuthorizationTreeResponse($in);
			case 'GetEmployeeBranchAuthorizationsResponse': return $this->load_GetEmployeeBranchAuthorizationsResponse($in);
			case 'SaveAuthorizationGroupResponse': return $this->load_SaveAuthorizationGroupResponse($in);
			case 'DeleteAuthorizationGroupResponse': return $this->load_DeleteAuthorizationGroupResponse($in);
			case 'GetEmployeeAuthorizationGroupsResponse': return $this->load_GetEmployeeAuthorizationGroupsResponse($in);
			case 'UpdateEmployeeAuthorizationGroupsResponse': return $this->load_UpdateEmployeeAuthorizationGroupsResponse($in);
			case 'GetEmployeeAuthorizationSyncMarkersResponse': return $this->load_GetEmployeeAuthorizationSyncMarkersResponse($in);
			case 'GetSpecialBarcodePatternsResponse': return $this->load_GetSpecialBarcodePatternsResponse($in);
			case 'ParseSpecialBarcodeResponse': return $this->load_ParseSpecialBarcodeResponse($in);
			case 'GetEmployeeWorkplaceLoginStatesResponse': return $this->load_GetEmployeeWorkplaceLoginStatesResponse($in);
			case 'ImageLabel': return $this->load_ImageLabel($in);
			case 'ImageCardLabelIds': return $this->load_ImageCardLabelIds($in);
			case 'ImageData': return $this->load_ImageData($in);
			case 'CardImageData': return $this->load_CardImageData($in);
			case 'CreateImageCardLink': return $this->load_CreateImageCardLink($in);
			case 'CreateImageRequest': return $this->load_CreateImageRequest($in);
			case 'CreateImageFromUrlRequest': return $this->load_CreateImageFromUrlRequest($in);
			case 'GetCardImageLabelsRequest': return $this->load_GetCardImageLabelsRequest($in);
			case 'GetCardImagesRequest': return $this->load_GetCardImagesRequest($in);
			case 'SaveImageData': return $this->load_SaveImageData($in);
			case 'SaveCardImageData': return $this->load_SaveCardImageData($in);
			case 'SaveCardImagesRequest': return $this->load_SaveCardImagesRequest($in);
			case 'GetImagesRequest': return $this->load_GetImagesRequest($in);
			case 'CreateImageResponse': return $this->load_CreateImageResponse($in);
			case 'GetCardImageLabelsResponse': return $this->load_GetCardImageLabelsResponse($in);
			case 'GetCardImagesResponse': return $this->load_GetCardImagesResponse($in);
			case 'SaveCardImagesResponse': return $this->load_SaveCardImagesResponse($in);
			case 'GetImagesResponse': return $this->load_GetImagesResponse($in);
			case 'GetPrintLayoutsRequest': return $this->load_GetPrintLayoutsRequest($in);
			case 'PrintLayoutView': return $this->load_PrintLayoutView($in);
			case 'GetPrintLayoutAssignmentsRequest': return $this->load_GetPrintLayoutAssignmentsRequest($in);
			case 'PrintLayoutAssignmentPrintLayoutView': return $this->load_PrintLayoutAssignmentPrintLayoutView($in);
			case 'PrintLayoutAssignment': return $this->load_PrintLayoutAssignment($in);
			case 'PrintParam': return $this->load_PrintParam($in);
			case 'PrintParams': return $this->load_PrintParams($in);
			case 'PrintInfo': return $this->load_PrintInfo($in);
			case 'GetRenderedPrintLayoutRequest': return $this->load_GetRenderedPrintLayoutRequest($in);
			case 'GetPrintLayoutMarkupRequest': return $this->load_GetPrintLayoutMarkupRequest($in);
			case 'PrintPrintLayoutRequest': return $this->load_PrintPrintLayoutRequest($in);
			case 'GetPrintLayoutsResponse': return $this->load_GetPrintLayoutsResponse($in);
			case 'GetPrintLayoutAssignmentsResponse': return $this->load_GetPrintLayoutAssignmentsResponse($in);
			case 'GetRenderedPrintLayoutResponse': return $this->load_GetRenderedPrintLayoutResponse($in);
			case 'GetPrintLayoutMarkupResponse': return $this->load_GetPrintLayoutMarkupResponse($in);
			case 'PrintPrintLayoutResponse': return $this->load_PrintPrintLayoutResponse($in);
			case 'VoucherSettingsV1': return $this->load_VoucherSettingsV1($in);
			case 'VoucherSettingsV1List': return $this->load_VoucherSettingsV1List($in);
			case 'VoucherRedeemLocations': return $this->load_VoucherRedeemLocations($in);
			case 'VoucherLine': return $this->load_VoucherLine($in);
			case 'VoucherLineList': return $this->load_VoucherLineList($in);
			case 'Voucher': return $this->load_Voucher($in);
			case 'VoucherCategory': return $this->load_VoucherCategory($in);
			case 'VoucherCategoryList': return $this->load_VoucherCategoryList($in);
			case 'VoucherExternalScanCode': return $this->load_VoucherExternalScanCode($in);
			case 'VoucherExternalScanCodeList': return $this->load_VoucherExternalScanCodeList($in);
			case 'IssueVoucher': return $this->load_IssueVoucher($in);
			case 'IssueVoucherList': return $this->load_IssueVoucherList($in);
			case 'RedeemableVoucherIssuance': return $this->load_RedeemableVoucherIssuance($in);
			case 'RedeemableVoucherIssuanceList': return $this->load_RedeemableVoucherIssuanceList($in);
			case 'CheckGiftcardPaymentRequest': return $this->load_CheckGiftcardPaymentRequest($in);
			case 'GiftcardInfo': return $this->load_GiftcardInfo($in);
			case 'Giftcard': return $this->load_Giftcard($in);
			case 'GiftcardPaymentLine': return $this->load_GiftcardPaymentLine($in);
			case 'GiftcardPaymentLineList': return $this->load_GiftcardPaymentLineList($in);
			case 'RegisterGiftcardPaymentRequest': return $this->load_RegisterGiftcardPaymentRequest($in);
			case 'RegisterGiftcardPaymentV2Request': return $this->load_RegisterGiftcardPaymentV2Request($in);
			case 'CreateGiftcardRequest': return $this->load_CreateGiftcardRequest($in);
			case 'ReloadGiftcardRequest': return $this->load_ReloadGiftcardRequest($in);
			case 'GetGiftcardTypesRequest': return $this->load_GetGiftcardTypesRequest($in);
			case 'GiftcardTypesList': return $this->load_GiftcardTypesList($in);
			case 'GetRelationGiftcardsRequest': return $this->load_GetRelationGiftcardsRequest($in);
			case 'RelationGiftcard': return $this->load_RelationGiftcard($in);
			case 'RelationGiftcardList': return $this->load_RelationGiftcardList($in);
			case 'GetGiftcardRequest': return $this->load_GetGiftcardRequest($in);
			case 'GetGiftcard': return $this->load_GetGiftcard($in);
			case 'GetGiftcardHistoryRequest': return $this->load_GetGiftcardHistoryRequest($in);
			case 'GiftcardHistory': return $this->load_GiftcardHistory($in);
			case 'GiftcardHistoryList': return $this->load_GiftcardHistoryList($in);
			case 'GetGiftcardsRequest': return $this->load_GetGiftcardsRequest($in);
			case 'GiftcardList': return $this->load_GiftcardList($in);
			case 'SaveGiftcard': return $this->load_SaveGiftcard($in);
			case 'SaveGiftcardList': return $this->load_SaveGiftcardList($in);
			case 'SaveGiftcardsRequest': return $this->load_SaveGiftcardsRequest($in);
			case 'RestituteGiftcardsRequest': return $this->load_RestituteGiftcardsRequest($in);
			case 'LinkGiftcardsToRelationRequest': return $this->load_LinkGiftcardsToRelationRequest($in);
			case 'GetVouchersRequest': return $this->load_GetVouchersRequest($in);
			case 'GetVoucherRequest': return $this->load_GetVoucherRequest($in);
			case 'VoucherCategoryIdList': return $this->load_VoucherCategoryIdList($in);
			case 'GetVoucherCategoriesRequest': return $this->load_GetVoucherCategoriesRequest($in);
			case 'GetVoucherIssuancesRequest': return $this->load_GetVoucherIssuancesRequest($in);
			case 'GetVoucherSettingsRequest': return $this->load_GetVoucherSettingsRequest($in);
			case 'IssueVouchersRequest': return $this->load_IssueVouchersRequest($in);
			case 'IssueVoucherExternalScanCodeSet': return $this->load_IssueVoucherExternalScanCodeSet($in);
			case 'IssueVoucherExternalScanCodesRequest': return $this->load_IssueVoucherExternalScanCodesRequest($in);
			case 'GetVoucherExternalScanCodesRequest': return $this->load_GetVoucherExternalScanCodesRequest($in);
			case 'GetRedeemableVoucherIssuancesRequest': return $this->load_GetRedeemableVoucherIssuancesRequest($in);
			case 'RedeemVoucherIssuanceRequest': return $this->load_RedeemVoucherIssuanceRequest($in);
			case 'CheckGiftcardPaymentResponse': return $this->load_CheckGiftcardPaymentResponse($in);
			case 'RegisterGiftcardPaymentResponse': return $this->load_RegisterGiftcardPaymentResponse($in);
			case 'RegisterGiftcardPaymentV2Response': return $this->load_RegisterGiftcardPaymentV2Response($in);
			case 'CreateGiftcardResponse': return $this->load_CreateGiftcardResponse($in);
			case 'ReloadGiftcardResponse': return $this->load_ReloadGiftcardResponse($in);
			case 'GetGiftcardTypesResponse': return $this->load_GetGiftcardTypesResponse($in);
			case 'GetRelationGiftcardsResponse': return $this->load_GetRelationGiftcardsResponse($in);
			case 'GetGiftcardResponse': return $this->load_GetGiftcardResponse($in);
			case 'GetGiftcardHistoryResponse': return $this->load_GetGiftcardHistoryResponse($in);
			case 'GetGiftcardsResponse': return $this->load_GetGiftcardsResponse($in);
			case 'SaveGiftcardsResponse': return $this->load_SaveGiftcardsResponse($in);
			case 'RestituteGiftcardsResponse': return $this->load_RestituteGiftcardsResponse($in);
			case 'LinkGiftcardsToRelationResponse': return $this->load_LinkGiftcardsToRelationResponse($in);
			case 'GetVouchersResponse': return $this->load_GetVouchersResponse($in);
			case 'GetVoucherResponse': return $this->load_GetVoucherResponse($in);
			case 'GetVoucherCategoriesResponse': return $this->load_GetVoucherCategoriesResponse($in);
			case 'GetVoucherIssuancesResponse': return $this->load_GetVoucherIssuancesResponse($in);
			case 'GetVoucherSettingsResponse': return $this->load_GetVoucherSettingsResponse($in);
			case 'IssueVouchersResponse': return $this->load_IssueVouchersResponse($in);
			case 'IssueVoucherExternalScanCodesResponse': return $this->load_IssueVoucherExternalScanCodesResponse($in);
			case 'GetVoucherExternalScanCodesResponse': return $this->load_GetVoucherExternalScanCodesResponse($in);
			case 'GetRedeemableVoucherIssuancesResponse': return $this->load_GetRedeemableVoucherIssuancesResponse($in);
			case 'RedeemVoucherIssuanceResponse': return $this->load_RedeemVoucherIssuanceResponse($in);
			case 'ReportDateFilter': return $this->load_ReportDateFilter($in);
			case 'ReportBranchFilter': return $this->load_ReportBranchFilter($in);
			case 'ReportWorkplaceFilter': return $this->load_ReportWorkplaceFilter($in);
			case 'ReportEmployeeFilter': return $this->load_ReportEmployeeFilter($in);
			case 'ReportTurnoverGroupFilter': return $this->load_ReportTurnoverGroupFilter($in);
			case 'ReportTurnoverGroupTypeFilter': return $this->load_ReportTurnoverGroupTypeFilter($in);
			case 'ReportArticleFilter': return $this->load_ReportArticleFilter($in);
			case 'ReportActivityFilter': return $this->load_ReportActivityFilter($in);
			case 'ReportRelationFilter': return $this->load_ReportRelationFilter($in);
			case 'ReportTurnoverByBranchRequest': return $this->load_ReportTurnoverByBranchRequest($in);
			case 'ReportTurnoverByBranch': return $this->load_ReportTurnoverByBranch($in);
			case 'ReportTurnoverByBranchList': return $this->load_ReportTurnoverByBranchList($in);
			case 'ReportTurnoverByEmployeeRequest': return $this->load_ReportTurnoverByEmployeeRequest($in);
			case 'ReportTurnoverByEmployee': return $this->load_ReportTurnoverByEmployee($in);
			case 'ReportTurnoverByEmployeeList': return $this->load_ReportTurnoverByEmployeeList($in);
			case 'ReportTurnoverByActivityRequest': return $this->load_ReportTurnoverByActivityRequest($in);
			case 'ReportTurnoverByActivity': return $this->load_ReportTurnoverByActivity($in);
			case 'ReportTurnoverByActivityList': return $this->load_ReportTurnoverByActivityList($in);
			case 'ReportTurnoverByTurnoverGroupRequest': return $this->load_ReportTurnoverByTurnoverGroupRequest($in);
			case 'ReportTurnoverByTurnoverGroup': return $this->load_ReportTurnoverByTurnoverGroup($in);
			case 'ReportTurnoverByTurnoverGroupList': return $this->load_ReportTurnoverByTurnoverGroupList($in);
			case 'ReportTurnoverByArticleRequest': return $this->load_ReportTurnoverByArticleRequest($in);
			case 'ReportTurnoverByArticle': return $this->load_ReportTurnoverByArticle($in);
			case 'ReportTurnoverByArticleList': return $this->load_ReportTurnoverByArticleList($in);
			case 'ReportHoursByEmployeeRequest': return $this->load_ReportHoursByEmployeeRequest($in);
			case 'ReportHoursByEmployee': return $this->load_ReportHoursByEmployee($in);
			case 'ReportHoursByEmployeeList': return $this->load_ReportHoursByEmployeeList($in);
			case 'ReportPaymentMethodsRequest': return $this->load_ReportPaymentMethodsRequest($in);
			case 'ReportPaymentMethods': return $this->load_ReportPaymentMethods($in);
			case 'ReportPaymentMethodsList': return $this->load_ReportPaymentMethodsList($in);
			case 'ReportTablesRequest': return $this->load_ReportTablesRequest($in);
			case 'ReportTables': return $this->load_ReportTables($in);
			case 'ReportTablesList': return $this->load_ReportTablesList($in);
			case 'ReportCancellationsRequest': return $this->load_ReportCancellationsRequest($in);
			case 'ReportCancellations': return $this->load_ReportCancellations($in);
			case 'ReportCancellationsList': return $this->load_ReportCancellationsList($in);
			case 'ReportBPERequest': return $this->load_ReportBPERequest($in);
			case 'ReportBPE': return $this->load_ReportBPE($in);
			case 'ReportBPEList': return $this->load_ReportBPEList($in);
			case 'ReportBranchPerformanceRequest': return $this->load_ReportBranchPerformanceRequest($in);
			case 'ReportBranchPerformance': return $this->load_ReportBranchPerformance($in);
			case 'ReportBranchPerformanceList': return $this->load_ReportBranchPerformanceList($in);
			case 'ReportAverageSpendingRequest': return $this->load_ReportAverageSpendingRequest($in);
			case 'ReportAverageSpending': return $this->load_ReportAverageSpending($in);
			case 'ReportAverageSpendingList': return $this->load_ReportAverageSpendingList($in);
			case 'ReportTurnoverRequest': return $this->load_ReportTurnoverRequest($in);
			case 'ReportTurnover': return $this->load_ReportTurnover($in);
			case 'ReportTurnoverList': return $this->load_ReportTurnoverList($in);
			case 'ReportPaymentMethodDetailsRequest': return $this->load_ReportPaymentMethodDetailsRequest($in);
			case 'ReportPaymentSourceDetails': return $this->load_ReportPaymentSourceDetails($in);
			case 'ReportPaymentSource': return $this->load_ReportPaymentSource($in);
			case 'ReportPrintableFinancialTotalsRequest': return $this->load_ReportPrintableFinancialTotalsRequest($in);
			case 'ReportPrintableFinancialTotalsLine': return $this->load_ReportPrintableFinancialTotalsLine($in);
			case 'ReportPrintableFinancialTotalsList': return $this->load_ReportPrintableFinancialTotalsList($in);
			case 'ReportArticlePerformanceRequest': return $this->load_ReportArticlePerformanceRequest($in);
			case 'ReportArticlePerformanceBranch': return $this->load_ReportArticlePerformanceBranch($in);
			case 'ReportArticlePerformanceBranchList': return $this->load_ReportArticlePerformanceBranchList($in);
			case 'ReportArticlePerformance': return $this->load_ReportArticlePerformance($in);
			case 'ReportArticlePerformanceList': return $this->load_ReportArticlePerformanceList($in);
			case 'ReportTurnoverByBranchResponse': return $this->load_ReportTurnoverByBranchResponse($in);
			case 'ReportTurnoverByEmployeeResponse': return $this->load_ReportTurnoverByEmployeeResponse($in);
			case 'ReportTurnoverByActivityResponse': return $this->load_ReportTurnoverByActivityResponse($in);
			case 'ReportTurnoverByTurnoverGroupResponse': return $this->load_ReportTurnoverByTurnoverGroupResponse($in);
			case 'ReportTurnoverByArticleResponse': return $this->load_ReportTurnoverByArticleResponse($in);
			case 'ReportHoursByEmployeeResponse': return $this->load_ReportHoursByEmployeeResponse($in);
			case 'ReportPaymentMethodsResponse': return $this->load_ReportPaymentMethodsResponse($in);
			case 'ReportTablesResponse': return $this->load_ReportTablesResponse($in);
			case 'ReportCancellationsResponse': return $this->load_ReportCancellationsResponse($in);
			case 'ReportBPEResponse': return $this->load_ReportBPEResponse($in);
			case 'ReportBranchPerformanceResponse': return $this->load_ReportBranchPerformanceResponse($in);
			case 'ReportAverageSpendingResponse': return $this->load_ReportAverageSpendingResponse($in);
			case 'ReportTurnoverResponse': return $this->load_ReportTurnoverResponse($in);
			case 'ReportPaymentMethodDetailsResponse': return $this->load_ReportPaymentMethodDetailsResponse($in);
			case 'ReportPrintableFinancialTotalsResponse': return $this->load_ReportPrintableFinancialTotalsResponse($in);
			case 'ReportArticlePerformanceResponse': return $this->load_ReportArticlePerformanceResponse($in);
			case 'GetSalesRepeatTemplatesRequest': return $this->load_GetSalesRepeatTemplatesRequest($in);
			case 'SalesRepeatTemplateLine': return $this->load_SalesRepeatTemplateLine($in);
			case 'SalesRepeatTemplateLineList': return $this->load_SalesRepeatTemplateLineList($in);
			case 'SalesRepeatTemplateWeeklySchedule': return $this->load_SalesRepeatTemplateWeeklySchedule($in);
			case 'SalesRepeatTemplateSchedule': return $this->load_SalesRepeatTemplateSchedule($in);
			case 'SalesRepeatTemplate': return $this->load_SalesRepeatTemplate($in);
			case 'SalesRepeatTemplateList': return $this->load_SalesRepeatTemplateList($in);
			case 'SaveSalesRepeatTemplateLine': return $this->load_SaveSalesRepeatTemplateLine($in);
			case 'SaveSalesRepeatTemplateLineList': return $this->load_SaveSalesRepeatTemplateLineList($in);
			case 'SaveSalesRepeatTemplate': return $this->load_SaveSalesRepeatTemplate($in);
			case 'SaveSalesRepeatTemplateRequest': return $this->load_SaveSalesRepeatTemplateRequest($in);
			case 'BpeBudgetCheck': return $this->load_BpeBudgetCheck($in);
			case 'BpeBudgetCheckList': return $this->load_BpeBudgetCheckList($in);
			case 'PerformBpeBudgetChecksRequest': return $this->load_PerformBpeBudgetChecksRequest($in);
			case 'BpeBudgetCheckResponse': return $this->load_BpeBudgetCheckResponse($in);
			case 'BpeBudgetCheckResponseList': return $this->load_BpeBudgetCheckResponseList($in);
			case 'TicketCounterSale': return $this->load_TicketCounterSale($in);
			case 'TicketCounterSaleList': return $this->load_TicketCounterSaleList($in);
			case 'GetTicketCounterSalesRequest': return $this->load_GetTicketCounterSalesRequest($in);
			case 'GetSalePromotionsRequest': return $this->load_GetSalePromotionsRequest($in);
			case 'SalePromotionLineDiscount': return $this->load_SalePromotionLineDiscount($in);
			case 'SalePromotionLineDiscountList': return $this->load_SalePromotionLineDiscountList($in);
			case 'SalePromotionLine': return $this->load_SalePromotionLine($in);
			case 'SalePromotionLineList': return $this->load_SalePromotionLineList($in);
			case 'SalePromotions': return $this->load_SalePromotions($in);
			case 'SalePromotionsList': return $this->load_SalePromotionsList($in);
			case 'GetPaymentMethodsRequest': return $this->load_GetPaymentMethodsRequest($in);
			case 'GetAvailablePaymentMethodsV2Request': return $this->load_GetAvailablePaymentMethodsV2Request($in);
			case 'CreateOrderInfo': return $this->load_CreateOrderInfo($in);
			case 'CreateOrderV2Request': return $this->load_CreateOrderV2Request($in);
			case 'CreateOrderV3Request': return $this->load_CreateOrderV3Request($in);
			case 'PayOrderRequest': return $this->load_PayOrderRequest($in);
			case 'PayOrderV2Request': return $this->load_PayOrderV2Request($in);
			case 'PayTableOrderRequest': return $this->load_PayTableOrderRequest($in);
			case 'PrepayTableOrderRequest': return $this->load_PrepayTableOrderRequest($in);
			case 'GetOrdersByExtOrderIdsRequest': return $this->load_GetOrdersByExtOrderIdsRequest($in);
			case 'Proposal': return $this->load_Proposal($in);
			case 'ProposalList': return $this->load_ProposalList($in);
			case 'GetProposalsRequest': return $this->load_GetProposalsRequest($in);
			case 'SaveProposalInfo': return $this->load_SaveProposalInfo($in);
			case 'CreateOrderFromProposalInfo': return $this->load_CreateOrderFromProposalInfo($in);
			case 'CreateInvoiceFromProposalInfo': return $this->load_CreateInvoiceFromProposalInfo($in);
			case 'GetOrdersByReceiptsRequest': return $this->load_GetOrdersByReceiptsRequest($in);
			case 'GetCurrentTableOrdersRequest': return $this->load_GetCurrentTableOrdersRequest($in);
			case 'GetOrdersRequest': return $this->load_GetOrdersRequest($in);
			case 'DetermineContractLinesRequest': return $this->load_DetermineContractLinesRequest($in);
			case 'CreateInvoiceFromPackingSlipsRequest': return $this->load_CreateInvoiceFromPackingSlipsRequest($in);
			case 'CashCountInfoWorkplaceData': return $this->load_CashCountInfoWorkplaceData($in);
			case 'CashCountInfoWorkplaceDataList': return $this->load_CashCountInfoWorkplaceDataList($in);
			case 'CashCountInfoPaymentMethodAmount': return $this->load_CashCountInfoPaymentMethodAmount($in);
			case 'CashCountInfoPaymentMethodAmountList': return $this->load_CashCountInfoPaymentMethodAmountList($in);
			case 'CashCountInfoWorkplace': return $this->load_CashCountInfoWorkplace($in);
			case 'CashCountInfoWorkplaceList': return $this->load_CashCountInfoWorkplaceList($in);
			case 'CashCountInfo': return $this->load_CashCountInfo($in);
			case 'GetCashCountInfoRequest': return $this->load_GetCashCountInfoRequest($in);
			case 'CashCountInfoCountedPaymentMethodAmount': return $this->load_CashCountInfoCountedPaymentMethodAmount($in);
			case 'CashCountInfoCountedPaymentMethodAmountList': return $this->load_CashCountInfoCountedPaymentMethodAmountList($in);
			case 'SaveCashCountRequest': return $this->load_SaveCashCountRequest($in);
			case 'SalesProcessorContext': return $this->load_SalesProcessorContext($in);
			case 'SalesProcessorResult': return $this->load_SalesProcessorResult($in);
			case 'ProcessInvoiceRequest': return $this->load_ProcessInvoiceRequest($in);
			case 'ProposalInput': return $this->load_ProposalInput($in);
			case 'ProcessProposalRequest': return $this->load_ProcessProposalRequest($in);
			case 'ProcessOrderRequest': return $this->load_ProcessOrderRequest($in);
			case 'GetSalesRepeatTemplatesResponse': return $this->load_GetSalesRepeatTemplatesResponse($in);
			case 'SaveSalesRepeatTemplateResponse': return $this->load_SaveSalesRepeatTemplateResponse($in);
			case 'PerformBpeBudgetChecksResponse': return $this->load_PerformBpeBudgetChecksResponse($in);
			case 'GetTicketCounterSalesResponse': return $this->load_GetTicketCounterSalesResponse($in);
			case 'GetSalePromotionsResponse': return $this->load_GetSalePromotionsResponse($in);
			case 'GetPaymentMethodsResponse': return $this->load_GetPaymentMethodsResponse($in);
			case 'GetAvailablePaymentMethodsResponse': return $this->load_GetAvailablePaymentMethodsResponse($in);
			case 'CreateOrderResponse': return $this->load_CreateOrderResponse($in);
			case 'CreateOrderV2Response': return $this->load_CreateOrderV2Response($in);
			case 'CreateOrderV3Response': return $this->load_CreateOrderV3Response($in);
			case 'PayOrderResponse': return $this->load_PayOrderResponse($in);
			case 'PayOrderV2Response': return $this->load_PayOrderV2Response($in);
			case 'PayTableOrderResponse': return $this->load_PayTableOrderResponse($in);
			case 'PrepayTableOrderResponse': return $this->load_PrepayTableOrderResponse($in);
			case 'GetOrdersByExtOrderIdsResponse': return $this->load_GetOrdersByExtOrderIdsResponse($in);
			case 'GetProposalsResponse': return $this->load_GetProposalsResponse($in);
			case 'GetProposalResponse': return $this->load_GetProposalResponse($in);
			case 'SaveProposalResponse': return $this->load_SaveProposalResponse($in);
			case 'CancelProposalResponse': return $this->load_CancelProposalResponse($in);
			case 'CreateOrderFromProposalResponse': return $this->load_CreateOrderFromProposalResponse($in);
			case 'CreateInvoiceFromProposalResponse': return $this->load_CreateInvoiceFromProposalResponse($in);
			case 'GetOrdersByReceiptsResponse': return $this->load_GetOrdersByReceiptsResponse($in);
			case 'GetCurrentTableOrdersResponse': return $this->load_GetCurrentTableOrdersResponse($in);
			case 'GetOrdersResponse': return $this->load_GetOrdersResponse($in);
			case 'DetermineContractLinesResponse': return $this->load_DetermineContractLinesResponse($in);
			case 'CreateInvoiceFromPackingSlipsResponse': return $this->load_CreateInvoiceFromPackingSlipsResponse($in);
			case 'GetCashCountInfoResponse': return $this->load_GetCashCountInfoResponse($in);
			case 'SaveCashCountResponse': return $this->load_SaveCashCountResponse($in);
			case 'ProcessInvoiceResponse': return $this->load_ProcessInvoiceResponse($in);
			case 'ProcessProposalResponse': return $this->load_ProcessProposalResponse($in);
			case 'ProcessOrderResponse': return $this->load_ProcessOrderResponse($in);
			case 'WebhookConsumerEvent': return $this->load_WebhookConsumerEvent($in);
			case 'WebhookConsumerEventList': return $this->load_WebhookConsumerEventList($in);
			case 'WebhookConsumerTriggerPattern': return $this->load_WebhookConsumerTriggerPattern($in);
			case 'WebhookConsumerTriggerPatternList': return $this->load_WebhookConsumerTriggerPatternList($in);
			case 'WebhookConsumerWorkplace': return $this->load_WebhookConsumerWorkplace($in);
			case 'WebhookConsumerWorkplaceList': return $this->load_WebhookConsumerWorkplaceList($in);
			case 'WebhookConsumer': return $this->load_WebhookConsumer($in);
			case 'WebhookConsumerList': return $this->load_WebhookConsumerList($in);
			case 'GetWebhookConsumersRequest': return $this->load_GetWebhookConsumersRequest($in);
			case 'ExternalPaymentMessage': return $this->load_ExternalPaymentMessage($in);
			case 'ExternalPaymentMessageList': return $this->load_ExternalPaymentMessageList($in);
			case 'ExternalPaymentCode': return $this->load_ExternalPaymentCode($in);
			case 'StartExternalPaymentRequest': return $this->load_StartExternalPaymentRequest($in);
			case 'PollExternalPaymentRequest': return $this->load_PollExternalPaymentRequest($in);
			case 'RequestCancelExternalPaymentRequest': return $this->load_RequestCancelExternalPaymentRequest($in);
			case 'CancelExternalPaymentRequest': return $this->load_CancelExternalPaymentRequest($in);
			case 'WebhookBrowserInput': return $this->load_WebhookBrowserInput($in);
			case 'WebhookDialogInput': return $this->load_WebhookDialogInput($in);
			case 'WebhookFormFieldInput': return $this->load_WebhookFormFieldInput($in);
			case 'WebhookFormInput': return $this->load_WebhookFormInput($in);
			case 'WebhookScanCodeInput': return $this->load_WebhookScanCodeInput($in);
			case 'WebhookOpenUrlInput': return $this->load_WebhookOpenUrlInput($in);
			case 'ApplyWebhookExternalDiscount': return $this->load_ApplyWebhookExternalDiscount($in);
			case 'WebhookTableInput': return $this->load_WebhookTableInput($in);
			case 'WebhookRelationInput': return $this->load_WebhookRelationInput($in);
			case 'WebhookExternalDiscountInput': return $this->load_WebhookExternalDiscountInput($in);
			case 'WebhookSessionBaseLineInput': return $this->load_WebhookSessionBaseLineInput($in);
			case 'WebhookSessionLineInput': return $this->load_WebhookSessionLineInput($in);
			case 'WebhookSessionInput': return $this->load_WebhookSessionInput($in);
			case 'WebhookSelectRelationInput': return $this->load_WebhookSelectRelationInput($in);
			case 'WebhookCustomActionInput': return $this->load_WebhookCustomActionInput($in);
			case 'WebhookMessage': return $this->load_WebhookMessage($in);
			case 'WebhookDialogOption': return $this->load_WebhookDialogOption($in);
			case 'WebhookDialog': return $this->load_WebhookDialog($in);
			case 'WebhookFormNumber': return $this->load_WebhookFormNumber($in);
			case 'WebhookFormDaySchedule': return $this->load_WebhookFormDaySchedule($in);
			case 'WebhookFormCalendar': return $this->load_WebhookFormCalendar($in);
			case 'WebhookFormOption': return $this->load_WebhookFormOption($in);
			case 'WebhookFormSelect': return $this->load_WebhookFormSelect($in);
			case 'WebhookFormField': return $this->load_WebhookFormField($in);
			case 'WebhookForm': return $this->load_WebhookForm($in);
			case 'WebhookDisplayBarcode': return $this->load_WebhookDisplayBarcode($in);
			case 'WebhookOpenUrl': return $this->load_WebhookOpenUrl($in);
			case 'WebhookError': return $this->load_WebhookError($in);
			case 'WebhookRequestScanCode': return $this->load_WebhookRequestScanCode($in);
			case 'WebhookScanCode': return $this->load_WebhookScanCode($in);
			case 'WebhookLineChange': return $this->load_WebhookLineChange($in);
			case 'WebhookLineAddition': return $this->load_WebhookLineAddition($in);
			case 'WebhookLineDeletion': return $this->load_WebhookLineDeletion($in);
			case 'WebhookReq': return $this->load_WebhookReq($in);
			case 'ExternalPaymentReq': return $this->load_ExternalPaymentReq($in);
			case 'ExternalPaymentResp': return $this->load_ExternalPaymentResp($in);
			case 'ExternalPaymentWebhookRequest': return $this->load_ExternalPaymentWebhookRequest($in);
			case 'SendWebhookRequest': return $this->load_SendWebhookRequest($in);
			case 'GetWebhookConsumersResponse': return $this->load_GetWebhookConsumersResponse($in);
			case 'StartExternalPaymentResponse': return $this->load_StartExternalPaymentResponse($in);
			case 'PollExternalPaymentResponse': return $this->load_PollExternalPaymentResponse($in);
			case 'RequestCancelExternalPaymentResponse': return $this->load_RequestCancelExternalPaymentResponse($in);
			case 'CancelExternalPaymentResponse': return $this->load_CancelExternalPaymentResponse($in);
			case 'ExternalPaymentWebhookResponse': return $this->load_ExternalPaymentWebhookResponse($in);
			case 'WebhookResp': return $this->load_WebhookResp($in);
			case 'InterbranchOrderLine': return $this->load_InterbranchOrderLine($in);
			case 'InterbranchOrderLineList': return $this->load_InterbranchOrderLineList($in);
			case 'InterbranchOrder': return $this->load_InterbranchOrder($in);
			case 'InterbranchOrderList': return $this->load_InterbranchOrderList($in);
			case 'GetInterbranchOrdersRequest': return $this->load_GetInterbranchOrdersRequest($in);
			case 'InterbranchOrderRequest': return $this->load_InterbranchOrderRequest($in);
			case 'CreateInterbranchOrderRequest': return $this->load_CreateInterbranchOrderRequest($in);
			case 'UpdateInterbranchOrderRequest': return $this->load_UpdateInterbranchOrderRequest($in);
			case 'ClaimInterbranchOrderRequest': return $this->load_ClaimInterbranchOrderRequest($in);
			case 'ReleaseInterbranchOrderRequest': return $this->load_ReleaseInterbranchOrderRequest($in);
			case 'CancelInterbranchOrderRequest': return $this->load_CancelInterbranchOrderRequest($in);
			case 'InterbranchShipmentLine': return $this->load_InterbranchShipmentLine($in);
			case 'InterbranchShipmentLineList': return $this->load_InterbranchShipmentLineList($in);
			case 'InterbranchShipment': return $this->load_InterbranchShipment($in);
			case 'InterbranchShipmentList': return $this->load_InterbranchShipmentList($in);
			case 'GetInterbranchShipmentsRequest': return $this->load_GetInterbranchShipmentsRequest($in);
			case 'ShipInterbranchOrderRequest': return $this->load_ShipInterbranchOrderRequest($in);
			case 'InterbranchDeliveryLine': return $this->load_InterbranchDeliveryLine($in);
			case 'InterbranchDeliveryLineList': return $this->load_InterbranchDeliveryLineList($in);
			case 'InterbranchDelivery': return $this->load_InterbranchDelivery($in);
			case 'InterbranchDeliveryList': return $this->load_InterbranchDeliveryList($in);
			case 'GetInterbranchDeliveriesRequest': return $this->load_GetInterbranchDeliveriesRequest($in);
			case 'DeliverInterbranchShipmentRequest': return $this->load_DeliverInterbranchShipmentRequest($in);
			case 'InterbranchShipmentRequest': return $this->load_InterbranchShipmentRequest($in);
			case 'CreateInterbranchShipmentRequest': return $this->load_CreateInterbranchShipmentRequest($in);
			case 'InterbranchDeliveryRequest': return $this->load_InterbranchDeliveryRequest($in);
			case 'CreateInterbranchDeliveryRequest': return $this->load_CreateInterbranchDeliveryRequest($in);
			case 'ArticleFilter': return $this->load_ArticleFilter($in);
			case 'RunInterbranchPlannerRequest': return $this->load_RunInterbranchPlannerRequest($in);
			case 'InterbranchPlannerMessage': return $this->load_InterbranchPlannerMessage($in);
			case 'GetInterbranchOrdersResponse': return $this->load_GetInterbranchOrdersResponse($in);
			case 'CreateInterbranchOrderResponse': return $this->load_CreateInterbranchOrderResponse($in);
			case 'UpdateInterbranchOrderResponse': return $this->load_UpdateInterbranchOrderResponse($in);
			case 'ClaimInterbranchOrderResponse': return $this->load_ClaimInterbranchOrderResponse($in);
			case 'ReleaseInterbranchOrderResponse': return $this->load_ReleaseInterbranchOrderResponse($in);
			case 'CancelInterbranchOrderResponse': return $this->load_CancelInterbranchOrderResponse($in);
			case 'GetInterbranchShipmentsResponse': return $this->load_GetInterbranchShipmentsResponse($in);
			case 'ShipInterbranchOrderResponse': return $this->load_ShipInterbranchOrderResponse($in);
			case 'GetInterbranchDeliveriesResponse': return $this->load_GetInterbranchDeliveriesResponse($in);
			case 'DeliverInterbranchShipmentResponse': return $this->load_DeliverInterbranchShipmentResponse($in);
			case 'CreateInterbranchShipmentResponse': return $this->load_CreateInterbranchShipmentResponse($in);
			case 'CreateInterbranchDeliveryResponse': return $this->load_CreateInterbranchDeliveryResponse($in);
			case 'RunInterbranchPlannerResponse': return $this->load_RunInterbranchPlannerResponse($in);
			case 'getSalesPriceList': return $this->load_getSalesPriceList($in);
			case 'getPriceGroupList': return $this->load_getPriceGroupList($in);
			case 'logMistake': return $this->load_logMistake($in);
			case 'createRelation': return $this->load_createRelation($in);
			case 'updateRelation': return $this->load_updateRelation($in);
			case 'getRelation': return $this->load_getRelation($in);
			case 'findRelation': return $this->load_findRelation($in);
			case 'getRelations': return $this->load_getRelations($in);
			case 'getCustomFieldLists': return $this->load_getCustomFieldLists($in);
			case 'getCardCategories': return $this->load_getCardCategories($in);
			case 'adjustPoints': return $this->load_adjustPoints($in);
			case 'getRelationPoints': return $this->load_getRelationPoints_($in);
			case 'getEmployees': return $this->load_getEmployees($in);
			case 'getEmployee': return $this->load_getEmployee($in);
			case 'findEmployee': return $this->load_findEmployee($in);
			case 'createEmployee': return $this->load_createEmployee($in);
			case 'updateEmployee': return $this->load_updateEmployee($in);
			case 'getActiveEmployeeList': return $this->load_getActiveEmployeeList($in);
			case 'verifyEmployeePassword': return $this->load_verifyEmployeePassword($in);
			case 'verifyEmployeePasswordResponse': return $this->load_verifyEmployeePasswordResponse($in);
			case 'getMaxTableNumber': return $this->load_getMaxTableNumber($in);
			case 'getMaxTableNumberResponse': return $this->load_getMaxTableNumberResponse($in);
			case 'getTableList': return $this->load_getTableList($in);
			case 'getTableListV2': return $this->load_getTableListV2($in);
			case 'getTableListV3': return $this->load_getTableListV3($in);
			case 'getMainTableList': return $this->load_getMainTableList($in);
			case 'getSubTableList': return $this->load_getSubTableList($in);
			case 'getCourseList': return $this->load_getCourseList($in);
			case 'getCourseListV2': return $this->load_getCourseListV2($in);
			case 'getVatGroupList': return $this->load_getVatGroupList($in);
			case 'saveTableOrder': return $this->load_saveTableOrder($in);
			case 'saveTableOrderV2': return $this->load_saveTableOrderV2($in);
			case 'createAndPayTableOrder': return $this->load_createAndPayTableOrder($in);
			case 'moveTableOrder': return $this->load_moveTableOrder($in);
			case 'moveTableOrderV2': return $this->load_moveTableOrderV2($in);
			case 'moveTableOrderV3': return $this->load_moveTableOrderV3($in);
			case 'getTableOrder': return $this->load_getTableOrder($in);
			case 'getTableOrderV2': return $this->load_getTableOrderV2($in);
			case 'getTableOrderV3': return $this->load_getTableOrderV3($in);
			case 'findTableOrder': return $this->load_findTableOrder($in);
			case 'releaseTable': return $this->load_releaseTable($in);
			case 'releaseTableV2': return $this->load_releaseTableV2($in);
			case 'setSubTableCount': return $this->load_setSubTableCount($in);
			case 'getTableOrderCourseList': return $this->load_getTableOrderCourseList($in);
			case 'getTableOrderCourseListV2': return $this->load_getTableOrderCourseListV2($in);
			case 'getTableOrderCourseListV3': return $this->load_getTableOrderCourseListV3($in);
			case 'requestTableOrderCourse': return $this->load_requestTableOrderCourse($in);
			case 'requestNextTableOrderCourseV2': return $this->load_requestNextTableOrderCourseV2($in);
			case 'requestNextTableOrderCourseV3': return $this->load_requestNextTableOrderCourseV3($in);
			case 'storeSinglyEftTransaction': return $this->load_storeSinglyEftTransaction($in);
			case 'queueBranchOrder': return $this->load_queueBranchOrder($in);
			case 'queueBranchOrderPayment': return $this->load_queueBranchOrderPayment($in);
			case 'getQueueBranchOrderPaymentStatus': return $this->load_getQueueBranchOrderPaymentStatus($in);
			case 'updateOrder': return $this->load_updateOrder($in);
			case 'updateOrderV2': return $this->load_updateOrderV2($in);
			case 'saveOrder': return $this->load_saveOrder($in);
			case 'getOrder': return $this->load_getOrder($in);
			case 'getPackingSlips': return $this->load_getPackingSlips($in);
			case 'getPackingSlipsByOrder': return $this->load_getPackingSlipsByOrder($in);
			case 'getOrderChanges': return $this->load_getOrderChanges($in);
			case 'getOrderHistory': return $this->load_getOrderHistory($in);
			case 'findOrder': return $this->load_findOrder($in);
			case 'cancelOrder': return $this->load_cancelOrder($in);
			case 'cancelOrderV2': return $this->load_cancelOrderV2($in);
			case 'cancelTableOrder': return $this->load_cancelTableOrder($in);
			case 'cancelTableOrderV2': return $this->load_cancelTableOrderV2($in);
			case 'payInvoice': return $this->load_payInvoice($in);
			case 'deliverOrder': return $this->load_deliverOrder($in);
			case 'deliverOrderV2': return $this->load_deliverOrderV2($in);
			case 'getOrderCategories': return $this->load_getOrderCategories($in);
			case 'getReceipts': return $this->load_getReceipts($in);
			case 'getReceipt': return $this->load_getReceipt($in);
			case 'getReceiptsByOrder': return $this->load_getReceiptsByOrder($in);
			case 'getReceiptsByCashCount': return $this->load_getReceiptsByCashCount($in);
			case 'printReceipt': return $this->load_printReceipt($in);
			case 'printReceiptV2': return $this->load_printReceiptV2($in);
			case 'printTableReceipt': return $this->load_printTableReceipt($in);
			case 'printTableReceiptV2': return $this->load_printTableReceiptV2($in);
			case 'printTableReceiptV3': return $this->load_printTableReceiptV3($in);
			case 'getInvoices': return $this->load_getInvoices($in);
			case 'saveInvoice': return $this->load_saveInvoice($in);
			case 'getInvoice': return $this->load_getInvoice($in);
			case 'findInvoice': return $this->load_findInvoice($in);
			case 'creditInvoice': return $this->load_creditInvoice($in);
			case 'getJournals': return $this->load_getJournals($in);
			case 'getFinancialJournal': return $this->load_getFinancialJournal($in);
			case 'getFinancialJournalByCashCount': return $this->load_getFinancialJournalByCashCount($in);
			case 'getCashCountList': return $this->load_getCashCountList($in);
			case 'getCashDrawerBalancingList': return $this->load_getCashDrawerBalancingList($in);
			case 'getTurnoverGroups': return $this->load_getTurnoverGroups($in);
			case 'updateTurnoverGroups': return $this->load_updateTurnoverGroups($in);
			case 'getProducts': return $this->load_getProducts($in);
			case 'createProduct': return $this->load_createProduct($in);
			case 'updateProduct': return $this->load_updateProduct($in);
			case 'getArticleVariants': return $this->load_getArticleVariants($in);
			case 'getArticlesVariants': return $this->load_getArticlesVariants($in);
			case 'newArticleVariant': return $this->load_newArticleVariant($in);
			case 'updateArticleVariant': return $this->load_updateArticleVariant($in);
			case 'deleteArticleVariants': return $this->load_deleteArticleVariants($in);
			case 'getStock': return $this->load_getStock($in);
			case 'getStockHistory': return $this->load_getStockHistory($in);
			case 'getStockHistoryV2': return $this->load_getStockHistoryV2($in);
			case 'updateStock': return $this->load_updateStock($in);
			case 'setStock': return $this->load_setStock($in);
			case 'getArticleGroups': return $this->load_getArticleGroups($in);
			case 'getArticleGroupChanges': return $this->load_getArticleGroupChanges($in);
			case 'updateArticleGroup': return $this->load_updateArticleGroup($in);
			case 'newArticleGroup': return $this->load_newArticleGroup($in);
			case 'deleteArticleGroup': return $this->load_deleteArticleGroup($in);
			case 'addProductsToArticleGroup': return $this->load_addProductsToArticleGroup($in);
			case 'replaceProductsOfArticleGroup': return $this->load_replaceProductsOfArticleGroup($in);
			case 'deleteProductsFromArticleGroup': return $this->load_deleteProductsFromArticleGroup($in);
			case 'sendMessage': return $this->load_sendMessage($in);
			case 'sendMessageResponse': return $this->load_sendMessageResponse($in);
			case 'getMessages': return $this->load_getMessages($in);
			case 'getShifts': return $this->load_getShifts($in);
			case 'getPurchaseOrders': return $this->load_getPurchaseOrders($in);
			case 'savePurchaseOrder': return $this->load_savePurchaseOrder($in);
			case 'getPurchaseOrdersV2': return $this->load_getPurchaseOrdersV2($in);
			case 'savePurchaseOrderV2': return $this->load_savePurchaseOrderV2_($in);
			case 'getPurchaseDeliveries': return $this->load_getPurchaseDeliveries($in);
			case 'savePurchaseDelivery': return $this->load_savePurchaseDelivery($in);
			case 'getPurchaseDeliveriesV2': return $this->load_getPurchaseDeliveriesV2($in);
			case 'savePurchaseDeliveryV2': return $this->load_savePurchaseDeliveryV2_($in);
			case 'encryptString': return $this->load_encryptString($in);
			case 'getArticleCardLayout': return $this->load_getArticleCardLayout($in);
			case 'updateArticleCardLayout': return $this->load_updateArticleCardLayout($in);
			case 'getRetailSpaceRental': return $this->load_getRetailSpaceRental($in);
			case 'getRetailSpaceRentals': return $this->load_getRetailSpaceRentals($in);
			case 'EidSearch': return $this->load_EidSearch($in);
			case 'getOverview': return $this->load_getOverview($in);
			case 'getOverviewFields': return $this->load_getOverviewFields($in);
			case 'updateBatch': return $this->load_updateBatch($in);
			case 'print': return $this->load_print_($in);
			case 'getKitchenTickets': return $this->load_getKitchenTickets($in);
			case 'saveStockCorrections': return $this->load_saveStockCorrections($in);
			case 'getPurchaseBook': return $this->load_getPurchaseBook($in);
			case 'savePurchaseBook': return $this->load_savePurchaseBook($in);
			case 'addToPurchaseBook': return $this->load_addToPurchaseBook($in);
			case 'getStockCorrections': return $this->load_getStockCorrections($in);
			case 'getArticlesNutritionalCharacteristics': return $this->load_getArticlesNutritionalCharacteristics($in);
			case 'updateArticleNutritionalCharacteristics': return $this->load_updateArticleNutritionalCharacteristics($in);
			case 'getPreparationMethodGroups': return $this->load_getPreparationMethodGroups($in);
			case 'deletePreparationMethodGroup': return $this->load_deletePreparationMethodGroup($in);
			case 'getArticlesPreparationMethodGroups': return $this->load_getArticlesPreparationMethodGroups($in);
			case 'updateArticlePreparationMethodGroups': return $this->load_updateArticlePreparationMethodGroups($in);
			case 'placeTableOrder': return $this->load_placeTableOrder($in);
			case 'getTapTickTotals': return $this->load_getTapTickTotals($in);
			case 'getTapTickHistory': return $this->load_getTapTickHistory($in);
			case 'findRelationV2': return $this->load_findRelationV2($in);
			case 'getTodoLists': return $this->load_getTodoLists($in);
			case 'getTodoList': return $this->load_getTodoList($in);
			case 'createTodoList': return $this->load_createTodoList($in);
			case 'saveTodoList': return $this->load_saveTodoList($in);
			case 'saveTodoListResponse': return $this->load_saveTodoListResponse($in);
			case 'saveTodoListV2': return $this->load_saveTodoListV2($in);
			case 'addToTodoList': return $this->load_addToTodoList($in);
			case 'addToTodoListResponse': return $this->load_addToTodoListResponse($in);
			case 'removeTodoList': return $this->load_removeTodoList($in);
			case 'removeTodoListResponse': return $this->load_removeTodoListResponse($in);
			case 'getFilterProfiles': return $this->load_getFilterProfiles($in);
			case 'savePreparationMethodGroup': return $this->load_savePreparationMethodGroup($in);
			case 'getNutritionalCharacteristics': return $this->load_getNutritionalCharacteristics($in);
			case 'updateNutritionalCharacteristics': return $this->load_updateNutritionalCharacteristics($in);
			case 'determinePricing': return $this->load_determinePricing($in);
			case 'setRelationPresence': return $this->load_setRelationPresence($in);
			case 'getRelationPresence': return $this->load_getRelationPresence($in);
			case 'getArticleBranchDeviations': return $this->load_getArticleBranchDeviations($in);
			case 'saveArticleBranchDeviations': return $this->load_saveArticleBranchDeviations($in);
			case 'updateArticleNutrients': return $this->load_updateArticleNutrients($in);
			case 'updateArticleDynamicMinMaxStock': return $this->load_updateArticleDynamicMinMaxStock($in);
			case 'getArticleDynamicMinMaxStock': return $this->load_getArticleDynamicMinMaxStock($in);
			case 'getCardFilterOptions': return $this->load_getCardFilterOptions($in);
			case 'getPlannedCycleCounts': return $this->load_getPlannedCycleCounts($in);
			case 'getActiveCycleCount': return $this->load_getActiveCycleCount($in);
			case 'setArticleRecalled': return $this->load_setArticleRecalled($in);
			case 'getArticleComponents': return $this->load_getArticleComponents($in);
			case 'saveArticleComponents': return $this->load_saveArticleComponents($in);
			case 'getConfiguration': return $this->load_getConfiguration($in);
			case 'updateConfiguration': return $this->load_updateConfiguration($in);
			case 'getConfigurationTree': return $this->load_getConfigurationTree($in);
			case 'getConfigurationValues': return $this->load_getConfigurationValues($in);
			case 'updateConfigurationValues': return $this->load_updateConfigurationValues($in);
			case 'getButtonLayout': return $this->load_getButtonLayout($in);
			case 'getButtonLayoutGroupForBranch': return $this->load_getButtonLayoutGroupForBranch($in);
			case 'getButtonLayoutGroupsWithAssignedWorkplaces': return $this->load_getButtonLayoutGroupsWithAssignedWorkplaces($in);
			case 'getButtonLayoutGroupDetails': return $this->load_getButtonLayoutGroupDetails($in);
			case 'saveButtonLayoutGroupDetails': return $this->load_saveButtonLayoutGroupDetails($in);
			case 'deleteButtonLayoutGroup': return $this->load_deleteButtonLayoutGroup($in);
			case 'assignButtonLayoutGroupToWorkplaces': return $this->load_assignButtonLayoutGroupToWorkplaces($in);
			case 'getArticlesInLayout': return $this->load_getArticlesInLayout($in);
			case 'getDayStockConfiguration': return $this->load_getDayStockConfiguration($in);
			case 'saveDayStockConfiguration': return $this->load_saveDayStockConfiguration_($in);
			case 'getActivities': return $this->load_getActivities($in);
			case 'getActivityTypes': return $this->load_getActivityTypes($in);
			case 'saveActivityTypes': return $this->load_saveActivityTypes($in);
			case 'createActivity': return $this->load_createActivity_($in);
			case 'updateActivity': return $this->load_updateActivity_($in);
			case 'saveActivity': return $this->load_saveActivity_($in);
			case 'deleteActivity': return $this->load_deleteActivity($in);
			case 'getGksInformation': return $this->load_getGksInformation($in);
			case 'getMealplanMomentsConfiguration': return $this->load_getMealplanMomentsConfiguration($in);
			case 'getScheduledMealPlans': return $this->load_getScheduledMealPlans($in);
			case 'getArticleAlterationsGroups': return $this->load_getArticleAlterationsGroups($in);
			case 'saveArticleAlterationsGroup': return $this->load_saveArticleAlterationsGroup($in);
			case 'deleteArticleAlterationsGroup': return $this->load_deleteArticleAlterationsGroup($in);
			case 'updateAttachedArticleAlterationsGroups': return $this->load_updateAttachedArticleAlterationsGroups($in);
			case 'updateArticleMenu': return $this->load_updateArticleMenu($in);
			case 'updateOnlineAuthorizationTree': return $this->load_updateOnlineAuthorizationTree($in);
			case 'getOwnerLabels': return $this->load_getOwnerLabels($in);
			case 'getWordAliases': return $this->load_getWordAliases($in);
			case 'getApiVersion': return $this->load_getApiVersion($in);
			case 'getDatabaseVersion': return $this->load_getDatabaseVersion($in);
			case 'getLicenseInformation': return $this->load_getLicenseInformation($in);
			case 'getAvailableTerminalList': return $this->load_getAvailableTerminalList($in);
			case 'registerTerminal': return $this->load_registerTerminal($in);
			case 'getTerminalSettings': return $this->load_getTerminalSettings($in);
			case 'getBranchInformation': return $this->load_getBranchInformation($in);
			case 'getBranchGroups': return $this->load_getBranchGroups($in);
			case 'getDeliveryMethods': return $this->load_getDeliveryMethods($in);
			case 'getDeliveryMethodsV2': return $this->load_getDeliveryMethodsV2($in);
			case 'createDeliveryMethod': return $this->load_createDeliveryMethod($in);
			case 'updateDeliveryMethod': return $this->load_updateDeliveryMethod($in);
			case 'getBranches': return $this->load_getBranches($in);
			case 'getCurrentSyncMarkers': return $this->load_getCurrentSyncMarkers($in);
			case 'getCurrentSyncMarkersV2': return $this->load_getCurrentSyncMarkersV2($in);
			case 'getNutrientTypes': return $this->load_getNutrientTypes($in);
			case 'verifyCredentials': return $this->load_verifyCredentials($in);
			case 'saveCredentials': return $this->load_saveCredentials($in);
			case 'getPasswordRequirements': return $this->load_getPasswordRequirements($in);
			case 'passwordReset': return $this->load_passwordReset($in);
			case 'getFloorplans': return $this->load_getFloorplans($in);
			case 'changeTableProperty': return $this->load_changeTableProperty($in);
			case 'getEmployeeAuthorizations': return $this->load_getEmployeeAuthorizations($in);
			case 'getGroupAuthorizations': return $this->load_getGroupAuthorizations($in);
			case 'updateGroupAuthorizations': return $this->load_updateGroupAuthorizations($in);
			case 'getAuthorizationGroups': return $this->load_getAuthorizationGroups($in);
			case 'getAuthorizationTree': return $this->load_getAuthorizationTree($in);
			case 'getEmployeeBranchAuthorizations': return $this->load_getEmployeeBranchAuthorizations($in);
			case 'saveAuthorizationGroup': return $this->load_saveAuthorizationGroup($in);
			case 'deleteAuthorizationGroup': return $this->load_deleteAuthorizationGroup($in);
			case 'getEmployeeAuthorizationGroups': return $this->load_getEmployeeAuthorizationGroups($in);
			case 'updateEmployeeAuthorizationGroups': return $this->load_updateEmployeeAuthorizationGroups($in);
			case 'getEmployeeAuthorizationSyncMarkers': return $this->load_getEmployeeAuthorizationSyncMarkers($in);
			case 'getSpecialBarcodePatterns': return $this->load_getSpecialBarcodePatterns($in);
			case 'parseSpecialBarcode': return $this->load_parseSpecialBarcode($in);
			case 'getEmployeeWorkplaceLoginStates': return $this->load_getEmployeeWorkplaceLoginStates($in);
			case 'createImage': return $this->load_createImage($in);
			case 'createImageFromUrl': return $this->load_createImageFromUrl($in);
			case 'getCardImageLabels': return $this->load_getCardImageLabels($in);
			case 'getCardImages': return $this->load_getCardImages($in);
			case 'saveCardImages': return $this->load_saveCardImages($in);
			case 'getImages': return $this->load_getImages($in);
			case 'getPrintLayouts': return $this->load_getPrintLayouts($in);
			case 'getPrintLayoutAssignments': return $this->load_getPrintLayoutAssignments($in);
			case 'getRenderedPrintLayout': return $this->load_getRenderedPrintLayout($in);
			case 'getPrintLayoutMarkup': return $this->load_getPrintLayoutMarkup($in);
			case 'printPrintLayout': return $this->load_printPrintLayout($in);
			case 'checkGiftcardPayment': return $this->load_checkGiftcardPayment($in);
			case 'registerGiftcardPayment': return $this->load_registerGiftcardPayment($in);
			case 'registerGiftcardPaymentV2': return $this->load_registerGiftcardPaymentV2($in);
			case 'createGiftcard': return $this->load_createGiftcard($in);
			case 'reloadGiftcard': return $this->load_reloadGiftcard($in);
			case 'getGiftcardTypes': return $this->load_getGiftcardTypes($in);
			case 'getRelationGiftcards': return $this->load_getRelationGiftcards($in);
			case 'getGiftcard': return $this->load_getGiftcard_($in);
			case 'getGiftcardHistory': return $this->load_getGiftcardHistory($in);
			case 'getGiftcards': return $this->load_getGiftcards($in);
			case 'saveGiftcards': return $this->load_saveGiftcards($in);
			case 'restituteGiftcards': return $this->load_restituteGiftcards($in);
			case 'linkGiftcardsToRelation': return $this->load_linkGiftcardsToRelation($in);
			case 'getVouchers': return $this->load_getVouchers($in);
			case 'getVoucher': return $this->load_getVoucher($in);
			case 'getVoucherCategories': return $this->load_getVoucherCategories($in);
			case 'getVoucherIssuances': return $this->load_getVoucherIssuances($in);
			case 'getVoucherSettings': return $this->load_getVoucherSettings($in);
			case 'issueVouchers': return $this->load_issueVouchers($in);
			case 'issueVoucherExternalScanCodes': return $this->load_issueVoucherExternalScanCodes($in);
			case 'getVoucherExternalScanCodes': return $this->load_getVoucherExternalScanCodes($in);
			case 'getRedeemableVoucherIssuances': return $this->load_getRedeemableVoucherIssuances($in);
			case 'redeemVoucherIssuance': return $this->load_redeemVoucherIssuance($in);
			case 'reportTurnoverByBranch': return $this->load_reportTurnoverByBranch_($in);
			case 'reportTurnoverByEmployee': return $this->load_reportTurnoverByEmployee_($in);
			case 'reportTurnoverByActivity': return $this->load_reportTurnoverByActivity_($in);
			case 'reportTurnoverByTurnoverGroup': return $this->load_reportTurnoverByTurnoverGroup_($in);
			case 'reportTurnoverByArticle': return $this->load_reportTurnoverByArticle_($in);
			case 'reportHoursByEmployee': return $this->load_reportHoursByEmployee_($in);
			case 'reportPaymentMethods': return $this->load_reportPaymentMethods_($in);
			case 'reportTables': return $this->load_reportTables_($in);
			case 'reportCancellations': return $this->load_reportCancellations_($in);
			case 'reportBPE': return $this->load_reportBPE_($in);
			case 'reportBranchPerformance': return $this->load_reportBranchPerformance_($in);
			case 'reportAverageSpending': return $this->load_reportAverageSpending_($in);
			case 'reportTurnover': return $this->load_reportTurnover_($in);
			case 'reportPaymentMethodDetails': return $this->load_reportPaymentMethodDetails($in);
			case 'reportPrintableFinancialTotals': return $this->load_reportPrintableFinancialTotals($in);
			case 'reportArticlePerformance': return $this->load_reportArticlePerformance_($in);
			case 'getSalesRepeatTemplates': return $this->load_getSalesRepeatTemplates($in);
			case 'saveSalesRepeatTemplate': return $this->load_saveSalesRepeatTemplate_($in);
			case 'performBpeBudgetChecks': return $this->load_performBpeBudgetChecks($in);
			case 'getTicketCounterSales': return $this->load_getTicketCounterSales($in);
			case 'getSalePromotions': return $this->load_getSalePromotions($in);
			case 'getPaymentMethods': return $this->load_getPaymentMethods($in);
			case 'getPaymentMethodsV2': return $this->load_getPaymentMethodsV2($in);
			case 'getAvailablePaymentMethods': return $this->load_getAvailablePaymentMethods($in);
			case 'getAvailablePaymentMethodsV2': return $this->load_getAvailablePaymentMethodsV2($in);
			case 'createOrder': return $this->load_createOrder($in);
			case 'createOrderV2': return $this->load_createOrderV2($in);
			case 'createOrderV3': return $this->load_createOrderV3($in);
			case 'payOrder': return $this->load_payOrder($in);
			case 'payOrderV2': return $this->load_payOrderV2($in);
			case 'payTableOrder': return $this->load_payTableOrder($in);
			case 'payTableOrderV2': return $this->load_payTableOrderV2($in);
			case 'prepayTableOrder': return $this->load_prepayTableOrder($in);
			case 'prepayTableOrderV2': return $this->load_prepayTableOrderV2($in);
			case 'getOrdersByExtOrderIds': return $this->load_getOrdersByExtOrderIds($in);
			case 'getProposals': return $this->load_getProposals($in);
			case 'getProposal': return $this->load_getProposal($in);
			case 'saveProposal': return $this->load_saveProposal($in);
			case 'cancelProposal': return $this->load_cancelProposal($in);
			case 'createOrderFromProposal': return $this->load_createOrderFromProposal($in);
			case 'createInvoiceFromProposal': return $this->load_createInvoiceFromProposal($in);
			case 'getOrdersByReceipts': return $this->load_getOrdersByReceipts($in);
			case 'getCurrentTableOrders': return $this->load_getCurrentTableOrders($in);
			case 'getOrders': return $this->load_getOrders($in);
			case 'determineContractLines': return $this->load_determineContractLines($in);
			case 'createInvoiceFromPackingSlips': return $this->load_createInvoiceFromPackingSlips($in);
			case 'getCashCountInfo': return $this->load_getCashCountInfo($in);
			case 'saveCashCount': return $this->load_saveCashCount($in);
			case 'processInvoice': return $this->load_processInvoice($in);
			case 'processProposal': return $this->load_processProposal($in);
			case 'processOrder': return $this->load_processOrder($in);
			case 'getWebhookConsumers': return $this->load_getWebhookConsumers($in);
			case 'startExternalPayment': return $this->load_startExternalPayment($in);
			case 'pollExternalPayment': return $this->load_pollExternalPayment($in);
			case 'requestCancelExternalPayment': return $this->load_requestCancelExternalPayment($in);
			case 'cancelExternalPayment': return $this->load_cancelExternalPayment($in);
			case 'startExternalPaymentV2': return $this->load_startExternalPaymentV2($in);
			case 'pollExternalPaymentV2': return $this->load_pollExternalPaymentV2($in);
			case 'requestCancelExternalPaymentV2': return $this->load_requestCancelExternalPaymentV2($in);
			case 'cancelExternalPaymentV2': return $this->load_cancelExternalPaymentV2($in);
			case 'sendWebhook': return $this->load_sendWebhook($in);
			case 'getInterbranchOrders': return $this->load_getInterbranchOrders($in);
			case 'createInterbranchOrder': return $this->load_createInterbranchOrder($in);
			case 'updateInterbranchOrder': return $this->load_updateInterbranchOrder($in);
			case 'claimInterbranchOrder': return $this->load_claimInterbranchOrder($in);
			case 'releaseInterbranchOrder': return $this->load_releaseInterbranchOrder($in);
			case 'cancelInterbranchOrder': return $this->load_cancelInterbranchOrder($in);
			case 'getInterbranchShipments': return $this->load_getInterbranchShipments($in);
			case 'shipInterbranchOrder': return $this->load_shipInterbranchOrder($in);
			case 'getInterbranchDeliveries': return $this->load_getInterbranchDeliveries($in);
			case 'deliverInterbranchShipment': return $this->load_deliverInterbranchShipment($in);
			case 'createInterbranchShipment': return $this->load_createInterbranchShipment($in);
			case 'createInterbranchDelivery': return $this->load_createInterbranchDelivery($in);
			case 'runInterbranchPlanner': return $this->load_runInterbranchPlanner($in);
		}
	}
	private function load_SoapMplusDateTime(\XMLReader $in) : SoapMplusDateTime {
		$n = $in->name;
		$o = new SoapMplusDateTime();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'sec': $o->sec = $this->load_int_property($in); break;
						case 'min': $o->min = $this->load_int_property($in); break;
						case 'hour': $o->hour = $this->load_int_property($in); break;
						case 'day': $o->day = $this->load_int_property($in); break;
						case 'mon': $o->mon = $this->load_int_property($in); break;
						case 'year': $o->year = $this->load_int_property($in); break;
						case 'isdst': $o->isdst = $this->load_bool_property($in); break;
						case 'timezone': $o->timezone = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SoapMplusDate(\XMLReader $in) : SoapMplusDate {
		$n = $in->name;
		$o = new SoapMplusDate();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'day': $o->day = $this->load_int_property($in); break;
						case 'mon': $o->mon = $this->load_int_property($in); break;
						case 'year': $o->year = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_NumberList(\XMLReader $in) : NumberList {
		$n = $in->name;
		$o = new NumberList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'number': $o->number[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CategoryIdSet(\XMLReader $in) : CategoryIdSet {
		$n = $in->name;
		$o = new CategoryIdSet();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'category': $o->category[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CustomField(\XMLReader $in) : CustomField {
		$n = $in->name;
		$o = new CustomField();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fieldName': $o->fieldName = $this->load_string_property($in); break;
						case 'dataType': $o->dataType = $this->load_string_property($in); break;
						case 'isRequired': $o->isRequired = $this->load_bool_property($in); break;
						case 'strValue': $o->strValue = $this->load_string_property($in); break;
						case 'intValue': $o->intValue = $this->load_int_property($in); break;
						case 'decimalPlaces': $o->decimalPlaces = $this->load_int_property($in); break;
						case 'boolValue': $o->boolValue = $this->load_bool_property($in); break;
						case 'dateValue': $o->dateValue = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'dateTimeValue': $o->dateTimeValue = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'multiSelectInt': $o->multiSelectInt[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CustomFieldList(\XMLReader $in) : CustomFieldList {
		$n = $in->name;
		$o = new CustomFieldList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'customField': $o->customField[] = $this->load_CustomField($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Employee(\XMLReader $in) : Employee {
		$n = $in->name;
		$o = new Employee();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'extEmployeeId': $o->extEmployeeId = $this->load_string_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'createTimestamp': $o->createTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'changeTimestamp': $o->changeTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'username': $o->username = $this->load_string_property($in); break;
						case 'password': $o->password = $this->load_string_property($in); break;
						case 'birthDate': $o->birthDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'phoneWork': $o->phoneWork = $this->load_string_property($in); break;
						case 'phoneHome': $o->phoneHome = $this->load_string_property($in); break;
						case 'phoneMobile': $o->phoneMobile = $this->load_string_property($in); break;
						case 'email': $o->email = $this->load_string_property($in); break;
						case 'bankAccountNumber': $o->bankAccountNumber = $this->load_string_property($in); break;
						case 'bankName': $o->bankName = $this->load_string_property($in); break;
						case 'rfid': $o->rfid = $this->load_int_property($in); break;
						case 'extraText': $o->extraText = $this->load_string_property($in); break;
						case 'active': $o->active = $this->load_bool_property($in); break;
						case 'categoryId': $o->categoryId = $this->load_int_property($in); break;
						case 'category': $o->category = $this->load_string_property($in); break;
						case 'categoryIds': $o->categoryIds = ($this->load_CategoryIdSet($in))->category; break;
						case 'personNumber': $o->personNumber = $this->load_string_property($in); break;
						case 'customFieldList': $o->customFieldList = ($this->load_CustomFieldList($in))->customField; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_EmployeeList(\XMLReader $in) : EmployeeList {
		$n = $in->name;
		$o = new EmployeeList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employee': $o->employee[] = $this->load_Employee($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Image(\XMLReader $in) : Image {
		$n = $in->name;
		$o = new Image();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'imageId': $o->imageId = $this->load_int_property($in); break;
						case 'imageName': $o->imageName = $this->load_string_property($in); break;
						case 'imageHash': $o->imageHash = $this->load_string_property($in); break;
						case 'imagePath': $o->imagePath = $this->load_string_property($in); break;
						case 'imageUrl': $o->imageUrl = $this->load_string_property($in); break;
						case 'imageData': $o->imageData = $this->load_string_property($in); break;
						case 'imageDataResult': $o->imageDataResult = $this->load_string_property($in); break;
						case 'thumbHash': $o->thumbHash = $this->load_string_property($in); break;
						case 'thumbPath': $o->thumbPath = $this->load_string_property($in); break;
						case 'thumbUrl': $o->thumbUrl = $this->load_string_property($in); break;
						case 'thumbData': $o->thumbData = $this->load_string_property($in); break;
						case 'thumbDataResult': $o->thumbDataResult = $this->load_string_property($in); break;
						case 'imageWidth': $o->imageWidth = $this->load_int_property($in); break;
						case 'imageHeight': $o->imageHeight = $this->load_int_property($in); break;
						case 'thumbWidth': $o->thumbWidth = $this->load_int_property($in); break;
						case 'thumbHeight': $o->thumbHeight = $this->load_int_property($in); break;
						case 'createdTimestamp': $o->createdTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'changedTimestamp': $o->changedTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ImageList(\XMLReader $in) : ImageList {
		$n = $in->name;
		$o = new ImageList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'image': $o->image[] = $this->load_Image($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RelationArticleDiscount(\XMLReader $in) : RelationArticleDiscount {
		$n = $in->name;
		$o = new RelationArticleDiscount();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationArticleDiscountId': $o->relationArticleDiscountId = $this->load_int_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'articleDiscountGroupNumber': $o->articleDiscountGroupNumber = $this->load_int_property($in); break;
						case 'minimumAmount': $minimumAmount = $this->load_int_property($in); break;
						case 'minimumAmountDecimalPlaces': $minimumAmountDecimalPlaces = $this->load_int_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_int_property($in); break;
						case 'priceIncl': $priceIncl = $this->load_int_property($in); break;
						case 'priceExcl': $priceExcl = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->minimumAmount = isset($minimumAmount) ? BigDecimal::ofUnscaledValue($minimumAmount, $minimumAmountDecimalPlaces ?? 2) : null;
		$o->priceIncl = isset($priceIncl) ? BigDecimal::ofUnscaledValue($priceIncl, 2) : null;
		$o->priceExcl = isset($priceExcl) ? BigDecimal::ofUnscaledValue($priceExcl, 2) : null;
		return $o;
	}
	private function load_RelationArticleDiscountList(\XMLReader $in) : RelationArticleDiscountList {
		$n = $in->name;
		$o = new RelationArticleDiscountList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationArticleDiscount': $o->relationArticleDiscount[] = $this->load_RelationArticleDiscount($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VatGroup(\XMLReader $in) : VatGroup {
		$n = $in->name;
		$o = new VatGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'countryCode': $o->countryCode = $this->load_int_property($in); break;
						case 'countryIso3': $o->countryIso3 = $this->load_string_property($in); break;
						case 'vatCode': $o->vatCode = $this->load_int_property($in); break;
						case 'vatPercentage': $o->vatPercentage = $this->load_int_property($in); break;
						case 'exclAmount': $exclAmount = $this->load_int_property($in); break;
						case 'vatAmount': $vatAmount = $this->load_int_property($in); break;
						case 'accountNumber': $o->accountNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->exclAmount = isset($exclAmount) ? BigDecimal::ofUnscaledValue($exclAmount, 2) : null;
		$o->vatAmount = isset($vatAmount) ? BigDecimal::ofUnscaledValue($vatAmount, 2) : null;
		return $o;
	}
	private function load_VatGroupList(\XMLReader $in) : VatGroupList {
		$n = $in->name;
		$o = new VatGroupList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'vatGroup': $o->vatGroup[] = $this->load_VatGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RelationList(\XMLReader $in) : RelationList {
		$n = $in->name;
		$o = new RelationList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relation': $o->relation[] = $this->load_Relation($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Relation(\XMLReader $in) : Relation {
		$n = $in->name;
		$o = new Relation();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'extRelationId': $o->extRelationId = $this->load_string_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'createTimestamp': $o->createTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'changeTimestamp': $o->changeTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'active': $o->active = $this->load_bool_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'address': $o->address = $this->load_string_property($in); break;
						case 'zipcode': $o->zipcode = $this->load_string_property($in); break;
						case 'city': $o->city = $this->load_string_property($in); break;
						case 'country': $o->country = $this->load_string_property($in); break;
						case 'deliveryAddress': $o->deliveryAddress = $this->load_string_property($in); break;
						case 'deliveryZipcode': $o->deliveryZipcode = $this->load_string_property($in); break;
						case 'deliveryCity': $o->deliveryCity = $this->load_string_property($in); break;
						case 'deliveryCountry': $o->deliveryCountry = $this->load_string_property($in); break;
						case 'contact': $o->contact = $this->load_string_property($in); break;
						case 'telephone': $o->telephone = $this->load_string_property($in); break;
						case 'mobile': $o->mobile = $this->load_string_property($in); break;
						case 'email': $o->email = $this->load_string_property($in); break;
						case 'website': $o->website = $this->load_string_property($in); break;
						case 'birthDate': $o->birthDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'relationCode': $o->relationCode = $this->load_string_property($in); break;
						case 'points': $o->points = $this->load_int_property($in); break;
						case 'balance': $o->balance = $this->load_int_property($in); break;
						case 'priceGroupNumber': $o->priceGroupNumber = $this->load_int_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_int_property($in); break;
						case 'categoryId': $o->categoryId = $this->load_int_property($in); break;
						case 'categoryIds': $o->categoryIds = ($this->load_CategoryIdSet($in))->category; break;
						case 'cardNumber': $o->cardNumber = $this->load_string_property($in); break;
						case 'bankAccountNumber': $o->bankAccountNumber = $this->load_string_property($in); break;
						case 'creditLimit': $o->creditLimit = $this->load_int_property($in); break;
						case 'paymentWithinDays': $o->paymentWithinDays = $this->load_int_property($in); break;
						case 'vatNumber': $o->vatNumber = $this->load_string_property($in); break;
						case 'commerceNumber': $o->commerceNumber = $this->load_string_property($in); break;
						case 'extraText': $o->extraText = $this->load_string_property($in); break;
						case 'defaultVatMethod': $o->defaultVatMethod = $this->load_string_property($in); break;
						case 'neverPrintOrEmailReceipt': $o->neverPrintOrEmailReceipt = $this->load_bool_property($in); break;
						case 'alwaysPrintReceipt': $o->alwaysPrintReceipt = $this->load_bool_property($in); break;
						case 'alwaysPrintLargeFormatReceipt': $o->alwaysPrintLargeFormatReceipt = $this->load_bool_property($in); break;
						case 'alwaysEmailReceipt': $o->alwaysEmailReceipt = $this->load_bool_property($in); break;
						case 'condenseCombinedInvoice': $o->condenseCombinedInvoice = $this->load_bool_property($in); break;
						case 'imageList': $o->imageList = ($this->load_ImageList($in))->image; break;
						case 'customFieldList': $o->customFieldList = ($this->load_CustomFieldList($in))->customField; break;
						case 'contactList': $o->contactList = ($this->load_RelationList($in))->relation; break;
						case 'relationArticleDiscountList': $o->relationArticleDiscountList = ($this->load_RelationArticleDiscountList($in))->relationArticleDiscount; break;
						case 'companyName': $o->companyName = $this->load_string_property($in); break;
						case 'branchesNonPurchasable': $o->branchesNonPurchasable[] = $this->load_int_property($in); break;
						case 'cardNumbers': $o->cardNumbers[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Colour(\XMLReader $in) : Colour {
		$n = $in->name;
		$o = new Colour();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'red': $o->red = $this->load_int_property($in); break;
						case 'green': $o->green = $this->load_int_property($in); break;
						case 'blue': $o->blue = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_EmployeeIdentifier(\XMLReader $in) : EmployeeIdentifier {
		$n = $in->name;
		$o = new EmployeeIdentifier();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RelationIdentifier(\XMLReader $in) : RelationIdentifier {
		$n = $in->name;
		$o = new RelationIdentifier();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TableIdentifier(\XMLReader $in) : TableIdentifier {
		$n = $in->name;
		$o = new TableIdentifier();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WorkplaceIdentifier(\XMLReader $in) : WorkplaceIdentifier {
		$n = $in->name;
		$o = new WorkplaceIdentifier();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WorkplaceIdentifierSet(\XMLReader $in) : WorkplaceIdentifierSet {
		$n = $in->name;
		$o = new WorkplaceIdentifierSet();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'workplaceIdentifier': $o->workplaceIdentifier[] = $this->load_WorkplaceIdentifier($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BranchAccountNumber(\XMLReader $in) : BranchAccountNumber {
		$n = $in->name;
		$o = new BranchAccountNumber();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'accountNumber': $o->accountNumber = $this->load_int_property($in); break;
						case 'purchaseAccountNumber': $o->purchaseAccountNumber = $this->load_int_property($in); break;
						case 'stockAccountNumber': $o->stockAccountNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BranchAccountNumberList(\XMLReader $in) : BranchAccountNumberList {
		$n = $in->name;
		$o = new BranchAccountNumberList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchAccountNumber': $o->branchAccountNumber[] = $this->load_BranchAccountNumber($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GiftcardType(\XMLReader $in) : GiftcardType {
		$n = $in->name;
		$o = new GiftcardType();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardTypeId': $o->cardTypeId = $this->load_string_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'sequenceNumber': $o->sequenceNumber = $this->load_int_property($in); break;
						case 'isDeleted': $o->isDeleted = $this->load_bool_property($in); break;
						case 'turnoverGroupNumber': $o->turnoverGroupNumber = $this->load_int_property($in); break;
						case 'paymentMethodId': $o->paymentMethodId = $this->load_string_property($in); break;
						case 'monthsValid': $o->monthsValid = $this->load_int_property($in); break;
						case 'nonStandardValue': $o->nonStandardValue = $this->load_bool_property($in); break;
						case 'issuable': $o->issuable = $this->load_bool_property($in); break;
						case 'reloadable': $o->reloadable = $this->load_bool_property($in); break;
						case 'redeemable': $o->redeemable = $this->load_bool_property($in); break;
						case 'restitutable': $o->restitutable = $this->load_bool_property($in); break;
						case 'personalizable': $o->personalizable = $this->load_bool_property($in); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'availableValues': $o->availableValues[] = $this->load_int_property($in); break;
						case 'maximumBalance': $o->maximumBalance = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BpeConfiguration(\XMLReader $in) : BpeConfiguration {
		$n = $in->name;
		$o = new BpeConfiguration();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeBudgetsConfigured': $o->employeeBudgetsConfigured = $this->load_bool_property($in); break;
						case 'budgetPeriod': $o->budgetPeriod = $this->load_string_property($in); break;
						case 'budgetExceededAction': $o->budgetExceededAction = $this->load_string_property($in); break;
						case 'budgetDefaultLimit': $o->budgetDefaultLimit = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_EftReceiptLine(\XMLReader $in) : EftReceiptLine {
		$n = $in->name;
		$o = new EftReceiptLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'doubleHeight': $o->doubleHeight = $this->load_bool_property($in); break;
						case 'doubleWidth': $o->doubleWidth = $this->load_bool_property($in); break;
						case 'line': $o->line = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_EftReceipt(\XMLReader $in) : EftReceipt {
		$n = $in->name;
		$o = new EftReceipt();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'line': $o->line[] = $this->load_EftReceiptLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_EftTransactionDetails(\XMLReader $in) : EftTransactionDetails {
		$n = $in->name;
		$o = new EftTransactionDetails();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'eftTransactionId': $o->eftTransactionId = $this->load_string_property($in); break;
						case 'txid': $o->txid = $this->load_int_property($in); break;
						case 'amountCents': $amountCents = $this->load_int_property($in); break;
						case 'timestampPos': $o->timestampPos = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'timestampTerminal': $o->timestampTerminal = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'terminalId': $o->terminalId = $this->load_string_property($in); break;
						case 'transactionId': $o->transactionId = $this->load_string_property($in); break;
						case 'cardNumber': $o->cardNumber = $this->load_string_property($in); break;
						case 'customerReceipt': $o->customerReceipt = ($this->load_EftReceipt($in))->line; break;
						case 'customerReceiptCopies': $o->customerReceiptCopies = $this->load_int_property($in); break;
						case 'merchantReceipt': $o->merchantReceipt = ($this->load_EftReceipt($in))->line; break;
						case 'merchantReceiptCopies': $o->merchantReceiptCopies = $this->load_int_property($in); break;
						case 'requireCustomerSignature': $o->requireCustomerSignature = $this->load_bool_property($in); break;
						case 'requireMerchantSignature': $o->requireMerchantSignature = $this->load_bool_property($in); break;
						case 'requireIdentification': $o->requireIdentification = $this->load_bool_property($in); break;
						case 'eJournal': $o->eJournal = $this->load_string_property($in); break;
						case 'eftDriver': $o->eftDriver = $this->load_string_property($in); break;
						case 'state': $o->state = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'authorizingEmployeeNumber': $o->authorizingEmployeeNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->amountCents = isset($amountCents) ? BigDecimal::ofUnscaledValue($amountCents, 2) : null;
		return $o;
	}
	private function load_ExternalPaymentReceiptText(\XMLReader $in) : ExternalPaymentReceiptText {
		$n = $in->name;
		$o = new ExternalPaymentReceiptText();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'requiresSignature': $o->requiresSignature = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ExternalPaymentTransactionDetails(\XMLReader $in) : ExternalPaymentTransactionDetails {
		$n = $in->name;
		$o = new ExternalPaymentTransactionDetails();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'externalPaymentId': $o->externalPaymentId = $this->load_string_property($in); break;
						case 'amount': $amount = $this->load_int_property($in); break;
						case 'externalTransactionReference': $o->externalTransactionReference = $this->load_string_property($in); break;
						case 'receiptTexts': $o->receiptTexts[] = $this->load_ExternalPaymentReceiptText($in); break;
						case 'cardType': $o->cardType = $this->load_string_property($in); break;
						case 'terminalId': $o->terminalId = $this->load_string_property($in); break;
						case 'externalMethod': $o->externalMethod = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->amount = isset($amount) ? BigDecimal::ofUnscaledValue($amount, 2) : null;
		return $o;
	}
	private function load_Payment(\XMLReader $in) : Payment {
		$n = $in->name;
		$o = new Payment();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'paymentId': $o->paymentId = $this->load_string_property($in); break;
						case 'financialDate': $o->financialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeName': $o->employeeName = $this->load_string_property($in); break;
						case 'method': $o->method = $this->load_string_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'amount': $amount = $this->load_int_property($in); break;
						case 'paymentMethodType': $o->paymentMethodType = $this->load_string_property($in); break;
						case 'accountNumber': $o->accountNumber = $this->load_int_property($in); break;
						case 'branchAccountNumberList': $o->branchAccountNumberList = ($this->load_BranchAccountNumberList($in))->branchAccountNumber; break;
						case 'eftTransactionDetails': $o->eftTransactionDetails = $this->load_EftTransactionDetails($in); break;
						case 'giftcardNumber': $o->giftcardNumber = $this->load_string_property($in); break;
						case 'externalPaymentId': $o->externalPaymentId = $this->load_string_property($in); break;
						case 'externalPaymentTransactionDetails': $o->externalPaymentTransactionDetails = $this->load_ExternalPaymentTransactionDetails($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->amount = isset($amount) ? BigDecimal::ofUnscaledValue($amount, 2) : null;
		return $o;
	}
	private function load_PaymentList(\XMLReader $in) : PaymentList {
		$n = $in->name;
		$o = new PaymentList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'payment': $o->payment[] = $this->load_Payment($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PaymentMethod(\XMLReader $in) : PaymentMethod {
		$n = $in->name;
		$o = new PaymentMethod();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'method': $o->method = $this->load_string_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'buttonText': $o->buttonText = $this->load_string_property($in); break;
						case 'allowNegativeAmount': $o->allowNegativeAmount = $this->load_bool_property($in); break;
						case 'active': $o->active = $this->load_bool_property($in); break;
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'accountNumber': $o->accountNumber = $this->load_int_property($in); break;
						case 'branchAccountNumberList': $o->branchAccountNumberList = ($this->load_BranchAccountNumberList($in))->branchAccountNumber; break;
						case 'depositPaymentMethod': $o->depositPaymentMethod = $this->load_string_property($in); break;
						case 'hasExternalPaymentWebhook': $o->hasExternalPaymentWebhook = $this->load_bool_property($in); break;
						case 'bpeConfiguration': $o->bpeConfiguration = $this->load_BpeConfiguration($in); break;
						case 'giftcardType': $o->giftcardType = $this->load_GiftcardType($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PaymentMethodList(\XMLReader $in) : PaymentMethodList {
		$n = $in->name;
		$o = new PaymentMethodList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'paymentMethod': $o->paymentMethod[] = $this->load_PaymentMethod($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalePromotionLineData(\XMLReader $in) : SalePromotionLineData {
		$n = $in->name;
		$o = new SalePromotionLineData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'salePromotionId': $o->salePromotionId = $this->load_string_property($in); break;
						case 'salePromotionLineId': $o->salePromotionLineId = $this->load_string_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'setNumber': $o->setNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalePromotionLineDataInput(\XMLReader $in) : SalePromotionLineDataInput {
		$n = $in->name;
		$o = new SalePromotionLineDataInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'salePromotionLineId': $o->salePromotionLineId = $this->load_string_property($in); break;
						case 'setNumber': $o->setNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TerminalId(\XMLReader $in) : TerminalId {
		$n = $in->name;
		$o = new TerminalId();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'terminalNumber': $o->terminalNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Terminal(\XMLReader $in) : Terminal {
		$n = $in->name;
		$o = new Terminal();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'branchName': $o->branchName = $this->load_string_property($in); break;
						case 'terminalNumber': $o->terminalNumber = $this->load_int_property($in); break;
						case 'terminalName': $o->terminalName = $this->load_string_property($in); break;
						case 'terminalStatus': $o->terminalStatus = $this->load_string_property($in); break;
						case 'uniqueDeviceIdentifier': $o->uniqueDeviceIdentifier = $this->load_string_property($in); break;
						case 'gksProductionNumber': $o->gksProductionNumber = $this->load_string_property($in); break;
						case 'hardwareIdentifier': $o->hardwareIdentifier = $this->load_string_property($in); break;
						case 'terminalSoftwareName': $o->terminalSoftwareName = $this->load_string_property($in); break;
						case 'terminalSoftwareVersion': $o->terminalSoftwareVersion = $this->load_string_property($in); break;
						case 'instanceId': $o->instanceId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_IdempotentReq(\XMLReader $in) : IdempotentReq {
		$n = $in->name;
		$o = new IdempotentReq();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_IdempotentResp(\XMLReader $in) : IdempotentResp {
		$n = $in->name;
		$o = new IdempotentResp();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookExternalDiscount(\XMLReader $in) : WebhookExternalDiscount {
		$n = $in->name;
		$o = new WebhookExternalDiscount();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'discountId': $o->discountId = $this->load_string_property($in); break;
						case 'discountDescription': $o->discountDescription = $this->load_string_property($in); break;
						case 'webhookConsumerId': $o->webhookConsumerId = $this->load_string_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_int_property($in); break;
						case 'discountAmount': $o->discountAmount = $this->load_int_property($in); break;
						case 'discountType': $o->discountType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BranchFilter(\XMLReader $in) : BranchFilter {
		$n = $in->name;
		$o = new BranchFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_AuthorizationsList(\XMLReader $in) : AuthorizationsList {
		$n = $in->name;
		$o = new AuthorizationsList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'authorizations': $o->authorizations[] = $this->load_Authorization($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Authorization(\XMLReader $in) : Authorization {
		$n = $in->name;
		$o = new Authorization();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'authorization': $o->authorization = $this->load_string_property($in); break;
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'subAuthorizations': $o->subAuthorizations = ($this->load_AuthorizationsList($in))->authorizations; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BranchGroupFilter(\XMLReader $in) : BranchGroupFilter {
		$n = $in->name;
		$o = new BranchGroupFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchGroups': $o->branchGroups[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OwnerLabelFilter(\XMLReader $in) : OwnerLabelFilter {
		$n = $in->name;
		$o = new OwnerLabelFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'ownerLabels': $o->ownerLabels[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_IdList(\XMLReader $in) : IdList {
		$n = $in->name;
		$o = new IdList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_IdSet(\XMLReader $in) : IdSet {
		$n = $in->name;
		$o = new IdSet();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Order(\XMLReader $in) : Order {
		$n = $in->name;
		$o = new Order();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'extOrderId': $o->extOrderId = $this->load_string_property($in); break;
						case 'invoiceIds': $o->invoiceIds = ($this->load_IdList($in))->id; break;
						case 'extInvoiceIds': $o->extInvoiceIds = ($this->load_IdList($in))->id; break;
						case 'transactionString': $o->transactionString = $this->load_string_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'orderType': $o->orderType = $this->load_string_property($in); break;
						case 'entryBranchNumber': $o->entryBranchNumber = $this->load_int_property($in); break;
						case 'entryExtBranchId': $o->entryExtBranchId = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeName': $o->employeeName = $this->load_string_property($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
						case 'relationCategoryId': $o->relationCategoryId = $this->load_int_property($in); break;
						case 'relationBankAccountNumber': $o->relationBankAccountNumber = $this->load_string_property($in); break;
						case 'relationVatNumber': $o->relationVatNumber = $this->load_string_property($in); break;
						case 'deliveryAddress': $o->deliveryAddress = $this->load_Address($in); break;
						case 'invoiceAddress': $o->invoiceAddress = $this->load_Address($in); break;
						case 'financialDate': $o->financialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'financialBranchNumber': $o->financialBranchNumber = $this->load_int_property($in); break;
						case 'financialExtBranchId': $o->financialExtBranchId = $this->load_string_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'vatMethod': $o->vatMethod = $this->load_string_property($in); break;
						case 'vatGroupList': $o->vatGroupList = ($this->load_VatGroupList($in))->vatGroup; break;
						case 'deliveryMethod': $o->deliveryMethod = $this->load_string_property($in); break;
						case 'deliveryDate': $o->deliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'deliveryPeriodBegin': $o->deliveryPeriodBegin = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'deliveryPeriodEnd': $o->deliveryPeriodEnd = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'paymentMethod': $o->paymentMethod = $this->load_string_property($in); break;
						case 'changeCounter': $o->changeCounter = $this->load_int_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'prepaidAmount': $prepaidAmount = $this->load_int_property($in); break;
						case 'fullyPaid': $o->fullyPaid = $this->load_bool_property($in); break;
						case 'deliveryState': $o->deliveryState = $this->load_string_property($in); break;
						case 'cancelState': $o->cancelState = $this->load_string_property($in); break;
						case 'completeState': $o->completeState = $this->load_string_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
						case 'tableDescription': $o->tableDescription = $this->load_string_property($in); break;
						case 'numberOfGuests': $o->numberOfGuests = $this->load_int_property($in); break;
						case 'orderNumber': $o->orderNumber = $this->load_YearNumber($in); break;
						case 'branchOrderNumber': $o->branchOrderNumber = $this->load_WorkplaceYearNumber($in); break;
						case 'orderBarcode': $o->orderBarcode = $this->load_string_property($in); break;
						case 'orderCategoryNumber': $o->orderCategoryNumber = $this->load_int_property($in); break;
						case 'orderCategoryDescription': $o->orderCategoryDescription = $this->load_string_property($in); break;
						case 'onDeliveryUrl': $o->onDeliveryUrl = $this->load_string_property($in); break;
						case 'onInvoiceUrl': $o->onInvoiceUrl = $this->load_string_property($in); break;
						case 'lineList': $o->lineList = ($this->load_LineList($in))->line; break;
						case 'paymentList': $o->paymentList = ($this->load_PaymentList($in))->payment; break;
						case 'vatChange': $o->vatChange = $this->load_string_property($in); break;
						case 'vatCountryCode': $o->vatCountryCode = $this->load_int_property($in); break;
						case 'vatCountryIso3': $o->vatCountryIso3 = $this->load_string_property($in); break;
						case 'webhookSessionData': $o->webhookSessionData = $this->load_WebhookSessionData($in); break;
						case 'cateringOrderNumber': $o->cateringOrderNumber = $this->load_YearNumber($in); break;
						case 'invoiceNumbers': $o->invoiceNumbers = ($this->load_YearNumberList($in))->yearNumber; break;
						case 'packingSlipIds': $o->packingSlipIds = ($this->load_IdList($in))->id; break;
						case 'packingSlipNumbers': $o->packingSlipNumbers = ($this->load_YearNumberList($in))->yearNumber; break;
						case 'proposalId': $o->proposalId = $this->load_string_property($in); break;
						case 'extProposalId': $o->extProposalId = $this->load_string_property($in); break;
						case 'proposalNumber': $o->proposalNumber = $this->load_YearNumber($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		$o->prepaidAmount = isset($prepaidAmount) ? BigDecimal::ofUnscaledValue($prepaidAmount, 2) : null;
		return $o;
	}
	private function load_OrderList(\XMLReader $in) : OrderList {
		$n = $in->name;
		$o = new OrderList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'order': $o->order[] = $this->load_Order($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OrderInput(\XMLReader $in) : OrderInput {
		$n = $in->name;
		$o = new OrderInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'extOrderId': $o->extOrderId = $this->load_string_property($in); break;
						case 'orderType': $o->orderType = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'deliveryAddress': $o->deliveryAddress = $this->load_Address($in); break;
						case 'invoiceAddress': $o->invoiceAddress = $this->load_Address($in); break;
						case 'financialBranchNumber': $o->financialBranchNumber = $this->load_int_property($in); break;
						case 'entryBranchNumber': $o->entryBranchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'vatMethod': $o->vatMethod = $this->load_string_property($in); break;
						case 'deliveryMethod': $o->deliveryMethod = $this->load_string_property($in); break;
						case 'deliveryDate': $o->deliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'deliveryPeriodBegin': $o->deliveryPeriodBegin = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'deliveryPeriodEnd': $o->deliveryPeriodEnd = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'changeCounter': $o->changeCounter = $this->load_int_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'orderCategoryNumber': $o->orderCategoryNumber = $this->load_int_property($in); break;
						case 'onDeliveryUrl': $o->onDeliveryUrl = $this->load_string_property($in); break;
						case 'onInvoiceUrl': $o->onInvoiceUrl = $this->load_string_property($in); break;
						case 'lineList': $o->lineList = ($this->load_LineInputList($in))->line; break;
						case 'vatChange': $o->vatChange = $this->load_string_property($in); break;
						case 'vatCountryCode': $o->vatCountryCode = $this->load_int_property($in); break;
						case 'vatCountryIso3': $o->vatCountryIso3 = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OrderTypeList(\XMLReader $in) : OrderTypeList {
		$n = $in->name;
		$o = new OrderTypeList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderType': $o->orderType[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_YearNumber(\XMLReader $in) : YearNumber {
		$n = $in->name;
		$o = new YearNumber();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'year': $o->year = $this->load_int_property($in); break;
						case 'number': $o->number = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_YearNumberList(\XMLReader $in) : YearNumberList {
		$n = $in->name;
		$o = new YearNumberList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'yearNumber': $o->yearNumber[] = $this->load_YearNumber($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_YearNumberPart(\XMLReader $in) : YearNumberPart {
		$n = $in->name;
		$o = new YearNumberPart();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'year': $o->year = $this->load_int_property($in); break;
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'part': $o->part = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Address(\XMLReader $in) : Address {
		$n = $in->name;
		$o = new Address();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'addressId': $o->addressId = $this->load_string_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'contact': $o->contact = $this->load_string_property($in); break;
						case 'address': $o->address = $this->load_string_property($in); break;
						case 'zipcode': $o->zipcode = $this->load_string_property($in); break;
						case 'city': $o->city = $this->load_string_property($in); break;
						case 'country': $o->country = $this->load_string_property($in); break;
						case 'label': $o->label = $this->load_string_property($in); break;
						case 'companyName': $o->companyName = $this->load_string_property($in); break;
						case 'supplierInformation': $o->supplierInformation = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ContractFrequencyList(\XMLReader $in) : ContractFrequencyList {
		$n = $in->name;
		$o = new ContractFrequencyList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'contractFrequency': $o->contractFrequency[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalesLineContractLine(\XMLReader $in) : SalesLineContractLine {
		$n = $in->name;
		$o = new SalesLineContractLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineNumber': $o->lineNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'quantity': $o->quantity = $this->load_BigDecimal_property($in); break;
						case 'priceIncl': $o->priceIncl = $this->load_BigDecimal_property($in); break;
						case 'priceExcl': $o->priceExcl = $this->load_BigDecimal_property($in); break;
						case 'amountIncl': $o->amountIncl = $this->load_BigDecimal_property($in); break;
						case 'amountExcl': $o->amountExcl = $this->load_BigDecimal_property($in); break;
						case 'frequency': $o->frequency = $this->load_string_property($in); break;
						case 'startDate': $o->startDate = $this->load_Date_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalesLineContractLineList(\XMLReader $in) : SalesLineContractLineList {
		$n = $in->name;
		$o = new SalesLineContractLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'contractLine': $o->contractLine[] = $this->load_SalesLineContractLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookLineData(\XMLReader $in) : WebhookLineData {
		$n = $in->name;
		$o = new WebhookLineData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'webhookLineId': $o->webhookLineId = $this->load_string_property($in); break;
						case 'webhookConsumerId': $o->webhookConsumerId = $this->load_string_property($in); break;
						case 'webhookExternalDiscount': $o->webhookExternalDiscount = $this->load_WebhookExternalDiscount($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LineList(\XMLReader $in) : LineList {
		$n = $in->name;
		$o = new LineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'line': $o->line[] = $this->load_Line($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LineData(\XMLReader $in) : LineData {
		$n = $in->name;
		$o = new LineData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'quantity': $quantity = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
						case 'deliveredQuantity': $deliveredQuantity = $this->load_int_property($in); break;
						case 'deliveredDecimalPlaces': $deliveredDecimalPlaces = $this->load_int_property($in); break;
						case 'cancelledQuantity': $cancelledQuantity = $this->load_int_property($in); break;
						case 'cancelledDecimalPlaces': $cancelledDecimalPlaces = $this->load_int_property($in); break;
						case 'price': $price = $this->load_int_property($in); break;
						case 'priceExcl': $priceExcl = $this->load_int_property($in); break;
						case 'originalPrice': $originalPrice = $this->load_int_property($in); break;
						case 'originalPriceExcl': $originalPriceExcl = $this->load_int_property($in); break;
						case 'purchasePrice': $purchasePrice = $this->load_int_property($in); break;
						case 'averagePurchasePrice': $o->averagePurchasePrice = $this->load_BigDecimal_property($in); break;
						case 'exchangeRateBuyPrice': $exchangeRateBuyPrice = $this->load_int_property($in); break;
						case 'exchangeRateBuyPriceDecimalPlaces': $exchangeRateBuyPriceDecimalPlaces = $this->load_int_property($in); break;
						case 'exchangeRateSellPrice': $exchangeRateSellPrice = $this->load_int_property($in); break;
						case 'exchangeRateSellPriceDecimalPlaces': $exchangeRateSellPriceDecimalPlaces = $this->load_int_property($in); break;
						case 'exchangeRateMultiplier': $o->exchangeRateMultiplier = $this->load_int_property($in); break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_int_property($in); break;
						case 'turnoverGroupName': $o->turnoverGroupName = $this->load_string_property($in); break;
						case 'turnoverGroupType': $o->turnoverGroupType = $this->load_string_property($in); break;
						case 'turnoverGroupAccountNumber': $o->turnoverGroupAccountNumber = $this->load_int_property($in); break;
						case 'vatCode': $o->vatCode = $this->load_int_property($in); break;
						case 'vatPercentage': $o->vatPercentage = $this->load_int_property($in); break;
						case 'pricePerQuantity': $o->pricePerQuantity = $this->load_int_property($in); break;
						case 'siUnit': $o->siUnit = $this->load_string_property($in); break;
						case 'discountType': $o->discountType = $this->load_string_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_int_property($in); break;
						case 'discountAmount': $discountAmount = $this->load_int_property($in); break;
						case 'discountAmountExcl': $discountAmountExcl = $this->load_int_property($in); break;
						case 'bpeId': $o->bpeId = $this->load_string_property($in); break;
						case 'bpeDescription': $o->bpeDescription = $this->load_string_property($in); break;
						case 'bpeAmount': $bpeAmount = $this->load_int_property($in); break;
						case 'bpeAmountExcl': $bpeAmountExcl = $this->load_int_property($in); break;
						case 'menuId': $o->menuId = $this->load_string_property($in); break;
						case 'menuLinesId': $o->menuLinesId = $this->load_string_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'priceType': $o->priceType = $this->load_string_property($in); break;
						case 'purchaseAccountNumber': $o->purchaseAccountNumber = $this->load_int_property($in); break;
						case 'stockAccountNumber': $o->stockAccountNumber = $this->load_int_property($in); break;
						case 'bpeAccordationEmployeeNumber': $o->bpeAccordationEmployeeNumber = $this->load_int_property($in); break;
						case 'redeemedVoucherIssuanceId': $o->redeemedVoucherIssuanceId = $this->load_string_property($in); break;
						case 'pendingVoucherIssuanceStartTs': $o->pendingVoucherIssuanceStartTs = $this->load_DateTime_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->quantity = isset($quantity) ? BigDecimal::ofUnscaledValue($quantity, $decimalPlaces ?? 2) : null;
		$o->deliveredQuantity = isset($deliveredQuantity) ? BigDecimal::ofUnscaledValue($deliveredQuantity, $deliveredDecimalPlaces ?? 2) : null;
		$o->cancelledQuantity = isset($cancelledQuantity) ? BigDecimal::ofUnscaledValue($cancelledQuantity, $cancelledDecimalPlaces ?? 2) : null;
		$o->price = isset($price) ? BigDecimal::ofUnscaledValue($price, 2) : null;
		$o->priceExcl = isset($priceExcl) ? BigDecimal::ofUnscaledValue($priceExcl, 2) : null;
		$o->originalPrice = isset($originalPrice) ? BigDecimal::ofUnscaledValue($originalPrice, 2) : null;
		$o->originalPriceExcl = isset($originalPriceExcl) ? BigDecimal::ofUnscaledValue($originalPriceExcl, 2) : null;
		$o->purchasePrice = isset($purchasePrice) ? BigDecimal::ofUnscaledValue($purchasePrice, 2) : null;
		$o->exchangeRateBuyPrice = isset($exchangeRateBuyPrice) ? BigDecimal::ofUnscaledValue($exchangeRateBuyPrice, $exchangeRateBuyPriceDecimalPlaces ?? 2) : null;
		$o->exchangeRateSellPrice = isset($exchangeRateSellPrice) ? BigDecimal::ofUnscaledValue($exchangeRateSellPrice, $exchangeRateSellPriceDecimalPlaces ?? 2) : null;
		$o->discountAmount = isset($discountAmount) ? BigDecimal::ofUnscaledValue($discountAmount, 2) : null;
		$o->discountAmountExcl = isset($discountAmountExcl) ? BigDecimal::ofUnscaledValue($discountAmountExcl, 2) : null;
		$o->bpeAmount = isset($bpeAmount) ? BigDecimal::ofUnscaledValue($bpeAmount, 2) : null;
		$o->bpeAmountExcl = isset($bpeAmountExcl) ? BigDecimal::ofUnscaledValue($bpeAmountExcl, 2) : null;
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_Line(\XMLReader $in) : Line {
		$n = $in->name;
		$o = new Line();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineId': $o->lineId = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'pluNumber': $o->pluNumber = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'supplierRelationNumber': $o->supplierRelationNumber = $this->load_int_property($in); break;
						case 'supplierRelationName': $o->supplierRelationName = $this->load_string_property($in); break;
						case 'supplierArticleNumber': $o->supplierArticleNumber = $this->load_string_property($in); break;
						case 'data': $o->data = $this->load_LineData($in); break;
						case 'courseNumber': $o->courseNumber = $this->load_int_property($in); break;
						case 'menuHash': $o->menuHash = $this->load_string_property($in); break;
						case 'menuDescription': $o->menuDescription = $this->load_string_property($in); break;
						case 'menuAmount': $menuAmount = $this->load_int_property($in); break;
						case 'salePromotionData': $o->salePromotionData = $this->load_SalePromotionLineData($in); break;
						case 'webhookData': $o->webhookData = $this->load_WebhookLineData($in); break;
						case 'lineType': $o->lineType = $this->load_string_property($in); break;
						case 'preparationList': $o->preparationList = ($this->load_LineList($in))->line; break;
						case 'suppressDisposableComponent': $o->suppressDisposableComponent = $this->load_bool_property($in); break;
						case 'tempId': $o->tempId = $this->load_string_property($in); break;
						case 'retourReason': $o->retourReason = $this->load_string_property($in); break;
						case 'sequenceNumber': $o->sequenceNumber = $this->load_int_property($in); break;
						case 'contractLines': $o->contractLines = ($this->load_SalesLineContractLineList($in))->contractLine; break;
						case 'uncondensedLines': $o->uncondensedLines = ($this->load_LineList($in))->line; break;
						case 'tempLineId': $o->tempLineId = $this->load_string_property($in); break;
						case 'subLineType': $o->subLineType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->menuAmount = isset($menuAmount) ? BigDecimal::ofUnscaledValue($menuAmount, 2) : null;
		return $o;
	}
	private function load_LineDataInput(\XMLReader $in) : LineDataInput {
		$n = $in->name;
		$o = new LineDataInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'quantity': $o->quantity = $this->load_BigDecimal_property($in); break;
						case 'price': $o->price = $this->load_BigDecimal_property($in); break;
						case 'priceExcl': $o->priceExcl = $this->load_BigDecimal_property($in); break;
						case 'originalPrice': $o->originalPrice = $this->load_BigDecimal_property($in); break;
						case 'purchasePrice': $o->purchasePrice = $this->load_BigDecimal_property($in); break;
						case 'vatCode': $o->vatCode = $this->load_int_property($in); break;
						case 'discountType': $o->discountType = $this->load_string_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_BigDecimal_property($in); break;
						case 'discountAmount': $o->discountAmount = $this->load_BigDecimal_property($in); break;
						case 'discountAmountExcl': $o->discountAmountExcl = $this->load_BigDecimal_property($in); break;
						case 'bpeId': $o->bpeId = $this->load_string_property($in); break;
						case 'menuId': $o->menuId = $this->load_string_property($in); break;
						case 'menuLinesId': $o->menuLinesId = $this->load_string_property($in); break;
						case 'bpeAccordationEmployeeNumber': $o->bpeAccordationEmployeeNumber = $this->load_int_property($in); break;
						case 'redeemedVoucherIssuanceId': $o->redeemedVoucherIssuanceId = $this->load_string_property($in); break;
						case 'pendingVoucherIssuanceStartTs': $o->pendingVoucherIssuanceStartTs = $this->load_DateTime_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LineInputList(\XMLReader $in) : LineInputList {
		$n = $in->name;
		$o = new LineInputList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'line': $o->line[] = $this->load_LineInput($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LineInput(\XMLReader $in) : LineInput {
		$n = $in->name;
		$o = new LineInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineId': $o->lineId = $this->load_string_property($in); break;
						case 'tempLineId': $o->tempLineId = $this->load_string_property($in); break;
						case 'lineType': $o->lineType = $this->load_string_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'pluNumber': $o->pluNumber = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'data': $o->data = $this->load_LineDataInput($in); break;
						case 'preparationList': $o->preparationList = ($this->load_LineInputList($in))->line; break;
						case 'contractLines': $o->contractLines = ($this->load_SalesLineContractLineList($in))->contractLine; break;
						case 'suppressDisposableComponent': $o->suppressDisposableComponent = $this->load_bool_property($in); break;
						case 'salePromotionData': $o->salePromotionData = $this->load_SalePromotionLineDataInput($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Answer(\XMLReader $in) : Answer {
		$n = $in->name;
		$o = new Answer();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'questionId': $o->questionId = $this->load_int_property($in); break;
						case 'questionText': $o->questionText = $this->load_string_property($in); break;
						case 'answerText': $o->answerText = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_AnswerList(\XMLReader $in) : AnswerList {
		$n = $in->name;
		$o = new AnswerList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'answer': $o->answer[] = $this->load_Answer($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Invoice(\XMLReader $in) : Invoice {
		$n = $in->name;
		$o = new Invoice();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
						case 'extInvoiceId': $o->extInvoiceId = $this->load_string_property($in); break;
						case 'orderIds': $o->orderIds = ($this->load_IdList($in))->id; break;
						case 'extOrderIds': $o->extOrderIds = ($this->load_IdList($in))->id; break;
						case 'transactionString': $o->transactionString = $this->load_string_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'invoiceNumber': $o->invoiceNumber = $this->load_YearNumber($in); break;
						case 'invoiceBarcode': $o->invoiceBarcode = $this->load_string_property($in); break;
						case 'invoiceType': $o->invoiceType = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeName': $o->employeeName = $this->load_string_property($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
						case 'relationCategoryId': $o->relationCategoryId = $this->load_int_property($in); break;
						case 'relationBankAccountNumber': $o->relationBankAccountNumber = $this->load_string_property($in); break;
						case 'relationVatNumber': $o->relationVatNumber = $this->load_string_property($in); break;
						case 'deliveryAddress': $o->deliveryAddress = $this->load_Address($in); break;
						case 'invoiceAddress': $o->invoiceAddress = $this->load_Address($in); break;
						case 'financialDate': $o->financialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'financialBranchNumber': $o->financialBranchNumber = $this->load_int_property($in); break;
						case 'financialExtBranchId': $o->financialExtBranchId = $this->load_string_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'entryBranchNumber': $o->entryBranchNumber = $this->load_int_property($in); break;
						case 'entryExtBranchId': $o->entryExtBranchId = $this->load_string_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
						case 'dueDate': $o->dueDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'vatMethod': $o->vatMethod = $this->load_string_property($in); break;
						case 'vatGroupList': $o->vatGroupList = ($this->load_VatGroupList($in))->vatGroup; break;
						case 'changeCounter': $o->changeCounter = $this->load_int_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'paidAmount': $paidAmount = $this->load_int_property($in); break;
						case 'state': $o->state = $this->load_string_property($in); break;
						case 'finalized': $o->finalized = $this->load_bool_property($in); break;
						case 'finalizedTimestamp': $o->finalizedTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'lineList': $o->lineList = ($this->load_LineList($in))->line; break;
						case 'paymentList': $o->paymentList = ($this->load_PaymentList($in))->payment; break;
						case 'answerList': $o->answerList = ($this->load_AnswerList($in))->answer; break;
						case 'vatChange': $o->vatChange = $this->load_string_property($in); break;
						case 'vatCountryCode': $o->vatCountryCode = $this->load_int_property($in); break;
						case 'vatCountryIso3': $o->vatCountryIso3 = $this->load_string_property($in); break;
						case 'costCenter': $o->costCenter = $this->load_string_property($in); break;
						case 'creditedInvoiceId': $o->creditedInvoiceId = $this->load_string_property($in); break;
						case 'creditedReason': $o->creditedReason = $this->load_string_property($in); break;
						case 'orderCategoryNumber': $o->orderCategoryNumber = $this->load_int_property($in); break;
						case 'sessionId': $o->sessionId = $this->load_string_property($in); break;
						case 'orderNumbers': $o->orderNumbers = ($this->load_YearNumberList($in))->yearNumber; break;
						case 'packingSlipIds': $o->packingSlipIds = ($this->load_IdList($in))->id; break;
						case 'packingSlipNumbers': $o->packingSlipNumbers = ($this->load_YearNumberList($in))->yearNumber; break;
						case 'proposalIds': $o->proposalIds = ($this->load_IdList($in))->id; break;
						case 'extProposalIds': $o->extProposalIds = ($this->load_IdList($in))->id; break;
						case 'proposalNumbers': $o->proposalNumbers = ($this->load_YearNumberList($in))->yearNumber; break;
						case 'salesCategoryNumber': $o->salesCategoryNumber = $this->load_int_property($in); break;
						case 'salesCategoryDescription': $o->salesCategoryDescription = $this->load_string_property($in); break;
						case 'branchGroupNumber': $o->branchGroupNumber = $this->load_int_property($in); break;
						case 'ownerId': $o->ownerId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		$o->paidAmount = isset($paidAmount) ? BigDecimal::ofUnscaledValue($paidAmount, 2) : null;
		return $o;
	}
	private function load_InvoiceList(\XMLReader $in) : InvoiceList {
		$n = $in->name;
		$o = new InvoiceList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'invoice': $o->invoice[] = $this->load_Invoice($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_InvoiceInput(\XMLReader $in) : InvoiceInput {
		$n = $in->name;
		$o = new InvoiceInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
						case 'extInvoiceId': $o->extInvoiceId = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'financialBranchNumber': $o->financialBranchNumber = $this->load_int_property($in); break;
						case 'entryBranchNumber': $o->entryBranchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'dueDate': $o->dueDate = $this->load_Date_property($in); break;
						case 'vatMethod': $o->vatMethod = $this->load_string_property($in); break;
						case 'changeCounter': $o->changeCounter = $this->load_int_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'vatChange': $o->vatChange = $this->load_string_property($in); break;
						case 'vatCountryCode': $o->vatCountryCode = $this->load_int_property($in); break;
						case 'vatCountryIso3': $o->vatCountryIso3 = $this->load_string_property($in); break;
						case 'lineList': $o->lineList = ($this->load_LineInputList($in))->line; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Text(\XMLReader $in) : Text {
		$n = $in->name;
		$o = new Text();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'text': $o->text = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TextList(\XMLReader $in) : TextList {
		$n = $in->name;
		$o = new TextList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'text': $o->text[] = $this->load_Text($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherId(\XMLReader $in) : VoucherId {
		$n = $in->name;
		$o = new VoucherId();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'version': $o->version = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherIdList(\XMLReader $in) : VoucherIdList {
		$n = $in->name;
		$o = new VoucherIdList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherId': $o->voucherId[] = $this->load_VoucherId($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherView(\XMLReader $in) : VoucherView {
		$n = $in->name;
		$o = new VoucherView();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_VoucherId($in); break;
						case 'categoryId': $o->categoryId = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'ownerId': $o->ownerId = $this->load_string_property($in); break;
						case 'createdTs': $o->createdTs = $this->load_DateTime_property($in); break;
						case 'updatedTs': $o->updatedTs = $this->load_DateTime_property($in); break;
						case 'deletedTs': $o->deletedTs = $this->load_DateTime_property($in); break;
						case 'bookArticleNumber': $o->bookArticleNumber = $this->load_int_property($in); break;
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'apiIdent': $o->apiIdent = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherViewList(\XMLReader $in) : VoucherViewList {
		$n = $in->name;
		$o = new VoucherViewList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherView': $o->voucherView[] = $this->load_VoucherView($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherIssuanceRedeem(\XMLReader $in) : VoucherIssuanceRedeem {
		$n = $in->name;
		$o = new VoucherIssuanceRedeem();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'voucherIssuanceId': $o->voucherIssuanceId = $this->load_string_property($in); break;
						case 'salesOrderId': $o->salesOrderId = $this->load_string_property($in); break;
						case 'salesIssuanceId': $o->salesIssuanceId = $this->load_string_property($in); break;
						case 'salesTurnoverId': $o->salesTurnoverId = $this->load_string_property($in); break;
						case 'salesOrderLineId': $o->salesOrderLineId = $this->load_string_property($in); break;
						case 'salesIssuanceLineId': $o->salesIssuanceLineId = $this->load_string_property($in); break;
						case 'salesTurnoverLineId': $o->salesTurnoverLineId = $this->load_string_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'cancelled': $o->cancelled = $this->load_bool_property($in); break;
						case 'redeemTs': $o->redeemTs = $this->load_DateTime_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherIssuanceRedeemList(\XMLReader $in) : VoucherIssuanceRedeemList {
		$n = $in->name;
		$o = new VoucherIssuanceRedeemList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherIssuanceRedeem': $o->voucherIssuanceRedeem[] = $this->load_VoucherIssuanceRedeem($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherIssuance(\XMLReader $in) : VoucherIssuance {
		$n = $in->name;
		$o = new VoucherIssuance();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'scanCode': $o->scanCode = $this->load_string_property($in); break;
						case 'groupId': $o->groupId = $this->load_string_property($in); break;
						case 'voucherId': $o->voucherId = $this->load_VoucherId($in); break;
						case 'salesTurnoverId': $o->salesTurnoverId = $this->load_string_property($in); break;
						case 'salesIssuanceId': $o->salesIssuanceId = $this->load_string_property($in); break;
						case 'salesTurnoverLineId': $o->salesTurnoverLineId = $this->load_string_property($in); break;
						case 'salesIssuanceLineId': $o->salesIssuanceLineId = $this->load_string_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'cancelled': $o->cancelled = $this->load_bool_property($in); break;
						case 'startTs': $o->startTs = $this->load_DateTime_property($in); break;
						case 'endTs': $o->endTs = $this->load_DateTime_property($in); break;
						case 'voucherIssuanceRedeems': $o->voucherIssuanceRedeems = ($this->load_VoucherIssuanceRedeemList($in))->voucherIssuanceRedeem; break;
						case 'groupScanCode': $o->groupScanCode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherIssuanceList(\XMLReader $in) : VoucherIssuanceList {
		$n = $in->name;
		$o = new VoucherIssuanceList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherIssuance': $o->voucherIssuance[] = $this->load_VoucherIssuance($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherIssuanceCompact(\XMLReader $in) : VoucherIssuanceCompact {
		$n = $in->name;
		$o = new VoucherIssuanceCompact();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'scanCode': $o->scanCode = $this->load_string_property($in); break;
						case 'groupId': $o->groupId = $this->load_string_property($in); break;
						case 'voucherId': $o->voucherId = $this->load_VoucherId($in); break;
						case 'salesTurnoverId': $o->salesTurnoverId = $this->load_string_property($in); break;
						case 'salesIssuanceId': $o->salesIssuanceId = $this->load_string_property($in); break;
						case 'salesTurnoverLineId': $o->salesTurnoverLineId = $this->load_string_property($in); break;
						case 'salesIssuanceLineId': $o->salesIssuanceLineId = $this->load_string_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'cancelled': $o->cancelled = $this->load_bool_property($in); break;
						case 'startTs': $o->startTs = $this->load_DateTime_property($in); break;
						case 'endTs': $o->endTs = $this->load_DateTime_property($in); break;
						case 'voucherIssuanceRedeems': $o->voucherIssuanceRedeems = ($this->load_VoucherIssuanceRedeemList($in))->voucherIssuanceRedeem; break;
						case 'groupScanCode': $o->groupScanCode = $this->load_string_property($in); break;
						case 'quantity': $o->quantity = $this->load_int_property($in); break;
						case 'positiveIssuanceIds': $o->positiveIssuanceIds = ($this->load_IdSet($in))->id; break;
						case 'negativeIssuanceIds': $o->negativeIssuanceIds = ($this->load_IdSet($in))->id; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherIssuanceCompactList(\XMLReader $in) : VoucherIssuanceCompactList {
		$n = $in->name;
		$o = new VoucherIssuanceCompactList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherIssuanceCompact': $o->voucherIssuanceCompact[] = $this->load_VoucherIssuanceCompact($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherIssuanceCandidate(\XMLReader $in) : VoucherIssuanceCandidate {
		$n = $in->name;
		$o = new VoucherIssuanceCandidate();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'scanCode': $o->scanCode = $this->load_string_property($in); break;
						case 'groupId': $o->groupId = $this->load_string_property($in); break;
						case 'voucherId': $o->voucherId = $this->load_VoucherId($in); break;
						case 'salesTurnoverId': $o->salesTurnoverId = $this->load_string_property($in); break;
						case 'salesIssuanceId': $o->salesIssuanceId = $this->load_string_property($in); break;
						case 'salesTurnoverLineId': $o->salesTurnoverLineId = $this->load_string_property($in); break;
						case 'salesIssuanceLineId': $o->salesIssuanceLineId = $this->load_string_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'cancelled': $o->cancelled = $this->load_bool_property($in); break;
						case 'startTs': $o->startTs = $this->load_DateTime_property($in); break;
						case 'endTs': $o->endTs = $this->load_DateTime_property($in); break;
						case 'voucherIssuanceRedeems': $o->voucherIssuanceRedeems = ($this->load_VoucherIssuanceRedeemList($in))->voucherIssuanceRedeem; break;
						case 'groupScanCode': $o->groupScanCode = $this->load_string_property($in); break;
						case 'quantity': $o->quantity = $this->load_int_property($in); break;
						case 'positiveIssuanceIds': $o->positiveIssuanceIds = ($this->load_IdSet($in))->id; break;
						case 'negativeIssuanceIds': $o->negativeIssuanceIds = ($this->load_IdSet($in))->id; break;
						case 'sourceArticleNumber': $o->sourceArticleNumber = $this->load_int_property($in); break;
						case 'relationRequired': $o->relationRequired = $this->load_bool_property($in); break;
						case 'pendingStartTsRequired': $o->pendingStartTsRequired = $this->load_bool_property($in); break;
						case 'view': $o->view = $this->load_VoucherView($in); break;
						case 'externalScanCodes': $o->externalScanCodes[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherIssuanceCandidateList(\XMLReader $in) : VoucherIssuanceCandidateList {
		$n = $in->name;
		$o = new VoucherIssuanceCandidateList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherIssuanceCandidate': $o->voucherIssuanceCandidate[] = $this->load_VoucherIssuanceCandidate($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherIssuanceScanCode(\XMLReader $in) : VoucherIssuanceScanCode {
		$n = $in->name;
		$o = new VoucherIssuanceScanCode();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'scanCode': $o->scanCode = $this->load_string_property($in); break;
						case 'groupId': $o->groupId = $this->load_string_property($in); break;
						case 'raw': $o->raw = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherRedeemCount(\XMLReader $in) : VoucherRedeemCount {
		$n = $in->name;
		$o = new VoucherRedeemCount();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'period': $o->period = $this->load_string_property($in); break;
						case 'count': $o->count = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherRedeemCountList(\XMLReader $in) : VoucherRedeemCountList {
		$n = $in->name;
		$o = new VoucherRedeemCountList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherRedeemCount': $o->voucherRedeemCount[] = $this->load_VoucherRedeemCount($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherCanApplyResult(\XMLReader $in) : VoucherCanApplyResult {
		$n = $in->name;
		$o = new VoucherCanApplyResult();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'recentRedeemCounts': $o->recentRedeemCounts = ($this->load_VoucherRedeemCountList($in))->voucherRedeemCount; break;
						case 'noLine': $o->noLine = $this->load_bool_property($in); break;
						case 'voucherNoArticleLine': $o->voucherNoArticleLine = $this->load_bool_property($in); break;
						case 'articleOutOfStock': $o->articleOutOfStock = $this->load_bool_property($in); break;
						case 'expired': $o->expired = $this->load_bool_property($in); break;
						case 'fullyRedeemed': $o->fullyRedeemed = $this->load_bool_property($in); break;
						case 'relationRequired': $o->relationRequired = $this->load_bool_property($in); break;
						case 'recentlyRedeemed': $o->recentlyRedeemed = $this->load_bool_property($in); break;
						case 'upcoming': $o->upcoming = $this->load_bool_property($in); break;
						case 'upcomingTs': $o->upcomingTs = $this->load_DateTime_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UnappliedVoucherIssuance(\XMLReader $in) : UnappliedVoucherIssuance {
		$n = $in->name;
		$o = new UnappliedVoucherIssuance();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'voucherId': $o->voucherId = $this->load_string_property($in); break;
						case 'canApplyResult': $o->canApplyResult = $this->load_VoucherCanApplyResult($in); break;
						case 'quantity': $o->quantity = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UnappliedVoucherIssuanceList(\XMLReader $in) : UnappliedVoucherIssuanceList {
		$n = $in->name;
		$o = new UnappliedVoucherIssuanceList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'unappliedVoucherIssuance': $o->unappliedVoucherIssuance[] = $this->load_UnappliedVoucherIssuance($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherIssuanceRedeemable(\XMLReader $in) : VoucherIssuanceRedeemable {
		$n = $in->name;
		$o = new VoucherIssuanceRedeemable();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'issuances': $o->issuances = ($this->load_VoucherIssuanceList($in))->voucherIssuance; break;
						case 'scanCode': $o->scanCode = $this->load_VoucherIssuanceScanCode($in); break;
						case 'unappliedIssuances': $o->unappliedIssuances = ($this->load_UnappliedVoucherIssuanceList($in))->unappliedVoucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherIssuanceRedeemableList(\XMLReader $in) : VoucherIssuanceRedeemableList {
		$n = $in->name;
		$o = new VoucherIssuanceRedeemableList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherIssuanceRedeemable': $o->voucherIssuanceRedeemable[] = $this->load_VoucherIssuanceRedeemable($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RequestSalesRepeatTemplateTypeFilter(\XMLReader $in) : RequestSalesRepeatTemplateTypeFilter {
		$n = $in->name;
		$o = new RequestSalesRepeatTemplateTypeFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'salesRepeatTemplateTypes': $o->salesRepeatTemplateTypes[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RequestSalesRepeatTemplateIdsFilter(\XMLReader $in) : RequestSalesRepeatTemplateIdsFilter {
		$n = $in->name;
		$o = new RequestSalesRepeatTemplateIdsFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'templateIds': $o->templateIds = ($this->load_IdList($in))->id; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_YearNumberVersion(\XMLReader $in) : YearNumberVersion {
		$n = $in->name;
		$o = new YearNumberVersion();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'year': $o->year = $this->load_int_property($in); break;
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'version': $o->version = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WorkplaceYearNumber(\XMLReader $in) : WorkplaceYearNumber {
		$n = $in->name;
		$o = new WorkplaceYearNumber();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'year': $o->year = $this->load_int_property($in); break;
						case 'number': $o->number = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_NumberSet(\XMLReader $in) : NumberSet {
		$n = $in->name;
		$o = new NumberSet();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'number': $o->number[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalesPrice(\XMLReader $in) : SalesPrice {
		$n = $in->name;
		$o = new SalesPrice();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'salesPriceNumber': $o->salesPriceNumber = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'startDate': $o->startDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'endDate': $o->endDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'priceIncl': $priceIncl = $this->load_int_property($in); break;
						case 'priceExcl': $priceExcl = $this->load_int_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_int_property($in); break;
						case 'minimumAmount': $o->minimumAmount = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->priceIncl = isset($priceIncl) ? BigDecimal::ofUnscaledValue($priceIncl, 2) : null;
		$o->priceExcl = isset($priceExcl) ? BigDecimal::ofUnscaledValue($priceExcl, 2) : null;
		return $o;
	}
	private function load_SalesPriceList(\XMLReader $in) : SalesPriceList {
		$n = $in->name;
		$o = new SalesPriceList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'salesPrice': $o->salesPrice[] = $this->load_SalesPrice($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PriceGroup(\XMLReader $in) : PriceGroup {
		$n = $in->name;
		$o = new PriceGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'priceGroupNumber': $o->priceGroupNumber = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'priceIncl': $priceIncl = $this->load_int_property($in); break;
						case 'priceExcl': $priceExcl = $this->load_int_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_int_property($in); break;
						case 'minimumAmount': $o->minimumAmount = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->priceIncl = isset($priceIncl) ? BigDecimal::ofUnscaledValue($priceIncl, 2) : null;
		$o->priceExcl = isset($priceExcl) ? BigDecimal::ofUnscaledValue($priceExcl, 2) : null;
		return $o;
	}
	private function load_PriceGroupList(\XMLReader $in) : PriceGroupList {
		$n = $in->name;
		$o = new PriceGroupList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'priceGroup': $o->priceGroup[] = $this->load_PriceGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Mistake(\XMLReader $in) : Mistake {
		$n = $in->name;
		$o = new Mistake();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'quantity': $quantity = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
						case 'priceIncl': $priceIncl = $this->load_int_property($in); break;
						case 'priceExcl': $priceExcl = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->quantity = isset($quantity) ? BigDecimal::ofUnscaledValue($quantity, $decimalPlaces ?? 2) : null;
		$o->priceIncl = isset($priceIncl) ? BigDecimal::ofUnscaledValue($priceIncl, 2) : null;
		$o->priceExcl = isset($priceExcl) ? BigDecimal::ofUnscaledValue($priceExcl, 2) : null;
		return $o;
	}
	private function load_MistakeList(\XMLReader $in) : MistakeList {
		$n = $in->name;
		$o = new MistakeList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'mistake': $o->mistake[] = $this->load_Mistake($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LogMistakeRequest(\XMLReader $in) : LogMistakeRequest {
		$n = $in->name;
		$o = new LogMistakeRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'mistakeList': $o->mistakeList = ($this->load_MistakeList($in))->mistake; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRelationsRequest(\XMLReader $in) : GetRelationsRequest {
		$n = $in->name;
		$o = new GetRelationsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumbers': $o->relationNumbers[] = $this->load_int_property($in); break;
						case 'categoryId': $o->categoryId = $this->load_int_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CardCategory(\XMLReader $in) : CardCategory {
		$n = $in->name;
		$o = new CardCategory();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'categoryId': $o->categoryId = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'isVipGroup': $o->isVipGroup = $this->load_bool_property($in); break;
						case 'isSupplierGroup': $o->isSupplierGroup = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CardCategoryList(\XMLReader $in) : CardCategoryList {
		$n = $in->name;
		$o = new CardCategoryList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardCategory': $o->cardCategory[] = $this->load_CardCategory($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_AdjustPointsRequest(\XMLReader $in) : AdjustPointsRequest {
		$n = $in->name;
		$o = new AdjustPointsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'pointsAdjustment': $o->pointsAdjustment = $this->load_int_property($in); break;
						case 'mode': $o->mode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRelationPoints(\XMLReader $in) : GetRelationPoints {
		$n = $in->name;
		$o = new GetRelationPoints();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'points': $o->points = $this->load_int_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRelationPointsRequest(\XMLReader $in) : GetRelationPointsRequest {
		$n = $in->name;
		$o = new GetRelationPointsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumbers': $o->relationNumbers[] = $this->load_int_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getEmployeesRequest(\XMLReader $in) : getEmployeesRequest {
		$n = $in->name;
		$o = new getEmployeesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumbers': $o->employeeNumbers[] = $this->load_int_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_EmployeeName(\XMLReader $in) : EmployeeName {
		$n = $in->name;
		$o = new EmployeeName();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'loginname': $o->loginname = $this->load_string_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'allowNegativeOrdering': $o->allowNegativeOrdering = $this->load_bool_property($in); break;
						case 'allowTableRetour': $o->allowTableRetour = $this->load_bool_property($in); break;
						case 'allowNextCourse': $o->allowNextCourse = $this->load_bool_property($in); break;
						case 'allowSplit': $o->allowSplit = $this->load_bool_property($in); break;
						case 'allowPay': $o->allowPay = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TableNumberList(\XMLReader $in) : TableNumberList {
		$n = $in->name;
		$o = new TableNumberList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'tableNumber': $o->tableNumber[] = $this->load_TableNumber($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Table(\XMLReader $in) : Table {
		$n = $in->name;
		$o = new Table();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'tableStatus': $o->tableStatus = $this->load_string_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
						case 'tableName': $o->tableName = $this->load_string_property($in); break;
						case 'numberOfGuests': $o->numberOfGuests = $this->load_int_property($in); break;
						case 'courseNumber': $o->courseNumber = $this->load_int_property($in); break;
						case 'courseName': $o->courseName = $this->load_string_property($in); break;
						case 'courseAbbreviation': $o->courseAbbreviation = $this->load_string_property($in); break;
						case 'createTimestamp': $o->createTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'changeTimestamp': $o->changeTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'prepaidAmount': $prepaidAmount = $this->load_int_property($in); break;
						case 'cardNumber': $o->cardNumber = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeName': $o->employeeName = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		$o->prepaidAmount = isset($prepaidAmount) ? BigDecimal::ofUnscaledValue($prepaidAmount, 2) : null;
		return $o;
	}
	private function load_TableNumber(\XMLReader $in) : TableNumber {
		$n = $in->name;
		$o = new TableNumber();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'subNumber': $o->subNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TableRelation(\XMLReader $in) : TableRelation {
		$n = $in->name;
		$o = new TableRelation();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TableCourse(\XMLReader $in) : TableCourse {
		$n = $in->name;
		$o = new TableCourse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'abbreviation': $o->abbreviation = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OccupiedTableDetails(\XMLReader $in) : OccupiedTableDetails {
		$n = $in->name;
		$o = new OccupiedTableDetails();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'createTimestamp': $o->createTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'changeTimestamp': $o->changeTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'prepaidAmount': $prepaidAmount = $this->load_int_property($in); break;
						case 'dishesReady': $o->dishesReady = $this->load_bool_property($in); break;
						case 'receiptPrinted': $o->receiptPrinted = $this->load_bool_property($in); break;
						case 'numberOfGuests': $o->numberOfGuests = $this->load_int_property($in); break;
						case 'relation': $o->relation = $this->load_TableRelation($in); break;
						case 'currentCourse': $o->currentCourse = $this->load_TableCourse($in); break;
						case 'isVip': $o->isVip = $this->load_bool_property($in); break;
						case 'claimedBy': $o->claimedBy = $this->load_WorkplaceIdentifier($in); break;
						case 'employee': $o->employee = $this->load_TableEmployee($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		$o->prepaidAmount = isset($prepaidAmount) ? BigDecimal::ofUnscaledValue($prepaidAmount, 2) : null;
		return $o;
	}
	private function load_SubTableState(\XMLReader $in) : SubTableState {
		$n = $in->name;
		$o = new SubTableState();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'tableNumber': $o->tableNumber = $this->load_TableNumber($in); break;
						case 'state': $o->state = $this->load_string_property($in); break;
						case 'tableName': $o->tableName = $this->load_string_property($in); break;
						case 'cardNumber': $o->cardNumber = $this->load_string_property($in); break;
						case 'details': $o->details = $this->load_OccupiedTableDetails($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SubTableList(\XMLReader $in) : SubTableList {
		$n = $in->name;
		$o = new SubTableList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'subTable': $o->subTable[] = $this->load_SubTableState($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WholeTable(\XMLReader $in) : WholeTable {
		$n = $in->name;
		$o = new WholeTable();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'onFloorPlan': $o->onFloorPlan = $this->load_bool_property($in); break;
						case 'askName': $o->askName = $this->load_bool_property($in); break;
						case 'standardSubTableCount': $o->standardSubTableCount = $this->load_int_property($in); break;
						case 'currentSubTableCount': $o->currentSubTableCount = $this->load_int_property($in); break;
						case 'subTables': $o->subTables = ($this->load_SubTableList($in))->subTable; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTableListV3Request(\XMLReader $in) : getTableListV3Request {
		$n = $in->name;
		$o = new getTableListV3Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_MainTable(\XMLReader $in) : MainTable {
		$n = $in->name;
		$o = new MainTable();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'askName': $o->askName = $this->load_bool_property($in); break;
						case 'standardSubTableCount': $o->standardSubTableCount = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getMainTableListRequest(\XMLReader $in) : getMainTableListRequest {
		$n = $in->name;
		$o = new getMainTableListRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getSubTableListRequest(\XMLReader $in) : getSubTableListRequest {
		$n = $in->name;
		$o = new getSubTableListRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Course(\XMLReader $in) : Course {
		$n = $in->name;
		$o = new Course();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'abbreviation': $o->abbreviation = $this->load_string_property($in); break;
						case 'sequenceNumber': $o->sequenceNumber = $this->load_int_property($in); break;
						case 'isPresent': $o->isPresent = $this->load_bool_property($in); break;
						case 'isRequested': $o->isRequested = $this->load_bool_property($in); break;
						case 'requestedAt': $o->requestedAt = $this->load_DateTime_property($in); break;
						case 'isTableSet': $o->isTableSet = $this->load_bool_property($in); break;
						case 'tableSetAt': $o->tableSetAt = $this->load_DateTime_property($in); break;
						case 'isWineServed': $o->isWineServed = $this->load_bool_property($in); break;
						case 'wineServedAt': $o->wineServedAt = $this->load_DateTime_property($in); break;
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'doSetTable': $o->doSetTable = $this->load_bool_property($in); break;
						case 'canBeServedWithWine': $o->canBeServedWithWine = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CourseInfo(\XMLReader $in) : CourseInfo {
		$n = $in->name;
		$o = new CourseInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'sequenceNumber': $o->sequenceNumber = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'abbreviation': $o->abbreviation = $this->load_string_property($in); break;
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'doSetTable': $o->doSetTable = $this->load_bool_property($in); break;
						case 'canBeServedWithWine': $o->canBeServedWithWine = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCourseListV2Request(\XMLReader $in) : GetCourseListV2Request {
		$n = $in->name;
		$o = new GetCourseListV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookSessionData(\XMLReader $in) : WebhookSessionData {
		$n = $in->name;
		$o = new WebhookSessionData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'webhookSessionId': $o->webhookSessionId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveTableOrderRequest(\XMLReader $in) : SaveTableOrderRequest {
		$n = $in->name;
		$o = new SaveTableOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'order': $o->order = $this->load_Order($in); break;
						case 'releaseTable': $o->releaseTable = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateAndPayTableOrderRequest(\XMLReader $in) : CreateAndPayTableOrderRequest {
		$n = $in->name;
		$o = new CreateAndPayTableOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'order': $o->order = $this->load_Order($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_MoveTableOrderRequest(\XMLReader $in) : MoveTableOrderRequest {
		$n = $in->name;
		$o = new MoveTableOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'order': $o->order = $this->load_Order($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
						case 'releaseTable': $o->releaseTable = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_MoveTableLine(\XMLReader $in) : MoveTableLine {
		$n = $in->name;
		$o = new MoveTableLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineId': $o->lineId = $this->load_string_property($in); break;
						case 'quantity': $o->quantity = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_MoveTableLineList(\XMLReader $in) : MoveTableLineList {
		$n = $in->name;
		$o = new MoveTableLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'line': $o->line[] = $this->load_MoveTableLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_MoveTableOrderV3Request(\XMLReader $in) : MoveTableOrderV3Request {
		$n = $in->name;
		$o = new MoveTableOrderV3Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'workplace': $o->workplace = $this->load_WorkplaceIdentifier($in); break;
						case 'employee': $o->employee = $this->load_EmployeeIdentifier($in); break;
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'lines': $o->lines = ($this->load_MoveTableLineList($in))->line; break;
						case 'destinationTable': $o->destinationTable = $this->load_TableIdentifier($in); break;
						case 'releaseSourceTable': $o->releaseSourceTable = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetTableOrderRequest(\XMLReader $in) : GetTableOrderRequest {
		$n = $in->name;
		$o = new GetTableOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
						case 'claimTable': $o->claimTable = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetTableOrderV3Request(\XMLReader $in) : GetTableOrderV3Request {
		$n = $in->name;
		$o = new GetTableOrderV3Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'hardwareIdentifier': $o->hardwareIdentifier = $this->load_string_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
						case 'claimTable': $o->claimTable = $this->load_bool_property($in); break;
						case 'uncondensedLines': $o->uncondensedLines = $this->load_bool_property($in); break;
						case 'claimMethod': $o->claimMethod = $this->load_string_property($in); break;
						case 'forceCondensedLines': $o->forceCondensedLines = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReleaseTableRequest(\XMLReader $in) : ReleaseTableRequest {
		$n = $in->name;
		$o = new ReleaseTableRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReleaseTableV2Request(\XMLReader $in) : ReleaseTableV2Request {
		$n = $in->name;
		$o = new ReleaseTableV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'workplace': $o->workplace = $this->load_WorkplaceIdentifier($in); break;
						case 'table': $o->table = $this->load_TableIdentifier($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SetSubtableCountRequest(\XMLReader $in) : SetSubtableCountRequest {
		$n = $in->name;
		$o = new SetSubtableCountRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'brancheNumber': $o->brancheNumber = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'newSubTableCount': $o->newSubTableCount = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CourseList(\XMLReader $in) : CourseList {
		$n = $in->name;
		$o = new CourseList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'course': $o->course[] = $this->load_Course($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetTableOrderCourseListRequest(\XMLReader $in) : GetTableOrderCourseListRequest {
		$n = $in->name;
		$o = new GetTableOrderCourseListRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RequestNextTableOrderCourseRequest(\XMLReader $in) : RequestNextTableOrderCourseRequest {
		$n = $in->name;
		$o = new RequestNextTableOrderCourseRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'courseNumber': $o->courseNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RequestNextTableOrderCourseV3Request(\XMLReader $in) : RequestNextTableOrderCourseV3Request {
		$n = $in->name;
		$o = new RequestNextTableOrderCourseV3Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'workplace': $o->workplace = $this->load_WorkplaceIdentifier($in); break;
						case 'employee': $o->employee = $this->load_EmployeeIdentifier($in); break;
						case 'table': $o->table = $this->load_TableIdentifier($in); break;
						case 'courseNumber': $o->courseNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_QueueBranchOrderInfo(\XMLReader $in) : QueueBranchOrderInfo {
		$n = $in->name;
		$o = new QueueBranchOrderInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'orderString': $o->orderString = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_QueueBranchOrderPaymentRequest(\XMLReader $in) : QueueBranchOrderPaymentRequest {
		$n = $in->name;
		$o = new QueueBranchOrderPaymentRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'paymentList': $o->paymentList = ($this->load_PaymentList($in))->payment; break;
						case 'bookingMethod': $o->bookingMethod = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateOrderInfo(\XMLReader $in) : UpdateOrderInfo {
		$n = $in->name;
		$o = new UpdateOrderInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'orderString': $o->orderString = $this->load_string_property($in); break;
						case 'orderQueued': $o->orderQueued = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateOrderV2Request(\XMLReader $in) : UpdateOrderV2Request {
		$n = $in->name;
		$o = new UpdateOrderV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'order': $o->order = $this->load_Order($in); break;
						case 'applySalesAndActions': $o->applySalesAndActions = $this->load_bool_property($in); break;
						case 'applySalesPrices': $o->applySalesPrices = $this->load_bool_property($in); break;
						case 'applyPriceGroups': $o->applyPriceGroups = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveOrderInfo(\XMLReader $in) : SaveOrderInfo {
		$n = $in->name;
		$o = new SaveOrderInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'orderString': $o->orderString = $this->load_string_property($in); break;
						case 'orderQueued': $o->orderQueued = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PackingSlip(\XMLReader $in) : PackingSlip {
		$n = $in->name;
		$o = new PackingSlip();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'packingSlipId': $o->packingSlipId = $this->load_string_property($in); break;
						case 'packingSlipNumber': $o->packingSlipNumber = $this->load_YearNumber($in); break;
						case 'packingSlipBarcode': $o->packingSlipBarcode = $this->load_string_property($in); break;
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'extOrderId': $o->extOrderId = $this->load_string_property($in); break;
						case 'orderNumber': $o->orderNumber = $this->load_YearNumber($in); break;
						case 'orderBarcode': $o->orderBarcode = $this->load_string_property($in); break;
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
						case 'extInvoiceId': $o->extInvoiceId = $this->load_string_property($in); break;
						case 'invoiceNumber': $o->invoiceNumber = $this->load_YearNumber($in); break;
						case 'invoiceBarcode': $o->invoiceBarcode = $this->load_string_property($in); break;
						case 'transactionString': $o->transactionString = $this->load_string_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeName': $o->employeeName = $this->load_string_property($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
						case 'relationCategoryId': $o->relationCategoryId = $this->load_int_property($in); break;
						case 'relationBankAccountNumber': $o->relationBankAccountNumber = $this->load_string_property($in); break;
						case 'relationVatNumber': $o->relationVatNumber = $this->load_string_property($in); break;
						case 'deliveryAddress': $o->deliveryAddress = $this->load_Address($in); break;
						case 'invoiceAddress': $o->invoiceAddress = $this->load_Address($in); break;
						case 'financialDate': $o->financialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'financialBranchNumber': $o->financialBranchNumber = $this->load_int_property($in); break;
						case 'financialExtBranchId': $o->financialExtBranchId = $this->load_string_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'entryBranchNumber': $o->entryBranchNumber = $this->load_int_property($in); break;
						case 'entryExtBranchId': $o->entryExtBranchId = $this->load_string_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'changeCounter': $o->changeCounter = $this->load_int_property($in); break;
						case 'state': $o->state = $this->load_string_property($in); break;
						case 'onInvoiceUrl': $o->onInvoiceUrl = $this->load_string_property($in); break;
						case 'lineList': $o->lineList = ($this->load_LineList($in))->line; break;
						case 'costCenter': $o->costCenter = $this->load_string_property($in); break;
						case 'orderCategoryNumber': $o->orderCategoryNumber = $this->load_int_property($in); break;
						case 'packingSlipType': $o->packingSlipType = $this->load_string_property($in); break;
						case 'vatMethod': $o->vatMethod = $this->load_string_property($in); break;
						case 'sessionId': $o->sessionId = $this->load_string_property($in); break;
						case 'proposalId': $o->proposalId = $this->load_string_property($in); break;
						case 'extProposalId': $o->extProposalId = $this->load_string_property($in); break;
						case 'proposalNumber': $o->proposalNumber = $this->load_YearNumber($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_PackingSlipList(\XMLReader $in) : PackingSlipList {
		$n = $in->name;
		$o = new PackingSlipList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'packingSlip': $o->packingSlip[] = $this->load_PackingSlip($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPackingSlipsRequest(\XMLReader $in) : GetPackingSlipsRequest {
		$n = $in->name;
		$o = new GetPackingSlipsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'fromFinancialDate': $o->fromFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughFinancialDate': $o->throughFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'employeeNumbers': $o->employeeNumbers[] = $this->load_int_property($in); break;
						case 'relationNumbers': $o->relationNumbers[] = $this->load_int_property($in); break;
						case 'supplierRelationNumbers': $o->supplierRelationNumbers[] = $this->load_int_property($in); break;
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
						case 'articleTurnoverGroups': $o->articleTurnoverGroups[] = $this->load_int_property($in); break;
						case 'articlePluNumbers': $o->articlePluNumbers = ($this->load_TextList($in))->text; break;
						case 'articleBarcodes': $o->articleBarcodes = ($this->load_TextList($in))->text; break;
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
						case 'packingSlipIds': $o->packingSlipIds[] = $this->load_string_property($in); break;
						case 'packingSlipNumbers': $o->packingSlipNumbers[] = $this->load_YearNumber($in); break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
						case 'includeLineList': $o->includeLineList = $this->load_bool_property($in); break;
						case 'typeFilter': $o->typeFilter[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPackingSlipsByOrderRequest(\XMLReader $in) : GetPackingSlipsByOrderRequest {
		$n = $in->name;
		$o = new GetPackingSlipsByOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LineChangeList(\XMLReader $in) : LineChangeList {
		$n = $in->name;
		$o = new LineChangeList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineChange': $o->lineChange[] = $this->load_LineChange($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LineChangeData(\XMLReader $in) : LineChangeData {
		$n = $in->name;
		$o = new LineChangeData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'quantityOld': $quantityOld = $this->load_int_property($in); break;
						case 'quantityNew': $quantityNew = $this->load_int_property($in); break;
						case 'decimalPlacesOld': $decimalPlacesOld = $this->load_int_property($in); break;
						case 'decimalPlacesNew': $decimalPlacesNew = $this->load_int_property($in); break;
						case 'priceOld': $priceOld = $this->load_int_property($in); break;
						case 'priceNew': $priceNew = $this->load_int_property($in); break;
						case 'priceExclOld': $priceExclOld = $this->load_int_property($in); break;
						case 'priceExclNew': $priceExclNew = $this->load_int_property($in); break;
						case 'originalPriceOld': $originalPriceOld = $this->load_int_property($in); break;
						case 'originalPriceNew': $originalPriceNew = $this->load_int_property($in); break;
						case 'originalPriceExclOld': $originalPriceExclOld = $this->load_int_property($in); break;
						case 'originalPriceExclNew': $originalPriceExclNew = $this->load_int_property($in); break;
						case 'purchasePriceOld': $purchasePriceOld = $this->load_int_property($in); break;
						case 'purchasePriceNew': $purchasePriceNew = $this->load_int_property($in); break;
						case 'averagePurchasePriceOld': $averagePurchasePriceOld = $this->load_int_property($in); break;
						case 'averagePurchasePriceNew': $averagePurchasePriceNew = $this->load_int_property($in); break;
						case 'turnoverGroupOld': $o->turnoverGroupOld = $this->load_int_property($in); break;
						case 'turnoverGroupNew': $o->turnoverGroupNew = $this->load_int_property($in); break;
						case 'turnoverGroupNameOld': $o->turnoverGroupNameOld = $this->load_string_property($in); break;
						case 'turnoverGroupNameNew': $o->turnoverGroupNameNew = $this->load_string_property($in); break;
						case 'turnoverGroupTypeOld': $o->turnoverGroupTypeOld = $this->load_string_property($in); break;
						case 'turnoverGroupTypeNew': $o->turnoverGroupTypeNew = $this->load_string_property($in); break;
						case 'vatCodeOld': $o->vatCodeOld = $this->load_int_property($in); break;
						case 'vatCodeNew': $o->vatCodeNew = $this->load_int_property($in); break;
						case 'vatPercentageOld': $o->vatPercentageOld = $this->load_int_property($in); break;
						case 'vatPercentageNew': $o->vatPercentageNew = $this->load_int_property($in); break;
						case 'siUnitOld': $o->siUnitOld = $this->load_string_property($in); break;
						case 'siUnitNew': $o->siUnitNew = $this->load_string_property($in); break;
						case 'discountTypeOld': $o->discountTypeOld = $this->load_string_property($in); break;
						case 'discountTypeNew': $o->discountTypeNew = $this->load_string_property($in); break;
						case 'discountPercentageOld': $o->discountPercentageOld = $this->load_int_property($in); break;
						case 'discountPercentageNew': $o->discountPercentageNew = $this->load_int_property($in); break;
						case 'discountAmountOld': $discountAmountOld = $this->load_int_property($in); break;
						case 'discountAmountNew': $discountAmountNew = $this->load_int_property($in); break;
						case 'discountAmountExclOld': $discountAmountExclOld = $this->load_int_property($in); break;
						case 'discountAmountExclNew': $discountAmountExclNew = $this->load_int_property($in); break;
						case 'deliveryDateOld': $o->deliveryDateOld = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'deliveryDateNew': $o->deliveryDateNew = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'deliveryPeriodBeginOld': $o->deliveryPeriodBeginOld = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'deliveryPeriodBeginNew': $o->deliveryPeriodBeginNew = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'deliveryPeriodEndOld': $o->deliveryPeriodEndOld = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'deliveryPeriodEndNew': $o->deliveryPeriodEndNew = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'pointsAmountOld': $pointsAmountOld = $this->load_int_property($in); break;
						case 'pointsAmountNew': $pointsAmountNew = $this->load_int_property($in); break;
						case 'pointsAmountExclOld': $pointsAmountExclOld = $this->load_int_property($in); break;
						case 'pointsAmountExclNew': $pointsAmountExclNew = $this->load_int_property($in); break;
						case 'bpeIdOld': $o->bpeIdOld = $this->load_string_property($in); break;
						case 'bpeIdNew': $o->bpeIdNew = $this->load_string_property($in); break;
						case 'bpeDescriptionOld': $o->bpeDescriptionOld = $this->load_string_property($in); break;
						case 'bpeDescriptionNew': $o->bpeDescriptionNew = $this->load_string_property($in); break;
						case 'bpeAmountOld': $bpeAmountOld = $this->load_int_property($in); break;
						case 'bpeAmountNew': $bpeAmountNew = $this->load_int_property($in); break;
						case 'bpeAmountExclOld': $bpeAmountExclOld = $this->load_int_property($in); break;
						case 'bpeAmountExclNew': $bpeAmountExclNew = $this->load_int_property($in); break;
						case 'priceInCreditsOld': $priceInCreditsOld = $this->load_int_property($in); break;
						case 'priceInCreditsNew': $priceInCreditsNew = $this->load_int_property($in); break;
						case 'totalInclAmountOld': $totalInclAmountOld = $this->load_int_property($in); break;
						case 'totalInclAmountNew': $totalInclAmountNew = $this->load_int_property($in); break;
						case 'totalExclAmountOld': $totalExclAmountOld = $this->load_int_property($in); break;
						case 'totalExclAmountNew': $totalExclAmountNew = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->quantityOld = isset($quantityOld) ? BigDecimal::ofUnscaledValue($quantityOld, $decimalPlacesOld ?? 2) : null;
		$o->quantityNew = isset($quantityNew) ? BigDecimal::ofUnscaledValue($quantityNew, $decimalPlacesNew ?? 2) : null;
		$o->priceOld = isset($priceOld) ? BigDecimal::ofUnscaledValue($priceOld, 2) : null;
		$o->priceNew = isset($priceNew) ? BigDecimal::ofUnscaledValue($priceNew, 2) : null;
		$o->priceExclOld = isset($priceExclOld) ? BigDecimal::ofUnscaledValue($priceExclOld, 2) : null;
		$o->priceExclNew = isset($priceExclNew) ? BigDecimal::ofUnscaledValue($priceExclNew, 2) : null;
		$o->originalPriceOld = isset($originalPriceOld) ? BigDecimal::ofUnscaledValue($originalPriceOld, 2) : null;
		$o->originalPriceNew = isset($originalPriceNew) ? BigDecimal::ofUnscaledValue($originalPriceNew, 2) : null;
		$o->originalPriceExclOld = isset($originalPriceExclOld) ? BigDecimal::ofUnscaledValue($originalPriceExclOld, 2) : null;
		$o->originalPriceExclNew = isset($originalPriceExclNew) ? BigDecimal::ofUnscaledValue($originalPriceExclNew, 2) : null;
		$o->purchasePriceOld = isset($purchasePriceOld) ? BigDecimal::ofUnscaledValue($purchasePriceOld, 2) : null;
		$o->purchasePriceNew = isset($purchasePriceNew) ? BigDecimal::ofUnscaledValue($purchasePriceNew, 2) : null;
		$o->averagePurchasePriceOld = isset($averagePurchasePriceOld) ? BigDecimal::ofUnscaledValue($averagePurchasePriceOld, 2) : null;
		$o->averagePurchasePriceNew = isset($averagePurchasePriceNew) ? BigDecimal::ofUnscaledValue($averagePurchasePriceNew, 2) : null;
		$o->discountAmountOld = isset($discountAmountOld) ? BigDecimal::ofUnscaledValue($discountAmountOld, 2) : null;
		$o->discountAmountNew = isset($discountAmountNew) ? BigDecimal::ofUnscaledValue($discountAmountNew, 2) : null;
		$o->discountAmountExclOld = isset($discountAmountExclOld) ? BigDecimal::ofUnscaledValue($discountAmountExclOld, 2) : null;
		$o->discountAmountExclNew = isset($discountAmountExclNew) ? BigDecimal::ofUnscaledValue($discountAmountExclNew, 2) : null;
		$o->pointsAmountOld = isset($pointsAmountOld) ? BigDecimal::ofUnscaledValue($pointsAmountOld, 2) : null;
		$o->pointsAmountNew = isset($pointsAmountNew) ? BigDecimal::ofUnscaledValue($pointsAmountNew, 2) : null;
		$o->pointsAmountExclOld = isset($pointsAmountExclOld) ? BigDecimal::ofUnscaledValue($pointsAmountExclOld, 2) : null;
		$o->pointsAmountExclNew = isset($pointsAmountExclNew) ? BigDecimal::ofUnscaledValue($pointsAmountExclNew, 2) : null;
		$o->bpeAmountOld = isset($bpeAmountOld) ? BigDecimal::ofUnscaledValue($bpeAmountOld, 2) : null;
		$o->bpeAmountNew = isset($bpeAmountNew) ? BigDecimal::ofUnscaledValue($bpeAmountNew, 2) : null;
		$o->bpeAmountExclOld = isset($bpeAmountExclOld) ? BigDecimal::ofUnscaledValue($bpeAmountExclOld, 2) : null;
		$o->bpeAmountExclNew = isset($bpeAmountExclNew) ? BigDecimal::ofUnscaledValue($bpeAmountExclNew, 2) : null;
		$o->priceInCreditsOld = isset($priceInCreditsOld) ? BigDecimal::ofUnscaledValue($priceInCreditsOld, 2) : null;
		$o->priceInCreditsNew = isset($priceInCreditsNew) ? BigDecimal::ofUnscaledValue($priceInCreditsNew, 2) : null;
		$o->totalInclAmountOld = isset($totalInclAmountOld) ? BigDecimal::ofUnscaledValue($totalInclAmountOld, 2) : null;
		$o->totalInclAmountNew = isset($totalInclAmountNew) ? BigDecimal::ofUnscaledValue($totalInclAmountNew, 2) : null;
		$o->totalExclAmountOld = isset($totalExclAmountOld) ? BigDecimal::ofUnscaledValue($totalExclAmountOld, 2) : null;
		$o->totalExclAmountNew = isset($totalExclAmountNew) ? BigDecimal::ofUnscaledValue($totalExclAmountNew, 2) : null;
		return $o;
	}
	private function load_LineChange(\XMLReader $in) : LineChange {
		$n = $in->name;
		$o = new LineChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineId': $o->lineId = $this->load_string_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'pluNumber': $o->pluNumber = $this->load_string_property($in); break;
						case 'supplierRelationNumber': $o->supplierRelationNumber = $this->load_int_property($in); break;
						case 'supplierRelationName': $o->supplierRelationName = $this->load_string_property($in); break;
						case 'supplierArticleNumber': $o->supplierArticleNumber = $this->load_string_property($in); break;
						case 'lineType': $o->lineType = $this->load_string_property($in); break;
						case 'added': $o->added = $this->load_bool_property($in); break;
						case 'removed': $o->removed = $this->load_bool_property($in); break;
						case 'data': $o->data = $this->load_LineChangeData($in); break;
						case 'textOld': $o->textOld = $this->load_string_property($in); break;
						case 'textNew': $o->textNew = $this->load_string_property($in); break;
						case 'translatedTextOld': $o->translatedTextOld = $this->load_string_property($in); break;
						case 'translatedTextNew': $o->translatedTextNew = $this->load_string_property($in); break;
						case 'courseNumberOld': $o->courseNumberOld = $this->load_int_property($in); break;
						case 'courseNumberNew': $o->courseNumberNew = $this->load_int_property($in); break;
						case 'menuHashOld': $o->menuHashOld = $this->load_string_property($in); break;
						case 'menuHashNew': $o->menuHashNew = $this->load_string_property($in); break;
						case 'menuDescriptionOld': $o->menuDescriptionOld = $this->load_string_property($in); break;
						case 'menuDescriptionNew': $o->menuDescriptionNew = $this->load_string_property($in); break;
						case 'menuAmountOld': $menuAmountOld = $this->load_int_property($in); break;
						case 'menuAmountNew': $menuAmountNew = $this->load_int_property($in); break;
						case 'menuSequenceNumberOld': $o->menuSequenceNumberOld = $this->load_int_property($in); break;
						case 'menuSequenceNumberNew': $o->menuSequenceNumberNew = $this->load_int_property($in); break;
						case 'preparationList': $o->preparationList = ($this->load_LineChangeList($in))->lineChange; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->menuAmountOld = isset($menuAmountOld) ? BigDecimal::ofUnscaledValue($menuAmountOld, 2) : null;
		$o->menuAmountNew = isset($menuAmountNew) ? BigDecimal::ofUnscaledValue($menuAmountNew, 2) : null;
		return $o;
	}
	private function load_OrderChange(\XMLReader $in) : OrderChange {
		$n = $in->name;
		$o = new OrderChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'extOrderId': $o->extOrderId = $this->load_string_property($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'entryBranchNumber': $o->entryBranchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'entryExtBranchId': $o->entryExtBranchId = $this->load_string_property($in); break;
						case 'financialBranchNumber': $o->financialBranchNumber = $this->load_int_property($in); break;
						case 'financialExtBranchId': $o->financialExtBranchId = $this->load_string_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'changeCounter': $o->changeCounter = $this->load_int_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'orderNumber': $o->orderNumber = $this->load_YearNumber($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableDescription': $o->tableDescription = $this->load_string_property($in); break;
						case 'orderType': $o->orderType = $this->load_string_property($in); break;
						case 'employeeNumberOld': $o->employeeNumberOld = $this->load_int_property($in); break;
						case 'employeeNumberNew': $o->employeeNumberNew = $this->load_int_property($in); break;
						case 'employeeNameOld': $o->employeeNameOld = $this->load_string_property($in); break;
						case 'employeeNameNew': $o->employeeNameNew = $this->load_string_property($in); break;
						case 'relationNumberOld': $o->relationNumberOld = $this->load_int_property($in); break;
						case 'relationNumberNew': $o->relationNumberNew = $this->load_int_property($in); break;
						case 'relationNameOld': $o->relationNameOld = $this->load_string_property($in); break;
						case 'relationNameNew': $o->relationNameNew = $this->load_string_property($in); break;
						case 'deliveryAddressOld': $o->deliveryAddressOld = $this->load_Address($in); break;
						case 'deliveryAddressNew': $o->deliveryAddressNew = $this->load_Address($in); break;
						case 'invoiceAddressOld': $o->invoiceAddressOld = $this->load_Address($in); break;
						case 'invoiceAddressNew': $o->invoiceAddressNew = $this->load_Address($in); break;
						case 'financialDateOld': $o->financialDateOld = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'financialDateNew': $o->financialDateNew = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'totalInclAmountOld': $totalInclAmountOld = $this->load_int_property($in); break;
						case 'totalInclAmountNew': $totalInclAmountNew = $this->load_int_property($in); break;
						case 'totalExclAmountOld': $totalExclAmountOld = $this->load_int_property($in); break;
						case 'totalExclAmountNew': $totalExclAmountNew = $this->load_int_property($in); break;
						case 'vatMethodOld': $o->vatMethodOld = $this->load_string_property($in); break;
						case 'vatMethodNew': $o->vatMethodNew = $this->load_string_property($in); break;
						case 'deliveryMethodOld': $o->deliveryMethodOld = $this->load_string_property($in); break;
						case 'deliveryMethodNew': $o->deliveryMethodNew = $this->load_string_property($in); break;
						case 'deliveryDateOld': $o->deliveryDateOld = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'deliveryDateNew': $o->deliveryDateNew = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'deliveryPeriodBeginOld': $o->deliveryPeriodBeginOld = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'deliveryPeriodBeginNew': $o->deliveryPeriodBeginNew = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'deliveryPeriodEndOld': $o->deliveryPeriodEndOld = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'deliveryPeriodEndNew': $o->deliveryPeriodEndNew = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'paymentMethodOld': $o->paymentMethodOld = $this->load_string_property($in); break;
						case 'paymentMethodNew': $o->paymentMethodNew = $this->load_string_property($in); break;
						case 'prepaidAmountOld': $prepaidAmountOld = $this->load_int_property($in); break;
						case 'prepaidAmountNew': $prepaidAmountNew = $this->load_int_property($in); break;
						case 'fullyPaidOld': $o->fullyPaidOld = $this->load_bool_property($in); break;
						case 'fullyPaidNew': $o->fullyPaidNew = $this->load_bool_property($in); break;
						case 'deliveryStateOld': $o->deliveryStateOld = $this->load_string_property($in); break;
						case 'deliveryStateNew': $o->deliveryStateNew = $this->load_string_property($in); break;
						case 'cancelStateOld': $o->cancelStateOld = $this->load_string_property($in); break;
						case 'cancelStateNew': $o->cancelStateNew = $this->load_string_property($in); break;
						case 'completeStateOld': $o->completeStateOld = $this->load_string_property($in); break;
						case 'completeStateNew': $o->completeStateNew = $this->load_string_property($in); break;
						case 'numberOfGuestsOld': $o->numberOfGuestsOld = $this->load_int_property($in); break;
						case 'numberOfGuestsNew': $o->numberOfGuestsNew = $this->load_int_property($in); break;
						case 'orderCategoryNumberOld': $o->orderCategoryNumberOld = $this->load_int_property($in); break;
						case 'orderCategoryNumberNew': $o->orderCategoryNumberNew = $this->load_int_property($in); break;
						case 'orderCategoryDescriptionOld': $o->orderCategoryDescriptionOld = $this->load_string_property($in); break;
						case 'orderCategoryDescriptionNew': $o->orderCategoryDescriptionNew = $this->load_string_property($in); break;
						case 'lineChangeList': $o->lineChangeList = ($this->load_LineChangeList($in))->lineChange; break;
						case 'vatChangeOld': $o->vatChangeOld = $this->load_string_property($in); break;
						case 'vatChangeNew': $o->vatChangeNew = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmountOld = isset($totalInclAmountOld) ? BigDecimal::ofUnscaledValue($totalInclAmountOld, 2) : null;
		$o->totalInclAmountNew = isset($totalInclAmountNew) ? BigDecimal::ofUnscaledValue($totalInclAmountNew, 2) : null;
		$o->totalExclAmountOld = isset($totalExclAmountOld) ? BigDecimal::ofUnscaledValue($totalExclAmountOld, 2) : null;
		$o->totalExclAmountNew = isset($totalExclAmountNew) ? BigDecimal::ofUnscaledValue($totalExclAmountNew, 2) : null;
		$o->prepaidAmountOld = isset($prepaidAmountOld) ? BigDecimal::ofUnscaledValue($prepaidAmountOld, 2) : null;
		$o->prepaidAmountNew = isset($prepaidAmountNew) ? BigDecimal::ofUnscaledValue($prepaidAmountNew, 2) : null;
		return $o;
	}
	private function load_OrderChangeList(\XMLReader $in) : OrderChangeList {
		$n = $in->name;
		$o = new OrderChangeList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderChange': $o->orderChange[] = $this->load_OrderChange($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOrderChangesRequest(\XMLReader $in) : GetOrderChangesRequest {
		$n = $in->name;
		$o = new GetOrderChangesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'fromFinancialDate': $o->fromFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughFinancialDate': $o->throughFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'employeeNumbers': $o->employeeNumbers[] = $this->load_int_property($in); break;
						case 'relationNumbers': $o->relationNumbers[] = $this->load_int_property($in); break;
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
						case 'articleTurnoverGroups': $o->articleTurnoverGroups[] = $this->load_int_property($in); break;
						case 'articlePluNumbers': $o->articlePluNumbers = ($this->load_TextList($in))->text; break;
						case 'articleBarcodes': $o->articleBarcodes = ($this->load_TextList($in))->text; break;
						case 'orderTypeList': $o->orderTypeList = ($this->load_OrderTypeList($in))->orderType; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OrderPaymentList(\XMLReader $in) : OrderPaymentList {
		$n = $in->name;
		$o = new OrderPaymentList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderPayment': $o->orderPayment[] = $this->load_OrderPayment($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LineChangeEventList(\XMLReader $in) : LineChangeEventList {
		$n = $in->name;
		$o = new LineChangeEventList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineChangeEvent': $o->lineChangeEvent[] = $this->load_LineChangeEvent($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LONG64_DataChange(\XMLReader $in) : LONG64_DataChange {
		$n = $in->name;
		$o = new LONG64_DataChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'oldValue': $o->oldValue = $this->load_int_property($in); break;
						case 'newValue': $o->newValue = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Decimal_DataChange(\XMLReader $in) : Decimal_DataChange {
		$n = $in->name;
		$o = new Decimal_DataChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'oldValue': $o->oldValue = $this->load_BigDecimal_property($in); break;
						case 'newValue': $o->newValue = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SoapMplusDate_DataChange(\XMLReader $in) : SoapMplusDate_DataChange {
		$n = $in->name;
		$o = new SoapMplusDate_DataChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'oldValue': $o->oldValue = $this->load_Date_property($in); break;
						case 'newValue': $o->newValue = $this->load_Date_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SoapMplusDateTime_DataChange(\XMLReader $in) : SoapMplusDateTime_DataChange {
		$n = $in->name;
		$o = new SoapMplusDateTime_DataChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'oldValue': $o->oldValue = $this->load_DateTime_property($in); break;
						case 'newValue': $o->newValue = $this->load_DateTime_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Int_DataChange(\XMLReader $in) : Int_DataChange {
		$n = $in->name;
		$o = new Int_DataChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'oldValue': $o->oldValue = $this->load_int_property($in); break;
						case 'newValue': $o->newValue = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Bool_DataChange(\XMLReader $in) : Bool_DataChange {
		$n = $in->name;
		$o = new Bool_DataChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'oldValue': $o->oldValue = $this->load_bool_property($in); break;
						case 'newValue': $o->newValue = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_String_DataChange(\XMLReader $in) : String_DataChange {
		$n = $in->name;
		$o = new String_DataChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'oldValue': $o->oldValue = $this->load_string_property($in); break;
						case 'newValue': $o->newValue = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TableNumber_DataChange(\XMLReader $in) : TableNumber_DataChange {
		$n = $in->name;
		$o = new TableNumber_DataChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'oldValue': $o->oldValue = $this->load_TableNumber($in); break;
						case 'newValue': $o->newValue = $this->load_TableNumber($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OrderCancelState_DataChange(\XMLReader $in) : OrderCancelState_DataChange {
		$n = $in->name;
		$o = new OrderCancelState_DataChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'oldValue': $o->oldValue = $this->load_string_property($in); break;
						case 'newValue': $o->newValue = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OrderDeliveryState_DataChange(\XMLReader $in) : OrderDeliveryState_DataChange {
		$n = $in->name;
		$o = new OrderDeliveryState_DataChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'oldValue': $o->oldValue = $this->load_string_property($in); break;
						case 'newValue': $o->newValue = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OrderCompleteState_DataChange(\XMLReader $in) : OrderCompleteState_DataChange {
		$n = $in->name;
		$o = new OrderCompleteState_DataChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'oldValue': $o->oldValue = $this->load_string_property($in); break;
						case 'newValue': $o->newValue = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VatMethod_DataChange(\XMLReader $in) : VatMethod_DataChange {
		$n = $in->name;
		$o = new VatMethod_DataChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'oldValue': $o->oldValue = $this->load_string_property($in); break;
						case 'newValue': $o->newValue = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VatChange_DataChange(\XMLReader $in) : VatChange_DataChange {
		$n = $in->name;
		$o = new VatChange_DataChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'oldValue': $o->oldValue = $this->load_string_property($in); break;
						case 'newValue': $o->newValue = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TableSplitEvent(\XMLReader $in) : TableSplitEvent {
		$n = $in->name;
		$o = new TableSplitEvent();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TurnoverGroupType_DataChange(\XMLReader $in) : TurnoverGroupType_DataChange {
		$n = $in->name;
		$o = new TurnoverGroupType_DataChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'oldValue': $o->oldValue = $this->load_string_property($in); break;
						case 'newValue': $o->newValue = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DiscountType_DataChange(\XMLReader $in) : DiscountType_DataChange {
		$n = $in->name;
		$o = new DiscountType_DataChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'oldValue': $o->oldValue = $this->load_string_property($in); break;
						case 'newValue': $o->newValue = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LineChangeEventData(\XMLReader $in) : LineChangeEventData {
		$n = $in->name;
		$o = new LineChangeEventData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'quantity': $o->quantity = $this->load_LONG64_DataChange($in); break;
						case 'decimalPlaces': $o->decimalPlaces = $this->load_Int_DataChange($in); break;
						case 'price': $o->price = $this->load_Decimal_DataChange($in); break;
						case 'priceExcl': $o->priceExcl = $this->load_Decimal_DataChange($in); break;
						case 'originalPrice': $o->originalPrice = $this->load_Decimal_DataChange($in); break;
						case 'originalPriceExcl': $o->originalPriceExcl = $this->load_Decimal_DataChange($in); break;
						case 'purchasePrice': $o->purchasePrice = $this->load_Decimal_DataChange($in); break;
						case 'averagePurchasePrice': $o->averagePurchasePrice = $this->load_Decimal_DataChange($in); break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_Int_DataChange($in); break;
						case 'turnoverGroupName': $o->turnoverGroupName = $this->load_String_DataChange($in); break;
						case 'turnoverGroupType': $o->turnoverGroupType = $this->load_TurnoverGroupType_DataChange($in); break;
						case 'vatCode': $o->vatCode = $this->load_Int_DataChange($in); break;
						case 'vatPercentage': $o->vatPercentage = $this->load_Decimal_DataChange($in); break;
						case 'siUnit': $o->siUnit = $this->load_String_DataChange($in); break;
						case 'discountType': $o->discountType = $this->load_DiscountType_DataChange($in); break;
						case 'discountDescription': $o->discountDescription = $this->load_String_DataChange($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_Decimal_DataChange($in); break;
						case 'discountAmount': $o->discountAmount = $this->load_Decimal_DataChange($in); break;
						case 'discountAmountExcl': $o->discountAmountExcl = $this->load_Decimal_DataChange($in); break;
						case 'deliveryDate': $o->deliveryDate = $this->load_SoapMplusDate_DataChange($in); break;
						case 'deliveryPeriodBegin': $o->deliveryPeriodBegin = $this->load_SoapMplusDateTime_DataChange($in); break;
						case 'deliveryPeriodEnd': $o->deliveryPeriodEnd = $this->load_SoapMplusDateTime_DataChange($in); break;
						case 'pointsAmount': $o->pointsAmount = $this->load_Decimal_DataChange($in); break;
						case 'pointsAmountExcl': $o->pointsAmountExcl = $this->load_Decimal_DataChange($in); break;
						case 'bpeId': $o->bpeId = $this->load_String_DataChange($in); break;
						case 'bpeDescription': $o->bpeDescription = $this->load_String_DataChange($in); break;
						case 'bpeAmount': $o->bpeAmount = $this->load_Decimal_DataChange($in); break;
						case 'bpeAmountExcl': $o->bpeAmountExcl = $this->load_Decimal_DataChange($in); break;
						case 'priceInCredits': $o->priceInCredits = $this->load_Decimal_DataChange($in); break;
						case 'totalInclAmount': $o->totalInclAmount = $this->load_Decimal_DataChange($in); break;
						case 'totalExclAmount': $o->totalExclAmount = $this->load_Decimal_DataChange($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LineChangeEvent(\XMLReader $in) : LineChangeEvent {
		$n = $in->name;
		$o = new LineChangeEvent();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineId': $o->lineId = $this->load_string_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'pluNumber': $o->pluNumber = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'supplierRelationNumber': $o->supplierRelationNumber = $this->load_int_property($in); break;
						case 'supplierRelationName': $o->supplierRelationName = $this->load_string_property($in); break;
						case 'supplierArticleNumber': $o->supplierArticleNumber = $this->load_string_property($in); break;
						case 'subLineType': $o->subLineType = $this->load_string_property($in); break;
						case 'mainLineId': $o->mainLineId = $this->load_string_property($in); break;
						case 'added': $o->added = $this->load_bool_property($in); break;
						case 'removed': $o->removed = $this->load_bool_property($in); break;
						case 'data': $o->data = $this->load_LineChangeEventData($in); break;
						case 'textChange': $o->textChange = $this->load_String_DataChange($in); break;
						case 'translatedText': $o->translatedText = $this->load_String_DataChange($in); break;
						case 'courseNumber': $o->courseNumber = $this->load_Int_DataChange($in); break;
						case 'menuHash': $o->menuHash = $this->load_String_DataChange($in); break;
						case 'menuDescription': $o->menuDescription = $this->load_String_DataChange($in); break;
						case 'menuAmount': $o->menuAmount = $this->load_Decimal_DataChange($in); break;
						case 'menuSequenceNumber': $o->menuSequenceNumber = $this->load_Int_DataChange($in); break;
						case 'preparationList': $o->preparationList = ($this->load_LineChangeEventList($in))->lineChangeEvent; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OrderPayment(\XMLReader $in) : OrderPayment {
		$n = $in->name;
		$o = new OrderPayment();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'paymentId': $o->paymentId = $this->load_string_property($in); break;
						case 'financialTransactionId': $o->financialTransactionId = $this->load_string_property($in); break;
						case 'posTransactionId': $o->posTransactionId = $this->load_string_property($in); break;
						case 'sequenceNumber': $o->sequenceNumber = $this->load_int_property($in); break;
						case 'amount': $o->amount = $this->load_BigDecimal_property($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_DateTime_property($in); break;
						case 'paymentMethodId': $o->paymentMethodId = $this->load_string_property($in); break;
						case 'paymentMethodDescription': $o->paymentMethodDescription = $this->load_string_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'paymentTransactionId': $o->paymentTransactionId = $this->load_string_property($in); break;
						case 'credits': $o->credits = $this->load_int_property($in); break;
						case 'valuePerCredit': $o->valuePerCredit = $this->load_BigDecimal_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeName': $o->employeeName = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OrderHistory(\XMLReader $in) : OrderHistory {
		$n = $in->name;
		$o = new OrderHistory();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'entryTimestamp': $o->entryTimestamp = $this->load_DateTime_property($in); break;
						case 'changeCounter': $o->changeCounter = $this->load_int_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_LONG64_DataChange($in); break;
						case 'employeeName': $o->employeeName = $this->load_String_DataChange($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_LONG64_DataChange($in); break;
						case 'relationName': $o->relationName = $this->load_String_DataChange($in); break;
						case 'financialDate': $o->financialDate = $this->load_SoapMplusDate_DataChange($in); break;
						case 'totalInclAmount': $o->totalInclAmount = $this->load_Decimal_DataChange($in); break;
						case 'totalExclAmount': $o->totalExclAmount = $this->load_Decimal_DataChange($in); break;
						case 'vatMethod': $o->vatMethod = $this->load_VatMethod_DataChange($in); break;
						case 'deliveryMethod': $o->deliveryMethod = $this->load_String_DataChange($in); break;
						case 'deliveryDate': $o->deliveryDate = $this->load_SoapMplusDate_DataChange($in); break;
						case 'deliveryPeriodBegin': $o->deliveryPeriodBegin = $this->load_SoapMplusDateTime_DataChange($in); break;
						case 'deliveryPeriodEnd': $o->deliveryPeriodEnd = $this->load_SoapMplusDateTime_DataChange($in); break;
						case 'paymentMethod': $o->paymentMethod = $this->load_String_DataChange($in); break;
						case 'prepaidAmount': $o->prepaidAmount = $this->load_Decimal_DataChange($in); break;
						case 'fullyPaid': $o->fullyPaid = $this->load_Bool_DataChange($in); break;
						case 'deliveryState': $o->deliveryState = $this->load_OrderDeliveryState_DataChange($in); break;
						case 'cancelState': $o->cancelState = $this->load_OrderCancelState_DataChange($in); break;
						case 'completeState': $o->completeState = $this->load_OrderCompleteState_DataChange($in); break;
						case 'numberOfGuests': $o->numberOfGuests = $this->load_Int_DataChange($in); break;
						case 'orderCategoryNumber': $o->orderCategoryNumber = $this->load_Int_DataChange($in); break;
						case 'orderCategoryDescription': $o->orderCategoryDescription = $this->load_String_DataChange($in); break;
						case 'lineChangeEventList': $o->lineChangeEventList = ($this->load_LineChangeEventList($in))->lineChangeEvent; break;
						case 'vatChange': $o->vatChange = $this->load_VatChange_DataChange($in); break;
						case 'tableSplitTo': $o->tableSplitTo = $this->load_TableSplitEvent($in); break;
						case 'tableSplitFrom': $o->tableSplitFrom = $this->load_TableSplitEvent($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OrderHistoryList(\XMLReader $in) : OrderHistoryList {
		$n = $in->name;
		$o = new OrderHistoryList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderHistory': $o->orderHistory[] = $this->load_OrderHistory($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OrderHistoryOrderDetails(\XMLReader $in) : OrderHistoryOrderDetails {
		$n = $in->name;
		$o = new OrderHistoryOrderDetails();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'extOrderId': $o->extOrderId = $this->load_string_property($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_DateTime_property($in); break;
						case 'entryBranchNumber': $o->entryBranchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'entryExtBranchId': $o->entryExtBranchId = $this->load_string_property($in); break;
						case 'financialBranchNumber': $o->financialBranchNumber = $this->load_int_property($in); break;
						case 'financialExtBranchId': $o->financialExtBranchId = $this->load_string_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'orderNumber': $o->orderNumber = $this->load_YearNumber($in); break;
						case 'cateringOrderNumber': $o->cateringOrderNumber = $this->load_YearNumberVersion($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableDescription': $o->tableDescription = $this->load_string_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
						case 'tableMove': $o->tableMove = $this->load_TableNumber_DataChange($in); break;
						case 'orderType': $o->orderType = $this->load_string_property($in); break;
						case 'orderHistoryList': $o->orderHistoryList = ($this->load_OrderHistoryList($in))->orderHistory; break;
						case 'orderPaymentList': $o->orderPaymentList = ($this->load_OrderPaymentList($in))->orderPayment; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OrderHistoryOrderDetailsList(\XMLReader $in) : OrderHistoryOrderDetailsList {
		$n = $in->name;
		$o = new OrderHistoryOrderDetailsList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'salesOrderHistory': $o->salesOrderHistory[] = $this->load_OrderHistoryOrderDetails($in); break;
						case 'externalSalesOrderHistory': $o->externalSalesOrderHistory[] = $this->load_OrderHistoryOrderDetails($in); break;
						case 'repeatSalesOrderHistory': $o->repeatSalesOrderHistory[] = $this->load_OrderHistoryOrderDetails($in); break;
						case 'tableOrderHistory': $o->tableOrderHistory[] = $this->load_OrderHistoryOrderDetails($in); break;
						case 'cafeteriaOrderHistory': $o->cafeteriaOrderHistory[] = $this->load_OrderHistoryOrderDetails($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOrderHistoryRequest(\XMLReader $in) : GetOrderHistoryRequest {
		$n = $in->name;
		$o = new GetOrderHistoryRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'fromEntryDateTime': $o->fromEntryDateTime = $this->load_DateTime_property($in); break;
						case 'throughEntryDateTime': $o->throughEntryDateTime = $this->load_DateTime_property($in); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'employeeNumbers': $o->employeeNumbers[] = $this->load_int_property($in); break;
						case 'relationNumbers': $o->relationNumbers[] = $this->load_int_property($in); break;
						case 'tableNumberList': $o->tableNumberList = ($this->load_TableNumberList($in))->tableNumber; break;
						case 'orderTypeList': $o->orderTypeList = ($this->load_OrderTypeList($in))->orderType; break;
						case 'orderIdList': $o->orderIdList = ($this->load_IdList($in))->id; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CancelOrderRequest(\XMLReader $in) : CancelOrderRequest {
		$n = $in->name;
		$o = new CancelOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CancelOrderV2Request(\XMLReader $in) : CancelOrderV2Request {
		$n = $in->name;
		$o = new CancelOrderV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'workplace': $o->workplace = $this->load_WorkplaceIdentifier($in); break;
						case 'employee': $o->employee = $this->load_EmployeeIdentifier($in); break;
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CancelTableOrderRequest(\XMLReader $in) : CancelTableOrderRequest {
		$n = $in->name;
		$o = new CancelTableOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PayInvoiceRequest(\XMLReader $in) : PayInvoiceRequest {
		$n = $in->name;
		$o = new PayInvoiceRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
						case 'paymentList': $o->paymentList = ($this->load_PaymentList($in))->payment; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeliverOrderRequest(\XMLReader $in) : DeliverOrderRequest {
		$n = $in->name;
		$o = new DeliverOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'turnoverType': $o->turnoverType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OrderDeliveryLine(\XMLReader $in) : OrderDeliveryLine {
		$n = $in->name;
		$o = new OrderDeliveryLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineId': $o->lineId = $this->load_string_property($in); break;
						case 'quantity': $quantity = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->quantity = isset($quantity) ? BigDecimal::ofUnscaledValue($quantity, $decimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_OrderDeliveryLineList(\XMLReader $in) : OrderDeliveryLineList {
		$n = $in->name;
		$o = new OrderDeliveryLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'line': $o->line[] = $this->load_OrderDeliveryLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OrderDelivery(\XMLReader $in) : OrderDelivery {
		$n = $in->name;
		$o = new OrderDelivery();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'lineList': $o->lineList = ($this->load_OrderDeliveryLineList($in))->line; break;
						case 'turnoverType': $o->turnoverType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeliverOrderV2Request(\XMLReader $in) : DeliverOrderV2Request {
		$n = $in->name;
		$o = new DeliverOrderV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderDelivery': $o->orderDelivery = $this->load_OrderDelivery($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OrderCategory(\XMLReader $in) : OrderCategory {
		$n = $in->name;
		$o = new OrderCategory();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderCategoryNumber': $o->orderCategoryNumber = $this->load_int_property($in); break;
						case 'orderCategoryDescription': $o->orderCategoryDescription = $this->load_string_property($in); break;
						case 'orderCategoryDependencyNumbers': $o->orderCategoryDependencyNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Receipt(\XMLReader $in) : Receipt {
		$n = $in->name;
		$o = new Receipt();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'receiptId': $o->receiptId = $this->load_string_property($in); break;
						case 'extReceiptId': $o->extReceiptId = $this->load_string_property($in); break;
						case 'orderIds': $o->orderIds = ($this->load_IdList($in))->id; break;
						case 'extOrderIds': $o->extOrderIds = ($this->load_IdList($in))->id; break;
						case 'transactionString': $o->transactionString = $this->load_string_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'receiptNumber': $o->receiptNumber = $this->load_WorkplaceYearNumber($in); break;
						case 'receiptBarcode': $o->receiptBarcode = $this->load_string_property($in); break;
						case 'receiptType': $o->receiptType = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeName': $o->employeeName = $this->load_string_property($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
						case 'relationCategoryId': $o->relationCategoryId = $this->load_int_property($in); break;
						case 'relationBankAccountNumber': $o->relationBankAccountNumber = $this->load_string_property($in); break;
						case 'financialDate': $o->financialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'financialBranchNumber': $o->financialBranchNumber = $this->load_int_property($in); break;
						case 'financialExtBranchId': $o->financialExtBranchId = $this->load_string_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'entryBranchNumber': $o->entryBranchNumber = $this->load_int_property($in); break;
						case 'entryExtBranchId': $o->entryExtBranchId = $this->load_string_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'vatMethod': $o->vatMethod = $this->load_string_property($in); break;
						case 'vatGroupList': $o->vatGroupList = ($this->load_VatGroupList($in))->vatGroup; break;
						case 'changeCounter': $o->changeCounter = $this->load_int_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'paidAmount': $paidAmount = $this->load_int_property($in); break;
						case 'state': $o->state = $this->load_string_property($in); break;
						case 'lineList': $o->lineList = ($this->load_LineList($in))->line; break;
						case 'paymentList': $o->paymentList = ($this->load_PaymentList($in))->payment; break;
						case 'answerList': $o->answerList = ($this->load_AnswerList($in))->answer; break;
						case 'vatChange': $o->vatChange = $this->load_string_property($in); break;
						case 'numberOfGuests': $o->numberOfGuests = $this->load_int_property($in); break;
						case 'creditedReceiptId': $o->creditedReceiptId = $this->load_string_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
						case 'salesCategoryNumber': $o->salesCategoryNumber = $this->load_int_property($in); break;
						case 'salesCategoryDescription': $o->salesCategoryDescription = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		$o->paidAmount = isset($paidAmount) ? BigDecimal::ofUnscaledValue($paidAmount, 2) : null;
		return $o;
	}
	private function load_ReceiptList(\XMLReader $in) : ReceiptList {
		$n = $in->name;
		$o = new ReceiptList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'receipt': $o->receipt[] = $this->load_Receipt($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetReceiptsRequest(\XMLReader $in) : GetReceiptsRequest {
		$n = $in->name;
		$o = new GetReceiptsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'fromFinancialDate': $o->fromFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughFinancialDate': $o->throughFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'employeeNumbers': $o->employeeNumbers[] = $this->load_int_property($in); break;
						case 'relationNumbers': $o->relationNumbers[] = $this->load_int_property($in); break;
						case 'supplierRelationNumbers': $o->supplierRelationNumbers[] = $this->load_int_property($in); break;
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
						case 'articleTurnoverGroups': $o->articleTurnoverGroups[] = $this->load_int_property($in); break;
						case 'articlePluNumbers': $o->articlePluNumbers = ($this->load_TextList($in))->text; break;
						case 'articleBarcodes': $o->articleBarcodes = ($this->load_TextList($in))->text; break;
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
						case 'includeOrderReferences': $o->includeOrderReferences = $this->load_bool_property($in); break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
						case 'receiptIds': $o->receiptIds[] = $this->load_string_property($in); break;
						case 'includeLineList': $o->includeLineList = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetReceiptsByCashCountRequest(\XMLReader $in) : GetReceiptsByCashCountRequest {
		$n = $in->name;
		$o = new GetReceiptsByCashCountRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cashCountId': $o->cashCountId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintReceiptV2Request(\XMLReader $in) : PrintReceiptV2Request {
		$n = $in->name;
		$o = new PrintReceiptV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'workplaceIdentifier': $o->workplaceIdentifier = $this->load_WorkplaceIdentifier($in); break;
						case 'tableIdentifier': $o->tableIdentifier = $this->load_TableIdentifier($in); break;
						case 'receiptId': $o->receiptId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintTableReceiptRequest(\XMLReader $in) : PrintTableReceiptRequest {
		$n = $in->name;
		$o = new PrintTableReceiptRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintTableReceiptV3Request(\XMLReader $in) : PrintTableReceiptV3Request {
		$n = $in->name;
		$o = new PrintTableReceiptV3Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'workplaceIdentifier': $o->workplaceIdentifier = $this->load_WorkplaceIdentifier($in); break;
						case 'tableIdentifier': $o->tableIdentifier = $this->load_TableIdentifier($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetInvoicesRequest(\XMLReader $in) : GetInvoicesRequest {
		$n = $in->name;
		$o = new GetInvoicesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'fromFinancialDate': $o->fromFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughFinancialDate': $o->throughFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'employeeNumbers': $o->employeeNumbers[] = $this->load_int_property($in); break;
						case 'relationNumbers': $o->relationNumbers[] = $this->load_int_property($in); break;
						case 'supplierRelationNumbers': $o->supplierRelationNumbers[] = $this->load_int_property($in); break;
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
						case 'articleTurnoverGroups': $o->articleTurnoverGroups[] = $this->load_int_property($in); break;
						case 'articlePluNumbers': $o->articlePluNumbers = ($this->load_TextList($in))->text; break;
						case 'articleBarcodes': $o->articleBarcodes = ($this->load_TextList($in))->text; break;
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
						case 'finalizeInvoices': $o->finalizeInvoices = $this->load_bool_property($in); break;
						case 'invoiceIds': $o->invoiceIds[] = $this->load_string_property($in); break;
						case 'invoiceNumbers': $o->invoiceNumbers[] = $this->load_YearNumber($in); break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
						case 'includeLineList': $o->includeLineList = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveInvoiceInfo(\XMLReader $in) : SaveInvoiceInfo {
		$n = $in->name;
		$o = new SaveInvoiceInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
						case 'invoiceString': $o->invoiceString = $this->load_string_property($in); break;
						case 'invoiceNumber': $o->invoiceNumber = $this->load_YearNumber($in); break;
						case 'invoiceBarcode': $o->invoiceBarcode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_JournalFilterList(\XMLReader $in) : JournalFilterList {
		$n = $in->name;
		$o = new JournalFilterList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'journalFilter': $o->journalFilter[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TurnoverGroup(\XMLReader $in) : TurnoverGroup {
		$n = $in->name;
		$o = new TurnoverGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnoverGroupType': $o->turnoverGroupType = $this->load_string_property($in); break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_int_property($in); break;
						case 'turnoverGroupName': $o->turnoverGroupName = $this->load_string_property($in); break;
						case 'inclAmount': $inclAmount = $this->load_int_property($in); break;
						case 'exclAmount': $exclAmount = $this->load_int_property($in); break;
						case 'defaultAccountNumber': $o->defaultAccountNumber = $this->load_int_property($in); break;
						case 'accountNumber': $o->accountNumber = $this->load_int_property($in); break;
						case 'allowPointsDistribution': $o->allowPointsDistribution = $this->load_bool_property($in); break;
						case 'allowPointsPayment': $o->allowPointsPayment = $this->load_bool_property($in); break;
						case 'allowDiscount': $o->allowDiscount = $this->load_bool_property($in); break;
						case 'branchAccountNumberList': $o->branchAccountNumberList = ($this->load_BranchAccountNumberList($in))->branchAccountNumber; break;
						case 'defaultPurchaseAccountNumber': $o->defaultPurchaseAccountNumber = $this->load_int_property($in); break;
						case 'purchaseAccountNumber': $o->purchaseAccountNumber = $this->load_int_property($in); break;
						case 'defaultStockAccountNumber': $o->defaultStockAccountNumber = $this->load_int_property($in); break;
						case 'stockAccountNumber': $o->stockAccountNumber = $this->load_int_property($in); break;
						case 'defaultVatCode': $o->defaultVatCode = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->inclAmount = isset($inclAmount) ? BigDecimal::ofUnscaledValue($inclAmount, 2) : null;
		$o->exclAmount = isset($exclAmount) ? BigDecimal::ofUnscaledValue($exclAmount, 2) : null;
		return $o;
	}
	private function load_TurnoverGroupList(\XMLReader $in) : TurnoverGroupList {
		$n = $in->name;
		$o = new TurnoverGroupList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnoverGroup': $o->turnoverGroup[] = $this->load_TurnoverGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashCountLine(\XMLReader $in) : CashCountLine {
		$n = $in->name;
		$o = new CashCountLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'paymentMethod': $o->paymentMethod = $this->load_string_property($in); break;
						case 'paymentMethodType': $o->paymentMethodType = $this->load_string_property($in); break;
						case 'accountNumber': $o->accountNumber = $this->load_int_property($in); break;
						case 'startAmount': $startAmount = $this->load_int_property($in); break;
						case 'addedAmount': $addedAmount = $this->load_int_property($in); break;
						case 'countedAmount': $countedAmount = $this->load_int_property($in); break;
						case 'depositedAmount': $depositedAmount = $this->load_int_property($in); break;
						case 'differenceAmount': $differenceAmount = $this->load_int_property($in); break;
						case 'differenceAccountNumber': $o->differenceAccountNumber = $this->load_int_property($in); break;
						case 'endAmount': $endAmount = $this->load_int_property($in); break;
						case 'depositPaymentMethod': $o->depositPaymentMethod = $this->load_string_property($in); break;
						case 'depositPaymentMethodType': $o->depositPaymentMethodType = $this->load_string_property($in); break;
						case 'depositAccountNumber': $o->depositAccountNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->startAmount = isset($startAmount) ? BigDecimal::ofUnscaledValue($startAmount, 2) : null;
		$o->addedAmount = isset($addedAmount) ? BigDecimal::ofUnscaledValue($addedAmount, 2) : null;
		$o->countedAmount = isset($countedAmount) ? BigDecimal::ofUnscaledValue($countedAmount, 2) : null;
		$o->depositedAmount = isset($depositedAmount) ? BigDecimal::ofUnscaledValue($depositedAmount, 2) : null;
		$o->differenceAmount = isset($differenceAmount) ? BigDecimal::ofUnscaledValue($differenceAmount, 2) : null;
		$o->endAmount = isset($endAmount) ? BigDecimal::ofUnscaledValue($endAmount, 2) : null;
		return $o;
	}
	private function load_CashCountLineList(\XMLReader $in) : CashCountLineList {
		$n = $in->name;
		$o = new CashCountLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cashCountLine': $o->cashCountLine[] = $this->load_CashCountLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Transaction(\XMLReader $in) : Transaction {
		$n = $in->name;
		$o = new Transaction();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'transactionId': $o->transactionId = $this->load_string_property($in); break;
						case 'transactionString': $o->transactionString = $this->load_string_property($in); break;
						case 'financialDate': $o->financialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'transactionNumber': $o->transactionNumber = $this->load_YearNumber($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashCountExtraWorkplace(\XMLReader $in) : CashCountExtraWorkplace {
		$n = $in->name;
		$o = new CashCountExtraWorkplace();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'shiftFirstReceiptId': $o->shiftFirstReceiptId = $this->load_string_property($in); break;
						case 'shiftFirstTransaction': $o->shiftFirstTransaction = $this->load_Transaction($in); break;
						case 'shiftLastReceiptId': $o->shiftLastReceiptId = $this->load_string_property($in); break;
						case 'shiftLastTransaction': $o->shiftLastTransaction = $this->load_Transaction($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashCountExtraWorkplaceList(\XMLReader $in) : CashCountExtraWorkplaceList {
		$n = $in->name;
		$o = new CashCountExtraWorkplaceList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cashCountExtraWorkplace': $o->cashCountExtraWorkplace[] = $this->load_CashCountExtraWorkplace($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashCount(\XMLReader $in) : CashCount {
		$n = $in->name;
		$o = new CashCount();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cashCountId': $o->cashCountId = $this->load_string_property($in); break;
						case 'cashCountString': $o->cashCountString = $this->load_string_property($in); break;
						case 'financialDate': $o->financialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'extraWorkplaceNumbers': $o->extraWorkplaceNumbers[] = $this->load_int_property($in); break;
						case 'cashCountNumber': $o->cashCountNumber = $this->load_YearNumber($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'countingEmployeeNumber': $o->countingEmployeeNumber = $this->load_int_property($in); break;
						case 'isFinalized': $o->isFinalized = $this->load_bool_property($in); break;
						case 'shiftFirstReceiptId': $o->shiftFirstReceiptId = $this->load_string_property($in); break;
						case 'shiftFirstTransaction': $o->shiftFirstTransaction = $this->load_Transaction($in); break;
						case 'shiftLastReceiptId': $o->shiftLastReceiptId = $this->load_string_property($in); break;
						case 'shiftLastTransaction': $o->shiftLastTransaction = $this->load_Transaction($in); break;
						case 'cashCountExtraWorkplaceList': $o->cashCountExtraWorkplaceList = ($this->load_CashCountExtraWorkplaceList($in))->cashCountExtraWorkplace; break;
						case 'cashCountLineList': $o->cashCountLineList = ($this->load_CashCountLineList($in))->cashCountLine; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashCountList(\XMLReader $in) : CashCountList {
		$n = $in->name;
		$o = new CashCountList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cashCount': $o->cashCount[] = $this->load_CashCount($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Journal(\XMLReader $in) : Journal {
		$n = $in->name;
		$o = new Journal();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'financialDate': $o->financialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'journalFilterList': $o->journalFilterList = ($this->load_JournalFilterList($in))->journalFilter; break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'turnoverGroupList': $o->turnoverGroupList = ($this->load_TurnoverGroupList($in))->turnoverGroup; break;
						case 'paymentList': $o->paymentList = ($this->load_PaymentList($in))->payment; break;
						case 'vatGroupList': $o->vatGroupList = ($this->load_VatGroupList($in))->vatGroup; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_JournalList(\XMLReader $in) : JournalList {
		$n = $in->name;
		$o = new JournalList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'journal': $o->journal[] = $this->load_Journal($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetJournalsRequest(\XMLReader $in) : GetJournalsRequest {
		$n = $in->name;
		$o = new GetJournalsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fromFinancialDate': $o->fromFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughFinancialDate': $o->throughFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'journalFilterList': $o->journalFilterList = ($this->load_JournalFilterList($in))->journalFilter; break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_FinancialGroup(\XMLReader $in) : FinancialGroup {
		$n = $in->name;
		$o = new FinancialGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'financialGroupType': $o->financialGroupType = $this->load_string_property($in); break;
						case 'financialGroupSource': $o->financialGroupSource = $this->load_string_property($in); break;
						case 'financialGroupNumber': $o->financialGroupNumber = $this->load_int_property($in); break;
						case 'financialGroupId': $o->financialGroupId = $this->load_string_property($in); break;
						case 'financialGroupName': $o->financialGroupName = $this->load_string_property($in); break;
						case 'accountNumber': $o->accountNumber = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'workplaceNumbers': $o->workplaceNumbers[] = $this->load_int_property($in); break;
						case 'fromFinancialDate': $o->fromFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughFinancialDate': $o->throughFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'fromFinancialDateTime': $o->fromFinancialDateTime = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'throughFinancialDateTime': $o->throughFinancialDateTime = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'financialPeriodClosed': $o->financialPeriodClosed = $this->load_bool_property($in); break;
						case 'quantity': $quantity = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
						case 'inclAmount': $inclAmount = $this->load_int_property($in); break;
						case 'exclAmount': $exclAmount = $this->load_int_property($in); break;
						case 'purchaseAmount': $purchaseAmount = $this->load_int_property($in); break;
						case 'vatGroupList': $o->vatGroupList = ($this->load_VatGroupList($in))->vatGroup; break;
						case 'purchaseAccountNumber': $o->purchaseAccountNumber = $this->load_int_property($in); break;
						case 'stockAccountNumber': $o->stockAccountNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->quantity = isset($quantity) ? BigDecimal::ofUnscaledValue($quantity, $decimalPlaces ?? 2) : null;
		$o->inclAmount = isset($inclAmount) ? BigDecimal::ofUnscaledValue($inclAmount, 2) : null;
		$o->exclAmount = isset($exclAmount) ? BigDecimal::ofUnscaledValue($exclAmount, 2) : null;
		$o->purchaseAmount = isset($purchaseAmount) ? BigDecimal::ofUnscaledValue($purchaseAmount, 2) : null;
		return $o;
	}
	private function load_FinancialGroupList(\XMLReader $in) : FinancialGroupList {
		$n = $in->name;
		$o = new FinancialGroupList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'financialGroup': $o->financialGroup[] = $this->load_FinancialGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetFinancialJournalRequest(\XMLReader $in) : GetFinancialJournalRequest {
		$n = $in->name;
		$o = new GetFinancialJournalRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fromFinancialDate': $o->fromFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughFinancialDate': $o->throughFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetFinancialJournalByCashCountRequest(\XMLReader $in) : GetFinancialJournalByCashCountRequest {
		$n = $in->name;
		$o = new GetFinancialJournalByCashCountRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cashCountId': $o->cashCountId = $this->load_string_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCashCountListRequest(\XMLReader $in) : GetCashCountListRequest {
		$n = $in->name;
		$o = new GetCashCountListRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fromFinancialDate': $o->fromFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughFinancialDate': $o->throughFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'sinceCashCount': $o->sinceCashCount = $this->load_WorkplaceYearNumber($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashDrawerCountLineDenomination(\XMLReader $in) : CashDrawerCountLineDenomination {
		$n = $in->name;
		$o = new CashDrawerCountLineDenomination();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'denomination': $o->denomination = $this->load_int_property($in); break;
						case 'denominationDecimalPlaces': $o->denominationDecimalPlaces = $this->load_int_property($in); break;
						case 'countedAmount': $o->countedAmount = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashDrawerCountLineDenominationList(\XMLReader $in) : CashDrawerCountLineDenominationList {
		$n = $in->name;
		$o = new CashDrawerCountLineDenominationList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cashDrawerCountLineDenomination': $o->cashDrawerCountLineDenomination[] = $this->load_CashDrawerCountLineDenomination($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashDrawerCountLine(\XMLReader $in) : CashDrawerCountLine {
		$n = $in->name;
		$o = new CashDrawerCountLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'exchangeRateBuyPrice': $exchangeRateBuyPrice = $this->load_int_property($in); break;
						case 'exchangeRateBuyPriceDecimalPlaces': $exchangeRateBuyPriceDecimalPlaces = $this->load_int_property($in); break;
						case 'exchangeRateSellPrice': $exchangeRateSellPrice = $this->load_int_property($in); break;
						case 'exchangeRateSellPriceDecimalPlaces': $exchangeRateSellPriceDecimalPlaces = $this->load_int_property($in); break;
						case 'actualAmount': $actualAmount = $this->load_int_property($in); break;
						case 'actualAmountDecimalPlaces': $actualAmountDecimalPlaces = $this->load_int_property($in); break;
						case 'countedAmount': $countedAmount = $this->load_int_property($in); break;
						case 'countedAmountDecimalPlaces': $countedAmountDecimalPlaces = $this->load_int_property($in); break;
						case 'differenceMargin': $o->differenceMargin = $this->load_int_property($in); break;
						case 'cashDrawerCountLineDenominationList': $o->cashDrawerCountLineDenominationList = ($this->load_CashDrawerCountLineDenominationList($in))->cashDrawerCountLineDenomination; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->exchangeRateBuyPrice = isset($exchangeRateBuyPrice) ? BigDecimal::ofUnscaledValue($exchangeRateBuyPrice, $exchangeRateBuyPriceDecimalPlaces ?? 2) : null;
		$o->exchangeRateSellPrice = isset($exchangeRateSellPrice) ? BigDecimal::ofUnscaledValue($exchangeRateSellPrice, $exchangeRateSellPriceDecimalPlaces ?? 2) : null;
		$o->actualAmount = isset($actualAmount) ? BigDecimal::ofUnscaledValue($actualAmount, $actualAmountDecimalPlaces ?? 2) : null;
		$o->countedAmount = isset($countedAmount) ? BigDecimal::ofUnscaledValue($countedAmount, $countedAmountDecimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_CashDrawerCountLineList(\XMLReader $in) : CashDrawerCountLineList {
		$n = $in->name;
		$o = new CashDrawerCountLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cashDrawerCountLine': $o->cashDrawerCountLine[] = $this->load_CashDrawerCountLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashDrawerCount(\XMLReader $in) : CashDrawerCount {
		$n = $in->name;
		$o = new CashDrawerCount();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cashDrawerCountId': $o->cashDrawerCountId = $this->load_string_property($in); break;
						case 'isCheckingCount': $o->isCheckingCount = $this->load_bool_property($in); break;
						case 'countingEmployeeNumber': $o->countingEmployeeNumber = $this->load_int_property($in); break;
						case 'timestamp': $o->timestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'comment': $o->comment = $this->load_string_property($in); break;
						case 'correctionNumber': $o->correctionNumber = $this->load_YearNumber($in); break;
						case 'isApproved': $o->isApproved = $this->load_bool_property($in); break;
						case 'cashDrawerCountLineList': $o->cashDrawerCountLineList = ($this->load_CashDrawerCountLineList($in))->cashDrawerCountLine; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashDrawerCountList(\XMLReader $in) : CashDrawerCountList {
		$n = $in->name;
		$o = new CashDrawerCountList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cashDrawerCount': $o->cashDrawerCount[] = $this->load_CashDrawerCount($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashDrawerBalancing(\XMLReader $in) : CashDrawerBalancing {
		$n = $in->name;
		$o = new CashDrawerBalancing();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cashDrawerBalancingId': $o->cashDrawerBalancingId = $this->load_string_property($in); break;
						case 'cashDrawerBalancingString': $o->cashDrawerBalancingString = $this->load_string_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'financialDate': $o->financialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'financialDateSequenceNumber': $o->financialDateSequenceNumber = $this->load_int_property($in); break;
						case 'timestamp': $o->timestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'cashDrawerBranchNumber': $o->cashDrawerBranchNumber = $this->load_int_property($in); break;
						case 'cashDrawerEmployeeNumber': $o->cashDrawerEmployeeNumber = $this->load_int_property($in); break;
						case 'isApproved': $o->isApproved = $this->load_bool_property($in); break;
						case 'cashDrawerCountList': $o->cashDrawerCountList = ($this->load_CashDrawerCountList($in))->cashDrawerCount; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashDrawerBalancingList(\XMLReader $in) : CashDrawerBalancingList {
		$n = $in->name;
		$o = new CashDrawerBalancingList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cashDrawerBalancing': $o->cashDrawerBalancing[] = $this->load_CashDrawerBalancing($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCashDrawerBalancingListRequest(\XMLReader $in) : GetCashDrawerBalancingListRequest {
		$n = $in->name;
		$o = new GetCashDrawerBalancingListRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fromFinancialDate': $o->fromFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughFinancialDate': $o->throughFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetTurnoverGroupsRequest(\XMLReader $in) : GetTurnoverGroupsRequest {
		$n = $in->name;
		$o = new GetTurnoverGroupsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'onlyActive': $o->onlyActive = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateTurnoverGroupsRequest(\XMLReader $in) : UpdateTurnoverGroupsRequest {
		$n = $in->name;
		$o = new UpdateTurnoverGroupsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnoverGroupList': $o->turnoverGroupList = ($this->load_TurnoverGroupList($in))->turnoverGroup; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_NutritionalCharacteristic(\XMLReader $in) : NutritionalCharacteristic {
		$n = $in->name;
		$o = new NutritionalCharacteristic();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'abbreviation': $o->abbreviation = $this->load_string_property($in); break;
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'isPresent': $o->isPresent = $this->load_bool_property($in); break;
						case 'presence': $o->presence = $this->load_string_property($in); break;
						case 'sourceNumber': $o->sourceNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_AllergenList(\XMLReader $in) : AllergenList {
		$n = $in->name;
		$o = new AllergenList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'allergen': $o->allergen[] = $this->load_NutritionalCharacteristic($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DietRestrictionList(\XMLReader $in) : DietRestrictionList {
		$n = $in->name;
		$o = new DietRestrictionList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dietRestriction': $o->dietRestriction[] = $this->load_NutritionalCharacteristic($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_NutritionalCharacteristics(\XMLReader $in) : NutritionalCharacteristics {
		$n = $in->name;
		$o = new NutritionalCharacteristics();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'allergenList': $o->allergenList = ($this->load_AllergenList($in))->allergen; break;
						case 'dietRestrictionList': $o->dietRestrictionList = ($this->load_DietRestrictionList($in))->dietRestriction; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LinkedArticle(\XMLReader $in) : LinkedArticle {
		$n = $in->name;
		$o = new LinkedArticle();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'quantity': $quantity = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->quantity = isset($quantity) ? BigDecimal::ofUnscaledValue($quantity, $decimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_LinkedArticleList(\XMLReader $in) : LinkedArticleList {
		$n = $in->name;
		$o = new LinkedArticleList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'linkedArticle': $o->linkedArticle[] = $this->load_LinkedArticle($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Barcode(\XMLReader $in) : Barcode {
		$n = $in->name;
		$o = new Barcode();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'barcodeId': $o->barcodeId = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'barcode': $o->barcode = $this->load_string_property($in); break;
						case 'barcodeDate': $o->barcodeDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'quantity': $quantity = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
						case 'contentUnit': $o->contentUnit = $this->load_string_property($in); break;
						case 'contentQuantity': $contentQuantity = $this->load_int_property($in); break;
						case 'contentQuantityDecimalPlaces': $contentQuantityDecimalPlaces = $this->load_int_property($in); break;
						case 'purchasePrice': $purchasePrice = $this->load_int_property($in); break;
						case 'priceIncl': $priceIncl = $this->load_int_property($in); break;
						case 'priceExcl': $priceExcl = $this->load_int_property($in); break;
						case 'isCurrent': $o->isCurrent = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->quantity = isset($quantity) ? BigDecimal::ofUnscaledValue($quantity, $decimalPlaces ?? 2) : null;
		$o->contentQuantity = isset($contentQuantity) ? BigDecimal::ofUnscaledValue($contentQuantity, $contentQuantityDecimalPlaces ?? 2) : null;
		$o->purchasePrice = isset($purchasePrice) ? BigDecimal::ofUnscaledValue($purchasePrice, 2) : null;
		$o->priceIncl = isset($priceIncl) ? BigDecimal::ofUnscaledValue($priceIncl, 2) : null;
		$o->priceExcl = isset($priceExcl) ? BigDecimal::ofUnscaledValue($priceExcl, 2) : null;
		return $o;
	}
	private function load_BarcodeList(\XMLReader $in) : BarcodeList {
		$n = $in->name;
		$o = new BarcodeList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'barcode': $o->barcode[] = $this->load_Barcode($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PreparationMethod(\XMLReader $in) : PreparationMethod {
		$n = $in->name;
		$o = new PreparationMethod();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'priceIncl': $priceIncl = $this->load_int_property($in); break;
						case 'priceExcl': $priceExcl = $this->load_int_property($in); break;
						case 'vatCode': $o->vatCode = $this->load_int_property($in); break;
						case 'vatPercentage': $o->vatPercentage = $this->load_int_property($in); break;
						case 'vatCodeAlternative': $o->vatCodeAlternative = $this->load_int_property($in); break;
						case 'vatPercentageAlternative': $o->vatPercentageAlternative = $this->load_int_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'closeAfterSelection': $o->closeAfterSelection = $this->load_bool_property($in); break;
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'groupName': $o->groupName = $this->load_string_property($in); break;
						case 'maxOneSelection': $o->maxOneSelection = $this->load_bool_property($in); break;
						case 'selectionRequired': $o->selectionRequired = $this->load_bool_property($in); break;
						case 'nutritionalCharacteristics': $o->nutritionalCharacteristics = $this->load_NutritionalCharacteristics($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->priceIncl = isset($priceIncl) ? BigDecimal::ofUnscaledValue($priceIncl, 2) : null;
		$o->priceExcl = isset($priceExcl) ? BigDecimal::ofUnscaledValue($priceExcl, 2) : null;
		return $o;
	}
	private function load_PreparationMethodList(\XMLReader $in) : PreparationMethodList {
		$n = $in->name;
		$o = new PreparationMethodList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'preparationMethod': $o->preparationMethod[] = $this->load_PreparationMethod($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ComponentArticle(\XMLReader $in) : ComponentArticle {
		$n = $in->name;
		$o = new ComponentArticle();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'quantity': $quantity = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'invoiceText': $o->invoiceText = $this->load_string_property($in); break;
						case 'receiptText': $o->receiptText = $this->load_string_property($in); break;
						case 'displayText': $o->displayText = $this->load_string_property($in); break;
						case 'barcode': $o->barcode = $this->load_string_property($in); break;
						case 'barcodeDate': $o->barcodeDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'contentUnit': $o->contentUnit = $this->load_string_property($in); break;
						case 'contentQuantity': $contentQuantity = $this->load_int_property($in); break;
						case 'contentQuantityDecimalPlaces': $contentQuantityDecimalPlaces = $this->load_int_property($in); break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_int_property($in); break;
						case 'vatCode': $o->vatCode = $this->load_int_property($in); break;
						case 'vatPercentage': $o->vatPercentage = $this->load_int_property($in); break;
						case 'vatCodeAlternative': $o->vatCodeAlternative = $this->load_int_property($in); break;
						case 'vatPercentageAlternative': $o->vatPercentageAlternative = $this->load_int_property($in); break;
						case 'purchasePrice': $purchasePrice = $this->load_int_property($in); break;
						case 'priceIncl': $priceIncl = $this->load_int_property($in); break;
						case 'priceExcl': $priceExcl = $this->load_int_property($in); break;
						case 'linkedArticleList': $o->linkedArticleList = ($this->load_LinkedArticleList($in))->linkedArticle; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->quantity = isset($quantity) ? BigDecimal::ofUnscaledValue($quantity, $decimalPlaces ?? 2) : null;
		$o->contentQuantity = isset($contentQuantity) ? BigDecimal::ofUnscaledValue($contentQuantity, $contentQuantityDecimalPlaces ?? 2) : null;
		$o->purchasePrice = isset($purchasePrice) ? BigDecimal::ofUnscaledValue($purchasePrice, 2) : null;
		$o->priceIncl = isset($priceIncl) ? BigDecimal::ofUnscaledValue($priceIncl, 2) : null;
		$o->priceExcl = isset($priceExcl) ? BigDecimal::ofUnscaledValue($priceExcl, 2) : null;
		return $o;
	}
	private function load_ComponentArticleList(\XMLReader $in) : ComponentArticleList {
		$n = $in->name;
		$o = new ComponentArticleList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'componentArticle': $o->componentArticle[] = $this->load_ComponentArticle($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Article(\XMLReader $in) : Article {
		$n = $in->name;
		$o = new Article();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'extArticleId': $o->extArticleId = $this->load_string_property($in); break;
						case 'pluNumber': $o->pluNumber = $this->load_string_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'changeTimestamp': $o->changeTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'createTimestamp': $o->createTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'active': $o->active = $this->load_bool_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'colour': $o->colour = $this->load_string_property($in); break;
						case 'colourSequenceNumber': $o->colourSequenceNumber = $this->load_int_property($in); break;
						case 'size': $o->size = $this->load_string_property($in); break;
						case 'sizeSequenceNumber': $o->sizeSequenceNumber = $this->load_int_property($in); break;
						case 'invoiceText': $o->invoiceText = $this->load_string_property($in); break;
						case 'receiptText': $o->receiptText = $this->load_string_property($in); break;
						case 'displayText': $o->displayText = $this->load_string_property($in); break;
						case 'barcode': $o->barcode = $this->load_string_property($in); break;
						case 'barcodeDate': $o->barcodeDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'contentUnit': $o->contentUnit = $this->load_string_property($in); break;
						case 'contentQuantity': $contentQuantity = $this->load_int_property($in); break;
						case 'contentQuantityDecimalPlaces': $contentQuantityDecimalPlaces = $this->load_int_property($in); break;
						case 'brandName': $o->brandName = $this->load_string_property($in); break;
						case 'extraText': $o->extraText = $this->load_string_property($in); break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_int_property($in); break;
						case 'vatCode': $o->vatCode = $this->load_int_property($in); break;
						case 'vatPercentage': $o->vatPercentage = $this->load_int_property($in); break;
						case 'vatCodeAlternative': $o->vatCodeAlternative = $this->load_int_property($in); break;
						case 'vatPercentageAlternative': $o->vatPercentageAlternative = $this->load_int_property($in); break;
						case 'averagePurchasePrice': $averagePurchasePrice = $this->load_int_property($in); break;
						case 'purchasePrice': $purchasePrice = $this->load_int_property($in); break;
						case 'priceIncl': $priceIncl = $this->load_int_property($in); break;
						case 'priceExcl': $priceExcl = $this->load_int_property($in); break;
						case 'siUnit': $o->siUnit = $this->load_string_property($in); break;
						case 'unit': $o->unit = $this->load_string_property($in); break;
						case 'orderQuantityValue': $orderQuantityValue = $this->load_int_property($in); break;
						case 'orderQuantityDecimalPlaces': $orderQuantityDecimalPlaces = $this->load_int_property($in); break;
						case 'supplierRelationNumber': $o->supplierRelationNumber = $this->load_int_property($in); break;
						case 'supplierRelationName': $o->supplierRelationName = $this->load_string_property($in); break;
						case 'supplierArticleNumber': $o->supplierArticleNumber = $this->load_string_property($in); break;
						case 'webshop': $o->webshop = $this->load_bool_property($in); break;
						case 'categoryId': $o->categoryId = $this->load_int_property($in); break;
						case 'categoryIds': $o->categoryIds = ($this->load_CategoryIdSet($in))->category; break;
						case 'stockArticle': $o->stockArticle = $this->load_bool_property($in); break;
						case 'articleDiscountGroupNumber': $o->articleDiscountGroupNumber = $this->load_int_property($in); break;
						case 'articleDiscountGroupName': $o->articleDiscountGroupName = $this->load_string_property($in); break;
						case 'course': $o->course = $this->load_Course($in); break;
						case 'specialPrice': $o->specialPrice = $this->load_string_property($in); break;
						case 'showPreparationMethodsDirectly': $o->showPreparationMethodsDirectly = $this->load_bool_property($in); break;
						case 'showPreparationMethodsPerGroup': $o->showPreparationMethodsPerGroup = $this->load_bool_property($in); break;
						case 'exchangeRateBuyPrice': $exchangeRateBuyPrice = $this->load_int_property($in); break;
						case 'exchangeRateBuyPriceDecimalPlaces': $exchangeRateBuyPriceDecimalPlaces = $this->load_int_property($in); break;
						case 'exchangeRateSellPrice': $exchangeRateSellPrice = $this->load_int_property($in); break;
						case 'exchangeRateSellPriceDecimalPlaces': $exchangeRateSellPriceDecimalPlaces = $this->load_int_property($in); break;
						case 'exchangeRateMultiplier': $o->exchangeRateMultiplier = $this->load_int_property($in); break;
						case 'imageList': $o->imageList = ($this->load_ImageList($in))->image; break;
						case 'customFieldList': $o->customFieldList = ($this->load_CustomFieldList($in))->customField; break;
						case 'salesPriceList': $o->salesPriceList = ($this->load_SalesPriceList($in))->salesPrice; break;
						case 'priceGroupList': $o->priceGroupList = ($this->load_PriceGroupList($in))->priceGroup; break;
						case 'preparationMethodList': $o->preparationMethodList = ($this->load_PreparationMethodList($in))->preparationMethod; break;
						case 'componentArticleList': $o->componentArticleList = ($this->load_ComponentArticleList($in))->componentArticle; break;
						case 'linkedArticleList': $o->linkedArticleList = ($this->load_LinkedArticleList($in))->linkedArticle; break;
						case 'barcodeList': $o->barcodeList = ($this->load_BarcodeList($in))->barcode; break;
						case 'relationArticleDiscountList': $o->relationArticleDiscountList = ($this->load_RelationArticleDiscountList($in))->relationArticleDiscount; break;
						case 'askFor': $o->askFor = $this->load_string_property($in); break;
						case 'nutritionalCharacteristics': $o->nutritionalCharacteristics = $this->load_NutritionalCharacteristics($in); break;
						case 'discontinued': $o->discontinued = $this->load_bool_property($in); break;
						case 'stockSiUnit': $o->stockSiUnit = $this->load_string_property($in); break;
						case 'specialBehaviour': $o->specialBehaviour = $this->load_string_property($in); break;
						case 'ageCheckMinimumAge': $o->ageCheckMinimumAge = $this->load_int_property($in); break;
						case 'oldestBestBeforeDate': $o->oldestBestBeforeDate = $this->load_Date_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->contentQuantity = isset($contentQuantity) ? BigDecimal::ofUnscaledValue($contentQuantity, $contentQuantityDecimalPlaces ?? 2) : null;
		$o->averagePurchasePrice = isset($averagePurchasePrice) ? BigDecimal::ofUnscaledValue($averagePurchasePrice, 2) : null;
		$o->purchasePrice = isset($purchasePrice) ? BigDecimal::ofUnscaledValue($purchasePrice, 2) : null;
		$o->priceIncl = isset($priceIncl) ? BigDecimal::ofUnscaledValue($priceIncl, 2) : null;
		$o->priceExcl = isset($priceExcl) ? BigDecimal::ofUnscaledValue($priceExcl, 2) : null;
		$o->orderQuantityValue = isset($orderQuantityValue) ? BigDecimal::ofUnscaledValue($orderQuantityValue, $orderQuantityDecimalPlaces ?? 2) : null;
		$o->exchangeRateBuyPrice = isset($exchangeRateBuyPrice) ? BigDecimal::ofUnscaledValue($exchangeRateBuyPrice, $exchangeRateBuyPriceDecimalPlaces ?? 2) : null;
		$o->exchangeRateSellPrice = isset($exchangeRateSellPrice) ? BigDecimal::ofUnscaledValue($exchangeRateSellPrice, $exchangeRateSellPriceDecimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_ArticleList(\XMLReader $in) : ArticleList {
		$n = $in->name;
		$o = new ArticleList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'article': $o->article[] = $this->load_Article($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SortOrderGroupList(\XMLReader $in) : SortOrderGroupList {
		$n = $in->name;
		$o = new SortOrderGroupList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'sortOrderGroup': $o->sortOrderGroup[] = $this->load_SortOrderGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SortOrderGroup(\XMLReader $in) : SortOrderGroup {
		$n = $in->name;
		$o = new SortOrderGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'sortOrder': $o->sortOrder = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Product(\XMLReader $in) : Product {
		$n = $in->name;
		$o = new Product();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'productNumber': $o->productNumber = $this->load_int_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'extraText': $o->extraText = $this->load_string_property($in); break;
						case 'articleList': $o->articleList = ($this->load_ArticleList($in))->article; break;
						case 'groupNumbers': $o->groupNumbers[] = $this->load_int_property($in); break;
						case 'sortOrderGroupList': $o->sortOrderGroupList = ($this->load_SortOrderGroupList($in))->sortOrderGroup; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ProductList(\XMLReader $in) : ProductList {
		$n = $in->name;
		$o = new ProductList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'product': $o->product[] = $this->load_Product($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetProductsRequest(\XMLReader $in) : GetProductsRequest {
		$n = $in->name;
		$o = new GetProductsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
						case 'groupNumbers': $o->groupNumbers[] = $this->load_int_property($in); break;
						case 'pluNumbers': $o->pluNumbers = ($this->load_TextList($in))->text; break;
						case 'onlyWebshop': $o->onlyWebshop = $this->load_bool_property($in); break;
						case 'onlyActive': $o->onlyActive = $this->load_bool_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'syncMarkerExcludePreparationMethods': $o->syncMarkerExcludePreparationMethods = $this->load_bool_property($in); break;
						case 'changedSinceTimestamp': $o->changedSinceTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'changedSinceBranchNumber': $o->changedSinceBranchNumber = $this->load_int_property($in); break;
						case 'includeAllArticlesOfSelectedProducts': $o->includeAllArticlesOfSelectedProducts = $this->load_bool_property($in); break;
						case 'productNumbers': $o->productNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleVariantList(\XMLReader $in) : ArticleVariantList {
		$n = $in->name;
		$o = new ArticleVariantList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'variant': $o->variant[] = $this->load_ArticleVariant($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleVariantSupplier(\XMLReader $in) : ArticleVariantSupplier {
		$n = $in->name;
		$o = new ArticleVariantSupplier();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'isPreferredSupplier': $o->isPreferredSupplier = $this->load_bool_property($in); break;
						case 'isPurchasable': $o->isPurchasable = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleVariantSupplierList(\XMLReader $in) : ArticleVariantSupplierList {
		$n = $in->name;
		$o = new ArticleVariantSupplierList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'supplier': $o->supplier[] = $this->load_ArticleVariantSupplier($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleVariant(\XMLReader $in) : ArticleVariant {
		$n = $in->name;
		$o = new ArticleVariant();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleVariantId': $o->articleVariantId = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'receiptText': $o->receiptText = $this->load_string_property($in); break;
						case 'translatedReceiptText': $o->translatedReceiptText = $this->load_string_property($in); break;
						case 'invoiceText': $o->invoiceText = $this->load_string_property($in); break;
						case 'barcode': $o->barcode = $this->load_string_property($in); break;
						case 'barcodeDate': $o->barcodeDate = $this->load_Date_property($in); break;
						case 'quantity': $o->quantity = $this->load_BigDecimal_property($in); break;
						case 'purchasePrice': $o->purchasePrice = $this->load_BigDecimal_property($in); break;
						case 'priceIncl': $o->priceIncl = $this->load_BigDecimal_property($in); break;
						case 'priceExcl': $o->priceExcl = $this->load_BigDecimal_property($in); break;
						case 'isCurrent': $o->isCurrent = $this->load_bool_property($in); break;
						case 'quantityInPackaging': $o->quantityInPackaging = $this->load_BigDecimal_property($in); break;
						case 'packagingType': $o->packagingType = $this->load_string_property($in); break;
						case 'orderQuantity': $o->orderQuantity = $this->load_BigDecimal_property($in); break;
						case 'articleNumberSupplier': $o->articleNumberSupplier = $this->load_string_property($in); break;
						case 'packagingContent': $o->packagingContent = $this->load_string_property($in); break;
						case 'packaging': $o->packaging = ($this->load_ArticleVariantList($in))->variant; break;
						case 'suppliers': $o->suppliers = ($this->load_ArticleVariantSupplierList($in))->supplier; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticleVariantsRequest(\XMLReader $in) : GetArticleVariantsRequest {
		$n = $in->name;
		$o = new GetArticleVariantsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticlesVariantsRequest(\XMLReader $in) : GetArticlesVariantsRequest {
		$n = $in->name;
		$o = new GetArticlesVariantsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumbers': $o->articleNumbers = ($this->load_NumberList($in))->number; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticlesVariantsResponseElem(\XMLReader $in) : GetArticlesVariantsResponseElem {
		$n = $in->name;
		$o = new GetArticlesVariantsResponseElem();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'variants': $o->variants = ($this->load_ArticleVariantList($in))->variant; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_NewArticleVariantRequest(\XMLReader $in) : NewArticleVariantRequest {
		$n = $in->name;
		$o = new NewArticleVariantRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'parentId': $o->parentId = $this->load_int_property($in); break;
						case 'articleVariant': $o->articleVariant = $this->load_ArticleVariant($in); break;
						case 'beforeId': $o->beforeId = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateArticleVariantRequest(\XMLReader $in) : UpdateArticleVariantRequest {
		$n = $in->name;
		$o = new UpdateArticleVariantRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'articleVariant': $o->articleVariant = $this->load_ArticleVariant($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeleteArticleVariantsRequest(\XMLReader $in) : DeleteArticleVariantsRequest {
		$n = $in->name;
		$o = new DeleteArticleVariantsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'articleVariantIds': $o->articleVariantIds = ($this->load_NumberList($in))->number; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleStock(\XMLReader $in) : ArticleStock {
		$n = $in->name;
		$o = new ArticleStock();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'changeTimestamp': $o->changeTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'stockId': $o->stockId = $this->load_int_property($in); break;
						case 'amountFree': $amountFree = $this->load_int_property($in); break;
						case 'decimalPlacesFree': $decimalPlacesFree = $this->load_int_property($in); break;
						case 'amountReserved': $amountReserved = $this->load_int_property($in); break;
						case 'decimalPlacesReserved': $decimalPlacesReserved = $this->load_int_property($in); break;
						case 'amountIncoming': $amountIncoming = $this->load_int_property($in); break;
						case 'decimalPlacesIncoming': $decimalPlacesIncoming = $this->load_int_property($in); break;
						case 'ownAmountFree': $o->ownAmountFree = $this->load_BigDecimal_property($in); break;
						case 'ownAmountReserved': $o->ownAmountReserved = $this->load_BigDecimal_property($in); break;
						case 'ownAmountIncoming': $o->ownAmountIncoming = $this->load_BigDecimal_property($in); break;
						case 'subArticle': $o->subArticle[] = $this->load_ArticleStock($in); break;
						case 'isDayStockArticle': $o->isDayStockArticle = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->amountFree = isset($amountFree) ? BigDecimal::ofUnscaledValue($amountFree, $decimalPlacesFree ?? 2) : null;
		$o->amountReserved = isset($amountReserved) ? BigDecimal::ofUnscaledValue($amountReserved, $decimalPlacesReserved ?? 2) : null;
		$o->amountIncoming = isset($amountIncoming) ? BigDecimal::ofUnscaledValue($amountIncoming, $decimalPlacesIncoming ?? 2) : null;
		return $o;
	}
	private function load_ArticleNumberList(\XMLReader $in) : ArticleNumberList {
		$n = $in->name;
		$o = new ArticleNumberList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetStockRequest(\XMLReader $in) : GetStockRequest {
		$n = $in->name;
		$o = new GetStockRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'articleNumbers': $o->articleNumbers = ($this->load_ArticleNumberList($in))->articleNumbers; break;
						case 'stockId': $o->stockId = $this->load_int_property($in); break;
						case 'dayStockOnlyFilter': $o->dayStockOnlyFilter = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleStockHistory(\XMLReader $in) : ArticleStockHistory {
		$n = $in->name;
		$o = new ArticleStockHistory();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'stockId': $o->stockId = $this->load_int_property($in); break;
						case 'timestamp': $o->timestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'amountChanged': $amountChanged = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'packingSlipId': $o->packingSlipId = $this->load_string_property($in); break;
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
						case 'invoiceNumber': $o->invoiceNumber = $this->load_YearNumber($in); break;
						case 'invoiceBarcode': $o->invoiceBarcode = $this->load_string_property($in); break;
						case 'receiptId': $o->receiptId = $this->load_string_property($in); break;
						case 'receiptNumber': $o->receiptNumber = $this->load_WorkplaceYearNumber($in); break;
						case 'receiptBarcode': $o->receiptBarcode = $this->load_string_property($in); break;
						case 'correctionNumber': $o->correctionNumber = $this->load_YearNumber($in); break;
						case 'beforeCorrectionQuantity': $beforeCorrectionQuantity = $this->load_int_property($in); break;
						case 'beforeCorrectionDecimalPlaces': $beforeCorrectionDecimalPlaces = $this->load_int_property($in); break;
						case 'afterCorrectionQuantity': $afterCorrectionQuantity = $this->load_int_property($in); break;
						case 'afterCorrectionDecimalPlaces': $afterCorrectionDecimalPlaces = $this->load_int_property($in); break;
						case 'deliveryNumber': $o->deliveryNumber = $this->load_YearNumber($in); break;
						case 'internalShipmentNumber': $o->internalShipmentNumber = $this->load_YearNumber($in); break;
						case 'internalDeliveryNumber': $o->internalDeliveryNumber = $this->load_YearNumberPart($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->amountChanged = isset($amountChanged) ? BigDecimal::ofUnscaledValue($amountChanged, $decimalPlaces ?? 2) : null;
		$o->beforeCorrectionQuantity = isset($beforeCorrectionQuantity) ? BigDecimal::ofUnscaledValue($beforeCorrectionQuantity, $beforeCorrectionDecimalPlaces ?? 2) : null;
		$o->afterCorrectionQuantity = isset($afterCorrectionQuantity) ? BigDecimal::ofUnscaledValue($afterCorrectionQuantity, $afterCorrectionDecimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_GetStockHistoryRequest(\XMLReader $in) : GetStockHistoryRequest {
		$n = $in->name;
		$o = new GetStockHistoryRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'articleNumbers': $o->articleNumbers = ($this->load_ArticleNumberList($in))->articleNumbers; break;
						case 'fromFinancialDateTime': $o->fromFinancialDateTime = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'throughFinancialDateTime': $o->throughFinancialDateTime = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'sinceStockId': $o->sinceStockId = $this->load_int_property($in); break;
						case 'sinceStockIdLimit': $o->sinceStockIdLimit = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetStockHistoryV2Request(\XMLReader $in) : GetStockHistoryV2Request {
		$n = $in->name;
		$o = new GetStockHistoryV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'articleNumbers': $o->articleNumbers = ($this->load_ArticleNumberList($in))->articleNumbers; break;
						case 'fromFinancialDateTime': $o->fromFinancialDateTime = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'throughFinancialDateTime': $o->throughFinancialDateTime = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'sinceStockId': $o->sinceStockId = $this->load_int_property($in); break;
						case 'sinceStockIdLimit': $o->sinceStockIdLimit = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateStockRequest(\XMLReader $in) : UpdateStockRequest {
		$n = $in->name;
		$o = new UpdateStockRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'amountChanged': $amountChanged = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->amountChanged = isset($amountChanged) ? BigDecimal::ofUnscaledValue($amountChanged, $decimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_SetStockRequest(\XMLReader $in) : SetStockRequest {
		$n = $in->name;
		$o = new SetStockRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'amount': $amount = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->amount = isset($amount) ? BigDecimal::ofUnscaledValue($amount, $decimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_GetArticleGroupsRequest(\XMLReader $in) : GetArticleGroupsRequest {
		$n = $in->name;
		$o = new GetArticleGroupsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'groupNumbers': $o->groupNumbers[] = $this->load_int_property($in); break;
						case 'retrieveArticleNumbers': $o->retrieveArticleNumbers = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleGroupList(\XMLReader $in) : ArticleGroupList {
		$n = $in->name;
		$o = new ArticleGroupList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleGroups': $o->articleGroups[] = $this->load_ArticleGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleGroup(\XMLReader $in) : ArticleGroup {
		$n = $in->name;
		$o = new ArticleGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'subGroupList': $o->subGroupList = ($this->load_ArticleGroupList($in))->articleGroups; break;
						case 'sortOrder': $o->sortOrder = $this->load_int_property($in); break;
						case 'productNumbers': $o->productNumbers = ($this->load_NumberList($in))->number; break;
						case 'image': $o->image = $this->load_Image($in); break;
						case 'articleNumbers': $o->articleNumbers = ($this->load_NumberList($in))->number; break;
						case 'isDeleted': $o->isDeleted = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticleGroupChangesRequest(\XMLReader $in) : GetArticleGroupChangesRequest {
		$n = $in->name;
		$o = new GetArticleGroupChangesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'groupNumbers': $o->groupNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ChangedArticleGroup(\XMLReader $in) : ChangedArticleGroup {
		$n = $in->name;
		$o = new ChangedArticleGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'parentGroupNumber': $o->parentGroupNumber = $this->load_int_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'subGroupNumbers': $o->subGroupNumbers = ($this->load_NumberList($in))->number; break;
						case 'sortOrder': $o->sortOrder = $this->load_int_property($in); break;
						case 'productNumbers': $o->productNumbers = ($this->load_NumberList($in))->number; break;
						case 'image': $o->image = $this->load_Image($in); break;
						case 'isDeleted': $o->isDeleted = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ChangedArticleGroupList(\XMLReader $in) : ChangedArticleGroupList {
		$n = $in->name;
		$o = new ChangedArticleGroupList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'changedArticleGroups': $o->changedArticleGroups[] = $this->load_ChangedArticleGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateArticleGroupRequest(\XMLReader $in) : UpdateArticleGroupRequest {
		$n = $in->name;
		$o = new UpdateArticleGroupRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'sortOrder': $o->sortOrder = $this->load_int_property($in); break;
						case 'imageId': $o->imageId = $this->load_int_property($in); break;
						case 'parentGroupNumber': $o->parentGroupNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_NewArticleGroupRequest(\XMLReader $in) : NewArticleGroupRequest {
		$n = $in->name;
		$o = new NewArticleGroupRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'parentGroupNumber': $o->parentGroupNumber = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'sortOrder': $o->sortOrder = $this->load_int_property($in); break;
						case 'imageId': $o->imageId = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeleteArticleGroupRequest(\XMLReader $in) : DeleteArticleGroupRequest {
		$n = $in->name;
		$o = new DeleteArticleGroupRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_AddProductsToArticleGroupRequest(\XMLReader $in) : AddProductsToArticleGroupRequest {
		$n = $in->name;
		$o = new AddProductsToArticleGroupRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'position': $o->position = $this->load_int_property($in); break;
						case 'productNumbers': $o->productNumbers = ($this->load_NumberList($in))->number; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReplaceProductsOfArticleGroupRequest(\XMLReader $in) : ReplaceProductsOfArticleGroupRequest {
		$n = $in->name;
		$o = new ReplaceProductsOfArticleGroupRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'productNumbers': $o->productNumbers = ($this->load_NumberList($in))->number; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeleteProductsFromArticleGroupRequest(\XMLReader $in) : DeleteProductsFromArticleGroupRequest {
		$n = $in->name;
		$o = new DeleteProductsFromArticleGroupRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'productNumbers': $o->productNumbers = ($this->load_NumberList($in))->number; break;
						case 'removeAll': $o->removeAll = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SendMessageRequest(\XMLReader $in) : SendMessageRequest {
		$n = $in->name;
		$o = new SendMessageRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'terminalNumber': $o->terminalNumber = $this->load_int_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'sender': $o->sender = $this->load_string_property($in); break;
						case 'messageType': $o->messageType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetMessagesRequest(\XMLReader $in) : GetMessagesRequest {
		$n = $in->name;
		$o = new GetMessagesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'sinceMessageId': $o->sinceMessageId = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'terminalNumber': $o->terminalNumber = $this->load_int_property($in); break;
						case 'onlyUndelivered': $o->onlyUndelivered = $this->load_bool_property($in); break;
						case 'setDelivered': $o->setDelivered = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Message(\XMLReader $in) : Message {
		$n = $in->name;
		$o = new Message();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'messageId': $o->messageId = $this->load_int_property($in); break;
						case 'apiIdent': $o->apiIdent = $this->load_string_property($in); break;
						case 'sender': $o->sender = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'createTimestamp': $o->createTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'deliverTimestamp': $o->deliverTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'terminalNumber': $o->terminalNumber = $this->load_int_property($in); break;
						case 'messageType': $o->messageType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_MessageList(\XMLReader $in) : MessageList {
		$n = $in->name;
		$o = new MessageList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'message': $o->message[] = $this->load_Message($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Shift(\XMLReader $in) : Shift {
		$n = $in->name;
		$o = new Shift();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'shiftNumber': $o->shiftNumber = $this->load_YearNumber($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'financialDate': $o->financialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'startTimestamp': $o->startTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'endTimestamp': $o->endTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'ended': $o->ended = $this->load_bool_property($in); break;
						case 'manuallyModified': $o->manuallyModified = $this->load_bool_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ShiftList(\XMLReader $in) : ShiftList {
		$n = $in->name;
		$o = new ShiftList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'shift': $o->shift[] = $this->load_Shift($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetShiftsRequest(\XMLReader $in) : GetShiftsRequest {
		$n = $in->name;
		$o = new GetShiftsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'employeeNumbers': $o->employeeNumbers[] = $this->load_int_property($in); break;
						case 'fromFinancialDate': $o->fromFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughFinancialDate': $o->throughFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PurchaseOrderLineList(\XMLReader $in) : PurchaseOrderLineList {
		$n = $in->name;
		$o = new PurchaseOrderLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'line': $o->line[] = $this->load_PurchaseOrderLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PurchaseOrderLineData(\XMLReader $in) : PurchaseOrderLineData {
		$n = $in->name;
		$o = new PurchaseOrderLineData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'quantity': $quantity = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
						case 'deliveredQuantity': $deliveredQuantity = $this->load_int_property($in); break;
						case 'deliveredDecimalPlaces': $deliveredDecimalPlaces = $this->load_int_property($in); break;
						case 'purchasePrice': $purchasePrice = $this->load_int_property($in); break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_int_property($in); break;
						case 'turnoverGroupName': $o->turnoverGroupName = $this->load_string_property($in); break;
						case 'turnoverGroupType': $o->turnoverGroupType = $this->load_string_property($in); break;
						case 'vatCode': $o->vatCode = $this->load_int_property($in); break;
						case 'vatPercentage': $o->vatPercentage = $this->load_int_property($in); break;
						case 'siUnit': $o->siUnit = $this->load_string_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_int_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'articleVariantId': $o->articleVariantId = $this->load_int_property($in); break;
						case 'quantityInPackaging': $o->quantityInPackaging = $this->load_BigDecimal_property($in); break;
						case 'packagingType': $o->packagingType = $this->load_string_property($in); break;
						case 'quantityOfPackagesOrdered': $o->quantityOfPackagesOrdered = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->quantity = isset($quantity) ? BigDecimal::ofUnscaledValue($quantity, $decimalPlaces ?? 2) : null;
		$o->deliveredQuantity = isset($deliveredQuantity) ? BigDecimal::ofUnscaledValue($deliveredQuantity, $deliveredDecimalPlaces ?? 2) : null;
		$o->purchasePrice = isset($purchasePrice) ? BigDecimal::ofUnscaledValue($purchasePrice, 2) : null;
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_PurchaseOrderLine(\XMLReader $in) : PurchaseOrderLine {
		$n = $in->name;
		$o = new PurchaseOrderLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'pluNumber': $o->pluNumber = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'supplierRelationNumber': $o->supplierRelationNumber = $this->load_int_property($in); break;
						case 'supplierRelationName': $o->supplierRelationName = $this->load_string_property($in); break;
						case 'supplierArticleNumber': $o->supplierArticleNumber = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'deliveryDate': $o->deliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'deliveryDateEnd': $o->deliveryDateEnd = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
						case 'relationCategoryId': $o->relationCategoryId = $this->load_int_property($in); break;
						case 'relationBankAccountNumber': $o->relationBankAccountNumber = $this->load_string_property($in); break;
						case 'orderText': $o->orderText = $this->load_string_property($in); break;
						case 'data': $o->data = $this->load_PurchaseOrderLineData($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PurchaseOrder(\XMLReader $in) : PurchaseOrder {
		$n = $in->name;
		$o = new PurchaseOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseOrderNumber': $o->purchaseOrderNumber = $this->load_YearNumber($in); break;
						case 'extPurchaseOrderId': $o->extPurchaseOrderId = $this->load_string_property($in); break;
						case 'orderDate': $o->orderDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'deliveryDate': $o->deliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
						case 'relationCategoryId': $o->relationCategoryId = $this->load_int_property($in); break;
						case 'relationBankAccountNumber': $o->relationBankAccountNumber = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeName': $o->employeeName = $this->load_string_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'isPrinted': $o->isPrinted = $this->load_bool_property($in); break;
						case 'state': $o->state = $this->load_string_property($in); break;
						case 'vatMethod': $o->vatMethod = $this->load_string_property($in); break;
						case 'vatGroupList': $o->vatGroupList = ($this->load_VatGroupList($in))->vatGroup; break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'lineListCount': $o->lineListCount = $this->load_int_property($in); break;
						case 'lineList': $o->lineList = ($this->load_PurchaseOrderLineList($in))->line; break;
						case 'purchaseDeliveryNumbers': $o->purchaseDeliveryNumbers = ($this->load_YearNumberList($in))->yearNumber; break;
						case 'deliveryAddress': $o->deliveryAddress = $this->load_Address($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_PurchaseOrderList(\XMLReader $in) : PurchaseOrderList {
		$n = $in->name;
		$o = new PurchaseOrderList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseOrder': $o->purchaseOrder[] = $this->load_PurchaseOrder($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPurchaseOrdersRequest(\XMLReader $in) : GetPurchaseOrdersRequest {
		$n = $in->name;
		$o = new GetPurchaseOrdersRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseOrderNumber': $o->purchaseOrderNumber = $this->load_YearNumber($in); break;
						case 'extPurchaseOrderId': $o->extPurchaseOrderId = $this->load_string_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'fromOrderDate': $o->fromOrderDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughOrderDate': $o->throughOrderDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'fromDeliveryDate': $o->fromDeliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughDeliveryDate': $o->throughDeliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'employeeNumbers': $o->employeeNumbers[] = $this->load_int_property($in); break;
						case 'relationNumbers': $o->relationNumbers[] = $this->load_int_property($in); break;
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
						case 'articleTurnoverGroups': $o->articleTurnoverGroups[] = $this->load_int_property($in); break;
						case 'articlePluNumbers': $o->articlePluNumbers = ($this->load_TextList($in))->text; break;
						case 'articleBarcodes': $o->articleBarcodes = ($this->load_TextList($in))->text; break;
						case 'purchaseOrderStates': $o->purchaseOrderStates[] = $this->load_string_property($in); break;
						case 'includeLineList': $o->includeLineList = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePurchaseOrderInfo(\XMLReader $in) : SavePurchaseOrderInfo {
		$n = $in->name;
		$o = new SavePurchaseOrderInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseOrderNumber': $o->purchaseOrderNumber = $this->load_YearNumber($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PurchaseOrderV2LineList(\XMLReader $in) : PurchaseOrderV2LineList {
		$n = $in->name;
		$o = new PurchaseOrderV2LineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'line': $o->line[] = $this->load_PurchaseOrderV2Line($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PurchaseOrderV2LineData(\XMLReader $in) : PurchaseOrderV2LineData {
		$n = $in->name;
		$o = new PurchaseOrderV2LineData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'quantity': $quantity = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
						case 'deliveredQuantity': $deliveredQuantity = $this->load_int_property($in); break;
						case 'deliveredDecimalPlaces': $deliveredDecimalPlaces = $this->load_int_property($in); break;
						case 'purchasePrice': $o->purchasePrice = $this->load_string_property($in); break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_int_property($in); break;
						case 'turnoverGroupName': $o->turnoverGroupName = $this->load_string_property($in); break;
						case 'turnoverGroupType': $o->turnoverGroupType = $this->load_string_property($in); break;
						case 'vatCode': $o->vatCode = $this->load_int_property($in); break;
						case 'vatPercentage': $o->vatPercentage = $this->load_int_property($in); break;
						case 'siUnit': $o->siUnit = $this->load_string_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_int_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'exchangeRateBuyPrice': $exchangeRateBuyPrice = $this->load_int_property($in); break;
						case 'exchangeRateBuyPriceDecimalPlaces': $exchangeRateBuyPriceDecimalPlaces = $this->load_int_property($in); break;
						case 'exchangeRateSellPrice': $exchangeRateSellPrice = $this->load_int_property($in); break;
						case 'exchangeRateSellPriceDecimalPlaces': $exchangeRateSellPriceDecimalPlaces = $this->load_int_property($in); break;
						case 'exchangeRateMultiplier': $o->exchangeRateMultiplier = $this->load_int_property($in); break;
						case 'articleVariantId': $o->articleVariantId = $this->load_int_property($in); break;
						case 'quantityInPackaging': $o->quantityInPackaging = $this->load_BigDecimal_property($in); break;
						case 'packagingType': $o->packagingType = $this->load_string_property($in); break;
						case 'quantityOfPackagesOrdered': $o->quantityOfPackagesOrdered = $this->load_BigDecimal_property($in); break;
						case 'orderUnit': $o->orderUnit = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->quantity = isset($quantity) ? BigDecimal::ofUnscaledValue($quantity, $decimalPlaces ?? 2) : null;
		$o->deliveredQuantity = isset($deliveredQuantity) ? BigDecimal::ofUnscaledValue($deliveredQuantity, $deliveredDecimalPlaces ?? 2) : null;
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		$o->exchangeRateBuyPrice = isset($exchangeRateBuyPrice) ? BigDecimal::ofUnscaledValue($exchangeRateBuyPrice, $exchangeRateBuyPriceDecimalPlaces ?? 2) : null;
		$o->exchangeRateSellPrice = isset($exchangeRateSellPrice) ? BigDecimal::ofUnscaledValue($exchangeRateSellPrice, $exchangeRateSellPriceDecimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_PurchaseOrderV2Line(\XMLReader $in) : PurchaseOrderV2Line {
		$n = $in->name;
		$o = new PurchaseOrderV2Line();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineNumber': $o->lineNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'pluNumber': $o->pluNumber = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'supplierRelationNumber': $o->supplierRelationNumber = $this->load_int_property($in); break;
						case 'supplierRelationName': $o->supplierRelationName = $this->load_string_property($in); break;
						case 'supplierArticleNumber': $o->supplierArticleNumber = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'deliveryDate': $o->deliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'deliveryDateEnd': $o->deliveryDateEnd = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
						case 'relationCategoryId': $o->relationCategoryId = $this->load_int_property($in); break;
						case 'relationBankAccountNumber': $o->relationBankAccountNumber = $this->load_string_property($in); break;
						case 'orderText': $o->orderText = $this->load_string_property($in); break;
						case 'data': $o->data = $this->load_PurchaseOrderV2LineData($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PurchaseOrderV2(\XMLReader $in) : PurchaseOrderV2 {
		$n = $in->name;
		$o = new PurchaseOrderV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseOrderNumber': $o->purchaseOrderNumber = $this->load_YearNumber($in); break;
						case 'extPurchaseOrderId': $o->extPurchaseOrderId = $this->load_string_property($in); break;
						case 'orderDate': $o->orderDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'deliveryDate': $o->deliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
						case 'relationCategoryId': $o->relationCategoryId = $this->load_int_property($in); break;
						case 'relationBankAccountNumber': $o->relationBankAccountNumber = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeName': $o->employeeName = $this->load_string_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'isPrinted': $o->isPrinted = $this->load_bool_property($in); break;
						case 'state': $o->state = $this->load_string_property($in); break;
						case 'vatMethod': $o->vatMethod = $this->load_string_property($in); break;
						case 'vatGroupList': $o->vatGroupList = ($this->load_VatGroupList($in))->vatGroup; break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'lineListCount': $o->lineListCount = $this->load_int_property($in); break;
						case 'lineList': $o->lineList = ($this->load_PurchaseOrderV2LineList($in))->line; break;
						case 'purchaseDeliveryNumbers': $o->purchaseDeliveryNumbers = ($this->load_YearNumberList($in))->yearNumber; break;
						case 'deliveryAddress': $o->deliveryAddress = $this->load_Address($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_PurchaseOrderV2List(\XMLReader $in) : PurchaseOrderV2List {
		$n = $in->name;
		$o = new PurchaseOrderV2List();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseOrder': $o->purchaseOrder[] = $this->load_PurchaseOrderV2($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPurchaseOrdersV2Request(\XMLReader $in) : GetPurchaseOrdersV2Request {
		$n = $in->name;
		$o = new GetPurchaseOrdersV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseOrderNumber': $o->purchaseOrderNumber = $this->load_YearNumber($in); break;
						case 'extPurchaseOrderId': $o->extPurchaseOrderId = $this->load_string_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'fromOrderDate': $o->fromOrderDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughOrderDate': $o->throughOrderDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'fromDeliveryDate': $o->fromDeliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughDeliveryDate': $o->throughDeliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'employeeNumbers': $o->employeeNumbers[] = $this->load_int_property($in); break;
						case 'relationNumbers': $o->relationNumbers[] = $this->load_int_property($in); break;
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
						case 'articleTurnoverGroups': $o->articleTurnoverGroups[] = $this->load_int_property($in); break;
						case 'articlePluNumbers': $o->articlePluNumbers = ($this->load_TextList($in))->text; break;
						case 'articleBarcodes': $o->articleBarcodes = ($this->load_TextList($in))->text; break;
						case 'purchaseOrderStates': $o->purchaseOrderStates[] = $this->load_string_property($in); break;
						case 'includeLineList': $o->includeLineList = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePurchaseOrderV2LineList(\XMLReader $in) : SavePurchaseOrderV2LineList {
		$n = $in->name;
		$o = new SavePurchaseOrderV2LineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'line': $o->line[] = $this->load_SavePurchaseOrderV2Line($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePurchaseOrderV2LineData(\XMLReader $in) : SavePurchaseOrderV2LineData {
		$n = $in->name;
		$o = new SavePurchaseOrderV2LineData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'quantity': $quantity = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
						case 'purchasePrice': $o->purchasePrice = $this->load_string_property($in); break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_int_property($in); break;
						case 'vatCode': $o->vatCode = $this->load_int_property($in); break;
						case 'vatPercentage': $o->vatPercentage = $this->load_int_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_int_property($in); break;
						case 'articleVariantId': $o->articleVariantId = $this->load_int_property($in); break;
						case 'quantityInPackaging': $o->quantityInPackaging = $this->load_BigDecimal_property($in); break;
						case 'packagingType': $o->packagingType = $this->load_string_property($in); break;
						case 'quantityOfPackagesOrdered': $o->quantityOfPackagesOrdered = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->quantity = isset($quantity) ? BigDecimal::ofUnscaledValue($quantity, $decimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_SavePurchaseOrderV2Line(\XMLReader $in) : SavePurchaseOrderV2Line {
		$n = $in->name;
		$o = new SavePurchaseOrderV2Line();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'pluNumber': $o->pluNumber = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'deliveryDate': $o->deliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'deliveryDateEnd': $o->deliveryDateEnd = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'orderText': $o->orderText = $this->load_string_property($in); break;
						case 'data': $o->data = $this->load_SavePurchaseOrderV2LineData($in); break;
						case 'supplierArticleNumber': $o->supplierArticleNumber = $this->load_string_property($in); break;
						case 'barcode': $o->barcode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePurchaseOrderV2(\XMLReader $in) : SavePurchaseOrderV2 {
		$n = $in->name;
		$o = new SavePurchaseOrderV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseOrderNumber': $o->purchaseOrderNumber = $this->load_YearNumber($in); break;
						case 'extPurchaseOrderId': $o->extPurchaseOrderId = $this->load_string_property($in); break;
						case 'orderDate': $o->orderDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'deliveryDate': $o->deliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'state': $o->state = $this->load_string_property($in); break;
						case 'vatMethod': $o->vatMethod = $this->load_string_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'deliveryAddressId': $o->deliveryAddressId = $this->load_string_property($in); break;
						case 'lineList': $o->lineList = ($this->load_SavePurchaseOrderV2LineList($in))->line; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePurchaseOrderV2Request(\XMLReader $in) : SavePurchaseOrderV2Request {
		$n = $in->name;
		$o = new SavePurchaseOrderV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'savePurchaseOrder': $o->savePurchaseOrder = $this->load_SavePurchaseOrderV2($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ErrorDetails(\XMLReader $in) : ErrorDetails {
		$n = $in->name;
		$o = new ErrorDetails();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineNumber': $o->lineNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'articleVariantId': $o->articleVariantId = $this->load_int_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'supplierArticleNumber': $o->supplierArticleNumber = $this->load_string_property($in); break;
						case 'barcode': $o->barcode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PurchaseDeliveryLineList(\XMLReader $in) : PurchaseDeliveryLineList {
		$n = $in->name;
		$o = new PurchaseDeliveryLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'line': $o->line[] = $this->load_PurchaseDeliveryLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PurchaseDeliveryLineData(\XMLReader $in) : PurchaseDeliveryLineData {
		$n = $in->name;
		$o = new PurchaseDeliveryLineData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'deliveredQuantity': $deliveredQuantity = $this->load_int_property($in); break;
						case 'deliveredDecimalPlaces': $deliveredDecimalPlaces = $this->load_int_property($in); break;
						case 'purchasePrice': $purchasePrice = $this->load_int_property($in); break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_int_property($in); break;
						case 'turnoverGroupName': $o->turnoverGroupName = $this->load_string_property($in); break;
						case 'turnoverGroupType': $o->turnoverGroupType = $this->load_string_property($in); break;
						case 'vatCode': $o->vatCode = $this->load_int_property($in); break;
						case 'vatPercentage': $o->vatPercentage = $this->load_int_property($in); break;
						case 'siUnit': $o->siUnit = $this->load_string_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_int_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'articleVariantId': $o->articleVariantId = $this->load_int_property($in); break;
						case 'quantityInPackaging': $o->quantityInPackaging = $this->load_BigDecimal_property($in); break;
						case 'packagingType': $o->packagingType = $this->load_string_property($in); break;
						case 'quantityOfPackagesDelivered': $o->quantityOfPackagesDelivered = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->deliveredQuantity = isset($deliveredQuantity) ? BigDecimal::ofUnscaledValue($deliveredQuantity, $deliveredDecimalPlaces ?? 2) : null;
		$o->purchasePrice = isset($purchasePrice) ? BigDecimal::ofUnscaledValue($purchasePrice, 2) : null;
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_PurchaseDeliveryLine(\XMLReader $in) : PurchaseDeliveryLine {
		$n = $in->name;
		$o = new PurchaseDeliveryLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'pluNumber': $o->pluNumber = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'supplierRelationNumber': $o->supplierRelationNumber = $this->load_int_property($in); break;
						case 'supplierRelationName': $o->supplierRelationName = $this->load_string_property($in); break;
						case 'supplierArticleNumber': $o->supplierArticleNumber = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
						case 'relationCategoryId': $o->relationCategoryId = $this->load_int_property($in); break;
						case 'relationBankAccountNumber': $o->relationBankAccountNumber = $this->load_string_property($in); break;
						case 'orderText': $o->orderText = $this->load_string_property($in); break;
						case 'data': $o->data = $this->load_PurchaseDeliveryLineData($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PurchaseDelivery(\XMLReader $in) : PurchaseDelivery {
		$n = $in->name;
		$o = new PurchaseDelivery();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseDeliveryNumber': $o->purchaseDeliveryNumber = $this->load_YearNumber($in); break;
						case 'extPurchaseDeliveryId': $o->extPurchaseDeliveryId = $this->load_string_property($in); break;
						case 'deliveryDate': $o->deliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
						case 'relationCategoryId': $o->relationCategoryId = $this->load_int_property($in); break;
						case 'relationBankAccountNumber': $o->relationBankAccountNumber = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeName': $o->employeeName = $this->load_string_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'isPrinted': $o->isPrinted = $this->load_bool_property($in); break;
						case 'vatGroupList': $o->vatGroupList = ($this->load_VatGroupList($in))->vatGroup; break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'lineListCount': $o->lineListCount = $this->load_int_property($in); break;
						case 'lineList': $o->lineList = ($this->load_PurchaseDeliveryLineList($in))->line; break;
						case 'purchaseOrderNumber': $o->purchaseOrderNumber = $this->load_YearNumber($in); break;
						case 'deliveryAddress': $o->deliveryAddress = $this->load_Address($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_PurchaseDeliveryList(\XMLReader $in) : PurchaseDeliveryList {
		$n = $in->name;
		$o = new PurchaseDeliveryList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseDelivery': $o->purchaseDelivery[] = $this->load_PurchaseDelivery($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPurchaseDeliveriesRequest(\XMLReader $in) : GetPurchaseDeliveriesRequest {
		$n = $in->name;
		$o = new GetPurchaseDeliveriesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'fromDeliveryDate': $o->fromDeliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughDeliveryDate': $o->throughDeliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'employeeNumbers': $o->employeeNumbers[] = $this->load_int_property($in); break;
						case 'relationNumbers': $o->relationNumbers[] = $this->load_int_property($in); break;
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
						case 'articleTurnoverGroups': $o->articleTurnoverGroups[] = $this->load_int_property($in); break;
						case 'articlePluNumbers': $o->articlePluNumbers = ($this->load_TextList($in))->text; break;
						case 'articleBarcodes': $o->articleBarcodes = ($this->load_TextList($in))->text; break;
						case 'includeLineList': $o->includeLineList = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePurchaseDeliveryInfo(\XMLReader $in) : SavePurchaseDeliveryInfo {
		$n = $in->name;
		$o = new SavePurchaseDeliveryInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseDeliveryNumber': $o->purchaseDeliveryNumber = $this->load_YearNumber($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PurchaseDeliveryV2LineList(\XMLReader $in) : PurchaseDeliveryV2LineList {
		$n = $in->name;
		$o = new PurchaseDeliveryV2LineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'line': $o->line[] = $this->load_PurchaseDeliveryV2Line($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PurchaseDeliveryV2LineData(\XMLReader $in) : PurchaseDeliveryV2LineData {
		$n = $in->name;
		$o = new PurchaseDeliveryV2LineData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'deliveredQuantity': $deliveredQuantity = $this->load_int_property($in); break;
						case 'deliveredDecimalPlaces': $deliveredDecimalPlaces = $this->load_int_property($in); break;
						case 'purchasePrice': $o->purchasePrice = $this->load_string_property($in); break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_int_property($in); break;
						case 'turnoverGroupName': $o->turnoverGroupName = $this->load_string_property($in); break;
						case 'turnoverGroupType': $o->turnoverGroupType = $this->load_string_property($in); break;
						case 'vatCode': $o->vatCode = $this->load_int_property($in); break;
						case 'vatPercentage': $o->vatPercentage = $this->load_int_property($in); break;
						case 'siUnit': $o->siUnit = $this->load_string_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_int_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'exchangeRateBuyPrice': $exchangeRateBuyPrice = $this->load_int_property($in); break;
						case 'exchangeRateBuyPriceDecimalPlaces': $exchangeRateBuyPriceDecimalPlaces = $this->load_int_property($in); break;
						case 'exchangeRateSellPrice': $exchangeRateSellPrice = $this->load_int_property($in); break;
						case 'exchangeRateSellPriceDecimalPlaces': $exchangeRateSellPriceDecimalPlaces = $this->load_int_property($in); break;
						case 'exchangeRateMultiplier': $o->exchangeRateMultiplier = $this->load_int_property($in); break;
						case 'articleVariantId': $o->articleVariantId = $this->load_int_property($in); break;
						case 'quantityInPackaging': $o->quantityInPackaging = $this->load_BigDecimal_property($in); break;
						case 'packagingType': $o->packagingType = $this->load_string_property($in); break;
						case 'barcodeSalesPrice': $o->barcodeSalesPrice = $this->load_BigDecimal_property($in); break;
						case 'quantityOfPackagesDelivered': $o->quantityOfPackagesDelivered = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->deliveredQuantity = isset($deliveredQuantity) ? BigDecimal::ofUnscaledValue($deliveredQuantity, $deliveredDecimalPlaces ?? 2) : null;
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		$o->exchangeRateBuyPrice = isset($exchangeRateBuyPrice) ? BigDecimal::ofUnscaledValue($exchangeRateBuyPrice, $exchangeRateBuyPriceDecimalPlaces ?? 2) : null;
		$o->exchangeRateSellPrice = isset($exchangeRateSellPrice) ? BigDecimal::ofUnscaledValue($exchangeRateSellPrice, $exchangeRateSellPriceDecimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_PurchaseDeliveryV2Line(\XMLReader $in) : PurchaseDeliveryV2Line {
		$n = $in->name;
		$o = new PurchaseDeliveryV2Line();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineNumber': $o->lineNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'pluNumber': $o->pluNumber = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'supplierRelationNumber': $o->supplierRelationNumber = $this->load_int_property($in); break;
						case 'supplierRelationName': $o->supplierRelationName = $this->load_string_property($in); break;
						case 'supplierArticleNumber': $o->supplierArticleNumber = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
						case 'relationCategoryId': $o->relationCategoryId = $this->load_int_property($in); break;
						case 'relationBankAccountNumber': $o->relationBankAccountNumber = $this->load_string_property($in); break;
						case 'orderText': $o->orderText = $this->load_string_property($in); break;
						case 'data': $o->data = $this->load_PurchaseDeliveryV2LineData($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PurchaseDeliveryV2(\XMLReader $in) : PurchaseDeliveryV2 {
		$n = $in->name;
		$o = new PurchaseDeliveryV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseDeliveryNumber': $o->purchaseDeliveryNumber = $this->load_YearNumber($in); break;
						case 'extPurchaseDeliveryId': $o->extPurchaseDeliveryId = $this->load_string_property($in); break;
						case 'deliveryDate': $o->deliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
						case 'relationCategoryId': $o->relationCategoryId = $this->load_int_property($in); break;
						case 'relationBankAccountNumber': $o->relationBankAccountNumber = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeName': $o->employeeName = $this->load_string_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'isPrinted': $o->isPrinted = $this->load_bool_property($in); break;
						case 'vatGroupList': $o->vatGroupList = ($this->load_VatGroupList($in))->vatGroup; break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'lineListCount': $o->lineListCount = $this->load_int_property($in); break;
						case 'lineList': $o->lineList = ($this->load_PurchaseDeliveryV2LineList($in))->line; break;
						case 'purchaseOrderNumber': $o->purchaseOrderNumber = $this->load_YearNumber($in); break;
						case 'deliveryAddress': $o->deliveryAddress = $this->load_Address($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_GetPurchaseDeliveriesV2Request(\XMLReader $in) : GetPurchaseDeliveriesV2Request {
		$n = $in->name;
		$o = new GetPurchaseDeliveriesV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseDeliveryNumber': $o->purchaseDeliveryNumber = $this->load_YearNumber($in); break;
						case 'extPurchaseDeliveryId': $o->extPurchaseDeliveryId = $this->load_string_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'fromDeliveryDate': $o->fromDeliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughDeliveryDate': $o->throughDeliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'employeeNumbers': $o->employeeNumbers[] = $this->load_int_property($in); break;
						case 'relationNumbers': $o->relationNumbers[] = $this->load_int_property($in); break;
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
						case 'articleTurnoverGroups': $o->articleTurnoverGroups[] = $this->load_int_property($in); break;
						case 'articlePluNumbers': $o->articlePluNumbers = ($this->load_TextList($in))->text; break;
						case 'articleBarcodes': $o->articleBarcodes = ($this->load_TextList($in))->text; break;
						case 'includeLineList': $o->includeLineList = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PurchaseDeliveryV2List(\XMLReader $in) : PurchaseDeliveryV2List {
		$n = $in->name;
		$o = new PurchaseDeliveryV2List();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseDelivery': $o->purchaseDelivery[] = $this->load_PurchaseDeliveryV2($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePurchaseDeliveryV2LineList(\XMLReader $in) : SavePurchaseDeliveryV2LineList {
		$n = $in->name;
		$o = new SavePurchaseDeliveryV2LineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'line': $o->line[] = $this->load_SavePurchaseDeliveryV2Line($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePurchaseDeliveryV2LineData(\XMLReader $in) : SavePurchaseDeliveryV2LineData {
		$n = $in->name;
		$o = new SavePurchaseDeliveryV2LineData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'deliveredQuantity': $deliveredQuantity = $this->load_int_property($in); break;
						case 'deliveredDecimalPlaces': $deliveredDecimalPlaces = $this->load_int_property($in); break;
						case 'purchasePrice': $o->purchasePrice = $this->load_string_property($in); break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_int_property($in); break;
						case 'vatCode': $o->vatCode = $this->load_int_property($in); break;
						case 'vatPercentage': $o->vatPercentage = $this->load_int_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_int_property($in); break;
						case 'articleVariantId': $o->articleVariantId = $this->load_int_property($in); break;
						case 'quantityInPackaging': $o->quantityInPackaging = $this->load_BigDecimal_property($in); break;
						case 'packagingType': $o->packagingType = $this->load_string_property($in); break;
						case 'barcodeSalesPrice': $o->barcodeSalesPrice = $this->load_BigDecimal_property($in); break;
						case 'quantityOfPackagesDelivered': $o->quantityOfPackagesDelivered = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->deliveredQuantity = isset($deliveredQuantity) ? BigDecimal::ofUnscaledValue($deliveredQuantity, $deliveredDecimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_SavePurchaseDeliveryV2Line(\XMLReader $in) : SavePurchaseDeliveryV2Line {
		$n = $in->name;
		$o = new SavePurchaseDeliveryV2Line();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineNumber': $o->lineNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'pluNumber': $o->pluNumber = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'deliveryDate': $o->deliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'deliveryDateEnd': $o->deliveryDateEnd = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'orderText': $o->orderText = $this->load_string_property($in); break;
						case 'data': $o->data = $this->load_SavePurchaseDeliveryV2LineData($in); break;
						case 'supplierArticleNumber': $o->supplierArticleNumber = $this->load_string_property($in); break;
						case 'barcode': $o->barcode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePurchaseDeliveryV2(\XMLReader $in) : SavePurchaseDeliveryV2 {
		$n = $in->name;
		$o = new SavePurchaseDeliveryV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseDeliveryNumber': $o->purchaseDeliveryNumber = $this->load_YearNumber($in); break;
						case 'extPurchaseDeliveryId': $o->extPurchaseDeliveryId = $this->load_string_property($in); break;
						case 'deliveryDate': $o->deliveryDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'deliveryAddressId': $o->deliveryAddressId = $this->load_string_property($in); break;
						case 'vatMethod': $o->vatMethod = $this->load_string_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'deliveryAddress': $o->deliveryAddress = $this->load_Address($in); break;
						case 'lineList': $o->lineList = ($this->load_SavePurchaseDeliveryV2LineList($in))->line; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePurchaseDeliveryV2Request(\XMLReader $in) : SavePurchaseDeliveryV2Request {
		$n = $in->name;
		$o = new SavePurchaseDeliveryV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'savePurchaseDelivery': $o->savePurchaseDelivery = $this->load_SavePurchaseDeliveryV2($in); break;
						case 'fromPurchaseOrder': $o->fromPurchaseOrder = $this->load_YearNumberVersion($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_EncryptStringRequest(\XMLReader $in) : EncryptStringRequest {
		$n = $in->name;
		$o = new EncryptStringRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'plainString': $o->plainString = $this->load_string_property($in); break;
						case 'encryptionKey': $o->encryptionKey = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CardLayoutField(\XMLReader $in) : CardLayoutField {
		$n = $in->name;
		$o = new CardLayoutField();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardLayoutFieldId': $o->cardLayoutFieldId = $this->load_int_property($in); break;
						case 'label': $o->label = $this->load_string_property($in); break;
						case 'abbreviation': $o->abbreviation = $this->load_string_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'cardColumn': $o->cardColumn = $this->load_int_property($in); break;
						case 'cardRow': $o->cardRow = $this->load_int_property($in); break;
						case 'fieldWidth': $o->fieldWidth = $this->load_int_property($in); break;
						case 'fieldHeight': $o->fieldHeight = $this->load_int_property($in); break;
						case 'maximumLineCharacters': $o->maximumLineCharacters = $this->load_int_property($in); break;
						case 'maximumLines': $o->maximumLines = $this->load_int_property($in); break;
						case 'minimumDecimals': $o->minimumDecimals = $this->load_int_property($in); break;
						case 'maximumDecimals': $o->maximumDecimals = $this->load_int_property($in); break;
						case 'cardLayoutFieldType': $o->cardLayoutFieldType = $this->load_string_property($in); break;
						case 'dataType': $o->dataType = $this->load_string_property($in); break;
						case 'columnName': $o->columnName = $this->load_string_property($in); break;
						case 'apiName': $o->apiName = $this->load_string_property($in); break;
						case 'active': $o->active = $this->load_bool_property($in); break;
						case 'readOnly': $o->readOnly = $this->load_bool_property($in); break;
						case 'visible': $o->visible = $this->load_bool_property($in); break;
						case 'defaultValue': $o->defaultValue = $this->load_string_property($in); break;
						case 'isRequired': $o->isRequired = $this->load_bool_property($in); break;
						case 'prefix': $o->prefix = $this->load_string_property($in); break;
						case 'postfix': $o->postfix = $this->load_string_property($in); break;
						case 'warning': $o->warning = $this->load_string_property($in); break;
						case 'infoPopup': $o->infoPopup = $this->load_bool_property($in); break;
						case 'categoryId': $o->categoryId = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CardLayoutFieldList(\XMLReader $in) : CardLayoutFieldList {
		$n = $in->name;
		$o = new CardLayoutFieldList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardLayoutField': $o->cardLayoutField[] = $this->load_CardLayoutField($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticleCardLayoutRequest(\XMLReader $in) : GetArticleCardLayoutRequest {
		$n = $in->name;
		$o = new GetArticleCardLayoutRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'categoryId': $o->categoryId = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateArticleCardLayoutRequest(\XMLReader $in) : UpdateArticleCardLayoutRequest {
		$n = $in->name;
		$o = new UpdateArticleCardLayoutRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardLayoutFieldList': $o->cardLayoutFieldList = ($this->load_CardLayoutFieldList($in))->cardLayoutField; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RetailSpaceRental(\XMLReader $in) : RetailSpaceRental {
		$n = $in->name;
		$o = new RetailSpaceRental();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'retailSpaceRentalNumber': $o->retailSpaceRentalNumber = $this->load_int_property($in); break;
						case 'retailSpaceRentalBarcode': $o->retailSpaceRentalBarcode = $this->load_string_property($in); break;
						case 'retailSpaceRentalBooth': $o->retailSpaceRentalBooth = $this->load_string_property($in); break;
						case 'retailSpaceRentalActive': $o->retailSpaceRentalActive = $this->load_bool_property($in); break;
						case 'retailSpaceRentalName': $o->retailSpaceRentalName = $this->load_string_property($in); break;
						case 'retailSpaceRentalAddress': $o->retailSpaceRentalAddress = $this->load_string_property($in); break;
						case 'retailSpaceRentalZipCode': $o->retailSpaceRentalZipCode = $this->load_string_property($in); break;
						case 'retailSpaceRentalCity': $o->retailSpaceRentalCity = $this->load_string_property($in); break;
						case 'retailSpaceRentalBankAccountNumber': $o->retailSpaceRentalBankAccountNumber = $this->load_string_property($in); break;
						case 'retailSpaceRentalPhoneNumber': $o->retailSpaceRentalPhoneNumber = $this->load_string_property($in); break;
						case 'retailSpaceRentalEmailAddress': $o->retailSpaceRentalEmailAddress = $this->load_string_property($in); break;
						case 'retailSpaceRentalStartDate': $o->retailSpaceRentalStartDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'retailSpaceRentalEndDate': $o->retailSpaceRentalEndDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'retailSpaceRentalTotalSales': $o->retailSpaceRentalTotalSales = $this->load_int_property($in); break;
						case 'retailSpaceRentalTotalPaidOut': $o->retailSpaceRentalTotalPaidOut = $this->load_int_property($in); break;
						case 'retailSpaceRentalBalance': $o->retailSpaceRentalBalance = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RetailSpaceRentalList(\XMLReader $in) : RetailSpaceRentalList {
		$n = $in->name;
		$o = new RetailSpaceRentalList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'retailSpaceRental': $o->retailSpaceRental[] = $this->load_RetailSpaceRental($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRetailSpaceRentalRequest(\XMLReader $in) : GetRetailSpaceRentalRequest {
		$n = $in->name;
		$o = new GetRetailSpaceRentalRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'retailSpaceRentalNumber': $o->retailSpaceRentalNumber = $this->load_int_property($in); break;
						case 'retailSpaceRentalBarcode': $o->retailSpaceRentalBarcode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRetailSpaceRentalsRequest(\XMLReader $in) : GetRetailSpaceRentalsRequest {
		$n = $in->name;
		$o = new GetRetailSpaceRentalsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'onlyActive': $o->onlyActive = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_EntityTypeList(\XMLReader $in) : EntityTypeList {
		$n = $in->name;
		$o = new EntityTypeList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'entityType': $o->entityType[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_EidSearchRequest(\XMLReader $in) : EidSearchRequest {
		$n = $in->name;
		$o = new EidSearchRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'filter': $o->filter = ($this->load_EntityTypeList($in))->entityType; break;
						case 'eidType': $o->eidType = $this->load_string_property($in); break;
						case 'eidHexData': $o->eidHexData = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OverviewFilter(\XMLReader $in) : OverviewFilter {
		$n = $in->name;
		$o = new OverviewFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fieldName': $o->fieldName = $this->load_string_property($in); break;
						case 'fieldValue': $o->fieldValue = $this->load_string_property($in); break;
						case 'filterOperator': $o->filterOperator = $this->load_string_property($in); break;
						case 'caseSensitive': $o->caseSensitive = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OverviewFilterList(\XMLReader $in) : OverviewFilterList {
		$n = $in->name;
		$o = new OverviewFilterList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'filter': $o->filter[] = $this->load_OverviewFilter($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OverviewSearch(\XMLReader $in) : OverviewSearch {
		$n = $in->name;
		$o = new OverviewSearch();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'term': $o->term = $this->load_string_property($in); break;
						case 'active': $o->active = $this->load_bool_property($in); break;
						case 'notActive': $o->notActive = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ScopeValues(\XMLReader $in) : ScopeValues {
		$n = $in->name;
		$o = new ScopeValues();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OverviewRequest(\XMLReader $in) : OverviewRequest {
		$n = $in->name;
		$o = new OverviewRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardType': $o->cardType = $this->load_string_property($in); break;
						case 'categoryId': $o->categoryId = $this->load_int_property($in); break;
						case 'selectFieldNameList': $o->selectFieldNameList[] = $this->load_string_property($in); break;
						case 'pageNumber': $o->pageNumber = $this->load_int_property($in); break;
						case 'maxPerPage': $o->maxPerPage = $this->load_int_property($in); break;
						case 'orderField': $o->orderField = $this->load_string_property($in); break;
						case 'sortOrder': $o->sortOrder = $this->load_string_property($in); break;
						case 'search': $o->search = $this->load_OverviewSearch($in); break;
						case 'filterList': $o->filterList[] = $this->load_OverviewFilter($in); break;
						case 'retrieveImageList': $o->retrieveImageList = $this->load_bool_property($in); break;
						case 'imageDetails': $o->imageDetails = $this->load_string_property($in); break;
						case 'scopeValues': $o->scopeValues = $this->load_ScopeValues($in); break;
						case 'aggregateValues': $o->aggregateValues = $this->load_bool_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OverviewField(\XMLReader $in) : OverviewField {
		$n = $in->name;
		$o = new OverviewField();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'value': $o->value = $this->load_string_property($in); break;
						case 'scoped': $o->scoped = $this->load_bool_property($in); break;
						case 'aggregated': $o->aggregated = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SimpleImage(\XMLReader $in) : SimpleImage {
		$n = $in->name;
		$o = new SimpleImage();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'hash': $o->hash = $this->load_string_property($in); break;
						case 'url': $o->url = $this->load_string_property($in); break;
						case 'width': $o->width = $this->load_int_property($in); break;
						case 'height': $o->height = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SimpleImageList(\XMLReader $in) : SimpleImageList {
		$n = $in->name;
		$o = new SimpleImageList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'image': $o->image[] = $this->load_SimpleImage($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OverviewFieldList(\XMLReader $in) : OverviewFieldList {
		$n = $in->name;
		$o = new OverviewFieldList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fieldList': $o->fieldList[] = $this->load_OverviewField($in); break;
						case 'imageList': $o->imageList = ($this->load_ImageList($in))->image; break;
						case 'images': $o->images = ($this->load_SimpleImageList($in))->image; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OverviewList(\XMLReader $in) : OverviewList {
		$n = $in->name;
		$o = new OverviewList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'overview': $o->overview[] = $this->load_OverviewFieldList($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOverviewError(\XMLReader $in) : GetOverviewError {
		$n = $in->name;
		$o = new GetOverviewError();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'field': $o->field = $this->load_string_property($in); break;
						case 'errorCode': $o->errorCode = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOverviewErrorList(\XMLReader $in) : GetOverviewErrorList {
		$n = $in->name;
		$o = new GetOverviewErrorList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'errors': $o->errors[] = $this->load_GetOverviewError($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOverviewFieldsRequest(\XMLReader $in) : GetOverviewFieldsRequest {
		$n = $in->name;
		$o = new GetOverviewFieldsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardType': $o->cardType = $this->load_string_property($in); break;
						case 'categoryId': $o->categoryId = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_FieldSelectValue(\XMLReader $in) : FieldSelectValue {
		$n = $in->name;
		$o = new FieldSelectValue();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'value': $o->value = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OverviewFieldsField(\XMLReader $in) : OverviewFieldsField {
		$n = $in->name;
		$o = new OverviewFieldsField();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'label': $o->label = $this->load_string_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'defaultValue': $o->defaultValue = $this->load_string_property($in); break;
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'selectValueList': $o->selectValueList[] = $this->load_FieldSelectValue($in); break;
						case 'readOnly': $o->readOnly = $this->load_bool_property($in); break;
						case 'valueVisible': $o->valueVisible = $this->load_bool_property($in); break;
						case 'required': $o->required = $this->load_bool_property($in); break;
						case 'tabOrder': $o->tabOrder = $this->load_int_property($in); break;
						case 'maxCharsPerLine': $o->maxCharsPerLine = $this->load_int_property($in); break;
						case 'maxLines': $o->maxLines = $this->load_int_property($in); break;
						case 'active': $o->active = $this->load_bool_property($in); break;
						case 'onCard': $o->onCard = $this->load_bool_property($in); break;
						case 'isSelectionField': $o->isSelectionField = $this->load_bool_property($in); break;
						case 'nullable': $o->nullable = $this->load_bool_property($in); break;
						case 'formule': $o->formule = $this->load_string_property($in); break;
						case 'charMaxLength': $o->charMaxLength = $this->load_int_property($in); break;
						case 'numericPrecision': $o->numericPrecision = $this->load_int_property($in); break;
						case 'numericRadix': $o->numericRadix = $this->load_int_property($in); break;
						case 'numericScale': $o->numericScale = $this->load_int_property($in); break;
						case 'cardColumn': $o->cardColumn = $this->load_int_property($in); break;
						case 'cardRow': $o->cardRow = $this->load_int_property($in); break;
						case 'showInInfoPopup': $o->showInInfoPopup = $this->load_bool_property($in); break;
						case 'containsPersonalData': $o->containsPersonalData = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OverviewFieldsList(\XMLReader $in) : OverviewFieldsList {
		$n = $in->name;
		$o = new OverviewFieldsList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'overviewFields': $o->overviewFields[] = $this->load_OverviewFieldsField($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOverviewFieldsError(\XMLReader $in) : GetOverviewFieldsError {
		$n = $in->name;
		$o = new GetOverviewFieldsError();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'errorCode': $o->errorCode = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOverviewFieldsErrorList(\XMLReader $in) : GetOverviewFieldsErrorList {
		$n = $in->name;
		$o = new GetOverviewFieldsErrorList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'errors': $o->errors[] = $this->load_GetOverviewFieldsError($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateBatchField(\XMLReader $in) : UpdateBatchField {
		$n = $in->name;
		$o = new UpdateBatchField();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'value': $o->value = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateBatchFieldList(\XMLReader $in) : UpdateBatchFieldList {
		$n = $in->name;
		$o = new UpdateBatchFieldList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fieldList': $o->fieldList[] = $this->load_UpdateBatchField($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateBatchRequest(\XMLReader $in) : UpdateBatchRequest {
		$n = $in->name;
		$o = new UpdateBatchRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardType': $o->cardType = $this->load_string_property($in); break;
						case 'categoryId': $o->categoryId = $this->load_int_property($in); break;
						case 'numbers': $o->numbers[] = $this->load_int_property($in); break;
						case 'fieldList': $o->fieldList = ($this->load_UpdateBatchFieldList($in))->fieldList; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateBatchError(\XMLReader $in) : UpdateBatchError {
		$n = $in->name;
		$o = new UpdateBatchError();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'field': $o->field = $this->load_string_property($in); break;
						case 'errorCode': $o->errorCode = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateBatchErrorList(\XMLReader $in) : UpdateBatchErrorList {
		$n = $in->name;
		$o = new UpdateBatchErrorList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'errors': $o->errors[] = $this->load_UpdateBatchError($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintRequest(\XMLReader $in) : PrintRequest {
		$n = $in->name;
		$o = new PrintRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'printerId': $o->printerId = $this->load_int_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetKitchenTicketsRequest(\XMLReader $in) : GetKitchenTicketsRequest {
		$n = $in->name;
		$o = new GetKitchenTicketsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_KitchenTicketLine(\XMLReader $in) : KitchenTicketLine {
		$n = $in->name;
		$o = new KitchenTicketLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'kitchenTicketLineId': $o->kitchenTicketLineId = $this->load_string_property($in); break;
						case 'locationId': $o->locationId = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'quantity': $quantity = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
						case 'isStarted': $o->isStarted = $this->load_bool_property($in); break;
						case 'isPreparationStarted': $o->isPreparationStarted = $this->load_bool_property($in); break;
						case 'isReady': $o->isReady = $this->load_bool_property($in); break;
						case 'isServed': $o->isServed = $this->load_bool_property($in); break;
						case 'isDeleted': $o->isDeleted = $this->load_bool_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'preparationText': $o->preparationText = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->quantity = isset($quantity) ? BigDecimal::ofUnscaledValue($quantity, $decimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_KitchenTicketLineList(\XMLReader $in) : KitchenTicketLineList {
		$n = $in->name;
		$o = new KitchenTicketLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'kitchenTicketLine': $o->kitchenTicketLine[] = $this->load_KitchenTicketLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_KitchenTicketCourse(\XMLReader $in) : KitchenTicketCourse {
		$n = $in->name;
		$o = new KitchenTicketCourse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'courseNumber': $o->courseNumber = $this->load_int_property($in); break;
						case 'courseName': $o->courseName = $this->load_string_property($in); break;
						case 'courseAbbreviation': $o->courseAbbreviation = $this->load_string_property($in); break;
						case 'maximumPreparationTime': $o->maximumPreparationTime = $this->load_int_property($in); break;
						case 'isRequested': $o->isRequested = $this->load_bool_property($in); break;
						case 'isStarted': $o->isStarted = $this->load_bool_property($in); break;
						case 'isCompletelyReady': $o->isCompletelyReady = $this->load_bool_property($in); break;
						case 'isCompletelyServed': $o->isCompletelyServed = $this->load_bool_property($in); break;
						case 'startTimestamp': $o->startTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'startVersionNumber': $o->startVersionNumber = $this->load_int_property($in); break;
						case 'startedThroughLine': $o->startedThroughLine = $this->load_bool_property($in); break;
						case 'kitchenTicketLineList': $o->kitchenTicketLineList = ($this->load_KitchenTicketLineList($in))->kitchenTicketLine; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_KitchenTicketCourseList(\XMLReader $in) : KitchenTicketCourseList {
		$n = $in->name;
		$o = new KitchenTicketCourseList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'kitchenTicketCourse': $o->kitchenTicketCourse[] = $this->load_KitchenTicketCourse($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_KitchenTicket(\XMLReader $in) : KitchenTicket {
		$n = $in->name;
		$o = new KitchenTicket();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'kitchenTicketId': $o->kitchenTicketId = $this->load_string_property($in); break;
						case 'versionNumber': $o->versionNumber = $this->load_int_property($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'changeTimestamp': $o->changeTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'state': $o->state = $this->load_string_property($in); break;
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
						case 'orderYear': $o->orderYear = $this->load_int_property($in); break;
						case 'orderNumber': $o->orderNumber = $this->load_int_property($in); break;
						case 'tableDescription': $o->tableDescription = $this->load_string_property($in); break;
						case 'tableZone': $o->tableZone = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'isVip': $o->isVip = $this->load_bool_property($in); break;
						case 'plannedDeliveryTimestamp': $o->plannedDeliveryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'snoozeTimestamp': $o->snoozeTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'snoozeDuration': $o->snoozeDuration = $this->load_int_property($in); break;
						case 'kitchenTicketCourseList': $o->kitchenTicketCourseList = ($this->load_KitchenTicketCourseList($in))->kitchenTicketCourse; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_KitchenTicketList(\XMLReader $in) : KitchenTicketList {
		$n = $in->name;
		$o = new KitchenTicketList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'kitchenTicket': $o->kitchenTicket[] = $this->load_KitchenTicket($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_StockCorrection(\XMLReader $in) : StockCorrection {
		$n = $in->name;
		$o = new StockCorrection();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'amount': $amount = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->amount = isset($amount) ? BigDecimal::ofUnscaledValue($amount, $decimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_StockCorrectionList(\XMLReader $in) : StockCorrectionList {
		$n = $in->name;
		$o = new StockCorrectionList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'correction': $o->correction[] = $this->load_StockCorrection($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveStockCorrectionsRequest(\XMLReader $in) : SaveStockCorrectionsRequest {
		$n = $in->name;
		$o = new SaveStockCorrectionsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'stockCorrectionList': $o->stockCorrectionList = ($this->load_StockCorrectionList($in))->correction; break;
						case 'correctionType': $o->correctionType = $this->load_string_property($in); break;
						case 'correctionMode': $o->correctionMode = $this->load_string_property($in); break;
						case 'reason': $o->reason = $this->load_string_property($in); break;
						case 'plannedCycleCountId': $o->plannedCycleCountId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PurchaseBookEntry(\XMLReader $in) : PurchaseBookEntry {
		$n = $in->name;
		$o = new PurchaseBookEntry();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'quantity': $o->quantity = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PurchaseBook(\XMLReader $in) : PurchaseBook {
		$n = $in->name;
		$o = new PurchaseBook();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'entries': $o->entries[] = $this->load_PurchaseBookEntry($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPurchaseBookRequest(\XMLReader $in) : GetPurchaseBookRequest {
		$n = $in->name;
		$o = new GetPurchaseBookRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_AddToPurchaseBookRequest(\XMLReader $in) : AddToPurchaseBookRequest {
		$n = $in->name;
		$o = new AddToPurchaseBookRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'entries': $o->entries[] = $this->load_PurchaseBookEntry($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetStockCorrectionsRequest(\XMLReader $in) : GetStockCorrectionsRequest {
		$n = $in->name;
		$o = new GetStockCorrectionsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumbers': $o->employeeNumbers[] = $this->load_int_property($in); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
						case 'fromFinancialDate': $o->fromFinancialDate = $this->load_Date_property($in); break;
						case 'throughFinancialDate': $o->throughFinancialDate = $this->load_Date_property($in); break;
						case 'correctionType': $o->correctionType = $this->load_string_property($in); break;
						case 'stockCorrectionNumber': $o->stockCorrectionNumber = $this->load_YearNumber($in); break;
						case 'includeStockCorrectionLineList': $o->includeStockCorrectionLineList = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_StockCorrectionLineV2(\XMLReader $in) : StockCorrectionLineV2 {
		$n = $in->name;
		$o = new StockCorrectionLineV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'amountOld': $o->amountOld = $this->load_BigDecimal_property($in); break;
						case 'amountNew': $o->amountNew = $this->load_BigDecimal_property($in); break;
						case 'stockId': $o->stockId = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_StockCorrectionLineV2List(\XMLReader $in) : StockCorrectionLineV2List {
		$n = $in->name;
		$o = new StockCorrectionLineV2List();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'stockCorrectionLine': $o->stockCorrectionLine[] = $this->load_StockCorrectionLineV2($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_StockCorrectionV2(\XMLReader $in) : StockCorrectionV2 {
		$n = $in->name;
		$o = new StockCorrectionV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'stockCorrectionNumber': $o->stockCorrectionNumber = $this->load_YearNumber($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'branchCorrectionNumber': $o->branchCorrectionNumber = $this->load_int_property($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_DateTime_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'correctionType': $o->correctionType = $this->load_string_property($in); break;
						case 'reason': $o->reason = $this->load_string_property($in); break;
						case 'stockCorrectionLineListCount': $o->stockCorrectionLineListCount = $this->load_int_property($in); break;
						case 'stockCorrectionLineList': $o->stockCorrectionLineList = ($this->load_StockCorrectionLineV2List($in))->stockCorrectionLine; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_StockCorrectionV2List(\XMLReader $in) : StockCorrectionV2List {
		$n = $in->name;
		$o = new StockCorrectionV2List();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'stockCorrection': $o->stockCorrection[] = $this->load_StockCorrectionV2($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticlesNutritionalCharacteristicsRequest(\XMLReader $in) : GetArticlesNutritionalCharacteristicsRequest {
		$n = $in->name;
		$o = new GetArticlesNutritionalCharacteristicsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumbers': $o->articleNumbers = ($this->load_NumberList($in))->number; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticlesNutritionalCharacteristicsResponseElem(\XMLReader $in) : GetArticlesNutritionalCharacteristicsResponseElem {
		$n = $in->name;
		$o = new GetArticlesNutritionalCharacteristicsResponseElem();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'nutritionalCharacteristics': $o->nutritionalCharacteristics = $this->load_NutritionalCharacteristics($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_NutritionalCharacteristicInput(\XMLReader $in) : NutritionalCharacteristicInput {
		$n = $in->name;
		$o = new NutritionalCharacteristicInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'presence': $o->presence = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_NutritionalCharacteristicsInput(\XMLReader $in) : NutritionalCharacteristicsInput {
		$n = $in->name;
		$o = new NutritionalCharacteristicsInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'allergenList': $o->allergenList[] = $this->load_NutritionalCharacteristicInput($in); break;
						case 'dietRestrictionList': $o->dietRestrictionList[] = $this->load_NutritionalCharacteristicInput($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateArticleNutritionalCharacteristicsRequest(\XMLReader $in) : UpdateArticleNutritionalCharacteristicsRequest {
		$n = $in->name;
		$o = new UpdateArticleNutritionalCharacteristicsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'nutritionalCharacteristics': $o->nutritionalCharacteristics = $this->load_NutritionalCharacteristicsInput($in); break;
						case 'updateBehavior': $o->updateBehavior = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPreparationMethodGroupsRequest(\XMLReader $in) : GetPreparationMethodGroupsRequest {
		$n = $in->name;
		$o = new GetPreparationMethodGroupsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PreparationMethodItem(\XMLReader $in) : PreparationMethodItem {
		$n = $in->name;
		$o = new PreparationMethodItem();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'sequenceNumber': $o->sequenceNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'priceIncl': $o->priceIncl = $this->load_BigDecimal_property($in); break;
						case 'priceExcl': $o->priceExcl = $this->load_BigDecimal_property($in); break;
						case 'subLineType': $o->subLineType = $this->load_string_property($in); break;
						case 'remark': $o->remark = $this->load_string_property($in); break;
						case 'surcharge': $o->surcharge = $this->load_BigDecimal_property($in); break;
						case 'translation': $o->translation = $this->load_string_property($in); break;
						case 'buttonColour': $o->buttonColour = $this->load_Colour($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PreparationMethodItemList(\XMLReader $in) : PreparationMethodItemList {
		$n = $in->name;
		$o = new PreparationMethodItemList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'preparationMethodItem': $o->preparationMethodItem[] = $this->load_PreparationMethodItem($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PreparationMethodGroup(\XMLReader $in) : PreparationMethodGroup {
		$n = $in->name;
		$o = new PreparationMethodGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'closeAfterSelection': $o->closeAfterSelection = $this->load_bool_property($in); break;
						case 'selectionRequired': $o->selectionRequired = $this->load_bool_property($in); break;
						case 'maxOneSelection': $o->maxOneSelection = $this->load_bool_property($in); break;
						case 'maxCols': $o->maxCols = $this->load_int_property($in); break;
						case 'preparationMethods': $o->preparationMethods = ($this->load_PreparationMethodItemList($in))->preparationMethodItem; break;
						case 'paletteJson': $o->paletteJson = $this->load_string_property($in); break;
						case 'deletedOn': $o->deletedOn = $this->load_DateTime_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'isPosGroup': $o->isPosGroup = $this->load_bool_property($in); break;
						case 'isOnlineGroup': $o->isOnlineGroup = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PreparationMethodGroupList(\XMLReader $in) : PreparationMethodGroupList {
		$n = $in->name;
		$o = new PreparationMethodGroupList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'preparationMethodGroup': $o->preparationMethodGroup[] = $this->load_PreparationMethodGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeletePreparationMethodGroupRequest(\XMLReader $in) : DeletePreparationMethodGroupRequest {
		$n = $in->name;
		$o = new DeletePreparationMethodGroupRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'deleteEvenWhenInUse': $o->deleteEvenWhenInUse = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticlesPreparationMethodGroupsRequest(\XMLReader $in) : GetArticlesPreparationMethodGroupsRequest {
		$n = $in->name;
		$o = new GetArticlesPreparationMethodGroupsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumbers': $o->articleNumbers = ($this->load_NumberList($in))->number; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticlePreparationMethodGroups(\XMLReader $in) : ArticlePreparationMethodGroups {
		$n = $in->name;
		$o = new ArticlePreparationMethodGroups();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'preparationMethodGroupNumbers': $o->preparationMethodGroupNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticlePreparationMethodGroupsList(\XMLReader $in) : ArticlePreparationMethodGroupsList {
		$n = $in->name;
		$o = new ArticlePreparationMethodGroupsList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articlePreparationMethodGroups': $o->articlePreparationMethodGroups[] = $this->load_ArticlePreparationMethodGroups($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateArticlePreparationMethodGroupsRequest(\XMLReader $in) : UpdateArticlePreparationMethodGroupsRequest {
		$n = $in->name;
		$o = new UpdateArticlePreparationMethodGroupsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'preparationMethodGroupNumbers': $o->preparationMethodGroupNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PlaceTableOrderLineDataElem(\XMLReader $in) : PlaceTableOrderLineDataElem {
		$n = $in->name;
		$o = new PlaceTableOrderLineDataElem();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'quantity': $o->quantity = $this->load_BigDecimal_property($in); break;
						case 'priceIncl': $o->priceIncl = $this->load_BigDecimal_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_BigDecimal_property($in); break;
						case 'discountAmount': $o->discountAmount = $this->load_BigDecimal_property($in); break;
						case 'bpeId': $o->bpeId = $this->load_string_property($in); break;
						case 'menuId': $o->menuId = $this->load_string_property($in); break;
						case 'menuLinesId': $o->menuLinesId = $this->load_string_property($in); break;
						case 'courseNumber': $o->courseNumber = $this->load_int_property($in); break;
						case 'bpeAccordationEmployeeNumber': $o->bpeAccordationEmployeeNumber = $this->load_int_property($in); break;
						case 'priceType': $o->priceType = $this->load_string_property($in); break;
						case 'redeemedVoucherIssuanceId': $o->redeemedVoucherIssuanceId = $this->load_string_property($in); break;
						case 'pendingVoucherIssuanceStartTs': $o->pendingVoucherIssuanceStartTs = $this->load_DateTime_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PlaceTableOrderLineElem(\XMLReader $in) : PlaceTableOrderLineElem {
		$n = $in->name;
		$o = new PlaceTableOrderLineElem();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'data': $o->data = $this->load_PlaceTableOrderLineDataElem($in); break;
						case 'webhookLineData': $o->webhookLineData = $this->load_WebhookLineData($in); break;
						case 'preparationList': $o->preparationList[] = $this->load_PlaceTableOrderLineElem($in); break;
						case 'suppressDisposableComponent': $o->suppressDisposableComponent = $this->load_bool_property($in); break;
						case 'lineType': $o->lineType = $this->load_string_property($in); break;
						case 'tempId': $o->tempId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PlaceTableOrderPaymentElem(\XMLReader $in) : PlaceTableOrderPaymentElem {
		$n = $in->name;
		$o = new PlaceTableOrderPaymentElem();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'method': $o->method = $this->load_string_property($in); break;
						case 'amount': $o->amount = $this->load_BigDecimal_property($in); break;
						case 'eftTransactionDetails': $o->eftTransactionDetails = $this->load_EftTransactionDetails($in); break;
						case 'externalPaymentId': $o->externalPaymentId = $this->load_string_property($in); break;
						case 'giftcardNumber': $o->giftcardNumber = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TableOrderIdentifierElem(\XMLReader $in) : TableOrderIdentifierElem {
		$n = $in->name;
		$o = new TableOrderIdentifierElem();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'extOrderId': $o->extOrderId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PlaceTableOrderReq(\XMLReader $in) : PlaceTableOrderReq {
		$n = $in->name;
		$o = new PlaceTableOrderReq();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'tableOrderIdentifier': $o->tableOrderIdentifier = $this->load_TableOrderIdentifierElem($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'tableDescription': $o->tableDescription = $this->load_string_property($in); break;
						case 'numberOfGuests': $o->numberOfGuests = $this->load_int_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'vatChange': $o->vatChange = $this->load_string_property($in); break;
						case 'lines': $o->lines[] = $this->load_PlaceTableOrderLineElem($in); break;
						case 'payments': $o->payments[] = $this->load_PlaceTableOrderPaymentElem($in); break;
						case 'webhookSessionData': $o->webhookSessionData = $this->load_WebhookSessionData($in); break;
						case 'keepTableName': $o->keepTableName = $this->load_bool_property($in); break;
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
						case 'deliveryPeriodBegin': $o->deliveryPeriodBegin = $this->load_DateTime_property($in); break;
						case 'automaticNewMenus': $o->automaticNewMenus = $this->load_bool_property($in); break;
						case 'scannedVoucherIssuanceCodes': $o->scannedVoucherIssuanceCodes[] = $this->load_string_property($in); break;
						case 'releaseTable': $o->releaseTable = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TapTickTotalsRequest(\XMLReader $in) : TapTickTotalsRequest {
		$n = $in->name;
		$o = new TapTickTotalsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TapTickTotal(\XMLReader $in) : TapTickTotal {
		$n = $in->name;
		$o = new TapTickTotal();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'tapQuantity': $o->tapQuantity = $this->load_int_property($in); break;
						case 'salesQuantity': $o->salesQuantity = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BranchTapTickTotals(\XMLReader $in) : BranchTapTickTotals {
		$n = $in->name;
		$o = new BranchTapTickTotals();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'totals': $o->totals[] = $this->load_TapTickTotal($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TapTickHistoryRequest(\XMLReader $in) : TapTickHistoryRequest {
		$n = $in->name;
		$o = new TapTickHistoryRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fromTs': $o->fromTs = $this->load_DateTime_property($in); break;
						case 'untilTs': $o->untilTs = $this->load_DateTime_property($in); break;
						case 'branchFilter': $o->branchFilter[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TapTickHistory(\XMLReader $in) : TapTickHistory {
		$n = $in->name;
		$o = new TapTickHistory();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'tapIntegrationId': $o->tapIntegrationId = $this->load_string_property($in); break;
						case 'tapIdentity': $o->tapIdentity = $this->load_string_property($in); break;
						case 'recordedTs': $o->recordedTs = $this->load_DateTime_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'quantity': $o->quantity = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_FindRelationV2Request(\XMLReader $in) : FindRelationV2Request {
		$n = $in->name;
		$o = new FindRelationV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relation': $o->relation = $this->load_Relation($in); break;
						case 'exactMatch': $o->exactMatch = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TodoListEntry(\XMLReader $in) : TodoListEntry {
		$n = $in->name;
		$o = new TodoListEntry();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'variantId': $o->variantId = $this->load_int_property($in); break;
						case 'quantity': $o->quantity = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetTodoListsRequest(\XMLReader $in) : GetTodoListsRequest {
		$n = $in->name;
		$o = new GetTodoListsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'category': $o->category = $this->load_string_property($in); break;
						case 'includeEntries': $o->includeEntries = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateTodoListRequest(\XMLReader $in) : CreateTodoListRequest {
		$n = $in->name;
		$o = new CreateTodoListRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'category': $o->category = $this->load_string_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'entries': $o->entries[] = $this->load_TodoListEntry($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveTodoListRequest(\XMLReader $in) : SaveTodoListRequest {
		$n = $in->name;
		$o = new SaveTodoListRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'category': $o->category = $this->load_string_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'entries': $o->entries[] = $this->load_TodoListEntry($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveTodoListV2Request(\XMLReader $in) : SaveTodoListV2Request {
		$n = $in->name;
		$o = new SaveTodoListV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'category': $o->category = $this->load_string_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'entries': $o->entries[] = $this->load_TodoListEntry($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_AddToTodoListRequest(\XMLReader $in) : AddToTodoListRequest {
		$n = $in->name;
		$o = new AddToTodoListRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'entries': $o->entries[] = $this->load_TodoListEntry($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Struct_1(\XMLReader $in) : Struct_1 {
		$n = $in->name;
		$o = new Struct_1();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Struct_2(\XMLReader $in) : Struct_2 {
		$n = $in->name;
		$o = new Struct_2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Struct_3(\XMLReader $in) : Struct_3 {
		$n = $in->name;
		$o = new Struct_3();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetFilterProfilesRequest(\XMLReader $in) : GetFilterProfilesRequest {
		$n = $in->name;
		$o = new GetFilterProfilesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_FilterProfile(\XMLReader $in) : FilterProfile {
		$n = $in->name;
		$o = new FilterProfile();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'isDefault': $o->isDefault = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePreparationMethodItem(\XMLReader $in) : SavePreparationMethodItem {
		$n = $in->name;
		$o = new SavePreparationMethodItem();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'preparationMethodItemId': $o->preparationMethodItemId = $this->load_int_property($in); break;
						case 'sequenceNumber': $o->sequenceNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'remark': $o->remark = $this->load_string_property($in); break;
						case 'translation': $o->translation = $this->load_string_property($in); break;
						case 'buttonColour': $o->buttonColour = $this->load_Colour($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePreparationMethodGroupRequest(\XMLReader $in) : SavePreparationMethodGroupRequest {
		$n = $in->name;
		$o = new SavePreparationMethodGroupRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'preparationMethodGroupNumber': $o->preparationMethodGroupNumber = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'closeAfterSelection': $o->closeAfterSelection = $this->load_bool_property($in); break;
						case 'selectionRequired': $o->selectionRequired = $this->load_bool_property($in); break;
						case 'maxOneSelection': $o->maxOneSelection = $this->load_bool_property($in); break;
						case 'preparationMethodItems': $o->preparationMethodItems[] = $this->load_SavePreparationMethodItem($in); break;
						case 'isPosGroup': $o->isPosGroup = $this->load_bool_property($in); break;
						case 'isOnlineGroup': $o->isOnlineGroup = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetNutritionalCharacteristicsRequest(\XMLReader $in) : GetNutritionalCharacteristicsRequest {
		$n = $in->name;
		$o = new GetNutritionalCharacteristicsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'nutritionalCharacteristicsType': $o->nutritionalCharacteristicsType = $this->load_string_property($in); break;
						case 'numbers': $o->numbers = ($this->load_NumberSet($in))->number; break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetNutritionalCharacteristicsResponseElem(\XMLReader $in) : GetNutritionalCharacteristicsResponseElem {
		$n = $in->name;
		$o = new GetNutritionalCharacteristicsResponseElem();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'numbers': $o->numbers = $this->load_int_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'nutritionalCharacteristics': $o->nutritionalCharacteristics = $this->load_NutritionalCharacteristics($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateNutritionalCharacteristicsRequest(\XMLReader $in) : UpdateNutritionalCharacteristicsRequest {
		$n = $in->name;
		$o = new UpdateNutritionalCharacteristicsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'nutritionalCharacteristicsType': $o->nutritionalCharacteristicsType = $this->load_string_property($in); break;
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'nutritionalCharacteristics': $o->nutritionalCharacteristics = $this->load_NutritionalCharacteristicsInput($in); break;
						case 'updateBehavior': $o->updateBehavior = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeterminePricingRequest(\XMLReader $in) : DeterminePricingRequest {
		$n = $in->name;
		$o = new DeterminePricingRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'timestamp': $o->timestamp = $this->load_DateTime_property($in); break;
						case 'pricegroupOverride': $o->pricegroupOverride = $this->load_int_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
						case 'workplace': $o->workplace = $this->load_WorkplaceIdentifier($in); break;
						case 'lines': $o->lines[] = $this->load_PlaceTableOrderLineElem($in); break;
						case 'vatChange': $o->vatChange = $this->load_string_property($in); break;
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'table': $o->table = $this->load_TableNumber($in); break;
						case 'scannedVoucherIssuanceCodes': $o->scannedVoucherIssuanceCodes[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeterminePricingResponseLine(\XMLReader $in) : DeterminePricingResponseLine {
		$n = $in->name;
		$o = new DeterminePricingResponseLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'quantity': $o->quantity = $this->load_BigDecimal_property($in); break;
						case 'price': $o->price = $this->load_BigDecimal_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_BigDecimal_property($in); break;
						case 'discountAmount': $o->discountAmount = $this->load_BigDecimal_property($in); break;
						case 'amount': $o->amount = $this->load_BigDecimal_property($in); break;
						case 'menuId': $o->menuId = $this->load_string_property($in); break;
						case 'menuLinesId': $o->menuLinesId = $this->load_string_property($in); break;
						case 'salePromotionData': $o->salePromotionData = $this->load_SalePromotionLineData($in); break;
						case 'subLines': $o->subLines[] = $this->load_DeterminePricingResponseLine($in); break;
						case 'subLineType': $o->subLineType = $this->load_string_property($in); break;
						case 'priceType': $o->priceType = $this->load_string_property($in); break;
						case 'tempId': $o->tempId = $this->load_string_property($in); break;
						case 'bpeId': $o->bpeId = $this->load_string_property($in); break;
						case 'bpeDescription': $o->bpeDescription = $this->load_string_property($in); break;
						case 'redeemedVoucherIssuanceId': $o->redeemedVoucherIssuanceId = $this->load_string_property($in); break;
						case 'pendingVoucherIssuanceStartTs': $o->pendingVoucherIssuanceStartTs = $this->load_DateTime_property($in); break;
						case 'webhookData': $o->webhookData = $this->load_WebhookLineData($in); break;
						case 'lineId': $o->lineId = $this->load_string_property($in); break;
						case 'tempLineId': $o->tempLineId = $this->load_string_property($in); break;
						case 'priceExcl': $o->priceExcl = $this->load_BigDecimal_property($in); break;
						case 'discountAmountExcl': $o->discountAmountExcl = $this->load_BigDecimal_property($in); break;
						case 'amountExcl': $o->amountExcl = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RelationPresence(\XMLReader $in) : RelationPresence {
		$n = $in->name;
		$o = new RelationPresence();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'present': $o->present = $this->load_bool_property($in); break;
						case 'table': $o->table = $this->load_TableNumber($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SetRelationPresenceRequest(\XMLReader $in) : SetRelationPresenceRequest {
		$n = $in->name;
		$o = new SetRelationPresenceRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationPresence': $o->relationPresence = $this->load_RelationPresence($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRelationPresenceRequest(\XMLReader $in) : GetRelationPresenceRequest {
		$n = $in->name;
		$o = new GetRelationPresenceRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticleBranchDeviationsRequest(\XMLReader $in) : GetArticleBranchDeviationsRequest {
		$n = $in->name;
		$o = new GetArticleBranchDeviationsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumbers': $o->articleNumbers = ($this->load_ArticleNumberList($in))->articleNumbers; break;
						case 'branchFilter': $o->branchFilter = ($this->load_BranchFilter($in))->branchNumbers; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleBranchDeviationLine(\XMLReader $in) : ArticleBranchDeviationLine {
		$n = $in->name;
		$o = new ArticleBranchDeviationLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'salesPriceIncl': $o->salesPriceIncl = $this->load_BigDecimal_property($in); break;
						case 'salesPriceExcl': $o->salesPriceExcl = $this->load_BigDecimal_property($in); break;
						case 'specialPrice': $o->specialPrice = $this->load_string_property($in); break;
						case 'oldestBestBeforeDate': $o->oldestBestBeforeDate = $this->load_Date_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveArticleBranchDeviationsRequest(\XMLReader $in) : SaveArticleBranchDeviationsRequest {
		$n = $in->name;
		$o = new SaveArticleBranchDeviationsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleBranchDeviationLines': $o->articleBranchDeviationLines[] = $this->load_ArticleBranchDeviationLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleNutrient(\XMLReader $in) : ArticleNutrient {
		$n = $in->name;
		$o = new ArticleNutrient();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'nutrientId': $o->nutrientId = $this->load_int_property($in); break;
						case 'value': $o->value = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateArticleNutrientsRequest(\XMLReader $in) : UpdateArticleNutrientsRequest {
		$n = $in->name;
		$o = new UpdateArticleNutrientsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'nutrients': $o->nutrients[] = $this->load_ArticleNutrient($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleDynamicMinMaxStock(\XMLReader $in) : ArticleDynamicMinMaxStock {
		$n = $in->name;
		$o = new ArticleDynamicMinMaxStock();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'min': $o->min = $this->load_BigDecimal_property($in); break;
						case 'max': $o->max = $this->load_BigDecimal_property($in); break;
						case 'source': $o->source = $this->load_string_property($in); break;
						case 'createdTs': $o->createdTs = $this->load_DateTime_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleDynamicMinMaxStockList(\XMLReader $in) : ArticleDynamicMinMaxStockList {
		$n = $in->name;
		$o = new ArticleDynamicMinMaxStockList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleDynamicMinMaxStock': $o->articleDynamicMinMaxStock[] = $this->load_ArticleDynamicMinMaxStock($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateArticleDynamicMinMaxStockRequest(\XMLReader $in) : UpdateArticleDynamicMinMaxStockRequest {
		$n = $in->name;
		$o = new UpdateArticleDynamicMinMaxStockRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleDynamicMinMaxStocks': $o->articleDynamicMinMaxStocks = ($this->load_ArticleDynamicMinMaxStockList($in))->articleDynamicMinMaxStock; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticleDynamicMinMaxStockRequest(\XMLReader $in) : GetArticleDynamicMinMaxStockRequest {
		$n = $in->name;
		$o = new GetArticleDynamicMinMaxStockRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fromDateTime': $o->fromDateTime = $this->load_DateTime_property($in); break;
						case 'throughDateTime': $o->throughDateTime = $this->load_DateTime_property($in); break;
						case 'articleNumberFilters': $o->articleNumberFilters[] = $this->load_int_property($in); break;
						case 'branchNumberFilters': $o->branchNumberFilters[] = $this->load_int_property($in); break;
						case 'sourceFilters': $o->sourceFilters[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TableEmployee(\XMLReader $in) : TableEmployee {
		$n = $in->name;
		$o = new TableEmployee();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeName': $o->employeeName = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CardFieldInfo(\XMLReader $in) : CardFieldInfo {
		$n = $in->name;
		$o = new CardFieldInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'optionType': $o->optionType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CardFieldInfoList(\XMLReader $in) : CardFieldInfoList {
		$n = $in->name;
		$o = new CardFieldInfoList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'field': $o->field[] = $this->load_CardFieldInfo($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CardFieldInfoResponse(\XMLReader $in) : CardFieldInfoResponse {
		$n = $in->name;
		$o = new CardFieldInfoResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'optionType': $o->optionType = $this->load_string_property($in); break;
						case 'optionsJson': $o->optionsJson = $this->load_string_property($in); break;
						case 'numOptions': $o->numOptions = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CardFieldInfoResponseList(\XMLReader $in) : CardFieldInfoResponseList {
		$n = $in->name;
		$o = new CardFieldInfoResponseList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'field': $o->field[] = $this->load_CardFieldInfoResponse($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCardFilterOptionsRequest(\XMLReader $in) : GetCardFilterOptionsRequest {
		$n = $in->name;
		$o = new GetCardFilterOptionsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardType': $o->cardType = $this->load_string_property($in); break;
						case 'categoryId': $o->categoryId = $this->load_int_property($in); break;
						case 'filters': $o->filters = ($this->load_OverviewFilterList($in))->filter; break;
						case 'fields': $o->fields = ($this->load_CardFieldInfoList($in))->field; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PlannedCycleCount(\XMLReader $in) : PlannedCycleCount {
		$n = $in->name;
		$o = new PlannedCycleCount();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'todoListId': $o->todoListId = $this->load_int_property($in); break;
						case 'todoListName': $o->todoListName = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'fromDate': $o->fromDate = $this->load_Date_property($in); break;
						case 'throughDate': $o->throughDate = $this->load_Date_property($in); break;
						case 'isRecurring': $o->isRecurring = $this->load_bool_property($in); break;
						case 'colour': $o->colour = $this->load_Colour($in); break;
						case 'countedQuantity': $o->countedQuantity = $this->load_int_property($in); break;
						case 'totalQuantity': $o->totalQuantity = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PlannedCycleCountList(\XMLReader $in) : PlannedCycleCountList {
		$n = $in->name;
		$o = new PlannedCycleCountList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'plannedCycleCount': $o->plannedCycleCount[] = $this->load_PlannedCycleCount($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPlannedCycleCountsRequest(\XMLReader $in) : GetPlannedCycleCountsRequest {
		$n = $in->name;
		$o = new GetPlannedCycleCountsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fromDate': $o->fromDate = $this->load_Date_property($in); break;
						case 'throughDate': $o->throughDate = $this->load_Date_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ActiveCycleCountLine(\XMLReader $in) : ActiveCycleCountLine {
		$n = $in->name;
		$o = new ActiveCycleCountLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'variantId': $o->variantId = $this->load_int_property($in); break;
						case 'counted': $o->counted = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ActiveCycleCountLineList(\XMLReader $in) : ActiveCycleCountLineList {
		$n = $in->name;
		$o = new ActiveCycleCountLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'activeCycleCountLine': $o->activeCycleCountLine[] = $this->load_ActiveCycleCountLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ActiveCycleCount(\XMLReader $in) : ActiveCycleCount {
		$n = $in->name;
		$o = new ActiveCycleCount();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'todoListId': $o->todoListId = $this->load_int_property($in); break;
						case 'todoListName': $o->todoListName = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'fromDate': $o->fromDate = $this->load_Date_property($in); break;
						case 'throughDate': $o->throughDate = $this->load_Date_property($in); break;
						case 'isRecurring': $o->isRecurring = $this->load_bool_property($in); break;
						case 'colour': $o->colour = $this->load_Colour($in); break;
						case 'countedQuantity': $o->countedQuantity = $this->load_int_property($in); break;
						case 'totalQuantity': $o->totalQuantity = $this->load_int_property($in); break;
						case 'lines': $o->lines = ($this->load_ActiveCycleCountLineList($in))->activeCycleCountLine; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetActiveCycleCountRequest(\XMLReader $in) : GetActiveCycleCountRequest {
		$n = $in->name;
		$o = new GetActiveCycleCountRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'plannedCycleCountId': $o->plannedCycleCountId = $this->load_string_property($in); break;
						case 'todoListId': $o->todoListId = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SetArticleRecalledRequest(\XMLReader $in) : SetArticleRecalledRequest {
		$n = $in->name;
		$o = new SetArticleRecalledRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'recalled': $o->recalled = $this->load_bool_property($in); break;
						case 'includingRecipes': $o->includingRecipes = $this->load_bool_property($in); break;
						case 'reason': $o->reason = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticleComponentsRequest(\XMLReader $in) : GetArticleComponentsRequest {
		$n = $in->name;
		$o = new GetArticleComponentsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleComponent(\XMLReader $in) : ArticleComponent {
		$n = $in->name;
		$o = new ArticleComponent();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'sequenceNumber': $o->sequenceNumber = $this->load_int_property($in); break;
						case 'parentArticleNumber': $o->parentArticleNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'quantity': $o->quantity = $this->load_BigDecimal_property($in); break;
						case 'priceExcl': $o->priceExcl = $this->load_BigDecimal_property($in); break;
						case 'priceIncl': $o->priceIncl = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleComponentList(\XMLReader $in) : ArticleComponentList {
		$n = $in->name;
		$o = new ArticleComponentList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleComponent': $o->articleComponent[] = $this->load_ArticleComponent($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveArticleComponentsRequest(\XMLReader $in) : SaveArticleComponentsRequest {
		$n = $in->name;
		$o = new SaveArticleComponentsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'mode': $o->mode = $this->load_string_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'articleComponents': $o->articleComponents = ($this->load_ArticleComponentList($in))->articleComponent; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getSalesPriceListResponse(\XMLReader $in) : getSalesPriceListResponse {
		$n = $in->name;
		$o = new getSalesPriceListResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'salesPrice': $o->salesPrice[] = $this->load_SalesPrice($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPriceGroupListResponse(\XMLReader $in) : getPriceGroupListResponse {
		$n = $in->name;
		$o = new getPriceGroupListResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'priceGroup': $o->priceGroup[] = $this->load_PriceGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LogMistakeResponse(\XMLReader $in) : LogMistakeResponse {
		$n = $in->name;
		$o = new LogMistakeResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateRelationResponse(\XMLReader $in) : CreateRelationResponse {
		$n = $in->name;
		$o = new CreateRelationResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'changeTimestamp': $o->changeTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateRelationResponse(\XMLReader $in) : UpdateRelationResponse {
		$n = $in->name;
		$o = new UpdateRelationResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'changeTimestamp': $o->changeTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRelationResponse(\XMLReader $in) : GetRelationResponse {
		$n = $in->name;
		$o = new GetRelationResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'relation': $o->relation = $this->load_Relation($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_FindRelationResponse(\XMLReader $in) : FindRelationResponse {
		$n = $in->name;
		$o = new FindRelationResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'relation': $o->relation = $this->load_Relation($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRelationsResponse(\XMLReader $in) : GetRelationsResponse {
		$n = $in->name;
		$o = new GetRelationsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationList': $o->relationList = ($this->load_RelationList($in))->relation; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCustomFieldListsResponse(\XMLReader $in) : GetCustomFieldListsResponse {
		$n = $in->name;
		$o = new GetCustomFieldListsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleCustomFieldList': $o->articleCustomFieldList = ($this->load_CustomFieldList($in))->customField; break;
						case 'employeeCustomFieldList': $o->employeeCustomFieldList = ($this->load_CustomFieldList($in))->customField; break;
						case 'relationCustomFieldList': $o->relationCustomFieldList = ($this->load_CustomFieldList($in))->customField; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCardCategoriesResponse(\XMLReader $in) : GetCardCategoriesResponse {
		$n = $in->name;
		$o = new GetCardCategoriesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleCardCategoryList': $o->articleCardCategoryList = ($this->load_CardCategoryList($in))->cardCategory; break;
						case 'employeeCardCategoryList': $o->employeeCardCategoryList = ($this->load_CardCategoryList($in))->cardCategory; break;
						case 'relationCardCategoryList': $o->relationCardCategoryList = ($this->load_CardCategoryList($in))->cardCategory; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_AdjustPointsResponse(\XMLReader $in) : AdjustPointsResponse {
		$n = $in->name;
		$o = new AdjustPointsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'relation': $o->relation = $this->load_Relation($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRelationPointsResponse(\XMLReader $in) : GetRelationPointsResponse {
		$n = $in->name;
		$o = new GetRelationPointsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationPointsLst': $o->relationPointsLst[] = $this->load_GetRelationPoints($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetEmployeesResponse(\XMLReader $in) : GetEmployeesResponse {
		$n = $in->name;
		$o = new GetEmployeesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeList': $o->employeeList = ($this->load_EmployeeList($in))->employee; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetEmployeeResponse(\XMLReader $in) : GetEmployeeResponse {
		$n = $in->name;
		$o = new GetEmployeeResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'employee': $o->employee = $this->load_Employee($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_FindEmployeeResponse(\XMLReader $in) : FindEmployeeResponse {
		$n = $in->name;
		$o = new FindEmployeeResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'employee': $o->employee = $this->load_Employee($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateEmployeeResponse(\XMLReader $in) : CreateEmployeeResponse {
		$n = $in->name;
		$o = new CreateEmployeeResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'changeTimestamp': $o->changeTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateEmployeeResponse(\XMLReader $in) : UpdateEmployeeResponse {
		$n = $in->name;
		$o = new UpdateEmployeeResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'changeTimestamp': $o->changeTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getEmployeeListResponse(\XMLReader $in) : getEmployeeListResponse {
		$n = $in->name;
		$o = new getEmployeeListResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'return': $o->return[] = $this->load_EmployeeName($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTableListResponse(\XMLReader $in) : getTableListResponse {
		$n = $in->name;
		$o = new getTableListResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'table': $o->table[] = $this->load_Table($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTableListV2Response(\XMLReader $in) : getTableListV2Response {
		$n = $in->name;
		$o = new getTableListV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'wholeTable': $o->wholeTable[] = $this->load_WholeTable($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTableListV3Response(\XMLReader $in) : getTableListV3Response {
		$n = $in->name;
		$o = new getTableListV3Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'wholeTable': $o->wholeTable[] = $this->load_WholeTable($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getMainTableListResponse(\XMLReader $in) : getMainTableListResponse {
		$n = $in->name;
		$o = new getMainTableListResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'mainTable': $o->mainTable[] = $this->load_MainTable($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getSubTableListResponse(\XMLReader $in) : getSubTableListResponse {
		$n = $in->name;
		$o = new getSubTableListResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'subTableState': $o->subTableState[] = $this->load_SubTableState($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getCourseListResponse(\XMLReader $in) : getCourseListResponse {
		$n = $in->name;
		$o = new getCourseListResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'course': $o->course[] = $this->load_Course($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCourseListV2Response(\XMLReader $in) : GetCourseListV2Response {
		$n = $in->name;
		$o = new GetCourseListV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'course': $o->course[] = $this->load_CourseInfo($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getVatGroupListResponse(\XMLReader $in) : getVatGroupListResponse {
		$n = $in->name;
		$o = new getVatGroupListResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'vatGroup': $o->vatGroup[] = $this->load_VatGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveTableOrderResponse(\XMLReader $in) : SaveTableOrderResponse {
		$n = $in->name;
		$o = new SaveTableOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateAndPayTableOrderResponse(\XMLReader $in) : CreateAndPayTableOrderResponse {
		$n = $in->name;
		$o = new CreateAndPayTableOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'omzetId': $o->omzetId = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'duplicate': $o->duplicate = $this->load_bool_property($in); break;
						case 'voucherIssuances': $o->voucherIssuances = ($this->load_VoucherIssuanceList($in))->voucherIssuance; break;
						case 'unappliedVoucherIssuances': $o->unappliedVoucherIssuances = ($this->load_UnappliedVoucherIssuanceList($in))->unappliedVoucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_MoveTableOrderResponse(\XMLReader $in) : MoveTableOrderResponse {
		$n = $in->name;
		$o = new MoveTableOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_MoveTableOrderV3Response(\XMLReader $in) : MoveTableOrderV3Response {
		$n = $in->name;
		$o = new MoveTableOrderV3Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetTableOrderResponse(\XMLReader $in) : GetTableOrderResponse {
		$n = $in->name;
		$o = new GetTableOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'claimedByWorkplaceNumber': $o->claimedByWorkplaceNumber = $this->load_int_property($in); break;
						case 'order': $o->order = $this->load_Order($in); break;
						case 'voucherIssuanceCandidates': $o->voucherIssuanceCandidates = ($this->load_VoucherIssuanceCandidateList($in))->voucherIssuanceCandidate; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReleaseTableResponse(\XMLReader $in) : ReleaseTableResponse {
		$n = $in->name;
		$o = new ReleaseTableResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReleaseTableV2Response(\XMLReader $in) : ReleaseTableV2Response {
		$n = $in->name;
		$o = new ReleaseTableV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SetSubtableCountResponse(\XMLReader $in) : SetSubtableCountResponse {
		$n = $in->name;
		$o = new SetSubtableCountResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'ok': $o->ok = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetTableOrderCourseListResponse(\XMLReader $in) : GetTableOrderCourseListResponse {
		$n = $in->name;
		$o = new GetTableOrderCourseListResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
						case 'courseList': $o->courseList = ($this->load_CourseList($in))->course; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RequestTableOrderCourseResponse(\XMLReader $in) : RequestTableOrderCourseResponse {
		$n = $in->name;
		$o = new RequestTableOrderCourseResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
						case 'courseNumber': $o->courseNumber = $this->load_int_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_StoreSinglyEftTransactionResponse(\XMLReader $in) : StoreSinglyEftTransactionResponse {
		$n = $in->name;
		$o = new StoreSinglyEftTransactionResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'eftTransactionId': $o->eftTransactionId = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_QueueBranchOrderResponse(\XMLReader $in) : QueueBranchOrderResponse {
		$n = $in->name;
		$o = new QueueBranchOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'info': $o->info = $this->load_QueueBranchOrderInfo($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_QueueBranchOrderPaymentResponse(\XMLReader $in) : QueueBranchOrderPaymentResponse {
		$n = $in->name;
		$o = new QueueBranchOrderPaymentResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'queuedPaymentId': $o->queuedPaymentId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetQueueBranchOrderPaymentStatusResponse(\XMLReader $in) : GetQueueBranchOrderPaymentStatusResponse {
		$n = $in->name;
		$o = new GetQueueBranchOrderPaymentStatusResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'queuedPaymentId': $o->queuedPaymentId = $this->load_string_property($in); break;
						case 'state': $o->state = $this->load_string_property($in); break;
						case 'resultCode': $o->resultCode = $this->load_string_property($in); break;
						case 'resultMessage': $o->resultMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateOrderResponse(\XMLReader $in) : UpdateOrderResponse {
		$n = $in->name;
		$o = new UpdateOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'info': $o->info = $this->load_UpdateOrderInfo($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateOrderV2Response(\XMLReader $in) : UpdateOrderV2Response {
		$n = $in->name;
		$o = new UpdateOrderV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'order': $o->order = $this->load_Order($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'info': $o->info = $this->load_UpdateOrderInfo($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveOrderResponse(\XMLReader $in) : SaveOrderResponse {
		$n = $in->name;
		$o = new SaveOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'info': $o->info = $this->load_SaveOrderInfo($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOrderResponse(\XMLReader $in) : GetOrderResponse {
		$n = $in->name;
		$o = new GetOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'order': $o->order = $this->load_Order($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPackingSlipsResponse(\XMLReader $in) : GetPackingSlipsResponse {
		$n = $in->name;
		$o = new GetPackingSlipsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'packingSlipList': $o->packingSlipList = ($this->load_PackingSlipList($in))->packingSlip; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPackingSlipsByOrderResponse(\XMLReader $in) : GetPackingSlipsByOrderResponse {
		$n = $in->name;
		$o = new GetPackingSlipsByOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'packingSlipList': $o->packingSlipList = ($this->load_PackingSlipList($in))->packingSlip; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOrderChangesResponse(\XMLReader $in) : GetOrderChangesResponse {
		$n = $in->name;
		$o = new GetOrderChangesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderChangeList': $o->orderChangeList = ($this->load_OrderChangeList($in))->orderChange; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOrderHistoryResponse(\XMLReader $in) : GetOrderHistoryResponse {
		$n = $in->name;
		$o = new GetOrderHistoryResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderHistoryOrderDetailsList': $o->orderHistoryOrderDetailsList = $this->load_OrderHistoryOrderDetailsList($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CancelOrderResponse(\XMLReader $in) : CancelOrderResponse {
		$n = $in->name;
		$o = new CancelOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'message': $o->message = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PayInvoiceResponse(\XMLReader $in) : PayInvoiceResponse {
		$n = $in->name;
		$o = new PayInvoiceResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeliverOrderResponse(\XMLReader $in) : DeliverOrderResponse {
		$n = $in->name;
		$o = new DeliverOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'packingSlipId': $o->packingSlipId = $this->load_string_property($in); break;
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'voucherIssuances': $o->voucherIssuances = ($this->load_VoucherIssuanceList($in))->voucherIssuance; break;
						case 'unappliedVoucherIssuances': $o->unappliedVoucherIssuances = ($this->load_UnappliedVoucherIssuanceList($in))->unappliedVoucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeliverOrderV2Response(\XMLReader $in) : DeliverOrderV2Response {
		$n = $in->name;
		$o = new DeliverOrderV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'packingSlipId': $o->packingSlipId = $this->load_string_property($in); break;
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'voucherIssuances': $o->voucherIssuances = ($this->load_VoucherIssuanceList($in))->voucherIssuance; break;
						case 'unappliedVoucherIssuances': $o->unappliedVoucherIssuances = ($this->load_UnappliedVoucherIssuanceList($in))->unappliedVoucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOrderCategoriesResponse(\XMLReader $in) : GetOrderCategoriesResponse {
		$n = $in->name;
		$o = new GetOrderCategoriesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderCategory': $o->orderCategory[] = $this->load_OrderCategory($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetReceiptsResponse(\XMLReader $in) : GetReceiptsResponse {
		$n = $in->name;
		$o = new GetReceiptsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'receiptList': $o->receiptList = ($this->load_ReceiptList($in))->receipt; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetReceiptResponse(\XMLReader $in) : GetReceiptResponse {
		$n = $in->name;
		$o = new GetReceiptResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'receipt': $o->receipt = $this->load_Receipt($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetReceiptsByOrderResponse(\XMLReader $in) : GetReceiptsByOrderResponse {
		$n = $in->name;
		$o = new GetReceiptsByOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'receiptList': $o->receiptList = ($this->load_ReceiptList($in))->receipt; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetReceiptsByCashCountResponse(\XMLReader $in) : GetReceiptsByCashCountResponse {
		$n = $in->name;
		$o = new GetReceiptsByCashCountResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'receiptList': $o->receiptList = ($this->load_ReceiptList($in))->receipt; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintReceiptResponse(\XMLReader $in) : PrintReceiptResponse {
		$n = $in->name;
		$o = new PrintReceiptResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintReceiptV2Response(\XMLReader $in) : PrintReceiptV2Response {
		$n = $in->name;
		$o = new PrintReceiptV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintTableReceiptResponse(\XMLReader $in) : PrintTableReceiptResponse {
		$n = $in->name;
		$o = new PrintTableReceiptResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintTableReceiptV3Response(\XMLReader $in) : PrintTableReceiptV3Response {
		$n = $in->name;
		$o = new PrintTableReceiptV3Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetInvoicesResponse(\XMLReader $in) : GetInvoicesResponse {
		$n = $in->name;
		$o = new GetInvoicesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'invoiceList': $o->invoiceList = ($this->load_InvoiceList($in))->invoice; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveInvoiceResponse(\XMLReader $in) : SaveInvoiceResponse {
		$n = $in->name;
		$o = new SaveInvoiceResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'info': $o->info = $this->load_SaveInvoiceInfo($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'voucherIssuances': $o->voucherIssuances = ($this->load_VoucherIssuanceList($in))->voucherIssuance; break;
						case 'unappliedVoucherIssuances': $o->unappliedVoucherIssuances = ($this->load_UnappliedVoucherIssuanceList($in))->unappliedVoucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetInvoiceResponse(\XMLReader $in) : GetInvoiceResponse {
		$n = $in->name;
		$o = new GetInvoiceResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'invoice': $o->invoice = $this->load_Invoice($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreditInvoiceResponse(\XMLReader $in) : CreditInvoiceResponse {
		$n = $in->name;
		$o = new CreditInvoiceResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'message': $o->message = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetJournalsResponse(\XMLReader $in) : GetJournalsResponse {
		$n = $in->name;
		$o = new GetJournalsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'journalList': $o->journalList = ($this->load_JournalList($in))->journal; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetFinancialJournalResponse(\XMLReader $in) : GetFinancialJournalResponse {
		$n = $in->name;
		$o = new GetFinancialJournalResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'financialGroupList': $o->financialGroupList = ($this->load_FinancialGroupList($in))->financialGroup; break;
						case 'financialPeriodClosed': $o->financialPeriodClosed = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCashCountListResponse(\XMLReader $in) : GetCashCountListResponse {
		$n = $in->name;
		$o = new GetCashCountListResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cashCountList': $o->cashCountList = ($this->load_CashCountList($in))->cashCount; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCashDrawerBalancingListResponse(\XMLReader $in) : GetCashDrawerBalancingListResponse {
		$n = $in->name;
		$o = new GetCashDrawerBalancingListResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cashDrawerBalancingList': $o->cashDrawerBalancingList = ($this->load_CashDrawerBalancingList($in))->cashDrawerBalancing; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetTurnoverGroupsResponse(\XMLReader $in) : GetTurnoverGroupsResponse {
		$n = $in->name;
		$o = new GetTurnoverGroupsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnoverGroupList': $o->turnoverGroupList = ($this->load_TurnoverGroupList($in))->turnoverGroup; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateTurnoverGroupsResponse(\XMLReader $in) : UpdateTurnoverGroupsResponse {
		$n = $in->name;
		$o = new UpdateTurnoverGroupsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetProductsResponse(\XMLReader $in) : GetProductsResponse {
		$n = $in->name;
		$o = new GetProductsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'productList': $o->productList = ($this->load_ProductList($in))->product; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateProductResponse(\XMLReader $in) : CreateProductResponse {
		$n = $in->name;
		$o = new CreateProductResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'productNumber': $o->productNumber = $this->load_int_property($in); break;
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
						case 'changeTimestamp': $o->changeTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateProductResponse(\XMLReader $in) : UpdateProductResponse {
		$n = $in->name;
		$o = new UpdateProductResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'existingArticleNumbers': $o->existingArticleNumbers[] = $this->load_int_property($in); break;
						case 'newArticleNumbers': $o->newArticleNumbers[] = $this->load_int_property($in); break;
						case 'changeTimestamp': $o->changeTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticleVariantsResponse(\XMLReader $in) : GetArticleVariantsResponse {
		$n = $in->name;
		$o = new GetArticleVariantsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'articleVariants': $o->articleVariants = ($this->load_ArticleVariantList($in))->variant; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticlesVariantsResponse(\XMLReader $in) : GetArticlesVariantsResponse {
		$n = $in->name;
		$o = new GetArticlesVariantsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'articleVariants': $o->articleVariants[] = $this->load_GetArticlesVariantsResponseElem($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_NewArticleVariantResponse(\XMLReader $in) : NewArticleVariantResponse {
		$n = $in->name;
		$o = new NewArticleVariantResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'articleVariantId': $o->articleVariantId = $this->load_int_property($in); break;
						case 'message': $o->message = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateArticleVariantResponse(\XMLReader $in) : UpdateArticleVariantResponse {
		$n = $in->name;
		$o = new UpdateArticleVariantResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'message': $o->message = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeleteArticleVariantsResponse(\XMLReader $in) : DeleteArticleVariantsResponse {
		$n = $in->name;
		$o = new DeleteArticleVariantsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetStockResponse(\XMLReader $in) : GetStockResponse {
		$n = $in->name;
		$o = new GetStockResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleStocks': $o->articleStocks[] = $this->load_ArticleStock($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetStockHistoryResponse(\XMLReader $in) : GetStockHistoryResponse {
		$n = $in->name;
		$o = new GetStockHistoryResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleStockHistory': $o->articleStockHistory[] = $this->load_ArticleStockHistory($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateStockResponse(\XMLReader $in) : UpdateStockResponse {
		$n = $in->name;
		$o = new UpdateStockResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'stockId': $o->stockId = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SetStockResponse(\XMLReader $in) : SetStockResponse {
		$n = $in->name;
		$o = new SetStockResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'stockId': $o->stockId = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticleGroupsResponse(\XMLReader $in) : GetArticleGroupsResponse {
		$n = $in->name;
		$o = new GetArticleGroupsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleGroupList': $o->articleGroupList = ($this->load_ArticleGroupList($in))->articleGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticleGroupChangesResponse(\XMLReader $in) : GetArticleGroupChangesResponse {
		$n = $in->name;
		$o = new GetArticleGroupChangesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'changedArticleGroupList': $o->changedArticleGroupList = ($this->load_ChangedArticleGroupList($in))->changedArticleGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateArticleGroupResponse(\XMLReader $in) : UpdateArticleGroupResponse {
		$n = $in->name;
		$o = new UpdateArticleGroupResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_NewArticleGroupResponse(\XMLReader $in) : NewArticleGroupResponse {
		$n = $in->name;
		$o = new NewArticleGroupResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeleteArticleGroupResponse(\XMLReader $in) : DeleteArticleGroupResponse {
		$n = $in->name;
		$o = new DeleteArticleGroupResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_AddProductsToArticleGroupResponse(\XMLReader $in) : AddProductsToArticleGroupResponse {
		$n = $in->name;
		$o = new AddProductsToArticleGroupResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReplaceProductsOfArticleGroupResponse(\XMLReader $in) : ReplaceProductsOfArticleGroupResponse {
		$n = $in->name;
		$o = new ReplaceProductsOfArticleGroupResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeleteProductsFromArticleGroupResponse(\XMLReader $in) : DeleteProductsFromArticleGroupResponse {
		$n = $in->name;
		$o = new DeleteProductsFromArticleGroupResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetMessagesResponse(\XMLReader $in) : GetMessagesResponse {
		$n = $in->name;
		$o = new GetMessagesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'messageList': $o->messageList = ($this->load_MessageList($in))->message; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetShiftsResponse(\XMLReader $in) : GetShiftsResponse {
		$n = $in->name;
		$o = new GetShiftsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'shiftList': $o->shiftList = ($this->load_ShiftList($in))->shift; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPurchaseOrdersResponse(\XMLReader $in) : GetPurchaseOrdersResponse {
		$n = $in->name;
		$o = new GetPurchaseOrdersResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseOrderList': $o->purchaseOrderList = ($this->load_PurchaseOrderList($in))->purchaseOrder; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePurchaseOrderResponse(\XMLReader $in) : SavePurchaseOrderResponse {
		$n = $in->name;
		$o = new SavePurchaseOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'info': $o->info = $this->load_SavePurchaseOrderInfo($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPurchaseOrdersV2Response(\XMLReader $in) : GetPurchaseOrdersV2Response {
		$n = $in->name;
		$o = new GetPurchaseOrdersV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseOrderList': $o->purchaseOrderList = ($this->load_PurchaseOrderV2List($in))->purchaseOrder; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePurchaseOrderV2Response(\XMLReader $in) : SavePurchaseOrderV2Response {
		$n = $in->name;
		$o = new SavePurchaseOrderV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'info': $o->info = $this->load_SavePurchaseOrderInfo($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'errorDetails': $o->errorDetails = $this->load_ErrorDetails($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPurchaseDeliveriesResponse(\XMLReader $in) : GetPurchaseDeliveriesResponse {
		$n = $in->name;
		$o = new GetPurchaseDeliveriesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseDeliveryList': $o->purchaseDeliveryList = ($this->load_PurchaseDeliveryList($in))->purchaseDelivery; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePurchaseDeliveryResponse(\XMLReader $in) : SavePurchaseDeliveryResponse {
		$n = $in->name;
		$o = new SavePurchaseDeliveryResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'info': $o->info = $this->load_SavePurchaseDeliveryInfo($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPurchaseDeliveriesV2Response(\XMLReader $in) : GetPurchaseDeliveriesV2Response {
		$n = $in->name;
		$o = new GetPurchaseDeliveriesV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseDeliveryList': $o->purchaseDeliveryList = ($this->load_PurchaseDeliveryV2List($in))->purchaseDelivery; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePurchaseDeliveryV2Response(\XMLReader $in) : SavePurchaseDeliveryV2Response {
		$n = $in->name;
		$o = new SavePurchaseDeliveryV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'info': $o->info = $this->load_SavePurchaseDeliveryInfo($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_EncryptStringResponse(\XMLReader $in) : EncryptStringResponse {
		$n = $in->name;
		$o = new EncryptStringResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'encryptedString': $o->encryptedString = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticleCardLayoutResponse(\XMLReader $in) : GetArticleCardLayoutResponse {
		$n = $in->name;
		$o = new GetArticleCardLayoutResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardLayoutFieldList': $o->cardLayoutFieldList = ($this->load_CardLayoutFieldList($in))->cardLayoutField; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateArticleCardLayoutResponse(\XMLReader $in) : UpdateArticleCardLayoutResponse {
		$n = $in->name;
		$o = new UpdateArticleCardLayoutResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRetailSpaceRentalResponse(\XMLReader $in) : GetRetailSpaceRentalResponse {
		$n = $in->name;
		$o = new GetRetailSpaceRentalResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'retailSpaceRental': $o->retailSpaceRental = $this->load_RetailSpaceRental($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRetailSpaceRentalsResponse(\XMLReader $in) : GetRetailSpaceRentalsResponse {
		$n = $in->name;
		$o = new GetRetailSpaceRentalsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'retailSpaceRentalList': $o->retailSpaceRentalList = ($this->load_RetailSpaceRentalList($in))->retailSpaceRental; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_EidSearchResponse(\XMLReader $in) : EidSearchResponse {
		$n = $in->name;
		$o = new EidSearchResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'entityType': $o->entityType = $this->load_string_property($in); break;
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'relation': $o->relation = $this->load_Relation($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OverviewResponse(\XMLReader $in) : OverviewResponse {
		$n = $in->name;
		$o = new OverviewResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'currentPageNumber': $o->currentPageNumber = $this->load_int_property($in); break;
						case 'lastPageNumber': $o->lastPageNumber = $this->load_int_property($in); break;
						case 'maxPerPage': $o->maxPerPage = $this->load_int_property($in); break;
						case 'totalRecords': $o->totalRecords = $this->load_int_property($in); break;
						case 'overviewList': $o->overviewList = ($this->load_OverviewList($in))->overview; break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorList': $o->errorList = ($this->load_GetOverviewErrorList($in))->errors; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOverviewFieldsResponse(\XMLReader $in) : GetOverviewFieldsResponse {
		$n = $in->name;
		$o = new GetOverviewFieldsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'overviewFieldsList': $o->overviewFieldsList = ($this->load_OverviewFieldsList($in))->overviewFields; break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorList': $o->errorList = ($this->load_GetOverviewFieldsErrorList($in))->errors; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateBatchResponse(\XMLReader $in) : UpdateBatchResponse {
		$n = $in->name;
		$o = new UpdateBatchResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'updateCount': $o->updateCount = $this->load_int_property($in); break;
						case 'errorList': $o->errorList = ($this->load_UpdateBatchErrorList($in))->errors; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintResponse(\XMLReader $in) : PrintResponse {
		$n = $in->name;
		$o = new PrintResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetKitchenTicketsResponse(\XMLReader $in) : GetKitchenTicketsResponse {
		$n = $in->name;
		$o = new GetKitchenTicketsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'kitchenTicketList': $o->kitchenTicketList = ($this->load_KitchenTicketList($in))->kitchenTicket; break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveStockCorrectionsResponse(\XMLReader $in) : SaveStockCorrectionsResponse {
		$n = $in->name;
		$o = new SaveStockCorrectionsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'stockId': $o->stockId = $this->load_int_property($in); break;
						case 'failedArticleNumber': $o->failedArticleNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPurchaseBookResponse(\XMLReader $in) : GetPurchaseBookResponse {
		$n = $in->name;
		$o = new GetPurchaseBookResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'message': $o->message = $this->load_string_property($in); break;
						case 'purchaseBook': $o->purchaseBook = $this->load_PurchaseBook($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePurchaseBookResponse(\XMLReader $in) : SavePurchaseBookResponse {
		$n = $in->name;
		$o = new SavePurchaseBookResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'message': $o->message = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_AddToPurchaseBookResponse(\XMLReader $in) : AddToPurchaseBookResponse {
		$n = $in->name;
		$o = new AddToPurchaseBookResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'message': $o->message = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetStockCorrectionsResponse(\XMLReader $in) : GetStockCorrectionsResponse {
		$n = $in->name;
		$o = new GetStockCorrectionsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'stockCorrectionList': $o->stockCorrectionList = ($this->load_StockCorrectionV2List($in))->stockCorrection; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticlesNutritionalCharacteristicsResponse(\XMLReader $in) : GetArticlesNutritionalCharacteristicsResponse {
		$n = $in->name;
		$o = new GetArticlesNutritionalCharacteristicsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'articleNutritionalCharacteristics': $o->articleNutritionalCharacteristics[] = $this->load_GetArticlesNutritionalCharacteristicsResponseElem($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateArticleNutritionalCharacteristicsResponse(\XMLReader $in) : UpdateArticleNutritionalCharacteristicsResponse {
		$n = $in->name;
		$o = new UpdateArticleNutritionalCharacteristicsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPreparationMethodGroupsResponse(\XMLReader $in) : GetPreparationMethodGroupsResponse {
		$n = $in->name;
		$o = new GetPreparationMethodGroupsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'preparationMethodGroupList': $o->preparationMethodGroupList = ($this->load_PreparationMethodGroupList($in))->preparationMethodGroup; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeletePreparationMethodGroupResponse(\XMLReader $in) : DeletePreparationMethodGroupResponse {
		$n = $in->name;
		$o = new DeletePreparationMethodGroupResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticlesPreparationMethodGroupsResponse(\XMLReader $in) : GetArticlesPreparationMethodGroupsResponse {
		$n = $in->name;
		$o = new GetArticlesPreparationMethodGroupsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'articlePreparationMethodGroupsList': $o->articlePreparationMethodGroupsList = ($this->load_ArticlePreparationMethodGroupsList($in))->articlePreparationMethodGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateArticlePreparationMethodGroupsResponse(\XMLReader $in) : UpdateArticlePreparationMethodGroupsResponse {
		$n = $in->name;
		$o = new UpdateArticlePreparationMethodGroupsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PlaceTableOrderResp(\XMLReader $in) : PlaceTableOrderResp {
		$n = $in->name;
		$o = new PlaceTableOrderResp();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'linesResult': $o->linesResult = $this->load_string_property($in); break;
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'paymentsResult': $o->paymentsResult = $this->load_string_property($in); break;
						case 'receiptId': $o->receiptId = $this->load_string_property($in); break;
						case 'voucherIssuances': $o->voucherIssuances = ($this->load_VoucherIssuanceList($in))->voucherIssuance; break;
						case 'unappliedVoucherIssuances': $o->unappliedVoucherIssuances = ($this->load_UnappliedVoucherIssuanceList($in))->unappliedVoucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TapTickTotalsResponse(\XMLReader $in) : TapTickTotalsResponse {
		$n = $in->name;
		$o = new TapTickTotalsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchTotals': $o->branchTotals[] = $this->load_BranchTapTickTotals($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TapTickHistoryResponse(\XMLReader $in) : TapTickHistoryResponse {
		$n = $in->name;
		$o = new TapTickHistoryResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'records': $o->records[] = $this->load_TapTickHistory($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_FindRelationV2Response(\XMLReader $in) : FindRelationV2Response {
		$n = $in->name;
		$o = new FindRelationV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'relation': $o->relation = $this->load_Relation($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetTodoListsResponse(\XMLReader $in) : GetTodoListsResponse {
		$n = $in->name;
		$o = new GetTodoListsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'todoLists': $o->todoLists[] = $this->load_TodoList($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TodoList(\XMLReader $in) : TodoList {
		$n = $in->name;
		$o = new TodoList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'category': $o->category = $this->load_string_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'entriesCount': $o->entriesCount = $this->load_int_property($in); break;
						case 'entries': $o->entries[] = $this->load_TodoListEntry($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateTodoListResponse(\XMLReader $in) : CreateTodoListResponse {
		$n = $in->name;
		$o = new CreateTodoListResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveTodoListV2Response(\XMLReader $in) : SaveTodoListV2Response {
		$n = $in->name;
		$o = new SaveTodoListV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'id': $o->id = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetFilterProfilesResponse(\XMLReader $in) : GetFilterProfilesResponse {
		$n = $in->name;
		$o = new GetFilterProfilesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'filterProfiles': $o->filterProfiles[] = $this->load_FilterProfile($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SavePreparationMethodGroupResponse(\XMLReader $in) : SavePreparationMethodGroupResponse {
		$n = $in->name;
		$o = new SavePreparationMethodGroupResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'preparationMethodGroupNumber': $o->preparationMethodGroupNumber = $this->load_int_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetNutritionalCharacteristicsResponse(\XMLReader $in) : GetNutritionalCharacteristicsResponse {
		$n = $in->name;
		$o = new GetNutritionalCharacteristicsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'nutritionalCharacteristics': $o->nutritionalCharacteristics[] = $this->load_GetNutritionalCharacteristicsResponseElem($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateNutritionalCharacteristicsResponse(\XMLReader $in) : UpdateNutritionalCharacteristicsResponse {
		$n = $in->name;
		$o = new UpdateNutritionalCharacteristicsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeterminePricingResponse(\XMLReader $in) : DeterminePricingResponse {
		$n = $in->name;
		$o = new DeterminePricingResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lines': $o->lines[] = $this->load_DeterminePricingResponseLine($in); break;
						case 'voucherIssuanceCandidates': $o->voucherIssuanceCandidates = ($this->load_VoucherIssuanceCandidateList($in))->voucherIssuanceCandidate; break;
						case 'unappliedVoucherIssuances': $o->unappliedVoucherIssuances = ($this->load_UnappliedVoucherIssuanceList($in))->unappliedVoucherIssuance; break;
						case 'scannedVoucherIssuances': $o->scannedVoucherIssuances = ($this->load_VoucherIssuanceRedeemableList($in))->voucherIssuanceRedeemable; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SetRelationPresenceResponse(\XMLReader $in) : SetRelationPresenceResponse {
		$n = $in->name;
		$o = new SetRelationPresenceResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'table': $o->table = $this->load_TableNumber($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRelationPresenceResponse(\XMLReader $in) : GetRelationPresenceResponse {
		$n = $in->name;
		$o = new GetRelationPresenceResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'lastKnownRelationPresence': $o->lastKnownRelationPresence = $this->load_RelationPresence($in); break;
						case 'lastKnownTimestamp': $o->lastKnownTimestamp = $this->load_DateTime_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticleBranchDeviationsResponse(\XMLReader $in) : GetArticleBranchDeviationsResponse {
		$n = $in->name;
		$o = new GetArticleBranchDeviationsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleBranchDeviationLines': $o->articleBranchDeviationLines[] = $this->load_ArticleBranchDeviationLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveArticleBranchDeviationsResponse(\XMLReader $in) : SaveArticleBranchDeviationsResponse {
		$n = $in->name;
		$o = new SaveArticleBranchDeviationsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateArticleNutrientsResponse(\XMLReader $in) : UpdateArticleNutrientsResponse {
		$n = $in->name;
		$o = new UpdateArticleNutrientsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'error': $o->error = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateArticleDynamicMinMaxStockResponse(\XMLReader $in) : UpdateArticleDynamicMinMaxStockResponse {
		$n = $in->name;
		$o = new UpdateArticleDynamicMinMaxStockResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleDynamicMinMaxStocks': $o->articleDynamicMinMaxStocks = ($this->load_ArticleDynamicMinMaxStockList($in))->articleDynamicMinMaxStock; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticleDynamicMinMaxStockResponse(\XMLReader $in) : GetArticleDynamicMinMaxStockResponse {
		$n = $in->name;
		$o = new GetArticleDynamicMinMaxStockResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleDynamicMinMaxStocks': $o->articleDynamicMinMaxStocks = ($this->load_ArticleDynamicMinMaxStockList($in))->articleDynamicMinMaxStock; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCardFilterOptionsResponse(\XMLReader $in) : GetCardFilterOptionsResponse {
		$n = $in->name;
		$o = new GetCardFilterOptionsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fields': $o->fields = ($this->load_CardFieldInfoResponseList($in))->field; break;
						case 'filterErrors': $o->filterErrors = ($this->load_GetOverviewErrorList($in))->errors; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPlannedCycleCountsResponse(\XMLReader $in) : GetPlannedCycleCountsResponse {
		$n = $in->name;
		$o = new GetPlannedCycleCountsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'plannedCycleCounts': $o->plannedCycleCounts = ($this->load_PlannedCycleCountList($in))->plannedCycleCount; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetActiveCycleCountResponse(\XMLReader $in) : GetActiveCycleCountResponse {
		$n = $in->name;
		$o = new GetActiveCycleCountResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'activeCycleCount': $o->activeCycleCount = $this->load_ActiveCycleCount($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SetArticleRecalledResponse(\XMLReader $in) : SetArticleRecalledResponse {
		$n = $in->name;
		$o = new SetArticleRecalledResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticleComponentsResponse(\XMLReader $in) : GetArticleComponentsResponse {
		$n = $in->name;
		$o = new GetArticleComponentsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleComponents': $o->articleComponents = ($this->load_ArticleComponentList($in))->articleComponent; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveArticleComponentsResponse(\XMLReader $in) : SaveArticleComponentsResponse {
		$n = $in->name;
		$o = new SaveArticleComponentsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'newArticleComponents': $o->newArticleComponents = ($this->load_ArticleComponentList($in))->articleComponent; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RequestDateFilter(\XMLReader $in) : RequestDateFilter {
		$n = $in->name;
		$o = new RequestDateFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fromFinancialDate': $o->fromFinancialDate = $this->load_Date_property($in); break;
						case 'throughFinancialDate': $o->throughFinancialDate = $this->load_Date_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RequestBranchFilter(\XMLReader $in) : RequestBranchFilter {
		$n = $in->name;
		$o = new RequestBranchFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RequestEmployeeFilter(\XMLReader $in) : RequestEmployeeFilter {
		$n = $in->name;
		$o = new RequestEmployeeFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumbers': $o->employeeNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RequestTurnoverGroupFilter(\XMLReader $in) : RequestTurnoverGroupFilter {
		$n = $in->name;
		$o = new RequestTurnoverGroupFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnoverGroups': $o->turnoverGroups[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RequestTurnoverGroupTypeFilter(\XMLReader $in) : RequestTurnoverGroupTypeFilter {
		$n = $in->name;
		$o = new RequestTurnoverGroupTypeFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnoverGroupTypes': $o->turnoverGroupTypes[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RequestArticleFilter(\XMLReader $in) : RequestArticleFilter {
		$n = $in->name;
		$o = new RequestArticleFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RequestActivityFilter(\XMLReader $in) : RequestActivityFilter {
		$n = $in->name;
		$o = new RequestActivityFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'activityNumbers': $o->activityNumbers[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RequestRelationFilter(\XMLReader $in) : RequestRelationFilter {
		$n = $in->name;
		$o = new RequestRelationFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumbers': $o->relationNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RequestSyncMarkerFilter(\XMLReader $in) : RequestSyncMarkerFilter {
		$n = $in->name;
		$o = new RequestSyncMarkerFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ConfigurationList(\XMLReader $in) : ConfigurationList {
		$n = $in->name;
		$o = new ConfigurationList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'configuration': $o->configuration[] = $this->load_Configuration($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Configuration(\XMLReader $in) : Configuration {
		$n = $in->name;
		$o = new Configuration();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'group': $o->group = $this->load_string_property($in); break;
						case 'groupName': $o->groupName = $this->load_string_property($in); break;
						case 'subgroup': $o->subgroup = $this->load_string_property($in); break;
						case 'subgroupName': $o->subgroupName = $this->load_string_property($in); break;
						case 'key': $o->key = $this->load_string_property($in); break;
						case 'keyName': $o->keyName = $this->load_string_property($in); break;
						case 'explanation': $o->explanation = $this->load_string_property($in); break;
						case 'defaultValue': $o->defaultValue = $this->load_string_property($in); break;
						case 'value': $o->value = $this->load_string_property($in); break;
						case 'mediaFileId': $o->mediaFileId = $this->load_int_property($in); break;
						case 'changedTimestamp': $o->changedTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'configurationList': $o->configurationList = ($this->load_ConfigurationList($in))->configuration; break;
						case 'per': $o->per = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetConfigurationRequest(\XMLReader $in) : GetConfigurationRequest {
		$n = $in->name;
		$o = new GetConfigurationRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'group': $o->group = $this->load_string_property($in); break;
						case 'subgroup': $o->subgroup = $this->load_string_property($in); break;
						case 'key': $o->key = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateConfigurationRequest(\XMLReader $in) : UpdateConfigurationRequest {
		$n = $in->name;
		$o = new UpdateConfigurationRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'configurationList': $o->configurationList = ($this->load_ConfigurationList($in))->configuration; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ConfigurationOption(\XMLReader $in) : ConfigurationOption {
		$n = $in->name;
		$o = new ConfigurationOption();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'key': $o->key = $this->load_string_property($in); break;
						case 'value': $o->value = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ConfigurationItem(\XMLReader $in) : ConfigurationItem {
		$n = $in->name;
		$o = new ConfigurationItem();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'configurationKey': $o->configurationKey = $this->load_string_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'explanation': $o->explanation = $this->load_string_property($in); break;
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'defaultValue': $o->defaultValue = $this->load_string_property($in); break;
						case 'maxTextLength': $o->maxTextLength = $this->load_int_property($in); break;
						case 'minIntNumber': $o->minIntNumber = $this->load_int_property($in); break;
						case 'maxIntNumber': $o->maxIntNumber = $this->load_int_property($in); break;
						case 'minBigIntNumber': $o->minBigIntNumber = $this->load_int_property($in); break;
						case 'maxBigIntNumber': $o->maxBigIntNumber = $this->load_int_property($in); break;
						case 'minFloatNumber': $o->minFloatNumber = $this->load_BigDecimal_property($in); break;
						case 'maxFloatNumber': $o->maxFloatNumber = $this->load_BigDecimal_property($in); break;
						case 'numOfDecimals': $o->numOfDecimals = $this->load_int_property($in); break;
						case 'options': $o->options[] = $this->load_ConfigurationOption($in); break;
						case 'cardKind': $o->cardKind = $this->load_string_property($in); break;
						case 'cardUnique': $o->cardUnique = $this->load_bool_property($in); break;
						case 'pathKind': $o->pathKind = $this->load_string_property($in); break;
						case 'pathFilter': $o->pathFilter = $this->load_string_property($in); break;
						case 'pathFilterIndex': $o->pathFilterIndex = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ConfigurationGroup(\XMLReader $in) : ConfigurationGroup {
		$n = $in->name;
		$o = new ConfigurationGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'configurationGroupName': $o->configurationGroupName = $this->load_string_property($in); break;
						case 'configurationItems': $o->configurationItems[] = $this->load_ConfigurationItem($in); break;
						case 'configurationSubGroups': $o->configurationSubGroups[] = $this->load_ConfigurationGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetConfigurationTreeRequest(\XMLReader $in) : GetConfigurationTreeRequest {
		$n = $in->name;
		$o = new GetConfigurationTreeRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetConfigurationValuesRequest(\XMLReader $in) : GetConfigurationValuesRequest {
		$n = $in->name;
		$o = new GetConfigurationValuesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'configurationKeys': $o->configurationKeys[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ConfigurationValue(\XMLReader $in) : ConfigurationValue {
		$n = $in->name;
		$o = new ConfigurationValue();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'value': $o->value = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ConfigurationKeyValues(\XMLReader $in) : ConfigurationKeyValues {
		$n = $in->name;
		$o = new ConfigurationKeyValues();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'configurationKey': $o->configurationKey = $this->load_string_property($in); break;
						case 'configurationValues': $o->configurationValues[] = $this->load_ConfigurationValue($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateConfigurationValuesRequest(\XMLReader $in) : UpdateConfigurationValuesRequest {
		$n = $in->name;
		$o = new UpdateConfigurationValuesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'configurationKeyValues': $o->configurationKeyValues[] = $this->load_ConfigurationKeyValues($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ButtonLayout_Button(\XMLReader $in) : ButtonLayout_Button {
		$n = $in->name;
		$o = new ButtonLayout_Button();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'colour': $o->colour = $this->load_Colour($in); break;
						case 'column': $o->column = $this->load_int_property($in); break;
						case 'row': $o->row = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'askForText': $o->askForText = $this->load_bool_property($in); break;
						case 'isPreparationMethod': $o->isPreparationMethod = $this->load_bool_property($in); break;
						case 'isTableComment': $o->isTableComment = $this->load_bool_property($in); break;
						case 'showAvailableStock': $o->showAvailableStock = $this->load_bool_property($in); break;
						case 'isDayStockArticle': $o->isDayStockArticle = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ButtonLayout_ButtonList(\XMLReader $in) : ButtonLayout_ButtonList {
		$n = $in->name;
		$o = new ButtonLayout_ButtonList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'button': $o->button[] = $this->load_ButtonLayout_Button($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ButtonLayout_SubGroup(\XMLReader $in) : ButtonLayout_SubGroup {
		$n = $in->name;
		$o = new ButtonLayout_SubGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'colour': $o->colour = $this->load_Colour($in); break;
						case 'column': $o->column = $this->load_int_property($in); break;
						case 'row': $o->row = $this->load_int_property($in); break;
						case 'buttonList': $o->buttonList = ($this->load_ButtonLayout_ButtonList($in))->button; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ButtonLayout_SubGroupList(\XMLReader $in) : ButtonLayout_SubGroupList {
		$n = $in->name;
		$o = new ButtonLayout_SubGroupList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'subGroup': $o->subGroup[] = $this->load_ButtonLayout_SubGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ButtonLayout_MainGroup(\XMLReader $in) : ButtonLayout_MainGroup {
		$n = $in->name;
		$o = new ButtonLayout_MainGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'colour': $o->colour = $this->load_Colour($in); break;
						case 'column': $o->column = $this->load_int_property($in); break;
						case 'row': $o->row = $this->load_int_property($in); break;
						case 'subGroupList': $o->subGroupList = ($this->load_ButtonLayout_SubGroupList($in))->subGroup; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ButtonLayout_MainGroupList(\XMLReader $in) : ButtonLayout_MainGroupList {
		$n = $in->name;
		$o = new ButtonLayout_MainGroupList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'mainGroup': $o->mainGroup[] = $this->load_ButtonLayout_MainGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ButtonLayout(\XMLReader $in) : ButtonLayout {
		$n = $in->name;
		$o = new ButtonLayout();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'buttonColumnCount': $o->buttonColumnCount = $this->load_int_property($in); break;
						case 'buttonRowCount': $o->buttonRowCount = $this->load_int_property($in); break;
						case 'mainGroupColumnCount': $o->mainGroupColumnCount = $this->load_int_property($in); break;
						case 'mainGroupRowCount': $o->mainGroupRowCount = $this->load_int_property($in); break;
						case 'subGroupColumnCount': $o->subGroupColumnCount = $this->load_int_property($in); break;
						case 'subGroupRowCount': $o->subGroupRowCount = $this->load_int_property($in); break;
						case 'buttonWidth': $o->buttonWidth = $this->load_int_property($in); break;
						case 'buttonHeight': $o->buttonHeight = $this->load_int_property($in); break;
						case 'subGroupWidth': $o->subGroupWidth = $this->load_int_property($in); break;
						case 'subGroupHeight': $o->subGroupHeight = $this->load_int_property($in); break;
						case 'mainGroupWidth': $o->mainGroupWidth = $this->load_int_property($in); break;
						case 'mainGroupHeight': $o->mainGroupHeight = $this->load_int_property($in); break;
						case 'subPosition': $o->subPosition = $this->load_string_property($in); break;
						case 'mainPosition': $o->mainPosition = $this->load_string_property($in); break;
						case 'fontName': $o->fontName = $this->load_string_property($in); break;
						case 'fontSize': $o->fontSize = $this->load_int_property($in); break;
						case 'fontBold': $o->fontBold = $this->load_bool_property($in); break;
						case 'fontItalic': $o->fontItalic = $this->load_bool_property($in); break;
						case 'fontUnderline': $o->fontUnderline = $this->load_bool_property($in); break;
						case 'fontStrikeout': $o->fontStrikeout = $this->load_bool_property($in); break;
						case 'borderWidth': $o->borderWidth = $this->load_bool_property($in); break;
						case 'defaultMainGroup': $o->defaultMainGroup = $this->load_int_property($in); break;
						case 'defaultSubGroup': $o->defaultSubGroup = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'mainGroupList': $o->mainGroupList = ($this->load_ButtonLayout_MainGroupList($in))->mainGroup; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ButtonLayoutTabBranchLayout(\XMLReader $in) : ButtonLayoutTabBranchLayout {
		$n = $in->name;
		$o = new ButtonLayoutTabBranchLayout();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'layoutId': $o->layoutId = $this->load_int_property($in); break;
						case 'effectiveLayout': $o->effectiveLayout = $this->load_ButtonLayout($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ButtonLayoutTab(\XMLReader $in) : ButtonLayoutTab {
		$n = $in->name;
		$o = new ButtonLayoutTab();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'kind': $o->kind = $this->load_string_property($in); break;
						case 'layoutId': $o->layoutId = $this->load_int_property($in); break;
						case 'branches': $o->branches[] = $this->load_ButtonLayoutTabBranchLayout($in); break;
						case 'effectiveLayout': $o->effectiveLayout = $this->load_ButtonLayout($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ButtonLayoutGroup(\XMLReader $in) : ButtonLayoutGroup {
		$n = $in->name;
		$o = new ButtonLayoutGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'tabs': $o->tabs[] = $this->load_ButtonLayoutTab($in); break;
						case 'ownerId': $o->ownerId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ButtonLayoutGroupForBranchRequest(\XMLReader $in) : ButtonLayoutGroupForBranchRequest {
		$n = $in->name;
		$o = new ButtonLayoutGroupForBranchRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_TerminalId($in); break;
						case 'fillEffectiveLayout': $o->fillEffectiveLayout = $this->load_bool_property($in); break;
						case 'fillArticlesInLayouts': $o->fillArticlesInLayouts = $this->load_bool_property($in); break;
						case 'ignoreCurrentActivity': $o->ignoreCurrentActivity = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetButtonLayoutGroupsWithAssignedWorkplacesRequest(\XMLReader $in) : GetButtonLayoutGroupsWithAssignedWorkplacesRequest {
		$n = $in->name;
		$o = new GetButtonLayoutGroupsWithAssignedWorkplacesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ButtonLayoutGroupsWithAssignedWorkplaces(\XMLReader $in) : ButtonLayoutGroupsWithAssignedWorkplaces {
		$n = $in->name;
		$o = new ButtonLayoutGroupsWithAssignedWorkplaces();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'assignedWorkplaces': $o->assignedWorkplaces[] = $this->load_WorkplaceIdentifier($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetButtonLayoutGroupDetailsRequest(\XMLReader $in) : GetButtonLayoutGroupDetailsRequest {
		$n = $in->name;
		$o = new GetButtonLayoutGroupDetailsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'buttonLayoutGroupId': $o->buttonLayoutGroupId = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveButtonLayoutGroupDetailsRequest(\XMLReader $in) : SaveButtonLayoutGroupDetailsRequest {
		$n = $in->name;
		$o = new SaveButtonLayoutGroupDetailsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'buttonLayoutGroup': $o->buttonLayoutGroup = $this->load_ButtonLayoutGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeleteButtonLayoutGroupRequest(\XMLReader $in) : DeleteButtonLayoutGroupRequest {
		$n = $in->name;
		$o = new DeleteButtonLayoutGroupRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'buttonLayoutGroupId': $o->buttonLayoutGroupId = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_AssignButtonLayoutGroupToWorkplacesRequest(\XMLReader $in) : AssignButtonLayoutGroupToWorkplacesRequest {
		$n = $in->name;
		$o = new AssignButtonLayoutGroupToWorkplacesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'buttonLayoutGroupId': $o->buttonLayoutGroupId = $this->load_int_property($in); break;
						case 'assignToWorkplaces': $o->assignToWorkplaces[] = $this->load_WorkplaceIdentifier($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PreparationMethodSimple(\XMLReader $in) : PreparationMethodSimple {
		$n = $in->name;
		$o = new PreparationMethodSimple();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'buttonText': $o->buttonText = $this->load_string_property($in); break;
						case 'priceIncl': $priceIncl = $this->load_int_property($in); break;
						case 'closeAfterSelection': $o->closeAfterSelection = $this->load_bool_property($in); break;
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'groupName': $o->groupName = $this->load_string_property($in); break;
						case 'specialPrice': $o->specialPrice = $this->load_string_property($in); break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->priceIncl = isset($priceIncl) ? BigDecimal::ofUnscaledValue($priceIncl, 2) : null;
		return $o;
	}
	private function load_PreparationMethodSimpleList(\XMLReader $in) : PreparationMethodSimpleList {
		$n = $in->name;
		$o = new PreparationMethodSimpleList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'preparationMethod': $o->preparationMethod[] = $this->load_PreparationMethodSimple($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ComponentArticleSimple(\XMLReader $in) : ComponentArticleSimple {
		$n = $in->name;
		$o = new ComponentArticleSimple();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'priceIncl': $priceIncl = $this->load_int_property($in); break;
						case 'quantity': $quantity = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->priceIncl = isset($priceIncl) ? BigDecimal::ofUnscaledValue($priceIncl, 2) : null;
		$o->quantity = isset($quantity) ? BigDecimal::ofUnscaledValue($quantity, $decimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_ComponentArticleSimpleList(\XMLReader $in) : ComponentArticleSimpleList {
		$n = $in->name;
		$o = new ComponentArticleSimpleList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'componentArticle': $o->componentArticle[] = $this->load_ComponentArticleSimple($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleSimple(\XMLReader $in) : ArticleSimple {
		$n = $in->name;
		$o = new ArticleSimple();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'pluNumber': $o->pluNumber = $this->load_string_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'course': $o->course = $this->load_int_property($in); break;
						case 'priceIncl': $priceIncl = $this->load_int_property($in); break;
						case 'specialPrice': $o->specialPrice = $this->load_string_property($in); break;
						case 'showPreparationMethodsDirectly': $o->showPreparationMethodsDirectly = $this->load_bool_property($in); break;
						case 'showPreparationMethodsPerGroup': $o->showPreparationMethodsPerGroup = $this->load_bool_property($in); break;
						case 'preparationMethods': $o->preparationMethods = ($this->load_PreparationMethodSimpleList($in))->preparationMethod; break;
						case 'componentArticles': $o->componentArticles = ($this->load_ComponentArticleSimpleList($in))->componentArticle; break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_int_property($in); break;
						case 'buttonText': $o->buttonText = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->priceIncl = isset($priceIncl) ? BigDecimal::ofUnscaledValue($priceIncl, 2) : null;
		return $o;
	}
	private function load_GetDayStockConfigurationRequest(\XMLReader $in) : GetDayStockConfigurationRequest {
		$n = $in->name;
		$o = new GetDayStockConfigurationRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchFilter': $o->branchFilter = ($this->load_RequestBranchFilter($in))->branchNumbers; break;
						case 'syncMarkerFilter': $o->syncMarkerFilter = $this->load_RequestSyncMarkerFilter($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DayStockConfiguration(\XMLReader $in) : DayStockConfiguration {
		$n = $in->name;
		$o = new DayStockConfiguration();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'articleCategoryIds': $o->articleCategoryIds = ($this->load_CategoryIdSet($in))->category; break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DayStockConfigurationList(\XMLReader $in) : DayStockConfigurationList {
		$n = $in->name;
		$o = new DayStockConfigurationList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dayStockConfiguration': $o->dayStockConfiguration[] = $this->load_DayStockConfiguration($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveDayStockConfiguration(\XMLReader $in) : SaveDayStockConfiguration {
		$n = $in->name;
		$o = new SaveDayStockConfiguration();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'articleCategoryIds': $o->articleCategoryIds = ($this->load_CategoryIdSet($in))->category; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveDayStockConfigurationList(\XMLReader $in) : SaveDayStockConfigurationList {
		$n = $in->name;
		$o = new SaveDayStockConfigurationList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'saveDayStockConfiguration': $o->saveDayStockConfiguration[] = $this->load_SaveDayStockConfiguration($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveDayStockConfigurationRequest(\XMLReader $in) : SaveDayStockConfigurationRequest {
		$n = $in->name;
		$o = new SaveDayStockConfigurationRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'saveDayStockConfigurationList': $o->saveDayStockConfigurationList = ($this->load_SaveDayStockConfigurationList($in))->saveDayStockConfiguration; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Activity(\XMLReader $in) : Activity {
		$n = $in->name;
		$o = new Activity();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'createTimestamp': $o->createTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'changeTimestamp': $o->changeTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'activityNumber': $o->activityNumber = $this->load_string_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'interfaceLayoutId': $o->interfaceLayoutId = $this->load_int_property($in); break;
						case 'articleLayoutId': $o->articleLayoutId = $this->load_int_property($in); break;
						case 'location': $o->location = $this->load_string_property($in); break;
						case 'priceGroupNumber': $o->priceGroupNumber = $this->load_int_property($in); break;
						case 'employeeStartTimestamp': $o->employeeStartTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'employeeEndTimestamp': $o->employeeEndTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'managerStartTimestamp': $o->managerStartTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'managerEndTimestamp': $o->managerEndTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'isDeleted': $o->isDeleted = $this->load_bool_property($in); break;
						case 'activityTypeId': $o->activityTypeId = $this->load_int_property($in); break;
						case 'activityTypeDescription': $o->activityTypeDescription = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ActivityList(\XMLReader $in) : ActivityList {
		$n = $in->name;
		$o = new ActivityList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'activity': $o->activity[] = $this->load_Activity($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetActivitiesRequest(\XMLReader $in) : GetActivitiesRequest {
		$n = $in->name;
		$o = new GetActivitiesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetActivityTypesRequest(\XMLReader $in) : GetActivityTypesRequest {
		$n = $in->name;
		$o = new GetActivityTypesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ActivityType(\XMLReader $in) : ActivityType {
		$n = $in->name;
		$o = new ActivityType();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ActivityTypeList(\XMLReader $in) : ActivityTypeList {
		$n = $in->name;
		$o = new ActivityTypeList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'activityType': $o->activityType[] = $this->load_ActivityType($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveActivityType(\XMLReader $in) : SaveActivityType {
		$n = $in->name;
		$o = new SaveActivityType();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveActivityTypeList(\XMLReader $in) : SaveActivityTypeList {
		$n = $in->name;
		$o = new SaveActivityTypeList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'activityType': $o->activityType[] = $this->load_SaveActivityType($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveActivityTypesRequest(\XMLReader $in) : SaveActivityTypesRequest {
		$n = $in->name;
		$o = new SaveActivityTypesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'activityTypeList': $o->activityTypeList = ($this->load_SaveActivityTypeList($in))->activityType; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateActivity(\XMLReader $in) : CreateActivity {
		$n = $in->name;
		$o = new CreateActivity();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'activityNumber': $o->activityNumber = $this->load_string_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'interfaceLayoutId': $o->interfaceLayoutId = $this->load_int_property($in); break;
						case 'articleLayoutId': $o->articleLayoutId = $this->load_int_property($in); break;
						case 'location': $o->location = $this->load_string_property($in); break;
						case 'priceGroupNumber': $o->priceGroupNumber = $this->load_int_property($in); break;
						case 'employeeStartTimestamp': $o->employeeStartTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'employeeEndTimestamp': $o->employeeEndTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'managerStartTimestamp': $o->managerStartTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'managerEndTimestamp': $o->managerEndTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'activityTypeId': $o->activityTypeId = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateActivityRequest(\XMLReader $in) : CreateActivityRequest {
		$n = $in->name;
		$o = new CreateActivityRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'createActivity': $o->createActivity = $this->load_CreateActivity($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateActivity(\XMLReader $in) : UpdateActivity {
		$n = $in->name;
		$o = new UpdateActivity();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
						case 'activityNumber': $o->activityNumber = $this->load_string_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'interfaceLayoutId': $o->interfaceLayoutId = $this->load_int_property($in); break;
						case 'articleLayoutId': $o->articleLayoutId = $this->load_int_property($in); break;
						case 'location': $o->location = $this->load_string_property($in); break;
						case 'priceGroupNumber': $o->priceGroupNumber = $this->load_int_property($in); break;
						case 'employeeStartTimestamp': $o->employeeStartTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'employeeEndTimestamp': $o->employeeEndTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'managerStartTimestamp': $o->managerStartTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'managerEndTimestamp': $o->managerEndTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'activityTypeId': $o->activityTypeId = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateActivityRequest(\XMLReader $in) : UpdateActivityRequest {
		$n = $in->name;
		$o = new UpdateActivityRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'updateActivity': $o->updateActivity = $this->load_UpdateActivity($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveActivity(\XMLReader $in) : SaveActivity {
		$n = $in->name;
		$o = new SaveActivity();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
						case 'activityNumber': $o->activityNumber = $this->load_string_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'interfaceLayoutId': $o->interfaceLayoutId = $this->load_int_property($in); break;
						case 'articleLayoutId': $o->articleLayoutId = $this->load_int_property($in); break;
						case 'location': $o->location = $this->load_string_property($in); break;
						case 'priceGroupNumber': $o->priceGroupNumber = $this->load_int_property($in); break;
						case 'employeeStartTimestamp': $o->employeeStartTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'employeeEndTimestamp': $o->employeeEndTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'managerStartTimestamp': $o->managerStartTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'managerEndTimestamp': $o->managerEndTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'activityTypeId': $o->activityTypeId = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveActivityRequest(\XMLReader $in) : SaveActivityRequest {
		$n = $in->name;
		$o = new SaveActivityRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'saveActivity': $o->saveActivity = $this->load_SaveActivity($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeleteActivityRequest(\XMLReader $in) : DeleteActivityRequest {
		$n = $in->name;
		$o = new DeleteActivityRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetGksInformationRequest(\XMLReader $in) : GetGksInformationRequest {
		$n = $in->name;
		$o = new GetGksInformationRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'workplace': $o->workplace = $this->load_WorkplaceIdentifier($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetMealplanMomentsConfigurationRequest(\XMLReader $in) : GetMealplanMomentsConfigurationRequest {
		$n = $in->name;
		$o = new GetMealplanMomentsConfigurationRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_MealmomentConfiguration(\XMLReader $in) : MealmomentConfiguration {
		$n = $in->name;
		$o = new MealmomentConfiguration();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'MealmomentId': $o->MealmomentId = $this->load_string_property($in); break;
						case 'Description': $o->Description = $this->load_string_property($in); break;
						case 'SortOrder': $o->SortOrder = $this->load_int_property($in); break;
						case 'PrintOnMenu': $o->PrintOnMenu = $this->load_bool_property($in); break;
						case 'StartsAt': $o->StartsAt = $this->load_DateTime_property($in); break;
						case 'EndsAt': $o->EndsAt = $this->load_DateTime_property($in); break;
						case 'Deleted': $o->Deleted = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetScheduledMealPlansRequest(\XMLReader $in) : GetScheduledMealPlansRequest {
		$n = $in->name;
		$o = new GetScheduledMealPlansRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fromDate': $o->fromDate = $this->load_Date_property($in); break;
						case 'troughDate': $o->troughDate = $this->load_Date_property($in); break;
						case 'workplace': $o->workplace = $this->load_WorkplaceIdentifier($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_MealPlanArticleGroup(\XMLReader $in) : MealPlanArticleGroup {
		$n = $in->name;
		$o = new MealPlanArticleGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupDescription': $o->groupDescription = $this->load_string_property($in); break;
						case 'groupType': $o->groupType = $this->load_string_property($in); break;
						case 'minimalChoices': $o->minimalChoices = $this->load_int_property($in); break;
						case 'maximumChoices': $o->maximumChoices = $this->load_int_property($in); break;
						case 'articleNumbers': $o->articleNumbers = ($this->load_NumberList($in))->number; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Mealmoment(\XMLReader $in) : Mealmoment {
		$n = $in->name;
		$o = new Mealmoment();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'mealmomentId': $o->mealmomentId = $this->load_string_property($in); break;
						case 'articleGroups': $o->articleGroups[] = $this->load_MealPlanArticleGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_MealPlan(\XMLReader $in) : MealPlan {
		$n = $in->name;
		$o = new MealPlan();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'mealPlanDescription': $o->mealPlanDescription = $this->load_string_property($in); break;
						case 'planColour': $o->planColour = $this->load_Colour($in); break;
						case 'mealMoments': $o->mealMoments[] = $this->load_Mealmoment($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ScheduledMealPlan(\XMLReader $in) : ScheduledMealPlan {
		$n = $in->name;
		$o = new ScheduledMealPlan();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'scheduledDate': $o->scheduledDate = $this->load_DateTime_property($in); break;
						case 'workplace': $o->workplace = $this->load_WorkplaceIdentifier($in); break;
						case 'mealPlan': $o->mealPlan = $this->load_MealPlan($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticleAlterationsGroupsRequest(\XMLReader $in) : GetArticleAlterationsGroupsRequest {
		$n = $in->name;
		$o = new GetArticleAlterationsGroupsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'groupType': $o->groupType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleAlteration(\XMLReader $in) : ArticleAlteration {
		$n = $in->name;
		$o = new ArticleAlteration();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'sequenceNumber': $o->sequenceNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'priceIncl': $o->priceIncl = $this->load_BigDecimal_property($in); break;
						case 'priceExcl': $o->priceExcl = $this->load_BigDecimal_property($in); break;
						case 'remark': $o->remark = $this->load_string_property($in); break;
						case 'translation': $o->translation = $this->load_string_property($in); break;
						case 'buttonColour': $o->buttonColour = $this->load_Colour($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleAlterationList(\XMLReader $in) : ArticleAlterationList {
		$n = $in->name;
		$o = new ArticleAlterationList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleAlteration': $o->articleAlteration[] = $this->load_ArticleAlteration($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleAlterationsGroup(\XMLReader $in) : ArticleAlterationsGroup {
		$n = $in->name;
		$o = new ArticleAlterationsGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'closeAfterSelection': $o->closeAfterSelection = $this->load_bool_property($in); break;
						case 'selectionRequired': $o->selectionRequired = $this->load_bool_property($in); break;
						case 'maxOneSelection': $o->maxOneSelection = $this->load_bool_property($in); break;
						case 'maxCols': $o->maxCols = $this->load_int_property($in); break;
						case 'articleAlterations': $o->articleAlterations = ($this->load_ArticleAlterationList($in))->articleAlteration; break;
						case 'paletteJson': $o->paletteJson = $this->load_string_property($in); break;
						case 'deletedOn': $o->deletedOn = $this->load_DateTime_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'isPosGroup': $o->isPosGroup = $this->load_bool_property($in); break;
						case 'isOnlineGroup': $o->isOnlineGroup = $this->load_bool_property($in); break;
						case 'groupType': $o->groupType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleAlterationsGroupList(\XMLReader $in) : ArticleAlterationsGroupList {
		$n = $in->name;
		$o = new ArticleAlterationsGroupList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleAlterationsGroup': $o->articleAlterationsGroup[] = $this->load_ArticleAlterationsGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveArticleAlteration(\XMLReader $in) : SaveArticleAlteration {
		$n = $in->name;
		$o = new SaveArticleAlteration();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'sequenceNumber': $o->sequenceNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'remark': $o->remark = $this->load_string_property($in); break;
						case 'translation': $o->translation = $this->load_string_property($in); break;
						case 'buttonColour': $o->buttonColour = $this->load_Colour($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveArticleAlterationList(\XMLReader $in) : SaveArticleAlterationList {
		$n = $in->name;
		$o = new SaveArticleAlterationList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'saveArticleAlteration': $o->saveArticleAlteration[] = $this->load_SaveArticleAlteration($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveArticleAlterationsGroupRequest(\XMLReader $in) : SaveArticleAlterationsGroupRequest {
		$n = $in->name;
		$o = new SaveArticleAlterationsGroupRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'closeAfterSelection': $o->closeAfterSelection = $this->load_bool_property($in); break;
						case 'selectionRequired': $o->selectionRequired = $this->load_bool_property($in); break;
						case 'maxOneSelection': $o->maxOneSelection = $this->load_bool_property($in); break;
						case 'maxCols': $o->maxCols = $this->load_int_property($in); break;
						case 'articleAlterations': $o->articleAlterations = ($this->load_SaveArticleAlterationList($in))->saveArticleAlteration; break;
						case 'isPosGroup': $o->isPosGroup = $this->load_bool_property($in); break;
						case 'isOnlineGroup': $o->isOnlineGroup = $this->load_bool_property($in); break;
						case 'groupType': $o->groupType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeleteArticleAlterationsGroupRequest(\XMLReader $in) : DeleteArticleAlterationsGroupRequest {
		$n = $in->name;
		$o = new DeleteArticleAlterationsGroupRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'deleteEvenWhenInUse': $o->deleteEvenWhenInUse = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateAttachedArticleAlterationsGroupsRequest(\XMLReader $in) : UpdateAttachedArticleAlterationsGroupsRequest {
		$n = $in->name;
		$o = new UpdateAttachedArticleAlterationsGroupsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'groupNumbers': $o->groupNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveArticleMenuArticleSettings(\XMLReader $in) : SaveArticleMenuArticleSettings {
		$n = $in->name;
		$o = new SaveArticleMenuArticleSettings();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'addedFee': $o->addedFee = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveArticleMenuArticleSettingsList(\XMLReader $in) : SaveArticleMenuArticleSettingsList {
		$n = $in->name;
		$o = new SaveArticleMenuArticleSettingsList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleSettings': $o->articleSettings[] = $this->load_SaveArticleMenuArticleSettings($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateArticleMenuRequest(\XMLReader $in) : UpdateArticleMenuRequest {
		$n = $in->name;
		$o = new UpdateArticleMenuRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'isActive': $o->isActive = $this->load_bool_property($in); break;
						case 'isRequired': $o->isRequired = $this->load_bool_property($in); break;
						case 'useMainArticle': $o->useMainArticle = $this->load_bool_property($in); break;
						case 'priceIncl': $o->priceIncl = $this->load_BigDecimal_property($in); break;
						case 'vatCode': $o->vatCode = $this->load_int_property($in); break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_int_property($in); break;
						case 'articlesSettings': $o->articlesSettings = ($this->load_SaveArticleMenuArticleSettingsList($in))->articleSettings; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateOnlineAuthorizationTreeRequest(\XMLReader $in) : UpdateOnlineAuthorizationTreeRequest {
		$n = $in->name;
		$o = new UpdateOnlineAuthorizationTreeRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'authorizationList': $o->authorizationList = ($this->load_AuthorizationsList($in))->authorizations; break;
						case 'onlineAuthorizationsVersion': $o->onlineAuthorizationsVersion = $this->load_string_property($in); break;
						case 'id': $o->id = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOwnerLabelsRequest(\XMLReader $in) : GetOwnerLabelsRequest {
		$n = $in->name;
		$o = new GetOwnerLabelsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'activeOnly': $o->activeOnly = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_OwnerLabel(\XMLReader $in) : OwnerLabel {
		$n = $in->name;
		$o = new OwnerLabel();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'multiSelectId': $o->multiSelectId = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'color': $o->color = $this->load_Colour($in); break;
						case 'isActive': $o->isActive = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WordAlias(\XMLReader $in) : WordAlias {
		$n = $in->name;
		$o = new WordAlias();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'word': $o->word = $this->load_string_property($in); break;
						case 'alias': $o->alias = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WordAliasList(\XMLReader $in) : WordAliasList {
		$n = $in->name;
		$o = new WordAliasList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'wordAlias': $o->wordAlias[] = $this->load_WordAlias($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetWordAliasesRequest(\XMLReader $in) : GetWordAliasesRequest {
		$n = $in->name;
		$o = new GetWordAliasesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'locale': $o->locale = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LicensedModule(\XMLReader $in) : LicensedModule {
		$n = $in->name;
		$o = new LicensedModule();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'moduleGroup': $o->moduleGroup = $this->load_int_property($in); break;
						case 'moduleNumber': $o->moduleNumber = $this->load_int_property($in); break;
						case 'moduleDescription': $o->moduleDescription = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LicensedModuleList(\XMLReader $in) : LicensedModuleList {
		$n = $in->name;
		$o = new LicensedModuleList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'licensedModule': $o->licensedModule[] = $this->load_LicensedModule($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LicensedBranch(\XMLReader $in) : LicensedBranch {
		$n = $in->name;
		$o = new LicensedBranch();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'branchName': $o->branchName = $this->load_string_property($in); break;
						case 'workplaceLimit': $o->workplaceLimit = $this->load_int_property($in); break;
						case 'isGKS': $o->isGKS = $this->load_bool_property($in); break;
						case 'licensedModules': $o->licensedModules = ($this->load_LicensedModuleList($in))->licensedModule; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LicensedBranchList(\XMLReader $in) : LicensedBranchList {
		$n = $in->name;
		$o = new LicensedBranchList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'licensedBranch': $o->licensedBranch[] = $this->load_LicensedBranch($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetBranchInformationRequest(\XMLReader $in) : GetBranchInformationRequest {
		$n = $in->name;
		$o = new GetBranchInformationRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeliveryAddressSupplier(\XMLReader $in) : DeliveryAddressSupplier {
		$n = $in->name;
		$o = new DeliveryAddressSupplier();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'supplierRelationNumber': $o->supplierRelationNumber = $this->load_int_property($in); break;
						case 'information': $o->information = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeliveryAddressSupplierList(\XMLReader $in) : DeliveryAddressSupplierList {
		$n = $in->name;
		$o = new DeliveryAddressSupplierList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'deliveryAddressSupplier': $o->deliveryAddressSupplier[] = $this->load_DeliveryAddressSupplier($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeliveryAddress(\XMLReader $in) : DeliveryAddress {
		$n = $in->name;
		$o = new DeliveryAddress();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'address': $o->address = $this->load_Address($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'isDefault': $o->isDefault = $this->load_bool_property($in); break;
						case 'suppliers': $o->suppliers = ($this->load_DeliveryAddressSupplierList($in))->deliveryAddressSupplier; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeliveryAddressList(\XMLReader $in) : DeliveryAddressList {
		$n = $in->name;
		$o = new DeliveryAddressList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'deliveryAddress': $o->deliveryAddress[] = $this->load_DeliveryAddress($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BranchInformation(\XMLReader $in) : BranchInformation {
		$n = $in->name;
		$o = new BranchInformation();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'branchName': $o->branchName = $this->load_string_property($in); break;
						case 'companyName': $o->companyName = $this->load_string_property($in); break;
						case 'address': $o->address = $this->load_string_property($in); break;
						case 'zipcode': $o->zipcode = $this->load_string_property($in); break;
						case 'city': $o->city = $this->load_string_property($in); break;
						case 'countryCode': $o->countryCode = $this->load_int_property($in); break;
						case 'countryName': $o->countryName = $this->load_string_property($in); break;
						case 'telephone': $o->telephone = $this->load_string_property($in); break;
						case 'mobile': $o->mobile = $this->load_string_property($in); break;
						case 'fax': $o->fax = $this->load_string_property($in); break;
						case 'email': $o->email = $this->load_string_property($in); break;
						case 'website': $o->website = $this->load_string_property($in); break;
						case 'commerceNumber': $o->commerceNumber = $this->load_string_property($in); break;
						case 'bankAccountNumber': $o->bankAccountNumber = $this->load_string_property($in); break;
						case 'vatNumber': $o->vatNumber = $this->load_string_property($in); break;
						case 'termsAndConditions': $o->termsAndConditions = $this->load_string_property($in); break;
						case 'deliveryAddresses': $o->deliveryAddresses = ($this->load_DeliveryAddressList($in))->deliveryAddress; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetBranchGroupsRequest(\XMLReader $in) : GetBranchGroupsRequest {
		$n = $in->name;
		$o = new GetBranchGroupsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BranchGroup(\XMLReader $in) : BranchGroup {
		$n = $in->name;
		$o = new BranchGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupName': $o->groupName = $this->load_string_property($in); break;
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'groupSortNumber': $o->groupSortNumber = $this->load_int_property($in); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'parentGroupNumber': $o->parentGroupNumber = $this->load_int_property($in); break;
						case 'ownerLabelId': $o->ownerLabelId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BranchGroups(\XMLReader $in) : BranchGroups {
		$n = $in->name;
		$o = new BranchGroups();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchGroup': $o->branchGroup = $this->load_BranchGroup($in); break;
						case 'subGroups': $o->subGroups[] = $this->load_BranchGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BranchGroupsList(\XMLReader $in) : BranchGroupsList {
		$n = $in->name;
		$o = new BranchGroupsList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchGroups': $o->branchGroups[] = $this->load_BranchGroups($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeliveryMethod(\XMLReader $in) : DeliveryMethod {
		$n = $in->name;
		$o = new DeliveryMethod();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'deliveryMethod': $o->deliveryMethod = $this->load_string_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'buttonText': $o->buttonText = $this->load_string_property($in); break;
						case 'enabled': $o->enabled = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeliveryMethodList(\XMLReader $in) : DeliveryMethodList {
		$n = $in->name;
		$o = new DeliveryMethodList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'deliveryMethod': $o->deliveryMethod[] = $this->load_DeliveryMethod($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetDeliveryMethodsV2Request(\XMLReader $in) : GetDeliveryMethodsV2Request {
		$n = $in->name;
		$o = new GetDeliveryMethodsV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'onlyEnabled': $o->onlyEnabled = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateDeliveryMethodRequest(\XMLReader $in) : CreateDeliveryMethodRequest {
		$n = $in->name;
		$o = new CreateDeliveryMethodRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'deliveryMethod': $o->deliveryMethod = $this->load_DeliveryMethod($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateDeliveryMethodRequest(\XMLReader $in) : UpdateDeliveryMethodRequest {
		$n = $in->name;
		$o = new UpdateDeliveryMethodRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'deliveryMethod': $o->deliveryMethod = $this->load_DeliveryMethod($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Workplace(\XMLReader $in) : Workplace {
		$n = $in->name;
		$o = new Workplace();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'workplaceName': $o->workplaceName = $this->load_string_property($in); break;
						case 'isMobile': $o->isMobile = $this->load_bool_property($in); break;
						case 'workplaceType': $o->workplaceType = $this->load_string_property($in); break;
						case 'isSlave': $o->isSlave = $this->load_bool_property($in); break;
						case 'lastSlaveSync': $o->lastSlaveSync = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'priceGroupNumber': $o->priceGroupNumber = $this->load_int_property($in); break;
						case 'extWorkplaceId': $o->extWorkplaceId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WorkplaceList(\XMLReader $in) : WorkplaceList {
		$n = $in->name;
		$o = new WorkplaceList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'workplace': $o->workplace[] = $this->load_Workplace($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Branch(\XMLReader $in) : Branch {
		$n = $in->name;
		$o = new Branch();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'branchName': $o->branchName = $this->load_string_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'abbreviation': $o->abbreviation = $this->load_string_property($in); break;
						case 'extBranchId': $o->extBranchId = $this->load_string_property($in); break;
						case 'isFullSlave': $o->isFullSlave = $this->load_bool_property($in); break;
						case 'priceGroupNumber': $o->priceGroupNumber = $this->load_int_property($in); break;
						case 'workplaces': $o->workplaces = ($this->load_WorkplaceList($in))->workplace; break;
						case 'countryCode': $o->countryCode = $this->load_int_property($in); break;
						case 'countryIso3': $o->countryIso3 = $this->load_string_property($in); break;
						case 'countryName': $o->countryName = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BranchList(\XMLReader $in) : BranchList {
		$n = $in->name;
		$o = new BranchList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branch': $o->branch[] = $this->load_Branch($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCurrentSyncMarkersV2Request(\XMLReader $in) : GetCurrentSyncMarkersV2Request {
		$n = $in->name;
		$o = new GetCurrentSyncMarkersV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'includeArticleSyncMarker': $o->includeArticleSyncMarker = $this->load_bool_property($in); break;
						case 'includeArticleGroupSyncMarker': $o->includeArticleGroupSyncMarker = $this->load_bool_property($in); break;
						case 'includeRelationSyncMarker': $o->includeRelationSyncMarker = $this->load_bool_property($in); break;
						case 'includeEmployeeSyncMarker': $o->includeEmployeeSyncMarker = $this->load_bool_property($in); break;
						case 'includeInvoiceSyncMarker': $o->includeInvoiceSyncMarker = $this->load_bool_property($in); break;
						case 'includeReceiptSyncMarker': $o->includeReceiptSyncMarker = $this->load_bool_property($in); break;
						case 'includeOrderSyncMarker': $o->includeOrderSyncMarker = $this->load_bool_property($in); break;
						case 'includeProposalSyncMarker': $o->includeProposalSyncMarker = $this->load_bool_property($in); break;
						case 'includeStockId': $o->includeStockId = $this->load_bool_property($in); break;
						case 'includeTicketCounterSaleSyncMarker': $o->includeTicketCounterSaleSyncMarker = $this->load_bool_property($in); break;
						case 'includePurchaseOrderSyncMarker': $o->includePurchaseOrderSyncMarker = $this->load_bool_property($in); break;
						case 'includePurchaseDeliverySyncMarker': $o->includePurchaseDeliverySyncMarker = $this->load_bool_property($in); break;
						case 'includeRelationPointsSyncMarker': $o->includeRelationPointsSyncMarker = $this->load_bool_property($in); break;
						case 'includeCashDrawerBalancingSyncMarker': $o->includeCashDrawerBalancingSyncMarker = $this->load_bool_property($in); break;
						case 'includeActivitySyncMarker': $o->includeActivitySyncMarker = $this->load_bool_property($in); break;
						case 'includePackingSlipSyncMarker': $o->includePackingSlipSyncMarker = $this->load_bool_property($in); break;
						case 'includeDayStockConfigurationSyncMarker': $o->includeDayStockConfigurationSyncMarker = $this->load_bool_property($in); break;
						case 'includePreparationMethodGroupSyncMarker': $o->includePreparationMethodGroupSyncMarker = $this->load_bool_property($in); break;
						case 'includeArticleAlterationsGroupsSyncMarker': $o->includeArticleAlterationsGroupsSyncMarker = $this->load_bool_property($in); break;
						case 'includeArticleNutritionalCharacteristicsSyncMarker': $o->includeArticleNutritionalCharacteristicsSyncMarker = $this->load_bool_property($in); break;
						case 'includeRelationNutritionalCharacteristicsSyncMarker': $o->includeRelationNutritionalCharacteristicsSyncMarker = $this->load_bool_property($in); break;
						case 'includeBranchGroupSyncMarker': $o->includeBranchGroupSyncMarker = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ns_NutrientType(\XMLReader $in) : ns_NutrientType {
		$n = $in->name;
		$o = new ns_NutrientType();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'parentId': $o->parentId = $this->load_int_property($in); break;
						case 'orderNumber': $o->orderNumber = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'unit': $o->unit = $this->load_string_property($in); break;
						case 'required': $o->required = $this->load_bool_property($in); break;
						case 'subNutrientTypes': $o->subNutrientTypes[] = $this->load_ns_NutrientType($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetNutrientTypesRequest(\XMLReader $in) : GetNutrientTypesRequest {
		$n = $in->name;
		$o = new GetNutrientTypesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VerifyCredentialsRequest(\XMLReader $in) : VerifyCredentialsRequest {
		$n = $in->name;
		$o = new VerifyCredentialsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'username': $o->username = $this->load_string_property($in); break;
						case 'password': $o->password = $this->load_string_property($in); break;
						case 'cardType': $o->cardType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveCredentialsRequest(\XMLReader $in) : SaveCredentialsRequest {
		$n = $in->name;
		$o = new SaveCredentialsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardType': $o->cardType = $this->load_string_property($in); break;
						case 'cardNumber': $o->cardNumber = $this->load_int_property($in); break;
						case 'newPassword': $o->newPassword = $this->load_string_property($in); break;
						case 'oldPassword': $o->oldPassword = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeePassword': $o->employeePassword = $this->load_string_property($in); break;
						case 'passwordResetKey': $o->passwordResetKey = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PasswordRequirementsRequest(\XMLReader $in) : PasswordRequirementsRequest {
		$n = $in->name;
		$o = new PasswordRequirementsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardType': $o->cardType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PasswordResetRequest(\XMLReader $in) : PasswordResetRequest {
		$n = $in->name;
		$o = new PasswordResetRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardType': $o->cardType = $this->load_string_property($in); break;
						case 'cardNumber': $o->cardNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_FloorplanNeighbourhood(\XMLReader $in) : FloorplanNeighbourhood {
		$n = $in->name;
		$o = new FloorplanNeighbourhood();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'floorplanNumber': $o->floorplanNumber = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'tableNumbersRange': $o->tableNumbersRange = $this->load_string_property($in); break;
						case 'colour': $o->colour = $this->load_Colour($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_FloorplanNeighbourhoodList(\XMLReader $in) : FloorplanNeighbourhoodList {
		$n = $in->name;
		$o = new FloorplanNeighbourhoodList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'neighbourhood': $o->neighbourhood[] = $this->load_FloorplanNeighbourhood($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Floorplan(\XMLReader $in) : Floorplan {
		$n = $in->name;
		$o = new Floorplan();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'definition': $o->definition = $this->load_string_property($in); break;
						case 'updatedTs': $o->updatedTs = $this->load_DateTime_property($in); break;
						case 'isActive': $o->isActive = $this->load_bool_property($in); break;
						case 'neighbourhoods': $o->neighbourhoods = ($this->load_FloorplanNeighbourhoodList($in))->neighbourhood; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_FloorplanList(\XMLReader $in) : FloorplanList {
		$n = $in->name;
		$o = new FloorplanList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'floorplan': $o->floorplan[] = $this->load_Floorplan($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetFloorplansRequest(\XMLReader $in) : GetFloorplansRequest {
		$n = $in->name;
		$o = new GetFloorplansRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TableProperties(\XMLReader $in) : TableProperties {
		$n = $in->name;
		$o = new TableProperties();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'isVip': $o->isVip = $this->load_bool_property($in); break;
						case 'subTableCount': $o->subTableCount = $this->load_int_property($in); break;
						case 'updateLastTableActionTime': $o->updateLastTableActionTime = $this->load_bool_property($in); break;
						case 'snoozeKitchenTicketSeconds': $o->snoozeKitchenTicketSeconds = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ChangeTablePropertyReq(\XMLReader $in) : ChangeTablePropertyReq {
		$n = $in->name;
		$o = new ChangeTablePropertyReq();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'workplaceIdentifier': $o->workplaceIdentifier = $this->load_WorkplaceIdentifier($in); break;
						case 'employeeIdentifier': $o->employeeIdentifier = $this->load_EmployeeIdentifier($in); break;
						case 'tableIdentifier': $o->tableIdentifier = $this->load_TableIdentifier($in); break;
						case 'tableProperties': $o->tableProperties = $this->load_TableProperties($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_AuthorizationGroup(\XMLReader $in) : AuthorizationGroup {
		$n = $in->name;
		$o = new AuthorizationGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'filterProfileId': $o->filterProfileId = $this->load_int_property($in); break;
						case 'rankOrder': $o->rankOrder = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GroupAuthorization(\XMLReader $in) : GroupAuthorization {
		$n = $in->name;
		$o = new GroupAuthorization();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'value': $o->value = $this->load_bool_property($in); break;
						case 'level': $o->level = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GroupAuthorizationsList(\XMLReader $in) : GroupAuthorizationsList {
		$n = $in->name;
		$o = new GroupAuthorizationsList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'authorizations': $o->authorizations[] = $this->load_GroupAuthorization($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetEmployeeAuthorizationsRequest(\XMLReader $in) : GetEmployeeAuthorizationsRequest {
		$n = $in->name;
		$o = new GetEmployeeAuthorizationsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'loadOnlyEmployeeSpecificAuthorizations': $o->loadOnlyEmployeeSpecificAuthorizations = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_EmployeeAuthorization(\XMLReader $in) : EmployeeAuthorization {
		$n = $in->name;
		$o = new EmployeeAuthorization();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'value': $o->value = $this->load_bool_property($in); break;
						case 'level': $o->level = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_EmployeeAuthorizationsList(\XMLReader $in) : EmployeeAuthorizationsList {
		$n = $in->name;
		$o = new EmployeeAuthorizationsList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'authorizations': $o->authorizations[] = $this->load_EmployeeAuthorization($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetGroupAuthorizationsRequest(\XMLReader $in) : GetGroupAuthorizationsRequest {
		$n = $in->name;
		$o = new GetGroupAuthorizationsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GroupAuthorizationV2(\XMLReader $in) : GroupAuthorizationV2 {
		$n = $in->name;
		$o = new GroupAuthorizationV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'level': $o->level = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GroupAuthorizationsV2List(\XMLReader $in) : GroupAuthorizationsV2List {
		$n = $in->name;
		$o = new GroupAuthorizationsV2List();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'authorizations': $o->authorizations[] = $this->load_GroupAuthorizationV2($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateGroupAuthorizationsRequest(\XMLReader $in) : UpdateGroupAuthorizationsRequest {
		$n = $in->name;
		$o = new UpdateGroupAuthorizationsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'authorizationsList': $o->authorizationsList = ($this->load_GroupAuthorizationsV2List($in))->authorizations; break;
						case 'updateBehavior': $o->updateBehavior = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetAuthorizationGroupsRequest(\XMLReader $in) : GetAuthorizationGroupsRequest {
		$n = $in->name;
		$o = new GetAuthorizationGroupsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_AuthorizationGroupList(\XMLReader $in) : AuthorizationGroupList {
		$n = $in->name;
		$o = new AuthorizationGroupList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groups': $o->groups[] = $this->load_AuthorizationGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetAuthorizationTreeRequest(\XMLReader $in) : GetAuthorizationTreeRequest {
		$n = $in->name;
		$o = new GetAuthorizationTreeRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetEmployeeBranchAuthorizationsRequest(\XMLReader $in) : GetEmployeeBranchAuthorizationsRequest {
		$n = $in->name;
		$o = new GetEmployeeBranchAuthorizationsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_EmployeeBranchAuthorization(\XMLReader $in) : EmployeeBranchAuthorization {
		$n = $in->name;
		$o = new EmployeeBranchAuthorization();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'authorizationList': $o->authorizationList = ($this->load_EmployeeAuthorizationsList($in))->authorizations; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_EmployeeBranchAuthorizationsList(\XMLReader $in) : EmployeeBranchAuthorizationsList {
		$n = $in->name;
		$o = new EmployeeBranchAuthorizationsList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchAuthorizations': $o->branchAuthorizations[] = $this->load_EmployeeBranchAuthorization($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveAuthorizationGroupRequest(\XMLReader $in) : SaveAuthorizationGroupRequest {
		$n = $in->name;
		$o = new SaveAuthorizationGroupRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'filterProfileId': $o->filterProfileId = $this->load_int_property($in); break;
						case 'rankOrder': $o->rankOrder = $this->load_int_property($in); break;
						case 'PreferredSupplier': $o->PreferredSupplier = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeleteAuthorizationGroupRequest(\XMLReader $in) : DeleteAuthorizationGroupRequest {
		$n = $in->name;
		$o = new DeleteAuthorizationGroupRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetEmployeeAuthorizationGroupsRequest(\XMLReader $in) : GetEmployeeAuthorizationGroupsRequest {
		$n = $in->name;
		$o = new GetEmployeeAuthorizationGroupsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'separateBranchesAndBranchGroups': $o->separateBranchesAndBranchGroups = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BranchAuthorizationGroup(\XMLReader $in) : BranchAuthorizationGroup {
		$n = $in->name;
		$o = new BranchAuthorizationGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'authorizationGroup': $o->authorizationGroup = $this->load_AuthorizationGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BranchGroupAuthorizationGroup(\XMLReader $in) : BranchGroupAuthorizationGroup {
		$n = $in->name;
		$o = new BranchGroupAuthorizationGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchGroupNumber': $o->branchGroupNumber = $this->load_int_property($in); break;
						case 'authorizationGroup': $o->authorizationGroup = $this->load_AuthorizationGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BranchAuthorizationGroupNumber(\XMLReader $in) : BranchAuthorizationGroupNumber {
		$n = $in->name;
		$o = new BranchAuthorizationGroupNumber();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BranchGroupAuthorizationGroupNumber(\XMLReader $in) : BranchGroupAuthorizationGroupNumber {
		$n = $in->name;
		$o = new BranchGroupAuthorizationGroupNumber();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchGroupNumber': $o->branchGroupNumber = $this->load_int_property($in); break;
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateEmployeeAuthorizationGroupsRequest(\XMLReader $in) : UpdateEmployeeAuthorizationGroupsRequest {
		$n = $in->name;
		$o = new UpdateEmployeeAuthorizationGroupsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'branchAuthorizationGroupNumbers': $o->branchAuthorizationGroupNumbers[] = $this->load_BranchAuthorizationGroupNumber($in); break;
						case 'branchGroupAuthorizationGroupNumbers': $o->branchGroupAuthorizationGroupNumbers[] = $this->load_BranchGroupAuthorizationGroupNumber($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetEmployeeAuthorizationSyncMarkersRequest(\XMLReader $in) : GetEmployeeAuthorizationSyncMarkersRequest {
		$n = $in->name;
		$o = new GetEmployeeAuthorizationSyncMarkersRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetSpecialBarcodePatternsRequest(\XMLReader $in) : GetSpecialBarcodePatternsRequest {
		$n = $in->name;
		$o = new GetSpecialBarcodePatternsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BarcodePattern(\XMLReader $in) : BarcodePattern {
		$n = $in->name;
		$o = new BarcodePattern();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'regex': $o->regex = $this->load_string_property($in); break;
						case 'kind': $o->kind = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ParseSpecialBarcodeRequest(\XMLReader $in) : ParseSpecialBarcodeRequest {
		$n = $in->name;
		$o = new ParseSpecialBarcodeRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'barcode': $o->barcode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SpecialBarcodeArticleResult(\XMLReader $in) : SpecialBarcodeArticleResult {
		$n = $in->name;
		$o = new SpecialBarcodeArticleResult();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'price': $o->price = $this->load_BigDecimal_property($in); break;
						case 'weight': $o->weight = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WorkplaceLoginStateInfo(\XMLReader $in) : WorkplaceLoginStateInfo {
		$n = $in->name;
		$o = new WorkplaceLoginStateInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'workplaceIdentifier': $o->workplaceIdentifier = $this->load_WorkplaceIdentifier($in); break;
						case 'workplaceLoginState': $o->workplaceLoginState = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetEmployeeWorkplaceLoginStatesRequest(\XMLReader $in) : GetEmployeeWorkplaceLoginStatesRequest {
		$n = $in->name;
		$o = new GetEmployeeWorkplaceLoginStatesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'workplaceIdentifiers': $o->workplaceIdentifiers = ($this->load_WorkplaceIdentifierSet($in))->workplaceIdentifier; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetConfigurationResponse(\XMLReader $in) : GetConfigurationResponse {
		$n = $in->name;
		$o = new GetConfigurationResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'configurationList': $o->configurationList = ($this->load_ConfigurationList($in))->configuration; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateConfigurationResponse(\XMLReader $in) : UpdateConfigurationResponse {
		$n = $in->name;
		$o = new UpdateConfigurationResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetConfigurationTreeResponse(\XMLReader $in) : GetConfigurationTreeResponse {
		$n = $in->name;
		$o = new GetConfigurationTreeResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'configurations': $o->configurations[] = $this->load_ConfigurationGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetConfigurationValuesResponse(\XMLReader $in) : GetConfigurationValuesResponse {
		$n = $in->name;
		$o = new GetConfigurationValuesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'configurationKeyValues': $o->configurationKeyValues[] = $this->load_ConfigurationKeyValues($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateConfigurationValuesResponse(\XMLReader $in) : UpdateConfigurationValuesResponse {
		$n = $in->name;
		$o = new UpdateConfigurationValuesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getButtonLayoutResponse(\XMLReader $in) : getButtonLayoutResponse {
		$n = $in->name;
		$o = new getButtonLayoutResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'return': $o->return = $this->load_ButtonLayout($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ButtonLayoutGroupForBranchResponse(\XMLReader $in) : ButtonLayoutGroupForBranchResponse {
		$n = $in->name;
		$o = new ButtonLayoutGroupForBranchResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'buttonLayoutGroup': $o->buttonLayoutGroup = $this->load_ButtonLayoutGroup($in); break;
						case 'articlesInLayouts': $o->articlesInLayouts[] = $this->load_ArticleSimple($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetButtonLayoutGroupsWithAssignedWorkplacesResponse(\XMLReader $in) : GetButtonLayoutGroupsWithAssignedWorkplacesResponse {
		$n = $in->name;
		$o = new GetButtonLayoutGroupsWithAssignedWorkplacesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'buttonLayoutGroups': $o->buttonLayoutGroups[] = $this->load_ButtonLayoutGroupsWithAssignedWorkplaces($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetButtonLayoutGroupDetailsResponse(\XMLReader $in) : GetButtonLayoutGroupDetailsResponse {
		$n = $in->name;
		$o = new GetButtonLayoutGroupDetailsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'buttonLayoutGroup': $o->buttonLayoutGroup = $this->load_ButtonLayoutGroup($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveButtonLayoutGroupDetailsResponse(\XMLReader $in) : SaveButtonLayoutGroupDetailsResponse {
		$n = $in->name;
		$o = new SaveButtonLayoutGroupDetailsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'buttonLayoutGroupId': $o->buttonLayoutGroupId = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeleteButtonLayoutGroupResponse(\XMLReader $in) : DeleteButtonLayoutGroupResponse {
		$n = $in->name;
		$o = new DeleteButtonLayoutGroupResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_AssignButtonLayoutGroupToWorkplacesResponse(\XMLReader $in) : AssignButtonLayoutGroupToWorkplacesResponse {
		$n = $in->name;
		$o = new AssignButtonLayoutGroupToWorkplacesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getArticlesInLayoutResponse(\XMLReader $in) : getArticlesInLayoutResponse {
		$n = $in->name;
		$o = new getArticlesInLayoutResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'return': $o->return[] = $this->load_ArticleSimple($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetDayStockConfigurationResponse(\XMLReader $in) : GetDayStockConfigurationResponse {
		$n = $in->name;
		$o = new GetDayStockConfigurationResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dayStockConfigurationList': $o->dayStockConfigurationList = ($this->load_DayStockConfigurationList($in))->dayStockConfiguration; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveDayStockConfigurationResponse(\XMLReader $in) : SaveDayStockConfigurationResponse {
		$n = $in->name;
		$o = new SaveDayStockConfigurationResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetActivitiesResponse(\XMLReader $in) : GetActivitiesResponse {
		$n = $in->name;
		$o = new GetActivitiesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'activityList': $o->activityList = ($this->load_ActivityList($in))->activity; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetActivityTypesResponse(\XMLReader $in) : GetActivityTypesResponse {
		$n = $in->name;
		$o = new GetActivityTypesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'activityTypeList': $o->activityTypeList = ($this->load_ActivityTypeList($in))->activityType; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveActivityTypesResponse(\XMLReader $in) : SaveActivityTypesResponse {
		$n = $in->name;
		$o = new SaveActivityTypesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateActivityResponse(\XMLReader $in) : CreateActivityResponse {
		$n = $in->name;
		$o = new CreateActivityResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'activity': $o->activity = $this->load_Activity($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateActivityResponse(\XMLReader $in) : UpdateActivityResponse {
		$n = $in->name;
		$o = new UpdateActivityResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'activity': $o->activity = $this->load_Activity($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveActivityResponse(\XMLReader $in) : SaveActivityResponse {
		$n = $in->name;
		$o = new SaveActivityResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'activity': $o->activity = $this->load_Activity($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeleteActivityResponse(\XMLReader $in) : DeleteActivityResponse {
		$n = $in->name;
		$o = new DeleteActivityResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetGksInformationResponse(\XMLReader $in) : GetGksInformationResponse {
		$n = $in->name;
		$o = new GetGksInformationResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'gksProductionNumber': $o->gksProductionNumber = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetMealplanMomentsConfigurationResponse(\XMLReader $in) : GetMealplanMomentsConfigurationResponse {
		$n = $in->name;
		$o = new GetMealplanMomentsConfigurationResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'mealMomentConfigurationList': $o->mealMomentConfigurationList[] = $this->load_MealmomentConfiguration($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetScheduledMealPlansResponse(\XMLReader $in) : GetScheduledMealPlansResponse {
		$n = $in->name;
		$o = new GetScheduledMealPlansResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'scheduledMealPlans': $o->scheduledMealPlans[] = $this->load_ScheduledMealPlan($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetArticleAlterationsGroupsResponse(\XMLReader $in) : GetArticleAlterationsGroupsResponse {
		$n = $in->name;
		$o = new GetArticleAlterationsGroupsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleAlterationsGroupList': $o->articleAlterationsGroupList = ($this->load_ArticleAlterationsGroupList($in))->articleAlterationsGroup; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveArticleAlterationsGroupResponse(\XMLReader $in) : SaveArticleAlterationsGroupResponse {
		$n = $in->name;
		$o = new SaveArticleAlterationsGroupResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeleteArticleAlterationsGroupResponse(\XMLReader $in) : DeleteArticleAlterationsGroupResponse {
		$n = $in->name;
		$o = new DeleteArticleAlterationsGroupResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateAttachedArticleAlterationsGroupsResponse(\XMLReader $in) : UpdateAttachedArticleAlterationsGroupsResponse {
		$n = $in->name;
		$o = new UpdateAttachedArticleAlterationsGroupsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateArticleMenuResponse(\XMLReader $in) : UpdateArticleMenuResponse {
		$n = $in->name;
		$o = new UpdateArticleMenuResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateOnlineAuthorizationTreeResponse(\XMLReader $in) : UpdateOnlineAuthorizationTreeResponse {
		$n = $in->name;
		$o = new UpdateOnlineAuthorizationTreeResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOwnerLabelsResponse(\XMLReader $in) : GetOwnerLabelsResponse {
		$n = $in->name;
		$o = new GetOwnerLabelsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'ownerLabels': $o->ownerLabels[] = $this->load_OwnerLabel($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetWordAliasesResponse(\XMLReader $in) : GetWordAliasesResponse {
		$n = $in->name;
		$o = new GetWordAliasesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'wordAliasList': $o->wordAliasList = ($this->load_WordAliasList($in))->wordAlias; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getApiVersionResponse(\XMLReader $in) : getApiVersionResponse {
		$n = $in->name;
		$o = new getApiVersionResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'majorNumber': $o->majorNumber = $this->load_int_property($in); break;
						case 'minorNumber': $o->minorNumber = $this->load_int_property($in); break;
						case 'revisionNumber': $o->revisionNumber = $this->load_int_property($in); break;
						case 'databaseMajorNumber': $o->databaseMajorNumber = $this->load_int_property($in); break;
						case 'databaseMinorNumber': $o->databaseMinorNumber = $this->load_int_property($in); break;
						case 'databaseRevisionNumber': $o->databaseRevisionNumber = $this->load_int_property($in); break;
						case 'serviceMajorNumber': $o->serviceMajorNumber = $this->load_int_property($in); break;
						case 'serviceMinorNumber': $o->serviceMinorNumber = $this->load_int_property($in); break;
						case 'serviceRevisionNumber': $o->serviceRevisionNumber = $this->load_int_property($in); break;
						case 'serviceBuildNumber': $o->serviceBuildNumber = $this->load_int_property($in); break;
						case 'serviceDate': $o->serviceDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'serviceDateTime': $o->serviceDateTime = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'serviceProcessId': $o->serviceProcessId = $this->load_int_property($in); break;
						case 'serviceHostname': $o->serviceHostname = $this->load_string_property($in); break;
						case 'serviceIpAddresses': $o->serviceIpAddresses[] = $this->load_string_property($in); break;
						case 'serviceMinWorkerThreads': $o->serviceMinWorkerThreads = $this->load_int_property($in); break;
						case 'serviceMaxWorkerThreads': $o->serviceMaxWorkerThreads = $this->load_int_property($in); break;
						case 'serverMajorNumber': $o->serverMajorNumber = $this->load_int_property($in); break;
						case 'serverMinorNumber': $o->serverMinorNumber = $this->load_int_property($in); break;
						case 'serverRevisionNumber': $o->serverRevisionNumber = $this->load_int_property($in); break;
						case 'serverDate': $o->serverDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'serverDateTime': $o->serverDateTime = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'inDebugMode': $o->inDebugMode = $this->load_bool_property($in); break;
						case 'isSlaveApi': $o->isSlaveApi = $this->load_bool_property($in); break;
						case 'slaveApiType': $o->slaveApiType = $this->load_string_property($in); break;
						case 'slaveBranchNumber': $o->slaveBranchNumber = $this->load_int_property($in); break;
						case 'slaveWorkplaceNumber': $o->slaveWorkplaceNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getDatabaseVersionResponse(\XMLReader $in) : getDatabaseVersionResponse {
		$n = $in->name;
		$o = new getDatabaseVersionResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'majorNumber': $o->majorNumber = $this->load_int_property($in); break;
						case 'minorNumber': $o->minorNumber = $this->load_int_property($in); break;
						case 'revisionNumber': $o->revisionNumber = $this->load_int_property($in); break;
						case 'serverMajorNumber': $o->serverMajorNumber = $this->load_int_property($in); break;
						case 'serverMinorNumber': $o->serverMinorNumber = $this->load_int_property($in); break;
						case 'serverRevisionNumber': $o->serverRevisionNumber = $this->load_int_property($in); break;
						case 'serverDate': $o->serverDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'serverDateTime': $o->serverDateTime = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetLicenseInformationResponse(\XMLReader $in) : GetLicenseInformationResponse {
		$n = $in->name;
		$o = new GetLicenseInformationResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'obscuredLicenseKey': $o->obscuredLicenseKey = $this->load_string_property($in); break;
						case 'companyName': $o->companyName = $this->load_string_property($in); break;
						case 'city': $o->city = $this->load_string_property($in); break;
						case 'licensedBranches': $o->licensedBranches = ($this->load_LicensedBranchList($in))->licensedBranch; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getAvailableTerminalListResponse(\XMLReader $in) : getAvailableTerminalListResponse {
		$n = $in->name;
		$o = new getAvailableTerminalListResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'return': $o->return[] = $this->load_Terminal($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RegisterTerminalResponse(\XMLReader $in) : RegisterTerminalResponse {
		$n = $in->name;
		$o = new RegisterTerminalResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetTerminalSettingsResponse(\XMLReader $in) : GetTerminalSettingsResponse {
		$n = $in->name;
		$o = new GetTerminalSettingsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'condenseLines': $o->condenseLines = $this->load_string_property($in); break;
						case 'alwaysCreateCounterLine': $o->alwaysCreateCounterLine = $this->load_bool_property($in); break;
						case 'addSubarticlePricesToCombinedArticles': $o->addSubarticlePricesToCombinedArticles = $this->load_bool_property($in); break;
						case 'allowPrepay': $o->allowPrepay = $this->load_bool_property($in); break;
						case 'askForNumberOfGuests': $o->askForNumberOfGuests = $this->load_bool_property($in); break;
						case 'requireNumberOfGuests': $o->requireNumberOfGuests = $this->load_bool_property($in); break;
						case 'unknownTableAction': $o->unknownTableAction = $this->load_string_property($in); break;
						case 'askToKeepTableName': $o->askToKeepTableName = $this->load_bool_property($in); break;
						case 'showTotalAmountOnTable': $o->showTotalAmountOnTable = $this->load_bool_property($in); break;
						case 'showPrepaidAmountOnTable': $o->showPrepaidAmountOnTable = $this->load_bool_property($in); break;
						case 'splitLineOnAddPreparationMethod': $o->splitLineOnAddPreparationMethod = $this->load_bool_property($in); break;
						case 'directPaymentMode': $o->directPaymentMode = $this->load_bool_property($in); break;
						case 'directPaymentModeTableNumber': $o->directPaymentModeTableNumber = $this->load_int_property($in); break;
						case 'branchHasKitchenScreen': $o->branchHasKitchenScreen = $this->load_bool_property($in); break;
						case 'directPaymentModeAllowTableSelection': $o->directPaymentModeAllowTableSelection = $this->load_bool_property($in); break;
						case 'onlyQuantityButtons': $o->onlyQuantityButtons = $this->load_bool_property($in); break;
						case 'dayStockBehaviour': $o->dayStockBehaviour = $this->load_string_property($in); break;
						case 'dayStockShowAvailableStock': $o->dayStockShowAvailableStock = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetBranchInformationResponse(\XMLReader $in) : GetBranchInformationResponse {
		$n = $in->name;
		$o = new GetBranchInformationResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'branchInformation': $o->branchInformation = $this->load_BranchInformation($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetBranchGroupsResponse(\XMLReader $in) : GetBranchGroupsResponse {
		$n = $in->name;
		$o = new GetBranchGroupsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchGroupsList': $o->branchGroupsList = ($this->load_BranchGroupsList($in))->branchGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetDeliveryMethodsResponse(\XMLReader $in) : GetDeliveryMethodsResponse {
		$n = $in->name;
		$o = new GetDeliveryMethodsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'deliveryMethodList': $o->deliveryMethodList = ($this->load_DeliveryMethodList($in))->deliveryMethod; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetDeliveryMethodsV2Response(\XMLReader $in) : GetDeliveryMethodsV2Response {
		$n = $in->name;
		$o = new GetDeliveryMethodsV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'deliveryMethodList': $o->deliveryMethodList = ($this->load_DeliveryMethodList($in))->deliveryMethod; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateDeliveryMethodResponse(\XMLReader $in) : CreateDeliveryMethodResponse {
		$n = $in->name;
		$o = new CreateDeliveryMethodResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'deliveryMethod': $o->deliveryMethod = $this->load_DeliveryMethod($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateDeliveryMethodResponse(\XMLReader $in) : UpdateDeliveryMethodResponse {
		$n = $in->name;
		$o = new UpdateDeliveryMethodResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'deliveryMethod': $o->deliveryMethod = $this->load_DeliveryMethod($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getBranchesResponse(\XMLReader $in) : getBranchesResponse {
		$n = $in->name;
		$o = new getBranchesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branches': $o->branches = ($this->load_BranchList($in))->branch; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getCurrentSyncMarkersResponse(\XMLReader $in) : getCurrentSyncMarkersResponse {
		$n = $in->name;
		$o = new getCurrentSyncMarkersResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleSyncMarker': $o->articleSyncMarker = $this->load_int_property($in); break;
						case 'articleGroupSyncMarker': $o->articleGroupSyncMarker = $this->load_int_property($in); break;
						case 'relationSyncMarker': $o->relationSyncMarker = $this->load_int_property($in); break;
						case 'employeeSyncMarker': $o->employeeSyncMarker = $this->load_int_property($in); break;
						case 'invoiceSyncMarker': $o->invoiceSyncMarker = $this->load_int_property($in); break;
						case 'receiptSyncMarker': $o->receiptSyncMarker = $this->load_int_property($in); break;
						case 'orderSyncMarker': $o->orderSyncMarker = $this->load_int_property($in); break;
						case 'proposalSyncMarker': $o->proposalSyncMarker = $this->load_int_property($in); break;
						case 'stockId': $o->stockId = $this->load_int_property($in); break;
						case 'ticketCounterSaleSyncMarker': $o->ticketCounterSaleSyncMarker = $this->load_int_property($in); break;
						case 'purchaseOrderSyncMarker': $o->purchaseOrderSyncMarker = $this->load_int_property($in); break;
						case 'purchaseDeliverySyncMarker': $o->purchaseDeliverySyncMarker = $this->load_int_property($in); break;
						case 'relationPointsSyncMarker': $o->relationPointsSyncMarker = $this->load_int_property($in); break;
						case 'cashDrawerBalancingSyncMarker': $o->cashDrawerBalancingSyncMarker = $this->load_int_property($in); break;
						case 'activitySyncMarker': $o->activitySyncMarker = $this->load_int_property($in); break;
						case 'packingSlipSyncMarker': $o->packingSlipSyncMarker = $this->load_int_property($in); break;
						case 'dayStockConfigurationSyncMarker': $o->dayStockConfigurationSyncMarker = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCurrentSyncMarkersV2Response(\XMLReader $in) : GetCurrentSyncMarkersV2Response {
		$n = $in->name;
		$o = new GetCurrentSyncMarkersV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleSyncMarker': $o->articleSyncMarker = $this->load_int_property($in); break;
						case 'articleGroupSyncMarker': $o->articleGroupSyncMarker = $this->load_int_property($in); break;
						case 'relationSyncMarker': $o->relationSyncMarker = $this->load_int_property($in); break;
						case 'employeeSyncMarker': $o->employeeSyncMarker = $this->load_int_property($in); break;
						case 'invoiceSyncMarker': $o->invoiceSyncMarker = $this->load_int_property($in); break;
						case 'receiptSyncMarker': $o->receiptSyncMarker = $this->load_int_property($in); break;
						case 'orderSyncMarker': $o->orderSyncMarker = $this->load_int_property($in); break;
						case 'proposalSyncMarker': $o->proposalSyncMarker = $this->load_int_property($in); break;
						case 'stockId': $o->stockId = $this->load_int_property($in); break;
						case 'ticketCounterSaleSyncMarker': $o->ticketCounterSaleSyncMarker = $this->load_int_property($in); break;
						case 'purchaseOrderSyncMarker': $o->purchaseOrderSyncMarker = $this->load_int_property($in); break;
						case 'purchaseDeliverySyncMarker': $o->purchaseDeliverySyncMarker = $this->load_int_property($in); break;
						case 'relationPointsSyncMarker': $o->relationPointsSyncMarker = $this->load_int_property($in); break;
						case 'cashDrawerBalancingSyncMarker': $o->cashDrawerBalancingSyncMarker = $this->load_int_property($in); break;
						case 'activitySyncMarker': $o->activitySyncMarker = $this->load_int_property($in); break;
						case 'packingSlipSyncMarker': $o->packingSlipSyncMarker = $this->load_int_property($in); break;
						case 'dayStockConfigurationSyncMarker': $o->dayStockConfigurationSyncMarker = $this->load_int_property($in); break;
						case 'preparationMethodGroupSyncMarker': $o->preparationMethodGroupSyncMarker = $this->load_int_property($in); break;
						case 'articleAlterationsGroupsSyncMarker': $o->articleAlterationsGroupsSyncMarker = $this->load_int_property($in); break;
						case 'articleNutritionalCharacteristicsSyncMarker': $o->articleNutritionalCharacteristicsSyncMarker = $this->load_int_property($in); break;
						case 'relationNutritionalCharacteristicsSyncMarker': $o->relationNutritionalCharacteristicsSyncMarker = $this->load_int_property($in); break;
						case 'branchGroupSyncMarker': $o->branchGroupSyncMarker = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetNutrientTypesResponse(\XMLReader $in) : GetNutrientTypesResponse {
		$n = $in->name;
		$o = new GetNutrientTypesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'nutrientTypes': $o->nutrientTypes[] = $this->load_ns_NutrientType($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VerifyCredentialsResponse(\XMLReader $in) : VerifyCredentialsResponse {
		$n = $in->name;
		$o = new VerifyCredentialsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'verified': $o->verified = $this->load_bool_property($in); break;
						case 'employee': $o->employee = $this->load_Employee($in); break;
						case 'relation': $o->relation = $this->load_Relation($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'expiresOn': $o->expiresOn = $this->load_Date_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveCredentialsResponse(\XMLReader $in) : SaveCredentialsResponse {
		$n = $in->name;
		$o = new SaveCredentialsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PasswordRequirementsResponse(\XMLReader $in) : PasswordRequirementsResponse {
		$n = $in->name;
		$o = new PasswordRequirementsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'minPasswordLength': $o->minPasswordLength = $this->load_int_property($in); break;
						case 'minNumberLowerCase': $o->minNumberLowerCase = $this->load_int_property($in); break;
						case 'minNumberUpperCase': $o->minNumberUpperCase = $this->load_int_property($in); break;
						case 'minNumberDigits': $o->minNumberDigits = $this->load_int_property($in); break;
						case 'minNumberSpecial': $o->minNumberSpecial = $this->load_int_property($in); break;
						case 'reuseDetection': $o->reuseDetection = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PasswordResetResponse(\XMLReader $in) : PasswordResetResponse {
		$n = $in->name;
		$o = new PasswordResetResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'passwordResetKey': $o->passwordResetKey = $this->load_string_property($in); break;
						case 'expiresAt': $o->expiresAt = $this->load_DateTime_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetFloorplansResponse(\XMLReader $in) : GetFloorplansResponse {
		$n = $in->name;
		$o = new GetFloorplansResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'floorplans': $o->floorplans = ($this->load_FloorplanList($in))->floorplan; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ChangeTablePropertyResp(\XMLReader $in) : ChangeTablePropertyResp {
		$n = $in->name;
		$o = new ChangeTablePropertyResp();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'tableIdentifier': $o->tableIdentifier = $this->load_TableIdentifier($in); break;
						case 'tableProperties': $o->tableProperties = $this->load_TableProperties($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetEmployeeAuthorizationsResponse(\XMLReader $in) : GetEmployeeAuthorizationsResponse {
		$n = $in->name;
		$o = new GetEmployeeAuthorizationsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'authorizationsList': $o->authorizationsList = ($this->load_EmployeeAuthorizationsList($in))->authorizations; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetGroupAuthorizationsResponse(\XMLReader $in) : GetGroupAuthorizationsResponse {
		$n = $in->name;
		$o = new GetGroupAuthorizationsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'authorizationsList': $o->authorizationsList = ($this->load_GroupAuthorizationsList($in))->authorizations; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateGroupAuthorizationsResponse(\XMLReader $in) : UpdateGroupAuthorizationsResponse {
		$n = $in->name;
		$o = new UpdateGroupAuthorizationsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'authorizationsList': $o->authorizationsList = ($this->load_GroupAuthorizationsList($in))->authorizations; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetAuthorizationGroupsResponse(\XMLReader $in) : GetAuthorizationGroupsResponse {
		$n = $in->name;
		$o = new GetAuthorizationGroupsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'groupList': $o->groupList = ($this->load_AuthorizationGroupList($in))->groups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetAuthorizationTreeResponse(\XMLReader $in) : GetAuthorizationTreeResponse {
		$n = $in->name;
		$o = new GetAuthorizationTreeResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'backOfficeAuthorizationsList': $o->backOfficeAuthorizationsList = ($this->load_AuthorizationsList($in))->authorizations; break;
						case 'articleAuthorizationsList': $o->articleAuthorizationsList = ($this->load_AuthorizationsList($in))->authorizations; break;
						case 'relationAuthorizationsList': $o->relationAuthorizationsList = ($this->load_AuthorizationsList($in))->authorizations; break;
						case 'employeeAuthorizationsList': $o->employeeAuthorizationsList = ($this->load_AuthorizationsList($in))->authorizations; break;
						case 'onlineAuthorizationsList': $o->onlineAuthorizationsList = ($this->load_AuthorizationsList($in))->authorizations; break;
						case 'kmsAuthorizationsList': $o->kmsAuthorizationsList = ($this->load_AuthorizationsList($in))->authorizations; break;
						case 'onlineAuthorizationsVersion': $o->onlineAuthorizationsVersion = $this->load_string_property($in); break;
						case 'kmsAuthorizationsVersion': $o->kmsAuthorizationsVersion = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetEmployeeBranchAuthorizationsResponse(\XMLReader $in) : GetEmployeeBranchAuthorizationsResponse {
		$n = $in->name;
		$o = new GetEmployeeBranchAuthorizationsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchAuthorizationsList': $o->branchAuthorizationsList = ($this->load_EmployeeBranchAuthorizationsList($in))->branchAuthorizations; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveAuthorizationGroupResponse(\XMLReader $in) : SaveAuthorizationGroupResponse {
		$n = $in->name;
		$o = new SaveAuthorizationGroupResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'groupNumber': $o->groupNumber = $this->load_int_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeleteAuthorizationGroupResponse(\XMLReader $in) : DeleteAuthorizationGroupResponse {
		$n = $in->name;
		$o = new DeleteAuthorizationGroupResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetEmployeeAuthorizationGroupsResponse(\XMLReader $in) : GetEmployeeAuthorizationGroupsResponse {
		$n = $in->name;
		$o = new GetEmployeeAuthorizationGroupsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchAuthorizationGroups': $o->branchAuthorizationGroups[] = $this->load_BranchAuthorizationGroup($in); break;
						case 'branchGroupAuthorizationGroups': $o->branchGroupAuthorizationGroups[] = $this->load_BranchGroupAuthorizationGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateEmployeeAuthorizationGroupsResponse(\XMLReader $in) : UpdateEmployeeAuthorizationGroupsResponse {
		$n = $in->name;
		$o = new UpdateEmployeeAuthorizationGroupsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetEmployeeAuthorizationSyncMarkersResponse(\XMLReader $in) : GetEmployeeAuthorizationSyncMarkersResponse {
		$n = $in->name;
		$o = new GetEmployeeAuthorizationSyncMarkersResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'authGroepSyncMarker': $o->authGroepSyncMarker = $this->load_int_property($in); break;
						case 'authGroepRechtenSyncMarker': $o->authGroepRechtenSyncMarker = $this->load_int_property($in); break;
						case 'authMedewGroepSyncMarker': $o->authMedewGroepSyncMarker = $this->load_int_property($in); break;
						case 'authMedewRechtenSyncMarker': $o->authMedewRechtenSyncMarker = $this->load_int_property($in); break;
						case 'employeeBranchGroupSyncMarker': $o->employeeBranchGroupSyncMarker = $this->load_int_property($in); break;
						case 'employeeSyncMarker': $o->employeeSyncMarker = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetSpecialBarcodePatternsResponse(\XMLReader $in) : GetSpecialBarcodePatternsResponse {
		$n = $in->name;
		$o = new GetSpecialBarcodePatternsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'patterns': $o->patterns[] = $this->load_BarcodePattern($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ParseSpecialBarcodeResponse(\XMLReader $in) : ParseSpecialBarcodeResponse {
		$n = $in->name;
		$o = new ParseSpecialBarcodeResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'kind': $o->kind = $this->load_string_property($in); break;
						case 'articleResult': $o->articleResult = $this->load_SpecialBarcodeArticleResult($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetEmployeeWorkplaceLoginStatesResponse(\XMLReader $in) : GetEmployeeWorkplaceLoginStatesResponse {
		$n = $in->name;
		$o = new GetEmployeeWorkplaceLoginStatesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'workplaceLoginStateInfo': $o->workplaceLoginStateInfo[] = $this->load_WorkplaceLoginStateInfo($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ImageLabel(\XMLReader $in) : ImageLabel {
		$n = $in->name;
		$o = new ImageLabel();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'label': $o->label = $this->load_string_property($in); break;
						case 'singleSelection': $o->singleSelection = $this->load_bool_property($in); break;
						case 'defaultSelection': $o->defaultSelection = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ImageCardLabelIds(\XMLReader $in) : ImageCardLabelIds {
		$n = $in->name;
		$o = new ImageCardLabelIds();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'labelId': $o->labelId[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ImageData(\XMLReader $in) : ImageData {
		$n = $in->name;
		$o = new ImageData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'imageId': $o->imageId = $this->load_int_property($in); break;
						case 'imageHash': $o->imageHash = $this->load_string_property($in); break;
						case 'imageUrl': $o->imageUrl = $this->load_string_property($in); break;
						case 'originalName': $o->originalName = $this->load_string_property($in); break;
						case 'imageWidth': $o->imageWidth = $this->load_int_property($in); break;
						case 'imageHeight': $o->imageHeight = $this->load_int_property($in); break;
						case 'labels': $o->labels = ($this->load_ImageCardLabelIds($in))->labelId; break;
						case 'created': $o->created = $this->load_DateTime_property($in); break;
						case 'modified': $o->modified = $this->load_DateTime_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CardImageData(\XMLReader $in) : CardImageData {
		$n = $in->name;
		$o = new CardImageData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardNumber': $o->cardNumber = $this->load_int_property($in); break;
						case 'images': $o->images[] = $this->load_ImageData($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateImageCardLink(\XMLReader $in) : CreateImageCardLink {
		$n = $in->name;
		$o = new CreateImageCardLink();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardType': $o->cardType = $this->load_string_property($in); break;
						case 'cardNumbers': $o->cardNumbers[] = $this->load_int_property($in); break;
						case 'labels': $o->labels = ($this->load_ImageCardLabelIds($in))->labelId; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateImageRequest(\XMLReader $in) : CreateImageRequest {
		$n = $in->name;
		$o = new CreateImageRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'imageName': $o->imageName = $this->load_string_property($in); break;
						case 'mimeType': $o->mimeType = $this->load_string_property($in); break;
						case 'imageData': $o->imageData = $this->load_string_property($in); break;
						case 'cardLink': $o->cardLink = $this->load_CreateImageCardLink($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateImageFromUrlRequest(\XMLReader $in) : CreateImageFromUrlRequest {
		$n = $in->name;
		$o = new CreateImageFromUrlRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'imageName': $o->imageName = $this->load_string_property($in); break;
						case 'mimeType': $o->mimeType = $this->load_string_property($in); break;
						case 'imageUrl': $o->imageUrl = $this->load_string_property($in); break;
						case 'cardLink': $o->cardLink = $this->load_CreateImageCardLink($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCardImageLabelsRequest(\XMLReader $in) : GetCardImageLabelsRequest {
		$n = $in->name;
		$o = new GetCardImageLabelsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardType': $o->cardType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCardImagesRequest(\XMLReader $in) : GetCardImagesRequest {
		$n = $in->name;
		$o = new GetCardImagesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardType': $o->cardType = $this->load_string_property($in); break;
						case 'cardNumbers': $o->cardNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveImageData(\XMLReader $in) : SaveImageData {
		$n = $in->name;
		$o = new SaveImageData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'imageId': $o->imageId = $this->load_int_property($in); break;
						case 'labels': $o->labels = ($this->load_ImageCardLabelIds($in))->labelId; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveCardImageData(\XMLReader $in) : SaveCardImageData {
		$n = $in->name;
		$o = new SaveCardImageData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardNumber': $o->cardNumber = $this->load_int_property($in); break;
						case 'images': $o->images[] = $this->load_SaveImageData($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveCardImagesRequest(\XMLReader $in) : SaveCardImagesRequest {
		$n = $in->name;
		$o = new SaveCardImagesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardType': $o->cardType = $this->load_string_property($in); break;
						case 'cards': $o->cards[] = $this->load_SaveCardImageData($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetImagesRequest(\XMLReader $in) : GetImagesRequest {
		$n = $in->name;
		$o = new GetImagesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'imageIds': $o->imageIds[] = $this->load_int_property($in); break;
						case 'includeImageData': $o->includeImageData = $this->load_bool_property($in); break;
						case 'includeThumbData': $o->includeThumbData = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateImageResponse(\XMLReader $in) : CreateImageResponse {
		$n = $in->name;
		$o = new CreateImageResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'imageId': $o->imageId = $this->load_int_property($in); break;
						case 'imageHash': $o->imageHash = $this->load_string_property($in); break;
						case 'imageUrl': $o->imageUrl = $this->load_string_property($in); break;
						case 'errorMsg': $o->errorMsg = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCardImageLabelsResponse(\XMLReader $in) : GetCardImageLabelsResponse {
		$n = $in->name;
		$o = new GetCardImageLabelsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'labels': $o->labels[] = $this->load_ImageLabel($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCardImagesResponse(\XMLReader $in) : GetCardImagesResponse {
		$n = $in->name;
		$o = new GetCardImagesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'items': $o->items[] = $this->load_CardImageData($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveCardImagesResponse(\XMLReader $in) : SaveCardImagesResponse {
		$n = $in->name;
		$o = new SaveCardImagesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetImagesResponse(\XMLReader $in) : GetImagesResponse {
		$n = $in->name;
		$o = new GetImagesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'imageList': $o->imageList = ($this->load_ImageList($in))->image; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPrintLayoutsRequest(\XMLReader $in) : GetPrintLayoutsRequest {
		$n = $in->name;
		$o = new GetPrintLayoutsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'kind': $o->kind = $this->load_string_property($in); break;
						case 'fieldType': $o->fieldType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintLayoutView(\XMLReader $in) : PrintLayoutView {
		$n = $in->name;
		$o = new PrintLayoutView();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'kind': $o->kind = $this->load_string_property($in); break;
						case 'createdTimestamp': $o->createdTimestamp = $this->load_DateTime_property($in); break;
						case 'updatedTimestamp': $o->updatedTimestamp = $this->load_DateTime_property($in); break;
						case 'hasDigitalSignatureField': $o->hasDigitalSignatureField = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPrintLayoutAssignmentsRequest(\XMLReader $in) : GetPrintLayoutAssignmentsRequest {
		$n = $in->name;
		$o = new GetPrintLayoutAssignmentsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'kind': $o->kind = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'useOnlinePrinter': $o->useOnlinePrinter = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintLayoutAssignmentPrintLayoutView(\XMLReader $in) : PrintLayoutAssignmentPrintLayoutView {
		$n = $in->name;
		$o = new PrintLayoutAssignmentPrintLayoutView();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'kind': $o->kind = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintLayoutAssignment(\XMLReader $in) : PrintLayoutAssignment {
		$n = $in->name;
		$o = new PrintLayoutAssignment();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'workplace': $o->workplace = $this->load_WorkplaceIdentifier($in); break;
						case 'printLayout': $o->printLayout = $this->load_PrintLayoutAssignmentPrintLayoutView($in); break;
						case 'useOnlinePrinter': $o->useOnlinePrinter = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintParam(\XMLReader $in) : PrintParam {
		$n = $in->name;
		$o = new PrintParam();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'key': $o->key = $this->load_string_property($in); break;
						case 'value': $o->value = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintParams(\XMLReader $in) : PrintParams {
		$n = $in->name;
		$o = new PrintParams();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'uuid': $o->uuid = $this->load_string_property($in); break;
						case 'yearNumber': $o->yearNumber = $this->load_YearNumber($in); break;
						case 'params': $o->params[] = $this->load_PrintParam($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintInfo(\XMLReader $in) : PrintInfo {
		$n = $in->name;
		$o = new PrintInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'paramsList': $o->paramsList[] = $this->load_PrintParams($in); break;
						case 'globalParams': $o->globalParams = $this->load_PrintParams($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRenderedPrintLayoutRequest(\XMLReader $in) : GetRenderedPrintLayoutRequest {
		$n = $in->name;
		$o = new GetRenderedPrintLayoutRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'printLayoutUuid': $o->printLayoutUuid = $this->load_string_property($in); break;
						case 'renderType': $o->renderType = $this->load_string_property($in); break;
						case 'printInfo': $o->printInfo = $this->load_PrintInfo($in); break;
						case 'dpi': $o->dpi = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPrintLayoutMarkupRequest(\XMLReader $in) : GetPrintLayoutMarkupRequest {
		$n = $in->name;
		$o = new GetPrintLayoutMarkupRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'printLayoutUuid': $o->printLayoutUuid = $this->load_string_property($in); break;
						case 'markupType': $o->markupType = $this->load_string_property($in); break;
						case 'printInfo': $o->printInfo = $this->load_PrintInfo($in); break;
						case 'responseAsBase64': $o->responseAsBase64 = $this->load_bool_property($in); break;
						case 'normalWidthInCharacters': $o->normalWidthInCharacters = $this->load_int_property($in); break;
						case 'smallWidthInCharacters': $o->smallWidthInCharacters = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintPrintLayoutRequest(\XMLReader $in) : PrintPrintLayoutRequest {
		$n = $in->name;
		$o = new PrintPrintLayoutRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'kind': $o->kind = $this->load_string_property($in); break;
						case 'printInfo': $o->printInfo = $this->load_PrintInfo($in); break;
						case 'workplaceIdentifier': $o->workplaceIdentifier = $this->load_WorkplaceIdentifier($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPrintLayoutsResponse(\XMLReader $in) : GetPrintLayoutsResponse {
		$n = $in->name;
		$o = new GetPrintLayoutsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'printLayouts': $o->printLayouts[] = $this->load_PrintLayoutView($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPrintLayoutAssignmentsResponse(\XMLReader $in) : GetPrintLayoutAssignmentsResponse {
		$n = $in->name;
		$o = new GetPrintLayoutAssignmentsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'printLayoutAssignments': $o->printLayoutAssignments[] = $this->load_PrintLayoutAssignment($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRenderedPrintLayoutResponse(\XMLReader $in) : GetRenderedPrintLayoutResponse {
		$n = $in->name;
		$o = new GetRenderedPrintLayoutResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'renderedPrintLayouts': $o->renderedPrintLayouts[] = $this->load_string_property($in); break;
						case 'hasDigitalSignatureField': $o->hasDigitalSignatureField = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPrintLayoutMarkupResponse(\XMLReader $in) : GetPrintLayoutMarkupResponse {
		$n = $in->name;
		$o = new GetPrintLayoutMarkupResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'printLayoutMarkup': $o->printLayoutMarkup = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrintPrintLayoutResponse(\XMLReader $in) : PrintPrintLayoutResponse {
		$n = $in->name;
		$o = new PrintPrintLayoutResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherSettingsV1(\XMLReader $in) : VoucherSettingsV1 {
		$n = $in->name;
		$o = new VoucherSettingsV1();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'requestedVoucherId': $o->requestedVoucherId = $this->load_VoucherId($in); break;
						case 'voucherId': $o->voucherId = $this->load_VoucherId($in); break;
						case 'activationMoment': $o->activationMoment = $this->load_string_property($in); break;
						case 'activationDuration': $o->activationDuration = $this->load_int_property($in); break;
						case 'activationDurationPeriod': $o->activationDurationPeriod = $this->load_string_property($in); break;
						case 'maxRedeemCount': $o->maxRedeemCount = $this->load_int_property($in); break;
						case 'useRelationIssue': $o->useRelationIssue = $this->load_string_property($in); break;
						case 'useRelationRedeem': $o->useRelationRedeem = $this->load_string_property($in); break;
						case 'hasArticleChoice': $o->hasArticleChoice = $this->load_bool_property($in); break;
						case 'redeemOnNewArticle': $o->redeemOnNewArticle = $this->load_bool_property($in); break;
						case 'applyOnPreparationMethods': $o->applyOnPreparationMethods = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherSettingsV1List(\XMLReader $in) : VoucherSettingsV1List {
		$n = $in->name;
		$o = new VoucherSettingsV1List();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherSettingsV1': $o->voucherSettingsV1[] = $this->load_VoucherSettingsV1($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherRedeemLocations(\XMLReader $in) : VoucherRedeemLocations {
		$n = $in->name;
		$o = new VoucherRedeemLocations();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchGroupIds': $o->branchGroupIds[] = $this->load_int_property($in); break;
						case 'branchIds': $o->branchIds[] = $this->load_int_property($in); break;
						case 'workplaceIds': $o->workplaceIds[] = $this->load_WorkplaceIdentifier($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherLine(\XMLReader $in) : VoucherLine {
		$n = $in->name;
		$o = new VoucherLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'bpeId': $o->bpeId = $this->load_string_property($in); break;
						case 'quantity': $o->quantity = $this->load_BigDecimal_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_BigDecimal_property($in); break;
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'turnoverGroupId': $o->turnoverGroupId = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherLineList(\XMLReader $in) : VoucherLineList {
		$n = $in->name;
		$o = new VoucherLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherLine': $o->voucherLine[] = $this->load_VoucherLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Voucher(\XMLReader $in) : Voucher {
		$n = $in->name;
		$o = new Voucher();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'view': $o->view = $this->load_VoucherView($in); break;
						case 'settings': $o->settings = $this->load_VoucherSettingsV1($in); break;
						case 'redeemLocations': $o->redeemLocations = $this->load_VoucherRedeemLocations($in); break;
						case 'redeemCount': $o->redeemCount = ($this->load_VoucherRedeemCountList($in))->voucherRedeemCount; break;
						case 'lines': $o->lines = ($this->load_VoucherLineList($in))->voucherLine; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherCategory(\XMLReader $in) : VoucherCategory {
		$n = $in->name;
		$o = new VoucherCategory();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'createdTs': $o->createdTs = $this->load_DateTime_property($in); break;
						case 'deletedTs': $o->deletedTs = $this->load_DateTime_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherCategoryList(\XMLReader $in) : VoucherCategoryList {
		$n = $in->name;
		$o = new VoucherCategoryList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherCategory': $o->voucherCategory[] = $this->load_VoucherCategory($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherExternalScanCode(\XMLReader $in) : VoucherExternalScanCode {
		$n = $in->name;
		$o = new VoucherExternalScanCode();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'scanCode': $o->scanCode = $this->load_string_property($in); break;
						case 'voucherId': $o->voucherId = $this->load_string_property($in); break;
						case 'apiIdent': $o->apiIdent = $this->load_string_property($in); break;
						case 'createdTs': $o->createdTs = $this->load_DateTime_property($in); break;
						case 'usedTs': $o->usedTs = $this->load_DateTime_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherExternalScanCodeList(\XMLReader $in) : VoucherExternalScanCodeList {
		$n = $in->name;
		$o = new VoucherExternalScanCodeList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherScanCode': $o->voucherScanCode[] = $this->load_VoucherExternalScanCode($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_IssueVoucher(\XMLReader $in) : IssueVoucher {
		$n = $in->name;
		$o = new IssueVoucher();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherId': $o->voucherId = $this->load_VoucherId($in); break;
						case 'bookBpeId': $o->bookBpeId = $this->load_string_property($in); break;
						case 'scanCode': $o->scanCode = $this->load_string_property($in); break;
						case 'groupScanCode': $o->groupScanCode = $this->load_string_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'startTs': $o->startTs = $this->load_DateTime_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_IssueVoucherList(\XMLReader $in) : IssueVoucherList {
		$n = $in->name;
		$o = new IssueVoucherList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'issueVoucher': $o->issueVoucher[] = $this->load_IssueVoucher($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RedeemableVoucherIssuance(\XMLReader $in) : RedeemableVoucherIssuance {
		$n = $in->name;
		$o = new RedeemableVoucherIssuance();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherIssuance': $o->voucherIssuance = $this->load_VoucherIssuance($in); break;
						case 'remainingRedeemCount': $o->remainingRedeemCount = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RedeemableVoucherIssuanceList(\XMLReader $in) : RedeemableVoucherIssuanceList {
		$n = $in->name;
		$o = new RedeemableVoucherIssuanceList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'redeemableVoucherIssuance': $o->redeemableVoucherIssuance[] = $this->load_RedeemableVoucherIssuance($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CheckGiftcardPaymentRequest(\XMLReader $in) : CheckGiftcardPaymentRequest {
		$n = $in->name;
		$o = new CheckGiftcardPaymentRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardNumber': $o->cardNumber = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'amount': $amount = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->amount = isset($amount) ? BigDecimal::ofUnscaledValue($amount, 2) : null;
		return $o;
	}
	private function load_GiftcardInfo(\XMLReader $in) : GiftcardInfo {
		$n = $in->name;
		$o = new GiftcardInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'sequenceNumber': $o->sequenceNumber = $this->load_int_property($in); break;
						case 'isManualValue': $o->isManualValue = $this->load_bool_property($in); break;
						case 'isIssuable': $o->isIssuable = $this->load_bool_property($in); break;
						case 'isReloadable': $o->isReloadable = $this->load_bool_property($in); break;
						case 'isRedeemable': $o->isRedeemable = $this->load_bool_property($in); break;
						case 'isRestitutable': $o->isRestitutable = $this->load_bool_property($in); break;
						case 'isPersonalizable': $o->isPersonalizable = $this->load_bool_property($in); break;
						case 'turnoverGroupNumber': $o->turnoverGroupNumber = $this->load_int_property($in); break;
						case 'PaymentMethodId': $o->PaymentMethodId = $this->load_string_property($in); break;
						case 'validity': $o->validity = $this->load_int_property($in); break;
						case 'values': $o->values[] = $this->load_int_property($in); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Giftcard(\XMLReader $in) : Giftcard {
		$n = $in->name;
		$o = new Giftcard();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'cardNumber': $o->cardNumber = $this->load_string_property($in); break;
						case 'active': $o->active = $this->load_bool_property($in); break;
						case 'initialValue': $o->initialValue = $this->load_int_property($in); break;
						case 'isManualValue': $o->isManualValue = $this->load_bool_property($in); break;
						case 'currentBalance': $o->currentBalance = $this->load_int_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'validUntil': $o->validUntil = $this->load_Date_property($in); break;
						case 'TurnoverGroup': $o->TurnoverGroup = $this->load_int_property($in); break;
						case 'giftcardInfo': $o->giftcardInfo = $this->load_GiftcardInfo($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GiftcardPaymentLine(\XMLReader $in) : GiftcardPaymentLine {
		$n = $in->name;
		$o = new GiftcardPaymentLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'quantity': $o->quantity = $this->load_BigDecimal_property($in); break;
						case 'priceIncl': $o->priceIncl = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GiftcardPaymentLineList(\XMLReader $in) : GiftcardPaymentLineList {
		$n = $in->name;
		$o = new GiftcardPaymentLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'line': $o->line[] = $this->load_GiftcardPaymentLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RegisterGiftcardPaymentRequest(\XMLReader $in) : RegisterGiftcardPaymentRequest {
		$n = $in->name;
		$o = new RegisterGiftcardPaymentRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardNumber': $o->cardNumber = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'externalReference': $o->externalReference = $this->load_string_property($in); break;
						case 'lineList': $o->lineList = ($this->load_GiftcardPaymentLineList($in))->line; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RegisterGiftcardPaymentV2Request(\XMLReader $in) : RegisterGiftcardPaymentV2Request {
		$n = $in->name;
		$o = new RegisterGiftcardPaymentV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'cardNumber': $o->cardNumber = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'externalReference': $o->externalReference = $this->load_string_property($in); break;
						case 'lineList': $o->lineList = ($this->load_GiftcardPaymentLineList($in))->line; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateGiftcardRequest(\XMLReader $in) : CreateGiftcardRequest {
		$n = $in->name;
		$o = new CreateGiftcardRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardNumber': $o->cardNumber = $this->load_string_property($in); break;
						case 'cardTypeId': $o->cardTypeId = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'amount': $amount = $this->load_int_property($in); break;
						case 'externalReference': $o->externalReference = $this->load_string_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->amount = isset($amount) ? BigDecimal::ofUnscaledValue($amount, 2) : null;
		return $o;
	}
	private function load_ReloadGiftcardRequest(\XMLReader $in) : ReloadGiftcardRequest {
		$n = $in->name;
		$o = new ReloadGiftcardRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardNumber': $o->cardNumber = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'amount': $amount = $this->load_int_property($in); break;
						case 'externalReference': $o->externalReference = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->amount = isset($amount) ? BigDecimal::ofUnscaledValue($amount, 2) : null;
		return $o;
	}
	private function load_GetGiftcardTypesRequest(\XMLReader $in) : GetGiftcardTypesRequest {
		$n = $in->name;
		$o = new GetGiftcardTypesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GiftcardTypesList(\XMLReader $in) : GiftcardTypesList {
		$n = $in->name;
		$o = new GiftcardTypesList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'giftcardTypes': $o->giftcardTypes[] = $this->load_GiftcardType($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRelationGiftcardsRequest(\XMLReader $in) : GetRelationGiftcardsRequest {
		$n = $in->name;
		$o = new GetRelationGiftcardsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RelationGiftcard(\XMLReader $in) : RelationGiftcard {
		$n = $in->name;
		$o = new RelationGiftcard();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardId': $o->cardId = $this->load_string_property($in); break;
						case 'cardNumber': $o->cardNumber = $this->load_string_property($in); break;
						case 'active': $o->active = $this->load_bool_property($in); break;
						case 'cardTypeId': $o->cardTypeId = $this->load_string_property($in); break;
						case 'initialValue': $o->initialValue = $this->load_int_property($in); break;
						case 'isManualValue': $o->isManualValue = $this->load_bool_property($in); break;
						case 'currentBalance': $o->currentBalance = $this->load_int_property($in); break;
						case 'validUntil': $o->validUntil = $this->load_Date_property($in); break;
						case 'turnoverGroupNumber': $o->turnoverGroupNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RelationGiftcardList(\XMLReader $in) : RelationGiftcardList {
		$n = $in->name;
		$o = new RelationGiftcardList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationGiftcards': $o->relationGiftcards[] = $this->load_RelationGiftcard($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetGiftcardRequest(\XMLReader $in) : GetGiftcardRequest {
		$n = $in->name;
		$o = new GetGiftcardRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardNumber': $o->cardNumber = $this->load_string_property($in); break;
						case 'cardId': $o->cardId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetGiftcard(\XMLReader $in) : GetGiftcard {
		$n = $in->name;
		$o = new GetGiftcard();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardId': $o->cardId = $this->load_string_property($in); break;
						case 'cardNumber': $o->cardNumber = $this->load_string_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'active': $o->active = $this->load_bool_property($in); break;
						case 'cardTypeId': $o->cardTypeId = $this->load_string_property($in); break;
						case 'initialValue': $o->initialValue = $this->load_int_property($in); break;
						case 'isManualValue': $o->isManualValue = $this->load_bool_property($in); break;
						case 'currentBalance': $o->currentBalance = $this->load_int_property($in); break;
						case 'validUntil': $o->validUntil = $this->load_Date_property($in); break;
						case 'turnoverGroupNumber': $o->turnoverGroupNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetGiftcardHistoryRequest(\XMLReader $in) : GetGiftcardHistoryRequest {
		$n = $in->name;
		$o = new GetGiftcardHistoryRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardNumber': $o->cardNumber = $this->load_string_property($in); break;
						case 'cardId': $o->cardId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GiftcardHistory(\XMLReader $in) : GiftcardHistory {
		$n = $in->name;
		$o = new GiftcardHistory();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'bookingAmount': $bookingAmount = $this->load_int_property($in); break;
						case 'balanceAfterBooking': $o->balanceAfterBooking = $this->load_int_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'dateTime': $o->dateTime = $this->load_DateTime_property($in); break;
						case 'bookDate': $o->bookDate = $this->load_Date_property($in); break;
						case 'externalReference': $o->externalReference = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->bookingAmount = isset($bookingAmount) ? BigDecimal::ofUnscaledValue($bookingAmount, 2) : null;
		return $o;
	}
	private function load_GiftcardHistoryList(\XMLReader $in) : GiftcardHistoryList {
		$n = $in->name;
		$o = new GiftcardHistoryList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'giftcardHistory': $o->giftcardHistory[] = $this->load_GiftcardHistory($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetGiftcardsRequest(\XMLReader $in) : GetGiftcardsRequest {
		$n = $in->name;
		$o = new GetGiftcardsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardTypeId': $o->cardTypeId = $this->load_string_property($in); break;
						case 'onlyActive': $o->onlyActive = $this->load_bool_property($in); break;
						case 'relationFilter': $o->relationFilter = ($this->load_RequestRelationFilter($in))->relationNumbers; break;
						case 'syncMarkerFilter': $o->syncMarkerFilter = $this->load_RequestSyncMarkerFilter($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GiftcardList(\XMLReader $in) : GiftcardList {
		$n = $in->name;
		$o = new GiftcardList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'giftcard': $o->giftcard[] = $this->load_GetGiftcard($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveGiftcard(\XMLReader $in) : SaveGiftcard {
		$n = $in->name;
		$o = new SaveGiftcard();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cardId': $o->cardId = $this->load_string_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveGiftcardList(\XMLReader $in) : SaveGiftcardList {
		$n = $in->name;
		$o = new SaveGiftcardList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'giftcard': $o->giftcard[] = $this->load_SaveGiftcard($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveGiftcardsRequest(\XMLReader $in) : SaveGiftcardsRequest {
		$n = $in->name;
		$o = new SaveGiftcardsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'giftcardList': $o->giftcardList = ($this->load_SaveGiftcardList($in))->giftcard; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RestituteGiftcardsRequest(\XMLReader $in) : RestituteGiftcardsRequest {
		$n = $in->name;
		$o = new RestituteGiftcardsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'cardIds': $o->cardIds[] = $this->load_string_property($in); break;
						case 'workplaceIdentifier': $o->workplaceIdentifier = $this->load_WorkplaceIdentifier($in); break;
						case 'employeeIdentifier': $o->employeeIdentifier = $this->load_EmployeeIdentifier($in); break;
						case 'relationIdentifier': $o->relationIdentifier = $this->load_RelationIdentifier($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LinkGiftcardsToRelationRequest(\XMLReader $in) : LinkGiftcardsToRelationRequest {
		$n = $in->name;
		$o = new LinkGiftcardsToRelationRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'cardIds': $o->cardIds[] = $this->load_string_property($in); break;
						case 'workplaceIdentifier': $o->workplaceIdentifier = $this->load_WorkplaceIdentifier($in); break;
						case 'relationIdentifier': $o->relationIdentifier = $this->load_RelationIdentifier($in); break;
						case 'employeeIdentifier': $o->employeeIdentifier = $this->load_EmployeeIdentifier($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetVouchersRequest(\XMLReader $in) : GetVouchersRequest {
		$n = $in->name;
		$o = new GetVouchersRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherIdFilter': $o->voucherIdFilter = ($this->load_VoucherIdList($in))->voucherId; break;
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'apiIdent': $o->apiIdent = $this->load_string_property($in); break;
						case 'withBookArticleNumber': $o->withBookArticleNumber = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetVoucherRequest(\XMLReader $in) : GetVoucherRequest {
		$n = $in->name;
		$o = new GetVoucherRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherId': $o->voucherId = $this->load_VoucherId($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_VoucherCategoryIdList(\XMLReader $in) : VoucherCategoryIdList {
		$n = $in->name;
		$o = new VoucherCategoryIdList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherCategoryId': $o->voucherCategoryId[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetVoucherCategoriesRequest(\XMLReader $in) : GetVoucherCategoriesRequest {
		$n = $in->name;
		$o = new GetVoucherCategoriesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherCategoryIdFilter': $o->voucherCategoryIdFilter = ($this->load_VoucherCategoryIdList($in))->voucherCategoryId; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetVoucherIssuancesRequest(\XMLReader $in) : GetVoucherIssuancesRequest {
		$n = $in->name;
		$o = new GetVoucherIssuancesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'fromDate': $o->fromDate = $this->load_Date_property($in); break;
						case 'throughDate': $o->throughDate = $this->load_Date_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetVoucherSettingsRequest(\XMLReader $in) : GetVoucherSettingsRequest {
		$n = $in->name;
		$o = new GetVoucherSettingsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherIds': $o->voucherIds = ($this->load_VoucherIdList($in))->voucherId; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_IssueVouchersRequest(\XMLReader $in) : IssueVouchersRequest {
		$n = $in->name;
		$o = new IssueVouchersRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'issueVouchers': $o->issueVouchers = ($this->load_IssueVoucherList($in))->issueVoucher; break;
						case 'financialWorkplaceIdentifier': $o->financialWorkplaceIdentifier = $this->load_WorkplaceIdentifier($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_IssueVoucherExternalScanCodeSet(\XMLReader $in) : IssueVoucherExternalScanCodeSet {
		$n = $in->name;
		$o = new IssueVoucherExternalScanCodeSet();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'scanCode': $o->scanCode[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_IssueVoucherExternalScanCodesRequest(\XMLReader $in) : IssueVoucherExternalScanCodesRequest {
		$n = $in->name;
		$o = new IssueVoucherExternalScanCodesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'voucherId': $o->voucherId = $this->load_string_property($in); break;
						case 'scanCodes': $o->scanCodes = ($this->load_IssueVoucherExternalScanCodeSet($in))->scanCode; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetVoucherExternalScanCodesRequest(\XMLReader $in) : GetVoucherExternalScanCodesRequest {
		$n = $in->name;
		$o = new GetVoucherExternalScanCodesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherId': $o->voucherId = $this->load_string_property($in); break;
						case 'fromCreatedTs': $o->fromCreatedTs = $this->load_DateTime_property($in); break;
						case 'throughCreatedTs': $o->throughCreatedTs = $this->load_DateTime_property($in); break;
						case 'fromUsedTs': $o->fromUsedTs = $this->load_DateTime_property($in); break;
						case 'throughUsedTs': $o->throughUsedTs = $this->load_DateTime_property($in); break;
						case 'used': $o->used = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRedeemableVoucherIssuancesRequest(\XMLReader $in) : GetRedeemableVoucherIssuancesRequest {
		$n = $in->name;
		$o = new GetRedeemableVoucherIssuancesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherType': $o->voucherType = $this->load_string_property($in); break;
						case 'redeemDate': $o->redeemDate = $this->load_Date_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RedeemVoucherIssuanceRequest(\XMLReader $in) : RedeemVoucherIssuanceRequest {
		$n = $in->name;
		$o = new RedeemVoucherIssuanceRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherScanCode': $o->voucherScanCode = $this->load_string_property($in); break;
						case 'voucherIssuanceId': $o->voucherIssuanceId = $this->load_string_property($in); break;
						case 'redeemCount': $o->redeemCount = $this->load_int_property($in); break;
						case 'workplaceIdentifier': $o->workplaceIdentifier = $this->load_WorkplaceIdentifier($in); break;
						case 'dryRun': $o->dryRun = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CheckGiftcardPaymentResponse(\XMLReader $in) : CheckGiftcardPaymentResponse {
		$n = $in->name;
		$o = new CheckGiftcardPaymentResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'giftcard': $o->giftcard = $this->load_Giftcard($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RegisterGiftcardPaymentResponse(\XMLReader $in) : RegisterGiftcardPaymentResponse {
		$n = $in->name;
		$o = new RegisterGiftcardPaymentResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'newBalance': $o->newBalance = $this->load_int_property($in); break;
						case 'receiptId': $o->receiptId = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RegisterGiftcardPaymentV2Response(\XMLReader $in) : RegisterGiftcardPaymentV2Response {
		$n = $in->name;
		$o = new RegisterGiftcardPaymentV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'newBalance': $o->newBalance = $this->load_BigDecimal_property($in); break;
						case 'receiptId': $o->receiptId = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateGiftcardResponse(\XMLReader $in) : CreateGiftcardResponse {
		$n = $in->name;
		$o = new CreateGiftcardResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'cardId': $o->cardId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReloadGiftcardResponse(\XMLReader $in) : ReloadGiftcardResponse {
		$n = $in->name;
		$o = new ReloadGiftcardResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'cardId': $o->cardId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetGiftcardTypesResponse(\XMLReader $in) : GetGiftcardTypesResponse {
		$n = $in->name;
		$o = new GetGiftcardTypesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'giftcardTypesList': $o->giftcardTypesList = ($this->load_GiftcardTypesList($in))->giftcardTypes; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRelationGiftcardsResponse(\XMLReader $in) : GetRelationGiftcardsResponse {
		$n = $in->name;
		$o = new GetRelationGiftcardsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationGiftcardList': $o->relationGiftcardList = ($this->load_RelationGiftcardList($in))->relationGiftcards; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetGiftcardResponse(\XMLReader $in) : GetGiftcardResponse {
		$n = $in->name;
		$o = new GetGiftcardResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'giftcard': $o->giftcard = $this->load_GetGiftcard($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetGiftcardHistoryResponse(\XMLReader $in) : GetGiftcardHistoryResponse {
		$n = $in->name;
		$o = new GetGiftcardHistoryResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'giftcardHistoryList': $o->giftcardHistoryList = ($this->load_GiftcardHistoryList($in))->giftcardHistory; break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetGiftcardsResponse(\XMLReader $in) : GetGiftcardsResponse {
		$n = $in->name;
		$o = new GetGiftcardsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'giftcardList': $o->giftcardList = ($this->load_GiftcardList($in))->giftcard; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveGiftcardsResponse(\XMLReader $in) : SaveGiftcardsResponse {
		$n = $in->name;
		$o = new SaveGiftcardsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RestituteGiftcardsResponse(\XMLReader $in) : RestituteGiftcardsResponse {
		$n = $in->name;
		$o = new RestituteGiftcardsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'packingSlipId': $o->packingSlipId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_LinkGiftcardsToRelationResponse(\XMLReader $in) : LinkGiftcardsToRelationResponse {
		$n = $in->name;
		$o = new LinkGiftcardsToRelationResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetVouchersResponse(\XMLReader $in) : GetVouchersResponse {
		$n = $in->name;
		$o = new GetVouchersResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherViews': $o->voucherViews = ($this->load_VoucherViewList($in))->voucherView; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetVoucherResponse(\XMLReader $in) : GetVoucherResponse {
		$n = $in->name;
		$o = new GetVoucherResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucher': $o->voucher = $this->load_Voucher($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetVoucherCategoriesResponse(\XMLReader $in) : GetVoucherCategoriesResponse {
		$n = $in->name;
		$o = new GetVoucherCategoriesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherCategories': $o->voucherCategories = ($this->load_VoucherCategoryList($in))->voucherCategory; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetVoucherIssuancesResponse(\XMLReader $in) : GetVoucherIssuancesResponse {
		$n = $in->name;
		$o = new GetVoucherIssuancesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherIssuances': $o->voucherIssuances = ($this->load_VoucherIssuanceList($in))->voucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetVoucherSettingsResponse(\XMLReader $in) : GetVoucherSettingsResponse {
		$n = $in->name;
		$o = new GetVoucherSettingsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherSettingsV1': $o->voucherSettingsV1 = ($this->load_VoucherSettingsV1List($in))->voucherSettingsV1; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_IssueVouchersResponse(\XMLReader $in) : IssueVouchersResponse {
		$n = $in->name;
		$o = new IssueVouchersResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'voucherIssuances': $o->voucherIssuances = ($this->load_VoucherIssuanceList($in))->voucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_IssueVoucherExternalScanCodesResponse(\XMLReader $in) : IssueVoucherExternalScanCodesResponse {
		$n = $in->name;
		$o = new IssueVoucherExternalScanCodesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetVoucherExternalScanCodesResponse(\XMLReader $in) : GetVoucherExternalScanCodesResponse {
		$n = $in->name;
		$o = new GetVoucherExternalScanCodesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'scanCodes': $o->scanCodes = ($this->load_VoucherExternalScanCodeList($in))->voucherScanCode; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetRedeemableVoucherIssuancesResponse(\XMLReader $in) : GetRedeemableVoucherIssuancesResponse {
		$n = $in->name;
		$o = new GetRedeemableVoucherIssuancesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'redeemableVoucherIssuances': $o->redeemableVoucherIssuances = ($this->load_RedeemableVoucherIssuanceList($in))->redeemableVoucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RedeemVoucherIssuanceResponse(\XMLReader $in) : RedeemVoucherIssuanceResponse {
		$n = $in->name;
		$o = new RedeemVoucherIssuanceResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherIssuanceRedeems': $o->voucherIssuanceRedeems = ($this->load_VoucherIssuanceRedeemList($in))->voucherIssuanceRedeem; break;
						case 'voucherCanApplyResult': $o->voucherCanApplyResult = $this->load_VoucherCanApplyResult($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportDateFilter(\XMLReader $in) : ReportDateFilter {
		$n = $in->name;
		$o = new ReportDateFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fromFinancialDate': $o->fromFinancialDate = $this->load_Date_property($in); break;
						case 'throughFinancialDate': $o->throughFinancialDate = $this->load_Date_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportBranchFilter(\XMLReader $in) : ReportBranchFilter {
		$n = $in->name;
		$o = new ReportBranchFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportWorkplaceFilter(\XMLReader $in) : ReportWorkplaceFilter {
		$n = $in->name;
		$o = new ReportWorkplaceFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'workplaceNumbers': $o->workplaceNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportEmployeeFilter(\XMLReader $in) : ReportEmployeeFilter {
		$n = $in->name;
		$o = new ReportEmployeeFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumbers': $o->employeeNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverGroupFilter(\XMLReader $in) : ReportTurnoverGroupFilter {
		$n = $in->name;
		$o = new ReportTurnoverGroupFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnoverGroups': $o->turnoverGroups[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverGroupTypeFilter(\XMLReader $in) : ReportTurnoverGroupTypeFilter {
		$n = $in->name;
		$o = new ReportTurnoverGroupTypeFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnoverGroupTypes': $o->turnoverGroupTypes[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportArticleFilter(\XMLReader $in) : ReportArticleFilter {
		$n = $in->name;
		$o = new ReportArticleFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportActivityFilter(\XMLReader $in) : ReportActivityFilter {
		$n = $in->name;
		$o = new ReportActivityFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'activityNumbers': $o->activityNumbers[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportRelationFilter(\XMLReader $in) : ReportRelationFilter {
		$n = $in->name;
		$o = new ReportRelationFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumbers': $o->relationNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverByBranchRequest(\XMLReader $in) : ReportTurnoverByBranchRequest {
		$n = $in->name;
		$o = new ReportTurnoverByBranchRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dateFilter': $o->dateFilter = $this->load_ReportDateFilter($in); break;
						case 'branchFilter': $o->branchFilter = ($this->load_ReportBranchFilter($in))->branchNumbers; break;
						case 'perHour': $o->perHour = $this->load_bool_property($in); break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverByBranch(\XMLReader $in) : ReportTurnoverByBranch {
		$n = $in->name;
		$o = new ReportTurnoverByBranch();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'dateTime': $o->dateTime = $this->load_DateTime_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'count': $o->count = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'branchName': $o->branchName = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_ReportTurnoverByBranchList(\XMLReader $in) : ReportTurnoverByBranchList {
		$n = $in->name;
		$o = new ReportTurnoverByBranchList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnover': $o->turnover[] = $this->load_ReportTurnoverByBranch($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverByEmployeeRequest(\XMLReader $in) : ReportTurnoverByEmployeeRequest {
		$n = $in->name;
		$o = new ReportTurnoverByEmployeeRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dateFilter': $o->dateFilter = $this->load_ReportDateFilter($in); break;
						case 'branchFilter': $o->branchFilter = ($this->load_ReportBranchFilter($in))->branchNumbers; break;
						case 'employeeFilter': $o->employeeFilter = ($this->load_ReportEmployeeFilter($in))->employeeNumbers; break;
						case 'perHour': $o->perHour = $this->load_bool_property($in); break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverByEmployee(\XMLReader $in) : ReportTurnoverByEmployee {
		$n = $in->name;
		$o = new ReportTurnoverByEmployee();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'dateTime': $o->dateTime = $this->load_DateTime_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'count': $o->count = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeUsername': $o->employeeUsername = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_ReportTurnoverByEmployeeList(\XMLReader $in) : ReportTurnoverByEmployeeList {
		$n = $in->name;
		$o = new ReportTurnoverByEmployeeList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnover': $o->turnover[] = $this->load_ReportTurnoverByEmployee($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverByActivityRequest(\XMLReader $in) : ReportTurnoverByActivityRequest {
		$n = $in->name;
		$o = new ReportTurnoverByActivityRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dateFilter': $o->dateFilter = $this->load_ReportDateFilter($in); break;
						case 'branchFilter': $o->branchFilter = ($this->load_ReportBranchFilter($in))->branchNumbers; break;
						case 'activityFilter': $o->activityFilter = ($this->load_ReportActivityFilter($in))->activityNumbers; break;
						case 'perHour': $o->perHour = $this->load_bool_property($in); break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverByActivity(\XMLReader $in) : ReportTurnoverByActivity {
		$n = $in->name;
		$o = new ReportTurnoverByActivity();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'dateTime': $o->dateTime = $this->load_DateTime_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'count': $o->count = $this->load_string_property($in); break;
						case 'activityNumber': $o->activityNumber = $this->load_string_property($in); break;
						case 'activityDescription': $o->activityDescription = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_ReportTurnoverByActivityList(\XMLReader $in) : ReportTurnoverByActivityList {
		$n = $in->name;
		$o = new ReportTurnoverByActivityList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnover': $o->turnover[] = $this->load_ReportTurnoverByActivity($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverByTurnoverGroupRequest(\XMLReader $in) : ReportTurnoverByTurnoverGroupRequest {
		$n = $in->name;
		$o = new ReportTurnoverByTurnoverGroupRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dateFilter': $o->dateFilter = $this->load_ReportDateFilter($in); break;
						case 'branchFilter': $o->branchFilter = ($this->load_ReportBranchFilter($in))->branchNumbers; break;
						case 'turnoverGroupFilter': $o->turnoverGroupFilter = ($this->load_ReportTurnoverGroupFilter($in))->turnoverGroups; break;
						case 'perHour': $o->perHour = $this->load_bool_property($in); break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverByTurnoverGroup(\XMLReader $in) : ReportTurnoverByTurnoverGroup {
		$n = $in->name;
		$o = new ReportTurnoverByTurnoverGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'dateTime': $o->dateTime = $this->load_DateTime_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'count': $o->count = $this->load_string_property($in); break;
						case 'turnoverGroupNumber': $o->turnoverGroupNumber = $this->load_int_property($in); break;
						case 'turnoverGroupName': $o->turnoverGroupName = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_ReportTurnoverByTurnoverGroupList(\XMLReader $in) : ReportTurnoverByTurnoverGroupList {
		$n = $in->name;
		$o = new ReportTurnoverByTurnoverGroupList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnover': $o->turnover[] = $this->load_ReportTurnoverByTurnoverGroup($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverByArticleRequest(\XMLReader $in) : ReportTurnoverByArticleRequest {
		$n = $in->name;
		$o = new ReportTurnoverByArticleRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dateFilter': $o->dateFilter = $this->load_ReportDateFilter($in); break;
						case 'branchFilter': $o->branchFilter = ($this->load_ReportBranchFilter($in))->branchNumbers; break;
						case 'turnoverGroupFilter': $o->turnoverGroupFilter = ($this->load_ReportTurnoverGroupFilter($in))->turnoverGroups; break;
						case 'articleFilter': $o->articleFilter = ($this->load_ReportArticleFilter($in))->articleNumbers; break;
						case 'perHour': $o->perHour = $this->load_bool_property($in); break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverByArticle(\XMLReader $in) : ReportTurnoverByArticle {
		$n = $in->name;
		$o = new ReportTurnoverByArticle();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'dateTime': $o->dateTime = $this->load_DateTime_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'count': $o->count = $this->load_string_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'bpeCount': $o->bpeCount = $this->load_string_property($in); break;
						case 'articleDescription': $o->articleDescription = $this->load_string_property($in); break;
						case 'articlePurchasePrice': $articlePurchasePrice = $this->load_int_property($in); break;
						case 'turnoverGroupNumber': $o->turnoverGroupNumber = $this->load_int_property($in); break;
						case 'turnoverGroupName': $o->turnoverGroupName = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		$o->articlePurchasePrice = isset($articlePurchasePrice) ? BigDecimal::ofUnscaledValue($articlePurchasePrice, 2) : null;
		return $o;
	}
	private function load_ReportTurnoverByArticleList(\XMLReader $in) : ReportTurnoverByArticleList {
		$n = $in->name;
		$o = new ReportTurnoverByArticleList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnover': $o->turnover[] = $this->load_ReportTurnoverByArticle($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportHoursByEmployeeRequest(\XMLReader $in) : ReportHoursByEmployeeRequest {
		$n = $in->name;
		$o = new ReportHoursByEmployeeRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dateFilter': $o->dateFilter = $this->load_ReportDateFilter($in); break;
						case 'branchFilter': $o->branchFilter = ($this->load_ReportBranchFilter($in))->branchNumbers; break;
						case 'employeeFilter': $o->employeeFilter = ($this->load_ReportEmployeeFilter($in))->employeeNumbers; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportHoursByEmployee(\XMLReader $in) : ReportHoursByEmployee {
		$n = $in->name;
		$o = new ReportHoursByEmployee();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'totalMinutes': $o->totalMinutes = $this->load_int_property($in); break;
						case 'pauzeMinutes': $o->pauzeMinutes = $this->load_int_property($in); break;
						case 'hourlyRate': $hourlyRate = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'references': $o->references[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->hourlyRate = isset($hourlyRate) ? BigDecimal::ofUnscaledValue($hourlyRate, 2) : null;
		return $o;
	}
	private function load_ReportHoursByEmployeeList(\XMLReader $in) : ReportHoursByEmployeeList {
		$n = $in->name;
		$o = new ReportHoursByEmployeeList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'hours': $o->hours[] = $this->load_ReportHoursByEmployee($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportPaymentMethodsRequest(\XMLReader $in) : ReportPaymentMethodsRequest {
		$n = $in->name;
		$o = new ReportPaymentMethodsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dateFilter': $o->dateFilter = $this->load_ReportDateFilter($in); break;
						case 'branchFilter': $o->branchFilter = ($this->load_ReportBranchFilter($in))->branchNumbers; break;
						case 'perHour': $o->perHour = $this->load_bool_property($in); break;
						case 'excludePayments': $o->excludePayments = $this->load_bool_property($in); break;
						case 'excludePrepayments': $o->excludePrepayments = $this->load_bool_property($in); break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportPaymentMethods(\XMLReader $in) : ReportPaymentMethods {
		$n = $in->name;
		$o = new ReportPaymentMethods();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'dateTime': $o->dateTime = $this->load_DateTime_property($in); break;
						case 'totalAmount': $totalAmount = $this->load_int_property($in); break;
						case 'count': $o->count = $this->load_string_property($in); break;
						case 'paymentMethod': $o->paymentMethod = $this->load_string_property($in); break;
						case 'isPrepayment': $o->isPrepayment = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalAmount = isset($totalAmount) ? BigDecimal::ofUnscaledValue($totalAmount, 2) : null;
		return $o;
	}
	private function load_ReportPaymentMethodsList(\XMLReader $in) : ReportPaymentMethodsList {
		$n = $in->name;
		$o = new ReportPaymentMethodsList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'paymentMethods': $o->paymentMethods[] = $this->load_ReportPaymentMethods($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTablesRequest(\XMLReader $in) : ReportTablesRequest {
		$n = $in->name;
		$o = new ReportTablesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchFilter': $o->branchFilter = ($this->load_ReportBranchFilter($in))->branchNumbers; break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTables(\XMLReader $in) : ReportTables {
		$n = $in->name;
		$o = new ReportTables();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'tableSubNumber': $o->tableSubNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
						case 'tableName': $o->tableName = $this->load_string_property($in); break;
						case 'openInclAmount': $openInclAmount = $this->load_int_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->openInclAmount = isset($openInclAmount) ? BigDecimal::ofUnscaledValue($openInclAmount, 2) : null;
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_ReportTablesList(\XMLReader $in) : ReportTablesList {
		$n = $in->name;
		$o = new ReportTablesList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'tables': $o->tables[] = $this->load_ReportTables($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportCancellationsRequest(\XMLReader $in) : ReportCancellationsRequest {
		$n = $in->name;
		$o = new ReportCancellationsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dateFilter': $o->dateFilter = $this->load_ReportDateFilter($in); break;
						case 'branchFilter': $o->branchFilter = ($this->load_ReportBranchFilter($in))->branchNumbers; break;
						case 'employeeFilter': $o->employeeFilter = ($this->load_ReportEmployeeFilter($in))->employeeNumbers; break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportCancellations(\XMLReader $in) : ReportCancellations {
		$n = $in->name;
		$o = new ReportCancellations();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'cancellationCount': $o->cancellationCount = $this->load_int_property($in); break;
						case 'articleCount': $o->articleCount = $this->load_string_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'branchName': $o->branchName = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeUsername': $o->employeeUsername = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_ReportCancellationsList(\XMLReader $in) : ReportCancellationsList {
		$n = $in->name;
		$o = new ReportCancellationsList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cancellations': $o->cancellations[] = $this->load_ReportCancellations($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportBPERequest(\XMLReader $in) : ReportBPERequest {
		$n = $in->name;
		$o = new ReportBPERequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dateFilter': $o->dateFilter = $this->load_ReportDateFilter($in); break;
						case 'branchFilter': $o->branchFilter = ($this->load_ReportBranchFilter($in))->branchNumbers; break;
						case 'articleFilter': $o->articleFilter = ($this->load_ReportArticleFilter($in))->articleNumbers; break;
						case 'turnoverGroupFilter': $o->turnoverGroupFilter = ($this->load_ReportTurnoverGroupFilter($in))->turnoverGroups; break;
						case 'perHour': $o->perHour = $this->load_bool_property($in); break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportBPE(\XMLReader $in) : ReportBPE {
		$n = $in->name;
		$o = new ReportBPE();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'dateTime': $o->dateTime = $this->load_DateTime_property($in); break;
						case 'bpeType': $o->bpeType = $this->load_string_property($in); break;
						case 'bpeCount': $o->bpeCount = $this->load_string_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'articleDescription': $o->articleDescription = $this->load_string_property($in); break;
						case 'articlePurchasePrice': $articlePurchasePrice = $this->load_int_property($in); break;
						case 'totalPurchasePrice': $totalPurchasePrice = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'taxPercentage': $o->taxPercentage = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'branchName': $o->branchName = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeUsername': $o->employeeUsername = $this->load_string_property($in); break;
						case 'turnoverGroupNumber': $o->turnoverGroupNumber = $this->load_int_property($in); break;
						case 'turnoverGroupName': $o->turnoverGroupName = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->articlePurchasePrice = isset($articlePurchasePrice) ? BigDecimal::ofUnscaledValue($articlePurchasePrice, 2) : null;
		$o->totalPurchasePrice = isset($totalPurchasePrice) ? BigDecimal::ofUnscaledValue($totalPurchasePrice, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		return $o;
	}
	private function load_ReportBPEList(\XMLReader $in) : ReportBPEList {
		$n = $in->name;
		$o = new ReportBPEList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'bpes': $o->bpes[] = $this->load_ReportBPE($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportBranchPerformanceRequest(\XMLReader $in) : ReportBranchPerformanceRequest {
		$n = $in->name;
		$o = new ReportBranchPerformanceRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dateFilter': $o->dateFilter = $this->load_ReportDateFilter($in); break;
						case 'branchFilter': $o->branchFilter = ($this->load_ReportBranchFilter($in))->branchNumbers; break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportBranchPerformance(\XMLReader $in) : ReportBranchPerformance {
		$n = $in->name;
		$o = new ReportBranchPerformance();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'branchName': $o->branchName = $this->load_string_property($in); break;
						case 'count': $o->count = $this->load_string_property($in); break;
						case 'totalPurchasePrice': $totalPurchasePrice = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalPurchasePrice = isset($totalPurchasePrice) ? BigDecimal::ofUnscaledValue($totalPurchasePrice, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		return $o;
	}
	private function load_ReportBranchPerformanceList(\XMLReader $in) : ReportBranchPerformanceList {
		$n = $in->name;
		$o = new ReportBranchPerformanceList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchPerformance': $o->branchPerformance[] = $this->load_ReportBranchPerformance($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportAverageSpendingRequest(\XMLReader $in) : ReportAverageSpendingRequest {
		$n = $in->name;
		$o = new ReportAverageSpendingRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dateFilter': $o->dateFilter = $this->load_ReportDateFilter($in); break;
						case 'branchFilter': $o->branchFilter = ($this->load_ReportBranchFilter($in))->branchNumbers; break;
						case 'employeeFilter': $o->employeeFilter = ($this->load_ReportEmployeeFilter($in))->employeeNumbers; break;
						case 'source': $o->source = $this->load_string_property($in); break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportAverageSpending(\XMLReader $in) : ReportAverageSpending {
		$n = $in->name;
		$o = new ReportAverageSpending();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'numberOfReceipts': $o->numberOfReceipts = $this->load_int_property($in); break;
						case 'numberOfGuests': $o->numberOfGuests = $this->load_int_property($in); break;
						case 'averageInclSpendingPerReceipt': $o->averageInclSpendingPerReceipt = $this->load_int_property($in); break;
						case 'averageExclSpendingPerReceipt': $o->averageExclSpendingPerReceipt = $this->load_int_property($in); break;
						case 'averageInclSpendingPerGuest': $o->averageInclSpendingPerGuest = $this->load_int_property($in); break;
						case 'averageExclSpendingPerGuest': $o->averageExclSpendingPerGuest = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_ReportAverageSpendingList(\XMLReader $in) : ReportAverageSpendingList {
		$n = $in->name;
		$o = new ReportAverageSpendingList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'averageSpending': $o->averageSpending[] = $this->load_ReportAverageSpending($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverRequest(\XMLReader $in) : ReportTurnoverRequest {
		$n = $in->name;
		$o = new ReportTurnoverRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dateFilter': $o->dateFilter = $this->load_ReportDateFilter($in); break;
						case 'branchFilter': $o->branchFilter = ($this->load_ReportBranchFilter($in))->branchNumbers; break;
						case 'turnoverGroupFilter': $o->turnoverGroupFilter = ($this->load_ReportTurnoverGroupFilter($in))->turnoverGroups; break;
						case 'perHour': $o->perHour = $this->load_bool_property($in); break;
						case 'turnoverGroupTypeFilter': $o->turnoverGroupTypeFilter = ($this->load_ReportTurnoverGroupTypeFilter($in))->turnoverGroupTypes; break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnover(\XMLReader $in) : ReportTurnover {
		$n = $in->name;
		$o = new ReportTurnover();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'dateTime': $o->dateTime = $this->load_DateTime_property($in); break;
						case 'source': $o->source = $this->load_string_property($in); break;
						case 'count': $o->count = $this->load_string_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'creditedInclAmount': $creditedInclAmount = $this->load_int_property($in); break;
						case 'creditedExclAmount': $creditedExclAmount = $this->load_int_property($in); break;
						case 'creditedCount': $o->creditedCount = $this->load_string_property($in); break;
						case 'turnoverGroupType': $o->turnoverGroupType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		$o->creditedInclAmount = isset($creditedInclAmount) ? BigDecimal::ofUnscaledValue($creditedInclAmount, 2) : null;
		$o->creditedExclAmount = isset($creditedExclAmount) ? BigDecimal::ofUnscaledValue($creditedExclAmount, 2) : null;
		return $o;
	}
	private function load_ReportTurnoverList(\XMLReader $in) : ReportTurnoverList {
		$n = $in->name;
		$o = new ReportTurnoverList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnover': $o->turnover[] = $this->load_ReportTurnover($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportPaymentMethodDetailsRequest(\XMLReader $in) : ReportPaymentMethodDetailsRequest {
		$n = $in->name;
		$o = new ReportPaymentMethodDetailsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dateFilter': $o->dateFilter = $this->load_ReportDateFilter($in); break;
						case 'paymentMethod': $o->paymentMethod = $this->load_string_property($in); break;
						case 'branchFilter': $o->branchFilter = ($this->load_ReportBranchFilter($in))->branchNumbers; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportPaymentSourceDetails(\XMLReader $in) : ReportPaymentSourceDetails {
		$n = $in->name;
		$o = new ReportPaymentSourceDetails();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'paymentSourceType': $o->paymentSourceType = $this->load_string_property($in); break;
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_DateTime_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_ReportPaymentSource(\XMLReader $in) : ReportPaymentSource {
		$n = $in->name;
		$o = new ReportPaymentSource();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'payment': $o->payment = $this->load_Payment($in); break;
						case 'paymentSourceDetails': $o->paymentSourceDetails = $this->load_ReportPaymentSourceDetails($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportPrintableFinancialTotalsRequest(\XMLReader $in) : ReportPrintableFinancialTotalsRequest {
		$n = $in->name;
		$o = new ReportPrintableFinancialTotalsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dateFilter': $o->dateFilter = $this->load_ReportDateFilter($in); break;
						case 'branchFilter': $o->branchFilter = ($this->load_ReportBranchFilter($in))->branchNumbers; break;
						case 'workplaceFilter': $o->workplaceFilter = ($this->load_ReportWorkplaceFilter($in))->workplaceNumbers; break;
						case 'employeeFilter': $o->employeeFilter = ($this->load_ReportEmployeeFilter($in))->employeeNumbers; break;
						case 'activityFilter': $o->activityFilter = ($this->load_ReportActivityFilter($in))->activityNumbers; break;
						case 'options': $o->options[] = $this->load_string_property($in); break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportPrintableFinancialTotalsLine(\XMLReader $in) : ReportPrintableFinancialTotalsLine {
		$n = $in->name;
		$o = new ReportPrintableFinancialTotalsLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'isHeader': $o->isHeader = $this->load_bool_property($in); break;
						case 'isDivider': $o->isDivider = $this->load_bool_property($in); break;
						case 'printBold': $o->printBold = $this->load_bool_property($in); break;
						case 'column1': $o->column1 = $this->load_string_property($in); break;
						case 'column2': $o->column2 = $this->load_string_property($in); break;
						case 'column3': $o->column3 = $this->load_string_property($in); break;
						case 'column4': $o->column4 = $this->load_string_property($in); break;
						case 'column5': $o->column5 = $this->load_string_property($in); break;
						case 'column6': $o->column6 = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportPrintableFinancialTotalsList(\XMLReader $in) : ReportPrintableFinancialTotalsList {
		$n = $in->name;
		$o = new ReportPrintableFinancialTotalsList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'printableFinancialTotals': $o->printableFinancialTotals[] = $this->load_ReportPrintableFinancialTotalsLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportArticlePerformanceRequest(\XMLReader $in) : ReportArticlePerformanceRequest {
		$n = $in->name;
		$o = new ReportArticlePerformanceRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dateFilter': $o->dateFilter = $this->load_ReportDateFilter($in); break;
						case 'branchFilter': $o->branchFilter = ($this->load_ReportBranchFilter($in))->branchNumbers; break;
						case 'workplaceFilter': $o->workplaceFilter = ($this->load_ReportWorkplaceFilter($in))->workplaceNumbers; break;
						case 'employeeFilter': $o->employeeFilter = ($this->load_ReportEmployeeFilter($in))->employeeNumbers; break;
						case 'relationFilter': $o->relationFilter = ($this->load_ReportRelationFilter($in))->relationNumbers; break;
						case 'articleFilter': $o->articleFilter = ($this->load_ReportArticleFilter($in))->articleNumbers; break;
						case 'activityFilter': $o->activityFilter = ($this->load_ReportActivityFilter($in))->activityNumbers; break;
						case 'turnoverGroupTypeFilter': $o->turnoverGroupTypeFilter = ($this->load_ReportTurnoverGroupTypeFilter($in))->turnoverGroupTypes; break;
						case 'separateSubArticles': $o->separateSubArticles = $this->load_bool_property($in); break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportArticlePerformanceBranch(\XMLReader $in) : ReportArticlePerformanceBranch {
		$n = $in->name;
		$o = new ReportArticlePerformanceBranch();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'branchName': $o->branchName = $this->load_string_property($in); break;
						case 'count': $o->count = $this->load_BigDecimal_property($in); break;
						case 'bpeCount': $o->bpeCount = $this->load_BigDecimal_property($in); break;
						case 'profit': $o->profit = $this->load_BigDecimal_property($in); break;
						case 'margin': $o->margin = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportArticlePerformanceBranchList(\XMLReader $in) : ReportArticlePerformanceBranchList {
		$n = $in->name;
		$o = new ReportArticlePerformanceBranchList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branch': $o->branch[] = $this->load_ReportArticlePerformanceBranch($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportArticlePerformance(\XMLReader $in) : ReportArticlePerformance {
		$n = $in->name;
		$o = new ReportArticlePerformance();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'vatPercentage': $o->vatPercentage = $this->load_BigDecimal_property($in); break;
						case 'averagePurchasePrice': $o->averagePurchasePrice = $this->load_BigDecimal_property($in); break;
						case 'contentQuantity': $o->contentQuantity = $this->load_BigDecimal_property($in); break;
						case 'articleDescription': $o->articleDescription = $this->load_string_property($in); break;
						case 'count': $o->count = $this->load_BigDecimal_property($in); break;
						case 'bpeCount': $o->bpeCount = $this->load_BigDecimal_property($in); break;
						case 'averagePrice': $o->averagePrice = $this->load_BigDecimal_property($in); break;
						case 'totalInclAmount': $o->totalInclAmount = $this->load_BigDecimal_property($in); break;
						case 'totalExclAmount': $o->totalExclAmount = $this->load_BigDecimal_property($in); break;
						case 'totalPurchasePrice': $o->totalPurchasePrice = $this->load_BigDecimal_property($in); break;
						case 'bpeTotalPurchasePrice': $o->bpeTotalPurchasePrice = $this->load_BigDecimal_property($in); break;
						case 'profit': $o->profit = $this->load_BigDecimal_property($in); break;
						case 'margin': $o->margin = $this->load_BigDecimal_property($in); break;
						case 'packingSlipCount': $o->packingSlipCount = $this->load_BigDecimal_property($in); break;
						case 'packingSlipTotalInclAmount': $o->packingSlipTotalInclAmount = $this->load_BigDecimal_property($in); break;
						case 'branchList': $o->branchList = ($this->load_ReportArticlePerformanceBranchList($in))->branch; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportArticlePerformanceList(\XMLReader $in) : ReportArticlePerformanceList {
		$n = $in->name;
		$o = new ReportArticlePerformanceList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articlePerformance': $o->articlePerformance[] = $this->load_ReportArticlePerformance($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverByBranchResponse(\XMLReader $in) : ReportTurnoverByBranchResponse {
		$n = $in->name;
		$o = new ReportTurnoverByBranchResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnoverList': $o->turnoverList = ($this->load_ReportTurnoverByBranchList($in))->turnover; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverByEmployeeResponse(\XMLReader $in) : ReportTurnoverByEmployeeResponse {
		$n = $in->name;
		$o = new ReportTurnoverByEmployeeResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnoverList': $o->turnoverList = ($this->load_ReportTurnoverByEmployeeList($in))->turnover; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverByActivityResponse(\XMLReader $in) : ReportTurnoverByActivityResponse {
		$n = $in->name;
		$o = new ReportTurnoverByActivityResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnoverList': $o->turnoverList = ($this->load_ReportTurnoverByActivityList($in))->turnover; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverByTurnoverGroupResponse(\XMLReader $in) : ReportTurnoverByTurnoverGroupResponse {
		$n = $in->name;
		$o = new ReportTurnoverByTurnoverGroupResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnoverList': $o->turnoverList = ($this->load_ReportTurnoverByTurnoverGroupList($in))->turnover; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverByArticleResponse(\XMLReader $in) : ReportTurnoverByArticleResponse {
		$n = $in->name;
		$o = new ReportTurnoverByArticleResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnoverList': $o->turnoverList = ($this->load_ReportTurnoverByArticleList($in))->turnover; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportHoursByEmployeeResponse(\XMLReader $in) : ReportHoursByEmployeeResponse {
		$n = $in->name;
		$o = new ReportHoursByEmployeeResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'hoursList': $o->hoursList = ($this->load_ReportHoursByEmployeeList($in))->hours; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportPaymentMethodsResponse(\XMLReader $in) : ReportPaymentMethodsResponse {
		$n = $in->name;
		$o = new ReportPaymentMethodsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'paymentMethodsList': $o->paymentMethodsList = ($this->load_ReportPaymentMethodsList($in))->paymentMethods; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTablesResponse(\XMLReader $in) : ReportTablesResponse {
		$n = $in->name;
		$o = new ReportTablesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'tablesList': $o->tablesList = ($this->load_ReportTablesList($in))->tables; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportCancellationsResponse(\XMLReader $in) : ReportCancellationsResponse {
		$n = $in->name;
		$o = new ReportCancellationsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cancellationsList': $o->cancellationsList = ($this->load_ReportCancellationsList($in))->cancellations; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportBPEResponse(\XMLReader $in) : ReportBPEResponse {
		$n = $in->name;
		$o = new ReportBPEResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'bpeList': $o->bpeList = ($this->load_ReportBPEList($in))->bpes; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportBranchPerformanceResponse(\XMLReader $in) : ReportBranchPerformanceResponse {
		$n = $in->name;
		$o = new ReportBranchPerformanceResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchPerformanceList': $o->branchPerformanceList = ($this->load_ReportBranchPerformanceList($in))->branchPerformance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportAverageSpendingResponse(\XMLReader $in) : ReportAverageSpendingResponse {
		$n = $in->name;
		$o = new ReportAverageSpendingResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'averageSpendingList': $o->averageSpendingList = ($this->load_ReportAverageSpendingList($in))->averageSpending; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportTurnoverResponse(\XMLReader $in) : ReportTurnoverResponse {
		$n = $in->name;
		$o = new ReportTurnoverResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'turnoverList': $o->turnoverList = ($this->load_ReportTurnoverList($in))->turnover; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportPaymentMethodDetailsResponse(\XMLReader $in) : ReportPaymentMethodDetailsResponse {
		$n = $in->name;
		$o = new ReportPaymentMethodDetailsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'paymentSourceList': $o->paymentSourceList[] = $this->load_ReportPaymentSource($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportPrintableFinancialTotalsResponse(\XMLReader $in) : ReportPrintableFinancialTotalsResponse {
		$n = $in->name;
		$o = new ReportPrintableFinancialTotalsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'printableFinancialTotalsList': $o->printableFinancialTotalsList = ($this->load_ReportPrintableFinancialTotalsList($in))->printableFinancialTotals; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReportArticlePerformanceResponse(\XMLReader $in) : ReportArticlePerformanceResponse {
		$n = $in->name;
		$o = new ReportArticlePerformanceResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articlePerformanceList': $o->articlePerformanceList = ($this->load_ReportArticlePerformanceList($in))->articlePerformance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetSalesRepeatTemplatesRequest(\XMLReader $in) : GetSalesRepeatTemplatesRequest {
		$n = $in->name;
		$o = new GetSalesRepeatTemplatesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dateFilter': $o->dateFilter = $this->load_RequestDateFilter($in); break;
						case 'relationFilter': $o->relationFilter = ($this->load_RequestRelationFilter($in))->relationNumbers; break;
						case 'syncMarkerFilter': $o->syncMarkerFilter = $this->load_RequestSyncMarkerFilter($in); break;
						case 'contractFrequencyFilter': $o->contractFrequencyFilter = ($this->load_ContractFrequencyList($in))->contractFrequency; break;
						case 'salesRepeatTemplateTypeFilter': $o->salesRepeatTemplateTypeFilter = ($this->load_RequestSalesRepeatTemplateTypeFilter($in))->salesRepeatTemplateTypes; break;
						case 'salesRepeatTemplateIdsFilter': $o->salesRepeatTemplateIdsFilter = $this->load_RequestSalesRepeatTemplateIdsFilter($in); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
						case 'includeLineList': $o->includeLineList = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalesRepeatTemplateLine(\XMLReader $in) : SalesRepeatTemplateLine {
		$n = $in->name;
		$o = new SalesRepeatTemplateLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'salesRepeatTemplateLineId': $o->salesRepeatTemplateLineId = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'quantity': $o->quantity = $this->load_BigDecimal_property($in); break;
						case 'priceIncl': $o->priceIncl = $this->load_BigDecimal_property($in); break;
						case 'priceExcl': $o->priceExcl = $this->load_BigDecimal_property($in); break;
						case 'vatCode': $o->vatCode = $this->load_int_property($in); break;
						case 'vatPercentage': $o->vatPercentage = $this->load_BigDecimal_property($in); break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_int_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_BigDecimal_property($in); break;
						case 'totalInclAmount': $o->totalInclAmount = $this->load_BigDecimal_property($in); break;
						case 'totalExclAmount': $o->totalExclAmount = $this->load_BigDecimal_property($in); break;
						case 'salePromotionData': $o->salePromotionData = $this->load_SalePromotionLineData($in); break;
						case 'componentList': $o->componentList = ($this->load_SalesRepeatTemplateLineList($in))->line; break;
						case 'preparationList': $o->preparationList = ($this->load_SalesRepeatTemplateLineList($in))->line; break;
						case 'sourceSalesTurnoverLineId': $o->sourceSalesTurnoverLineId = $this->load_string_property($in); break;
						case 'startDate': $o->startDate = $this->load_Date_property($in); break;
						case 'discountAmountIncl': $o->discountAmountIncl = $this->load_BigDecimal_property($in); break;
						case 'discountAmountExcl': $o->discountAmountExcl = $this->load_BigDecimal_property($in); break;
						case 'discountType': $o->discountType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalesRepeatTemplateLineList(\XMLReader $in) : SalesRepeatTemplateLineList {
		$n = $in->name;
		$o = new SalesRepeatTemplateLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'line': $o->line[] = $this->load_SalesRepeatTemplateLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalesRepeatTemplateWeeklySchedule(\XMLReader $in) : SalesRepeatTemplateWeeklySchedule {
		$n = $in->name;
		$o = new SalesRepeatTemplateWeeklySchedule();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'whichWeeks': $o->whichWeeks = $this->load_string_property($in); break;
						case 'firstWeek': $o->firstWeek = $this->load_bool_property($in); break;
						case 'secondWeek': $o->secondWeek = $this->load_bool_property($in); break;
						case 'thirdWeek': $o->thirdWeek = $this->load_bool_property($in); break;
						case 'fourthWeek': $o->fourthWeek = $this->load_bool_property($in); break;
						case 'lastWeek': $o->lastWeek = $this->load_bool_property($in); break;
						case 'monday': $o->monday = $this->load_bool_property($in); break;
						case 'tuesday': $o->tuesday = $this->load_bool_property($in); break;
						case 'wednesday': $o->wednesday = $this->load_bool_property($in); break;
						case 'thursday': $o->thursday = $this->load_bool_property($in); break;
						case 'friday': $o->friday = $this->load_bool_property($in); break;
						case 'saturday': $o->saturday = $this->load_bool_property($in); break;
						case 'sunday': $o->sunday = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalesRepeatTemplateSchedule(\XMLReader $in) : SalesRepeatTemplateSchedule {
		$n = $in->name;
		$o = new SalesRepeatTemplateSchedule();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'specificDates': $o->specificDates[] = $this->load_Date_property($in); break;
						case 'repeatInterval': $o->repeatInterval = $this->load_string_property($in); break;
						case 'weeklySchedule': $o->weeklySchedule = $this->load_SalesRepeatTemplateWeeklySchedule($in); break;
						case 'yearlyDateMonth': $o->yearlyDateMonth = $this->load_int_property($in); break;
						case 'yearlyDateDay': $o->yearlyDateDay = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalesRepeatTemplate(\XMLReader $in) : SalesRepeatTemplate {
		$n = $in->name;
		$o = new SalesRepeatTemplate();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'salesRepeatTemplateId': $o->salesRepeatTemplateId = $this->load_string_property($in); break;
						case 'changeCounter': $o->changeCounter = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'salesRepeatTemplateType': $o->salesRepeatTemplateType = $this->load_string_property($in); break;
						case 'state': $o->state = $this->load_string_property($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_DateTime_property($in); break;
						case 'startDate': $o->startDate = $this->load_Date_property($in); break;
						case 'generateDate': $o->generateDate = $this->load_Date_property($in); break;
						case 'endDate': $o->endDate = $this->load_Date_property($in); break;
						case 'schedule': $o->schedule = $this->load_SalesRepeatTemplateSchedule($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeName': $o->employeeName = $this->load_string_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
						case 'relationCategoryIds': $o->relationCategoryIds[] = $this->load_int_property($in); break;
						case 'relationBankAccountNumber': $o->relationBankAccountNumber = $this->load_string_property($in); break;
						case 'relationCommerceNumber': $o->relationCommerceNumber = $this->load_string_property($in); break;
						case 'relationVatNumber': $o->relationVatNumber = $this->load_string_property($in); break;
						case 'totalInclAmount': $o->totalInclAmount = $this->load_BigDecimal_property($in); break;
						case 'totalExclAmount': $o->totalExclAmount = $this->load_BigDecimal_property($in); break;
						case 'vatMethod': $o->vatMethod = $this->load_string_property($in); break;
						case 'vatCountryCode': $o->vatCountryCode = $this->load_int_property($in); break;
						case 'vatCountryIso3': $o->vatCountryIso3 = $this->load_string_property($in); break;
						case 'lineList': $o->lineList = ($this->load_SalesRepeatTemplateLineList($in))->line; break;
						case 'contractFrequency': $o->contractFrequency = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalesRepeatTemplateList(\XMLReader $in) : SalesRepeatTemplateList {
		$n = $in->name;
		$o = new SalesRepeatTemplateList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'salesRepeatTemplate': $o->salesRepeatTemplate[] = $this->load_SalesRepeatTemplate($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveSalesRepeatTemplateLine(\XMLReader $in) : SaveSalesRepeatTemplateLine {
		$n = $in->name;
		$o = new SaveSalesRepeatTemplateLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'quantity': $o->quantity = $this->load_BigDecimal_property($in); break;
						case 'priceIncl': $o->priceIncl = $this->load_BigDecimal_property($in); break;
						case 'priceExcl': $o->priceExcl = $this->load_BigDecimal_property($in); break;
						case 'vatCode': $o->vatCode = $this->load_int_property($in); break;
						case 'vatPercentage': $o->vatPercentage = $this->load_BigDecimal_property($in); break;
						case 'turnoverGroup': $o->turnoverGroup = $this->load_int_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_BigDecimal_property($in); break;
						case 'salePromotionData': $o->salePromotionData = $this->load_SalePromotionLineData($in); break;
						case 'componentList': $o->componentList = ($this->load_SaveSalesRepeatTemplateLineList($in))->line; break;
						case 'preparationList': $o->preparationList = ($this->load_SaveSalesRepeatTemplateLineList($in))->line; break;
						case 'discountAmountIncl': $o->discountAmountIncl = $this->load_BigDecimal_property($in); break;
						case 'discountAmountExcl': $o->discountAmountExcl = $this->load_BigDecimal_property($in); break;
						case 'discountType': $o->discountType = $this->load_string_property($in); break;
						case 'salesRepeatTemplateLineId': $o->salesRepeatTemplateLineId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveSalesRepeatTemplateLineList(\XMLReader $in) : SaveSalesRepeatTemplateLineList {
		$n = $in->name;
		$o = new SaveSalesRepeatTemplateLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'line': $o->line[] = $this->load_SaveSalesRepeatTemplateLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveSalesRepeatTemplate(\XMLReader $in) : SaveSalesRepeatTemplate {
		$n = $in->name;
		$o = new SaveSalesRepeatTemplate();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'salesRepeatTemplateId': $o->salesRepeatTemplateId = $this->load_string_property($in); break;
						case 'changeCounter': $o->changeCounter = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'salesRepeatTemplateType': $o->salesRepeatTemplateType = $this->load_string_property($in); break;
						case 'startDate': $o->startDate = $this->load_Date_property($in); break;
						case 'endDate': $o->endDate = $this->load_Date_property($in); break;
						case 'schedule': $o->schedule = $this->load_SalesRepeatTemplateSchedule($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'vatMethod': $o->vatMethod = $this->load_string_property($in); break;
						case 'vatCountryCode': $o->vatCountryCode = $this->load_int_property($in); break;
						case 'vatCountryIso3': $o->vatCountryIso3 = $this->load_string_property($in); break;
						case 'lineList': $o->lineList = ($this->load_SaveSalesRepeatTemplateLineList($in))->line; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveSalesRepeatTemplateRequest(\XMLReader $in) : SaveSalesRepeatTemplateRequest {
		$n = $in->name;
		$o = new SaveSalesRepeatTemplateRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'workplaceIdentifier': $o->workplaceIdentifier = $this->load_WorkplaceIdentifier($in); break;
						case 'salesRepeatTemplate': $o->salesRepeatTemplate = $this->load_SaveSalesRepeatTemplate($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BpeBudgetCheck(\XMLReader $in) : BpeBudgetCheck {
		$n = $in->name;
		$o = new BpeBudgetCheck();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'bpeId': $o->bpeId = $this->load_string_property($in); break;
						case 'bpeAmount': $o->bpeAmount = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BpeBudgetCheckList(\XMLReader $in) : BpeBudgetCheckList {
		$n = $in->name;
		$o = new BpeBudgetCheckList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'item': $o->item[] = $this->load_BpeBudgetCheck($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PerformBpeBudgetChecksRequest(\XMLReader $in) : PerformBpeBudgetChecksRequest {
		$n = $in->name;
		$o = new PerformBpeBudgetChecksRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'bpeList': $o->bpeList = ($this->load_BpeBudgetCheckList($in))->item; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BpeBudgetCheckResponse(\XMLReader $in) : BpeBudgetCheckResponse {
		$n = $in->name;
		$o = new BpeBudgetCheckResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'bpeId': $o->bpeId = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'amountOverBudget': $o->amountOverBudget = $this->load_BigDecimal_property($in); break;
						case 'amountLimit': $o->amountLimit = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_BpeBudgetCheckResponseList(\XMLReader $in) : BpeBudgetCheckResponseList {
		$n = $in->name;
		$o = new BpeBudgetCheckResponseList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result[] = $this->load_BpeBudgetCheckResponse($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TicketCounterSale(\XMLReader $in) : TicketCounterSale {
		$n = $in->name;
		$o = new TicketCounterSale();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'ticketId': $o->ticketId = $this->load_string_property($in); break;
						case 'ticketCode': $o->ticketCode = $this->load_string_property($in); break;
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
						case 'receiptId': $o->receiptId = $this->load_string_property($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'financialDate': $o->financialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_TicketCounterSaleList(\XMLReader $in) : TicketCounterSaleList {
		$n = $in->name;
		$o = new TicketCounterSaleList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'ticketCounterSale': $o->ticketCounterSale[] = $this->load_TicketCounterSale($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetTicketCounterSalesRequest(\XMLReader $in) : GetTicketCounterSalesRequest {
		$n = $in->name;
		$o = new GetTicketCounterSalesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetSalePromotionsRequest(\XMLReader $in) : GetSalePromotionsRequest {
		$n = $in->name;
		$o = new GetSalePromotionsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchFilter': $o->branchFilter = ($this->load_BranchFilter($in))->branchNumbers; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalePromotionLineDiscount(\XMLReader $in) : SalePromotionLineDiscount {
		$n = $in->name;
		$o = new SalePromotionLineDiscount();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'quantity': $o->quantity = $this->load_int_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_int_property($in); break;
						case 'discountAmount': $discountAmount = $this->load_int_property($in); break;
						case 'salePriceIncl': $salePriceIncl = $this->load_int_property($in); break;
						case 'salePriceExcl': $salePriceExcl = $this->load_int_property($in); break;
						case 'discountPrice': $discountPrice = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->discountAmount = isset($discountAmount) ? BigDecimal::ofUnscaledValue($discountAmount, 2) : null;
		$o->salePriceIncl = isset($salePriceIncl) ? BigDecimal::ofUnscaledValue($salePriceIncl, 2) : null;
		$o->salePriceExcl = isset($salePriceExcl) ? BigDecimal::ofUnscaledValue($salePriceExcl, 2) : null;
		$o->discountPrice = isset($discountPrice) ? BigDecimal::ofUnscaledValue($discountPrice, 2) : null;
		return $o;
	}
	private function load_SalePromotionLineDiscountList(\XMLReader $in) : SalePromotionLineDiscountList {
		$n = $in->name;
		$o = new SalePromotionLineDiscountList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'salePromotionLineDiscountList': $o->salePromotionLineDiscountList[] = $this->load_SalePromotionLineDiscount($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalePromotionLine(\XMLReader $in) : SalePromotionLine {
		$n = $in->name;
		$o = new SalePromotionLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'saleType': $o->saleType = $this->load_string_property($in); break;
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
						case 'relationNumbers': $o->relationNumbers[] = $this->load_int_property($in); break;
						case 'turnoverGroupNumbers': $o->turnoverGroupNumbers[] = $this->load_int_property($in); break;
						case 'seasonCodeNumbers': $o->seasonCodeNumbers[] = $this->load_int_property($in); break;
						case 'discountGroupNumbers': $o->discountGroupNumbers[] = $this->load_int_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_int_property($in); break;
						case 'discountPrice': $discountPrice = $this->load_int_property($in); break;
						case 'salePriceIncl': $salePriceIncl = $this->load_int_property($in); break;
						case 'salePriceExcl': $salePriceExcl = $this->load_int_property($in); break;
						case 'quantitySource': $o->quantitySource = $this->load_int_property($in); break;
						case 'quantityDestination': $o->quantityDestination = $this->load_int_property($in); break;
						case 'quantity': $o->quantity = $this->load_int_property($in); break;
						case 'discountAmount': $discountAmount = $this->load_int_property($in); break;
						case 'totalPriceIncl': $totalPriceIncl = $this->load_int_property($in); break;
						case 'totalPriceExcl': $totalPriceExcl = $this->load_int_property($in); break;
						case 'discountPercentageType': $o->discountPercentageType = $this->load_string_property($in); break;
						case 'totalAmountMinimum': $totalAmountMinimum = $this->load_int_property($in); break;
						case 'arrangementArticleNumber': $o->arrangementArticleNumber = $this->load_int_property($in); break;
						case 'hoursValid': $o->hoursValid = $this->load_int_property($in); break;
						case 'salePromotionLineDiscountList': $o->salePromotionLineDiscountList = ($this->load_SalePromotionLineDiscountList($in))->salePromotionLineDiscountList; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->discountPrice = isset($discountPrice) ? BigDecimal::ofUnscaledValue($discountPrice, 2) : null;
		$o->salePriceIncl = isset($salePriceIncl) ? BigDecimal::ofUnscaledValue($salePriceIncl, 2) : null;
		$o->salePriceExcl = isset($salePriceExcl) ? BigDecimal::ofUnscaledValue($salePriceExcl, 2) : null;
		$o->discountAmount = isset($discountAmount) ? BigDecimal::ofUnscaledValue($discountAmount, 2) : null;
		$o->totalPriceIncl = isset($totalPriceIncl) ? BigDecimal::ofUnscaledValue($totalPriceIncl, 2) : null;
		$o->totalPriceExcl = isset($totalPriceExcl) ? BigDecimal::ofUnscaledValue($totalPriceExcl, 2) : null;
		$o->totalAmountMinimum = isset($totalAmountMinimum) ? BigDecimal::ofUnscaledValue($totalAmountMinimum, 2) : null;
		return $o;
	}
	private function load_SalePromotionLineList(\XMLReader $in) : SalePromotionLineList {
		$n = $in->name;
		$o = new SalePromotionLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'salePromotionLineList': $o->salePromotionLineList[] = $this->load_SalePromotionLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalePromotions(\XMLReader $in) : SalePromotions {
		$n = $in->name;
		$o = new SalePromotions();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'startDate': $o->startDate = $this->load_Date_property($in); break;
						case 'endDate': $o->endDate = $this->load_Date_property($in); break;
						case 'salePromotionLineList': $o->salePromotionLineList = ($this->load_SalePromotionLineList($in))->salePromotionLineList; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalePromotionsList(\XMLReader $in) : SalePromotionsList {
		$n = $in->name;
		$o = new SalePromotionsList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'salePromotions': $o->salePromotions[] = $this->load_SalePromotions($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPaymentMethodsRequest(\XMLReader $in) : GetPaymentMethodsRequest {
		$n = $in->name;
		$o = new GetPaymentMethodsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'accountNumber': $o->accountNumber = $this->load_int_property($in); break;
						case 'paymentMethodTypes': $o->paymentMethodTypes[] = $this->load_string_property($in); break;
						case 'includeBpeConfiguration': $o->includeBpeConfiguration = $this->load_bool_property($in); break;
						case 'includeGiftcardType': $o->includeGiftcardType = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetAvailablePaymentMethodsV2Request(\XMLReader $in) : GetAvailablePaymentMethodsV2Request {
		$n = $in->name;
		$o = new GetAvailablePaymentMethodsV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'workplace': $o->workplace = $this->load_WorkplaceIdentifier($in); break;
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
						case 'includeGiftcardType': $o->includeGiftcardType = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateOrderInfo(\XMLReader $in) : CreateOrderInfo {
		$n = $in->name;
		$o = new CreateOrderInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'orderString': $o->orderString = $this->load_string_property($in); break;
						case 'orderQueued': $o->orderQueued = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateOrderV2Request(\XMLReader $in) : CreateOrderV2Request {
		$n = $in->name;
		$o = new CreateOrderV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'order': $o->order = $this->load_Order($in); break;
						case 'applySalesAndActions': $o->applySalesAndActions = $this->load_bool_property($in); break;
						case 'applySalesPrices': $o->applySalesPrices = $this->load_bool_property($in); break;
						case 'applyPriceGroups': $o->applyPriceGroups = $this->load_bool_property($in); break;
						case 'scannedVoucherIssuanceCodes': $o->scannedVoucherIssuanceCodes[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateOrderV3Request(\XMLReader $in) : CreateOrderV3Request {
		$n = $in->name;
		$o = new CreateOrderV3Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'order': $o->order = $this->load_Order($in); break;
						case 'applySalesAndActions': $o->applySalesAndActions = $this->load_bool_property($in); break;
						case 'applySalesPrices': $o->applySalesPrices = $this->load_bool_property($in); break;
						case 'applyPriceGroups': $o->applyPriceGroups = $this->load_bool_property($in); break;
						case 'scannedVoucherIssuanceCodes': $o->scannedVoucherIssuanceCodes[] = $this->load_string_property($in); break;
						case 'prepay': $o->prepay = $this->load_bool_property($in); break;
						case 'paymentList': $o->paymentList = ($this->load_PaymentList($in))->payment; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PayOrderRequest(\XMLReader $in) : PayOrderRequest {
		$n = $in->name;
		$o = new PayOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'prepay': $o->prepay = $this->load_bool_property($in); break;
						case 'paymentList': $o->paymentList = ($this->load_PaymentList($in))->payment; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PayOrderV2Request(\XMLReader $in) : PayOrderV2Request {
		$n = $in->name;
		$o = new PayOrderV2Request();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'prepay': $o->prepay = $this->load_bool_property($in); break;
						case 'paymentList': $o->paymentList = ($this->load_PaymentList($in))->payment; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PayTableOrderRequest(\XMLReader $in) : PayTableOrderRequest {
		$n = $in->name;
		$o = new PayTableOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'order': $o->order = $this->load_Order($in); break;
						case 'paymentList': $o->paymentList = ($this->load_PaymentList($in))->payment; break;
						case 'keepTableName': $o->keepTableName = $this->load_bool_property($in); break;
						case 'releaseTable': $o->releaseTable = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrepayTableOrderRequest(\XMLReader $in) : PrepayTableOrderRequest {
		$n = $in->name;
		$o = new PrepayTableOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'order': $o->order = $this->load_Order($in); break;
						case 'paymentList': $o->paymentList = ($this->load_PaymentList($in))->payment; break;
						case 'prepayAmount': $prepayAmount = $this->load_int_property($in); break;
						case 'releaseTable': $o->releaseTable = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->prepayAmount = isset($prepayAmount) ? BigDecimal::ofUnscaledValue($prepayAmount, 2) : null;
		return $o;
	}
	private function load_GetOrdersByExtOrderIdsRequest(\XMLReader $in) : GetOrdersByExtOrderIdsRequest {
		$n = $in->name;
		$o = new GetOrdersByExtOrderIdsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'extOrderIds': $o->extOrderIds = ($this->load_IdList($in))->id; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_Proposal(\XMLReader $in) : Proposal {
		$n = $in->name;
		$o = new Proposal();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'proposalId': $o->proposalId = $this->load_string_property($in); break;
						case 'extProposalId': $o->extProposalId = $this->load_string_property($in); break;
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'extOrderId': $o->extOrderId = $this->load_string_property($in); break;
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
						case 'extInvoiceId': $o->extInvoiceId = $this->load_string_property($in); break;
						case 'transactionString': $o->transactionString = $this->load_string_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'proposalNumber': $o->proposalNumber = $this->load_YearNumber($in); break;
						case 'proposalType': $o->proposalType = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'employeeName': $o->employeeName = $this->load_string_property($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'relationName': $o->relationName = $this->load_string_property($in); break;
						case 'relationCategoryId': $o->relationCategoryId = $this->load_int_property($in); break;
						case 'relationBankAccountNumber': $o->relationBankAccountNumber = $this->load_string_property($in); break;
						case 'deliveryAddress': $o->deliveryAddress = $this->load_Address($in); break;
						case 'invoiceAddress': $o->invoiceAddress = $this->load_Address($in); break;
						case 'financialDate': $o->financialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'financialBranchNumber': $o->financialBranchNumber = $this->load_int_property($in); break;
						case 'financialExtBranchId': $o->financialExtBranchId = $this->load_string_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'entryBranchNumber': $o->entryBranchNumber = $this->load_int_property($in); break;
						case 'entryExtBranchId': $o->entryExtBranchId = $this->load_string_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
						case 'totalInclAmount': $totalInclAmount = $this->load_int_property($in); break;
						case 'totalExclAmount': $totalExclAmount = $this->load_int_property($in); break;
						case 'vatMethod': $o->vatMethod = $this->load_string_property($in); break;
						case 'vatGroupList': $o->vatGroupList = ($this->load_VatGroupList($in))->vatGroup; break;
						case 'changeCounter': $o->changeCounter = $this->load_int_property($in); break;
						case 'state': $o->state = $this->load_string_property($in); break;
						case 'lineList': $o->lineList = ($this->load_LineList($in))->line; break;
						case 'vatChange': $o->vatChange = $this->load_string_property($in); break;
						case 'orderCategoryNumber': $o->orderCategoryNumber = $this->load_int_property($in); break;
						case 'orderNumber': $o->orderNumber = $this->load_YearNumber($in); break;
						case 'packingSlipIds': $o->packingSlipIds = ($this->load_IdList($in))->id; break;
						case 'packingSlipNumbers': $o->packingSlipNumbers = ($this->load_YearNumberList($in))->yearNumber; break;
						case 'invoiceIds': $o->invoiceIds = ($this->load_IdList($in))->id; break;
						case 'extInvoiceIds': $o->extInvoiceIds = ($this->load_IdList($in))->id; break;
						case 'invoiceNumbers': $o->invoiceNumbers = ($this->load_YearNumberList($in))->yearNumber; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->totalInclAmount = isset($totalInclAmount) ? BigDecimal::ofUnscaledValue($totalInclAmount, 2) : null;
		$o->totalExclAmount = isset($totalExclAmount) ? BigDecimal::ofUnscaledValue($totalExclAmount, 2) : null;
		return $o;
	}
	private function load_ProposalList(\XMLReader $in) : ProposalList {
		$n = $in->name;
		$o = new ProposalList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'proposal': $o->proposal[] = $this->load_Proposal($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetProposalsRequest(\XMLReader $in) : GetProposalsRequest {
		$n = $in->name;
		$o = new GetProposalsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'fromFinancialDate': $o->fromFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughFinancialDate': $o->throughFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'employeeNumbers': $o->employeeNumbers[] = $this->load_int_property($in); break;
						case 'relationNumbers': $o->relationNumbers[] = $this->load_int_property($in); break;
						case 'supplierRelationNumbers': $o->supplierRelationNumbers[] = $this->load_int_property($in); break;
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
						case 'articleTurnoverGroups': $o->articleTurnoverGroups[] = $this->load_int_property($in); break;
						case 'articlePluNumbers': $o->articlePluNumbers = ($this->load_TextList($in))->text; break;
						case 'articleBarcodes': $o->articleBarcodes = ($this->load_TextList($in))->text; break;
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
						case 'proposalIds': $o->proposalIds[] = $this->load_string_property($in); break;
						case 'proposalNumbers': $o->proposalNumbers[] = $this->load_YearNumber($in); break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
						case 'includeLineList': $o->includeLineList = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveProposalInfo(\XMLReader $in) : SaveProposalInfo {
		$n = $in->name;
		$o = new SaveProposalInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'proposalId': $o->proposalId = $this->load_string_property($in); break;
						case 'proposalString': $o->proposalString = $this->load_string_property($in); break;
						case 'proposalNumber': $o->proposalNumber = $this->load_YearNumber($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateOrderFromProposalInfo(\XMLReader $in) : CreateOrderFromProposalInfo {
		$n = $in->name;
		$o = new CreateOrderFromProposalInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'orderString': $o->orderString = $this->load_string_property($in); break;
						case 'orderNumber': $o->orderNumber = $this->load_YearNumber($in); break;
						case 'orderBarcode': $o->orderBarcode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateInvoiceFromProposalInfo(\XMLReader $in) : CreateInvoiceFromProposalInfo {
		$n = $in->name;
		$o = new CreateInvoiceFromProposalInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
						case 'invoiceString': $o->invoiceString = $this->load_string_property($in); break;
						case 'invoiceNumber': $o->invoiceNumber = $this->load_YearNumber($in); break;
						case 'invoiceBarcode': $o->invoiceBarcode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOrdersByReceiptsRequest(\XMLReader $in) : GetOrdersByReceiptsRequest {
		$n = $in->name;
		$o = new GetOrdersByReceiptsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'receiptIds': $o->receiptIds = ($this->load_IdList($in))->id; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCurrentTableOrdersRequest(\XMLReader $in) : GetCurrentTableOrdersRequest {
		$n = $in->name;
		$o = new GetCurrentTableOrdersRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOrdersRequest(\XMLReader $in) : GetOrdersRequest {
		$n = $in->name;
		$o = new GetOrdersRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'fromFinancialDate': $o->fromFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'throughFinancialDate': $o->throughFinancialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'branchNumbers': $o->branchNumbers[] = $this->load_int_property($in); break;
						case 'employeeNumbers': $o->employeeNumbers[] = $this->load_int_property($in); break;
						case 'relationNumbers': $o->relationNumbers[] = $this->load_int_property($in); break;
						case 'supplierRelationNumbers': $o->supplierRelationNumbers[] = $this->load_int_property($in); break;
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
						case 'articleTurnoverGroups': $o->articleTurnoverGroups[] = $this->load_int_property($in); break;
						case 'articlePluNumbers': $o->articlePluNumbers = ($this->load_TextList($in))->text; break;
						case 'articleBarcodes': $o->articleBarcodes = ($this->load_TextList($in))->text; break;
						case 'activityId': $o->activityId = $this->load_string_property($in); break;
						case 'orderTypeList': $o->orderTypeList = ($this->load_OrderTypeList($in))->orderType; break;
						case 'orderIds': $o->orderIds[] = $this->load_string_property($in); break;
						case 'orderNumbers': $o->orderNumbers[] = $this->load_YearNumber($in); break;
						case 'ownerFilter': $o->ownerFilter = ($this->load_OwnerLabelFilter($in))->ownerLabels; break;
						case 'branchGroupFilter': $o->branchGroupFilter = ($this->load_BranchGroupFilter($in))->branchGroups; break;
						case 'includeLineList': $o->includeLineList = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DetermineContractLinesRequest(\XMLReader $in) : DetermineContractLinesRequest {
		$n = $in->name;
		$o = new DetermineContractLinesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineList': $o->lineList = ($this->load_LineList($in))->line; break;
						case 'workplaceIdentifier': $o->workplaceIdentifier = $this->load_WorkplaceIdentifier($in); break;
						case 'financialBranchNumber': $o->financialBranchNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'vatMethod': $o->vatMethod = $this->load_string_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateInvoiceFromPackingSlipsRequest(\XMLReader $in) : CreateInvoiceFromPackingSlipsRequest {
		$n = $in->name;
		$o = new CreateInvoiceFromPackingSlipsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'packingSlipIds': $o->packingSlipIds[] = $this->load_string_property($in); break;
						case 'financialDate': $o->financialDate = $this->load_Date_property($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'forcedActivityId': $o->forcedActivityId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashCountInfoWorkplaceData(\XMLReader $in) : CashCountInfoWorkplaceData {
		$n = $in->name;
		$o = new CashCountInfoWorkplaceData();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'shiftBeginId': $o->shiftBeginId = $this->load_string_property($in); break;
						case 'shiftBeginNumber': $o->shiftBeginNumber = $this->load_YearNumber($in); break;
						case 'shiftBeginTs': $o->shiftBeginTs = $this->load_DateTime_property($in); break;
						case 'shiftEndId': $o->shiftEndId = $this->load_string_property($in); break;
						case 'shiftEndNumber': $o->shiftEndNumber = $this->load_YearNumber($in); break;
						case 'shiftEndTs': $o->shiftEndTs = $this->load_DateTime_property($in); break;
						case 'shiftEndBookingDate': $o->shiftEndBookingDate = $this->load_Date_property($in); break;
						case 'previousCashCountId': $o->previousCashCountId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashCountInfoWorkplaceDataList(\XMLReader $in) : CashCountInfoWorkplaceDataList {
		$n = $in->name;
		$o = new CashCountInfoWorkplaceDataList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'workplaceData': $o->workplaceData[] = $this->load_CashCountInfoWorkplaceData($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashCountInfoPaymentMethodAmount(\XMLReader $in) : CashCountInfoPaymentMethodAmount {
		$n = $in->name;
		$o = new CashCountInfoPaymentMethodAmount();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'isAutomaticDeposit': $o->isAutomaticDeposit = $this->load_bool_property($in); break;
						case 'openingBalance': $o->openingBalance = $this->load_BigDecimal_property($in); break;
						case 'booked': $o->booked = $this->load_BigDecimal_property($in); break;
						case 'counted': $o->counted = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashCountInfoPaymentMethodAmountList(\XMLReader $in) : CashCountInfoPaymentMethodAmountList {
		$n = $in->name;
		$o = new CashCountInfoPaymentMethodAmountList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'paymentMethodAmount': $o->paymentMethodAmount[] = $this->load_CashCountInfoPaymentMethodAmount($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashCountInfoWorkplace(\XMLReader $in) : CashCountInfoWorkplace {
		$n = $in->name;
		$o = new CashCountInfoWorkplace();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'name': $o->name = $this->load_string_property($in); break;
						case 'data': $o->data = $this->load_CashCountInfoWorkplaceData($in); break;
						case 'previousCashCountTs': $o->previousCashCountTs = $this->load_DateTime_property($in); break;
						case 'paymentMethodAmounts': $o->paymentMethodAmounts = ($this->load_CashCountInfoPaymentMethodAmountList($in))->paymentMethodAmount; break;
						case 'extraWorkplaces': $o->extraWorkplaces = ($this->load_CashCountInfoWorkplaceList($in))->workplace; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashCountInfoWorkplaceList(\XMLReader $in) : CashCountInfoWorkplaceList {
		$n = $in->name;
		$o = new CashCountInfoWorkplaceList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'workplace': $o->workplace[] = $this->load_CashCountInfoWorkplace($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashCountInfo(\XMLReader $in) : CashCountInfo {
		$n = $in->name;
		$o = new CashCountInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'state': $o->state = $this->load_string_property($in); break;
						case 'countEmployeeNumber': $o->countEmployeeNumber = $this->load_int_property($in); break;
						case 'workplaces': $o->workplaces = ($this->load_CashCountInfoWorkplaceList($in))->workplace; break;
						case 'fromWorkplaceCountWorkplaceNumber': $o->fromWorkplaceCountWorkplaceNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCashCountInfoRequest(\XMLReader $in) : GetCashCountInfoRequest {
		$n = $in->name;
		$o = new GetCashCountInfoRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fromWorkplace': $o->fromWorkplace = $this->load_WorkplaceIdentifier($in); break;
						case 'countEmployeeNumber': $o->countEmployeeNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashCountInfoCountedPaymentMethodAmount(\XMLReader $in) : CashCountInfoCountedPaymentMethodAmount {
		$n = $in->name;
		$o = new CashCountInfoCountedPaymentMethodAmount();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'description': $o->description = $this->load_string_property($in); break;
						case 'isAutomaticDeposit': $o->isAutomaticDeposit = $this->load_bool_property($in); break;
						case 'openingBalance': $o->openingBalance = $this->load_BigDecimal_property($in); break;
						case 'booked': $o->booked = $this->load_BigDecimal_property($in); break;
						case 'counted': $o->counted = $this->load_BigDecimal_property($in); break;
						case 'deposited': $o->deposited = $this->load_BigDecimal_property($in); break;
						case 'depositPaymentMethodId': $o->depositPaymentMethodId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CashCountInfoCountedPaymentMethodAmountList(\XMLReader $in) : CashCountInfoCountedPaymentMethodAmountList {
		$n = $in->name;
		$o = new CashCountInfoCountedPaymentMethodAmountList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'countedPaymentMethodAmount': $o->countedPaymentMethodAmount[] = $this->load_CashCountInfoCountedPaymentMethodAmount($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveCashCountRequest(\XMLReader $in) : SaveCashCountRequest {
		$n = $in->name;
		$o = new SaveCashCountRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'fromWorkplace': $o->fromWorkplace = $this->load_WorkplaceIdentifier($in); break;
						case 'countEmployeeNumber': $o->countEmployeeNumber = $this->load_int_property($in); break;
						case 'workplaceData': $o->workplaceData = $this->load_CashCountInfoWorkplaceData($in); break;
						case 'extraWorkplacesData': $o->extraWorkplacesData = ($this->load_CashCountInfoWorkplaceDataList($in))->workplaceData; break;
						case 'countedPaymentMethodAmounts': $o->countedPaymentMethodAmounts = ($this->load_CashCountInfoCountedPaymentMethodAmountList($in))->countedPaymentMethodAmount; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalesProcessorContext(\XMLReader $in) : SalesProcessorContext {
		$n = $in->name;
		$o = new SalesProcessorContext();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'scannedVoucherIssuanceCodes': $o->scannedVoucherIssuanceCodes[] = $this->load_string_property($in); break;
						case 'dryRun': $o->dryRun = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SalesProcessorResult(\XMLReader $in) : SalesProcessorResult {
		$n = $in->name;
		$o = new SalesProcessorResult();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'voucherIssuances': $o->voucherIssuances = ($this->load_VoucherIssuanceCompactList($in))->voucherIssuanceCompact; break;
						case 'voucherIssuancesToCancel': $o->voucherIssuancesToCancel = ($this->load_VoucherIssuanceCompactList($in))->voucherIssuanceCompact; break;
						case 'voucherIssuanceCandidates': $o->voucherIssuanceCandidates = ($this->load_VoucherIssuanceCandidateList($in))->voucherIssuanceCandidate; break;
						case 'unappliedVoucherIssuances': $o->unappliedVoucherIssuances = ($this->load_UnappliedVoucherIssuanceList($in))->unappliedVoucherIssuance; break;
						case 'scannedVoucherIssuances': $o->scannedVoucherIssuances = ($this->load_VoucherIssuanceRedeemableList($in))->voucherIssuanceRedeemable; break;
						case 'errorMessages': $o->errorMessages[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ProcessInvoiceRequest(\XMLReader $in) : ProcessInvoiceRequest {
		$n = $in->name;
		$o = new ProcessInvoiceRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'invoice': $o->invoice = $this->load_InvoiceInput($in); break;
						case 'processorContext': $o->processorContext = $this->load_SalesProcessorContext($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ProposalInput(\XMLReader $in) : ProposalInput {
		$n = $in->name;
		$o = new ProposalInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'proposalId': $o->proposalId = $this->load_string_property($in); break;
						case 'extProposalId': $o->extProposalId = $this->load_string_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
						case 'financialDate': $o->financialDate = $this->load_SoapMplusDate($in)->toDateTime(); break;
						case 'financialBranchNumber': $o->financialBranchNumber = $this->load_int_property($in); break;
						case 'entryBranchNumber': $o->entryBranchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'vatMethod': $o->vatMethod = $this->load_string_property($in); break;
						case 'changeCounter': $o->changeCounter = $this->load_int_property($in); break;
						case 'lineList': $o->lineList = ($this->load_LineInputList($in))->line; break;
						case 'vatChange': $o->vatChange = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ProcessProposalRequest(\XMLReader $in) : ProcessProposalRequest {
		$n = $in->name;
		$o = new ProcessProposalRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'proposal': $o->proposal = $this->load_ProposalInput($in); break;
						case 'processorContext': $o->processorContext = $this->load_SalesProcessorContext($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ProcessOrderRequest(\XMLReader $in) : ProcessOrderRequest {
		$n = $in->name;
		$o = new ProcessOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'order': $o->order = $this->load_OrderInput($in); break;
						case 'processorContext': $o->processorContext = $this->load_SalesProcessorContext($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetSalesRepeatTemplatesResponse(\XMLReader $in) : GetSalesRepeatTemplatesResponse {
		$n = $in->name;
		$o = new GetSalesRepeatTemplatesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'salesRepeatTemplateList': $o->salesRepeatTemplateList = ($this->load_SalesRepeatTemplateList($in))->salesRepeatTemplate; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveSalesRepeatTemplateResponse(\XMLReader $in) : SaveSalesRepeatTemplateResponse {
		$n = $in->name;
		$o = new SaveSalesRepeatTemplateResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'salesRepeatTemplateId': $o->salesRepeatTemplateId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PerformBpeBudgetChecksResponse(\XMLReader $in) : PerformBpeBudgetChecksResponse {
		$n = $in->name;
		$o = new PerformBpeBudgetChecksResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'bpeResults': $o->bpeResults = ($this->load_BpeBudgetCheckResponseList($in))->result; break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetTicketCounterSalesResponse(\XMLReader $in) : GetTicketCounterSalesResponse {
		$n = $in->name;
		$o = new GetTicketCounterSalesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'ticketCounterSaleList': $o->ticketCounterSaleList = ($this->load_TicketCounterSaleList($in))->ticketCounterSale; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetSalePromotionsResponse(\XMLReader $in) : GetSalePromotionsResponse {
		$n = $in->name;
		$o = new GetSalePromotionsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'salePromotionsList': $o->salePromotionsList = ($this->load_SalePromotionsList($in))->salePromotions; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetPaymentMethodsResponse(\XMLReader $in) : GetPaymentMethodsResponse {
		$n = $in->name;
		$o = new GetPaymentMethodsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'paymentMethodList': $o->paymentMethodList = ($this->load_PaymentMethodList($in))->paymentMethod; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetAvailablePaymentMethodsResponse(\XMLReader $in) : GetAvailablePaymentMethodsResponse {
		$n = $in->name;
		$o = new GetAvailablePaymentMethodsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'paymentMethodList': $o->paymentMethodList = ($this->load_PaymentMethodList($in))->paymentMethod; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateOrderResponse(\XMLReader $in) : CreateOrderResponse {
		$n = $in->name;
		$o = new CreateOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'info': $o->info = $this->load_CreateOrderInfo($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateOrderV2Response(\XMLReader $in) : CreateOrderV2Response {
		$n = $in->name;
		$o = new CreateOrderV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'order': $o->order = $this->load_Order($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'info': $o->info = $this->load_CreateOrderInfo($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateOrderV3Response(\XMLReader $in) : CreateOrderV3Response {
		$n = $in->name;
		$o = new CreateOrderV3Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'order': $o->order = $this->load_Order($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'info': $o->info = $this->load_CreateOrderInfo($in); break;
						case 'payResult': $o->payResult = $this->load_string_property($in); break;
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
						case 'voucherIssuances': $o->voucherIssuances = ($this->load_VoucherIssuanceList($in))->voucherIssuance; break;
						case 'unappliedVoucherIssuances': $o->unappliedVoucherIssuances = ($this->load_UnappliedVoucherIssuanceList($in))->unappliedVoucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PayOrderResponse(\XMLReader $in) : PayOrderResponse {
		$n = $in->name;
		$o = new PayOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'voucherIssuances': $o->voucherIssuances = ($this->load_VoucherIssuanceList($in))->voucherIssuance; break;
						case 'unappliedVoucherIssuances': $o->unappliedVoucherIssuances = ($this->load_UnappliedVoucherIssuanceList($in))->unappliedVoucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PayOrderV2Response(\XMLReader $in) : PayOrderV2Response {
		$n = $in->name;
		$o = new PayOrderV2Response();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'voucherIssuances': $o->voucherIssuances = ($this->load_VoucherIssuanceList($in))->voucherIssuance; break;
						case 'unappliedVoucherIssuances': $o->unappliedVoucherIssuances = ($this->load_UnappliedVoucherIssuanceList($in))->unappliedVoucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PayTableOrderResponse(\XMLReader $in) : PayTableOrderResponse {
		$n = $in->name;
		$o = new PayTableOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'receiptId': $o->receiptId = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'voucherIssuances': $o->voucherIssuances = ($this->load_VoucherIssuanceList($in))->voucherIssuance; break;
						case 'unappliedVoucherIssuances': $o->unappliedVoucherIssuances = ($this->load_UnappliedVoucherIssuanceList($in))->unappliedVoucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_PrepayTableOrderResponse(\XMLReader $in) : PrepayTableOrderResponse {
		$n = $in->name;
		$o = new PrepayTableOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'voucherIssuances': $o->voucherIssuances = ($this->load_VoucherIssuanceList($in))->voucherIssuance; break;
						case 'unappliedVoucherIssuances': $o->unappliedVoucherIssuances = ($this->load_UnappliedVoucherIssuanceList($in))->unappliedVoucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOrdersByExtOrderIdsResponse(\XMLReader $in) : GetOrdersByExtOrderIdsResponse {
		$n = $in->name;
		$o = new GetOrdersByExtOrderIdsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderList': $o->orderList = ($this->load_OrderList($in))->order; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetProposalsResponse(\XMLReader $in) : GetProposalsResponse {
		$n = $in->name;
		$o = new GetProposalsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'proposalList': $o->proposalList = ($this->load_ProposalList($in))->proposal; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetProposalResponse(\XMLReader $in) : GetProposalResponse {
		$n = $in->name;
		$o = new GetProposalResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'proposal': $o->proposal = $this->load_Proposal($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveProposalResponse(\XMLReader $in) : SaveProposalResponse {
		$n = $in->name;
		$o = new SaveProposalResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'info': $o->info = $this->load_SaveProposalInfo($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CancelProposalResponse(\XMLReader $in) : CancelProposalResponse {
		$n = $in->name;
		$o = new CancelProposalResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'message': $o->message = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateOrderFromProposalResponse(\XMLReader $in) : CreateOrderFromProposalResponse {
		$n = $in->name;
		$o = new CreateOrderFromProposalResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'info': $o->info = $this->load_CreateOrderFromProposalInfo($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'unappliedVoucherIssuances': $o->unappliedVoucherIssuances = ($this->load_UnappliedVoucherIssuanceList($in))->unappliedVoucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateInvoiceFromProposalResponse(\XMLReader $in) : CreateInvoiceFromProposalResponse {
		$n = $in->name;
		$o = new CreateInvoiceFromProposalResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'info': $o->info = $this->load_CreateInvoiceFromProposalInfo($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'voucherIssuances': $o->voucherIssuances = ($this->load_VoucherIssuanceList($in))->voucherIssuance; break;
						case 'unappliedVoucherIssuances': $o->unappliedVoucherIssuances = ($this->load_UnappliedVoucherIssuanceList($in))->unappliedVoucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOrdersByReceiptsResponse(\XMLReader $in) : GetOrdersByReceiptsResponse {
		$n = $in->name;
		$o = new GetOrdersByReceiptsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderList': $o->orderList = ($this->load_OrderList($in))->order; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCurrentTableOrdersResponse(\XMLReader $in) : GetCurrentTableOrdersResponse {
		$n = $in->name;
		$o = new GetCurrentTableOrdersResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderList': $o->orderList = ($this->load_OrderList($in))->order; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetOrdersResponse(\XMLReader $in) : GetOrdersResponse {
		$n = $in->name;
		$o = new GetOrdersResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderList': $o->orderList = ($this->load_OrderList($in))->order; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DetermineContractLinesResponse(\XMLReader $in) : DetermineContractLinesResponse {
		$n = $in->name;
		$o = new DetermineContractLinesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineList': $o->lineList = ($this->load_LineList($in))->line; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateInvoiceFromPackingSlipsResponse(\XMLReader $in) : CreateInvoiceFromPackingSlipsResponse {
		$n = $in->name;
		$o = new CreateInvoiceFromPackingSlipsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
						case 'voucherIssuances': $o->voucherIssuances = ($this->load_VoucherIssuanceList($in))->voucherIssuance; break;
						case 'unappliedVoucherIssuances': $o->unappliedVoucherIssuances = ($this->load_UnappliedVoucherIssuanceList($in))->unappliedVoucherIssuance; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetCashCountInfoResponse(\XMLReader $in) : GetCashCountInfoResponse {
		$n = $in->name;
		$o = new GetCashCountInfoResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'cashCountInfo': $o->cashCountInfo = $this->load_CashCountInfo($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SaveCashCountResponse(\XMLReader $in) : SaveCashCountResponse {
		$n = $in->name;
		$o = new SaveCashCountResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'cashCountInfoState': $o->cashCountInfoState = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ProcessInvoiceResponse(\XMLReader $in) : ProcessInvoiceResponse {
		$n = $in->name;
		$o = new ProcessInvoiceResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'invoice': $o->invoice = $this->load_Invoice($in); break;
						case 'processorResult': $o->processorResult = $this->load_SalesProcessorResult($in); break;
						case 'resultCode': $o->resultCode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ProcessProposalResponse(\XMLReader $in) : ProcessProposalResponse {
		$n = $in->name;
		$o = new ProcessProposalResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'proposal': $o->proposal = $this->load_Proposal($in); break;
						case 'processorResult': $o->processorResult = $this->load_SalesProcessorResult($in); break;
						case 'resultCode': $o->resultCode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ProcessOrderResponse(\XMLReader $in) : ProcessOrderResponse {
		$n = $in->name;
		$o = new ProcessOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'order': $o->order = $this->load_Order($in); break;
						case 'queuedOrderId': $o->queuedOrderId = $this->load_string_property($in); break;
						case 'processorResult': $o->processorResult = $this->load_SalesProcessorResult($in); break;
						case 'resultCode': $o->resultCode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookConsumerEvent(\XMLReader $in) : WebhookConsumerEvent {
		$n = $in->name;
		$o = new WebhookConsumerEvent();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'eventName': $o->eventName = $this->load_string_property($in); break;
						case 'blocking': $o->blocking = $this->load_bool_property($in); break;
						case 'enabled': $o->enabled = $this->load_bool_property($in); break;
						case 'polling': $o->polling = $this->load_bool_property($in); break;
						case 'cancelRequiresAuth': $o->cancelRequiresAuth = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookConsumerEventList(\XMLReader $in) : WebhookConsumerEventList {
		$n = $in->name;
		$o = new WebhookConsumerEventList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'webhookConsumerEvent': $o->webhookConsumerEvent[] = $this->load_WebhookConsumerEvent($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookConsumerTriggerPattern(\XMLReader $in) : WebhookConsumerTriggerPattern {
		$n = $in->name;
		$o = new WebhookConsumerTriggerPattern();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'codeType': $o->codeType = $this->load_string_property($in); break;
						case 'pattern': $o->pattern = $this->load_string_property($in); break;
						case 'reject': $o->reject = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookConsumerTriggerPatternList(\XMLReader $in) : WebhookConsumerTriggerPatternList {
		$n = $in->name;
		$o = new WebhookConsumerTriggerPatternList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'webhookConsumerTriggerPattern': $o->webhookConsumerTriggerPattern[] = $this->load_WebhookConsumerTriggerPattern($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookConsumerWorkplace(\XMLReader $in) : WebhookConsumerWorkplace {
		$n = $in->name;
		$o = new WebhookConsumerWorkplace();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumbers': $o->workplaceNumbers[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookConsumerWorkplaceList(\XMLReader $in) : WebhookConsumerWorkplaceList {
		$n = $in->name;
		$o = new WebhookConsumerWorkplaceList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'webhookConsumerWorkplace': $o->webhookConsumerWorkplace[] = $this->load_WebhookConsumerWorkplace($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookConsumer(\XMLReader $in) : WebhookConsumer {
		$n = $in->name;
		$o = new WebhookConsumer();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'webhookConsumerId': $o->webhookConsumerId = $this->load_string_property($in); break;
						case 'applicationName': $o->applicationName = $this->load_string_property($in); break;
						case 'subscriptionId': $o->subscriptionId = $this->load_string_property($in); break;
						case 'endpointUrl': $o->endpointUrl = $this->load_string_property($in); break;
						case 'authenticationType': $o->authenticationType = $this->load_string_property($in); break;
						case 'authenticationScope': $o->authenticationScope = $this->load_string_property($in); break;
						case 'webhookConsumerEventList': $o->webhookConsumerEventList = ($this->load_WebhookConsumerEventList($in))->webhookConsumerEvent; break;
						case 'webhookConsumerTriggerPatternList': $o->webhookConsumerTriggerPatternList = ($this->load_WebhookConsumerTriggerPatternList($in))->webhookConsumerTriggerPattern; break;
						case 'webhookConsumerWorkplaceList': $o->webhookConsumerWorkplaceList = ($this->load_WebhookConsumerWorkplaceList($in))->webhookConsumerWorkplace; break;
						case 'webhookConsumerPaymentMethodList': $o->webhookConsumerPaymentMethodList = ($this->load_PaymentMethodList($in))->paymentMethod; break;
						case 'articleFilter': $o->articleFilter[] = $this->load_int_property($in); break;
						case 'companyName': $o->companyName = $this->load_string_property($in); break;
						case 'priority': $o->priority = $this->load_int_property($in); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'enabled': $o->enabled = $this->load_bool_property($in); break;
						case 'workplaceKey': $o->workplaceKey = $this->load_WorkplaceIdentifier($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookConsumerList(\XMLReader $in) : WebhookConsumerList {
		$n = $in->name;
		$o = new WebhookConsumerList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'webhookConsumer': $o->webhookConsumer[] = $this->load_WebhookConsumer($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetWebhookConsumersRequest(\XMLReader $in) : GetWebhookConsumersRequest {
		$n = $in->name;
		$o = new GetWebhookConsumersRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'workplace': $o->workplace = $this->load_WorkplaceIdentifier($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ExternalPaymentMessage(\XMLReader $in) : ExternalPaymentMessage {
		$n = $in->name;
		$o = new ExternalPaymentMessage();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'message': $o->message = $this->load_string_property($in); break;
						case 'customerMessage': $o->customerMessage = $this->load_string_property($in); break;
						case 'hideTimestamp': $o->hideTimestamp = $this->load_bool_property($in); break;
						case 'monospacedFont': $o->monospacedFont = $this->load_bool_property($in); break;
						case 'clearScreen': $o->clearScreen = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ExternalPaymentMessageList(\XMLReader $in) : ExternalPaymentMessageList {
		$n = $in->name;
		$o = new ExternalPaymentMessageList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'message': $o->message[] = $this->load_ExternalPaymentMessage($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ExternalPaymentCode(\XMLReader $in) : ExternalPaymentCode {
		$n = $in->name;
		$o = new ExternalPaymentCode();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'codeType': $o->codeType = $this->load_string_property($in); break;
						case 'code': $o->code = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_StartExternalPaymentRequest(\XMLReader $in) : StartExternalPaymentRequest {
		$n = $in->name;
		$o = new StartExternalPaymentRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'externalPaymentId': $o->externalPaymentId = $this->load_string_property($in); break;
						case 'method': $o->method = $this->load_string_property($in); break;
						case 'amount': $amount = $this->load_int_property($in); break;
						case 'callbackUrl': $o->callbackUrl = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->amount = isset($amount) ? BigDecimal::ofUnscaledValue($amount, 2) : null;
		return $o;
	}
	private function load_PollExternalPaymentRequest(\XMLReader $in) : PollExternalPaymentRequest {
		$n = $in->name;
		$o = new PollExternalPaymentRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'externalPaymentId': $o->externalPaymentId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RequestCancelExternalPaymentRequest(\XMLReader $in) : RequestCancelExternalPaymentRequest {
		$n = $in->name;
		$o = new RequestCancelExternalPaymentRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'externalPaymentId': $o->externalPaymentId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CancelExternalPaymentRequest(\XMLReader $in) : CancelExternalPaymentRequest {
		$n = $in->name;
		$o = new CancelExternalPaymentRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'externalPaymentId': $o->externalPaymentId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookBrowserInput(\XMLReader $in) : WebhookBrowserInput {
		$n = $in->name;
		$o = new WebhookBrowserInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'deviceType': $o->deviceType = $this->load_string_property($in); break;
						case 'platformFamily': $o->platformFamily = $this->load_string_property($in); break;
						case 'platformVersion': $o->platformVersion = $this->load_string_property($in); break;
						case 'browserFamily': $o->browserFamily = $this->load_string_property($in); break;
						case 'browserVersion': $o->browserVersion = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookDialogInput(\XMLReader $in) : WebhookDialogInput {
		$n = $in->name;
		$o = new WebhookDialogInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'dialogId': $o->dialogId = $this->load_int_property($in); break;
						case 'selectedDialogOptionIds': $o->selectedDialogOptionIds[] = $this->load_int_property($in); break;
						case 'dialogIdAsString': $o->dialogIdAsString = $this->load_string_property($in); break;
						case 'selectedDialogOptionIdsAsString': $o->selectedDialogOptionIdsAsString[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookFormFieldInput(\XMLReader $in) : WebhookFormFieldInput {
		$n = $in->name;
		$o = new WebhookFormFieldInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'value': $o->value = $this->load_string_property($in); break;
						case 'selected': $o->selected[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookFormInput(\XMLReader $in) : WebhookFormInput {
		$n = $in->name;
		$o = new WebhookFormInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'fields': $o->fields[] = $this->load_WebhookFormFieldInput($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookScanCodeInput(\XMLReader $in) : WebhookScanCodeInput {
		$n = $in->name;
		$o = new WebhookScanCodeInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'scannedCode': $o->scannedCode = $this->load_string_property($in); break;
						case 'codeType': $o->codeType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookOpenUrlInput(\XMLReader $in) : WebhookOpenUrlInput {
		$n = $in->name;
		$o = new WebhookOpenUrlInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'redirectUrl': $o->redirectUrl = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ApplyWebhookExternalDiscount(\XMLReader $in) : ApplyWebhookExternalDiscount {
		$n = $in->name;
		$o = new ApplyWebhookExternalDiscount();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'discountId': $o->discountId = $this->load_string_property($in); break;
						case 'discountDescription': $o->discountDescription = $this->load_string_property($in); break;
						case 'webhookConsumerId': $o->webhookConsumerId = $this->load_string_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_BigDecimal_property($in); break;
						case 'discountAmount': $o->discountAmount = $this->load_BigDecimal_property($in); break;
						case 'applyToQuantity': $o->applyToQuantity = $this->load_BigDecimal_property($in); break;
						case 'discountType': $o->discountType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookTableInput(\XMLReader $in) : WebhookTableInput {
		$n = $in->name;
		$o = new WebhookTableInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'number': $o->number = $this->load_int_property($in); break;
						case 'subNumber': $o->subNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookRelationInput(\XMLReader $in) : WebhookRelationInput {
		$n = $in->name;
		$o = new WebhookRelationInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookExternalDiscountInput(\XMLReader $in) : WebhookExternalDiscountInput {
		$n = $in->name;
		$o = new WebhookExternalDiscountInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'discountId': $o->discountId = $this->load_string_property($in); break;
						case 'discountDescription': $o->discountDescription = $this->load_string_property($in); break;
						case 'webhookConsumerId': $o->webhookConsumerId = $this->load_string_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_BigDecimal_property($in); break;
						case 'discountAmount': $o->discountAmount = $this->load_BigDecimal_property($in); break;
						case 'discountType': $o->discountType = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookSessionBaseLineInput(\XMLReader $in) : WebhookSessionBaseLineInput {
		$n = $in->name;
		$o = new WebhookSessionBaseLineInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineId': $o->lineId = $this->load_string_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'priceIncl': $o->priceIncl = $this->load_BigDecimal_property($in); break;
						case 'quantity': $o->quantity = $this->load_BigDecimal_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_BigDecimal_property($in); break;
						case 'discountAmount': $o->discountAmount = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookSessionLineInput(\XMLReader $in) : WebhookSessionLineInput {
		$n = $in->name;
		$o = new WebhookSessionLineInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineId': $o->lineId = $this->load_string_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'priceIncl': $o->priceIncl = $this->load_BigDecimal_property($in); break;
						case 'quantity': $o->quantity = $this->load_BigDecimal_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'discountPercentage': $o->discountPercentage = $this->load_BigDecimal_property($in); break;
						case 'discountAmount': $o->discountAmount = $this->load_BigDecimal_property($in); break;
						case 'externalDiscount': $o->externalDiscount = $this->load_WebhookExternalDiscountInput($in); break;
						case 'preparationMethods': $o->preparationMethods[] = $this->load_WebhookSessionBaseLineInput($in); break;
						case 'componentArticles': $o->componentArticles[] = $this->load_WebhookSessionBaseLineInput($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookSessionInput(\XMLReader $in) : WebhookSessionInput {
		$n = $in->name;
		$o = new WebhookSessionInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'sessionId': $o->sessionId = $this->load_string_property($in); break;
						case 'table': $o->table = $this->load_WebhookTableInput($in); break;
						case 'relation': $o->relation = $this->load_WebhookRelationInput($in); break;
						case 'lines': $o->lines[] = $this->load_WebhookSessionLineInput($in); break;
						case 'openAmount': $o->openAmount = $this->load_BigDecimal_property($in); break;
						case 'totalInclAmount': $o->totalInclAmount = $this->load_BigDecimal_property($in); break;
						case 'totalExclAmount': $o->totalExclAmount = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookSelectRelationInput(\XMLReader $in) : WebhookSelectRelationInput {
		$n = $in->name;
		$o = new WebhookSelectRelationInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookCustomActionInput(\XMLReader $in) : WebhookCustomActionInput {
		$n = $in->name;
		$o = new WebhookCustomActionInput();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'customActionId': $o->customActionId = $this->load_string_property($in); break;
						case 'buttonCaption': $o->buttonCaption = $this->load_string_property($in); break;
						case 'onStartup': $o->onStartup = $this->load_bool_property($in); break;
						case 'longClick': $o->longClick = $this->load_bool_property($in); break;
						case 'numpadValue': $o->numpadValue = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookMessage(\XMLReader $in) : WebhookMessage {
		$n = $in->name;
		$o = new WebhookMessage();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'message': $o->message = $this->load_string_property($in); break;
						case 'customerMessage': $o->customerMessage = $this->load_string_property($in); break;
						case 'messageDisplayTime': $o->messageDisplayTime = $this->load_int_property($in); break;
						case 'customerMessageDisplayTime': $o->customerMessageDisplayTime = $this->load_int_property($in); break;
						case 'hideTimestamp': $o->hideTimestamp = $this->load_bool_property($in); break;
						case 'clearScreen': $o->clearScreen = $this->load_bool_property($in); break;
						case 'clearCustomerScreen': $o->clearCustomerScreen = $this->load_bool_property($in); break;
						case 'monospacedFont': $o->monospacedFont = $this->load_bool_property($in); break;
						case 'backgroundColor': $o->backgroundColor = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookDialogOption(\XMLReader $in) : WebhookDialogOption {
		$n = $in->name;
		$o = new WebhookDialogOption();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'optionId': $o->optionId = $this->load_int_property($in); break;
						case 'optionName': $o->optionName = $this->load_string_property($in); break;
						case 'optionColor': $o->optionColor = $this->load_string_property($in); break;
						case 'optionIdAsString': $o->optionIdAsString = $this->load_string_property($in); break;
						case 'image': $o->image = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookDialog(\XMLReader $in) : WebhookDialog {
		$n = $in->name;
		$o = new WebhookDialog();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'required': $o->required = $this->load_bool_property($in); break;
						case 'allowMultipleOptions': $o->allowMultipleOptions = $this->load_bool_property($in); break;
						case 'requireConfirmation': $o->requireConfirmation = $this->load_bool_property($in); break;
						case 'columns': $o->columns = $this->load_int_property($in); break;
						case 'dialogId': $o->dialogId = $this->load_int_property($in); break;
						case 'dialogTitle': $o->dialogTitle = $this->load_string_property($in); break;
						case 'dialogOptions': $o->dialogOptions[] = $this->load_WebhookDialogOption($in); break;
						case 'dialogIdAsString': $o->dialogIdAsString = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookFormNumber(\XMLReader $in) : WebhookFormNumber {
		$n = $in->name;
		$o = new WebhookFormNumber();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'decimals': $o->decimals = $this->load_int_property($in); break;
						case 'minimumValue': $o->minimumValue = $this->load_BigDecimal_property($in); break;
						case 'maximumValue': $o->maximumValue = $this->load_BigDecimal_property($in); break;
						case 'allowNegative': $o->allowNegative = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookFormDaySchedule(\XMLReader $in) : WebhookFormDaySchedule {
		$n = $in->name;
		$o = new WebhookFormDaySchedule();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'available': $o->available = $this->load_bool_property($in); break;
						case 'fromHour': $o->fromHour = $this->load_int_property($in); break;
						case 'fromMinute': $o->fromMinute = $this->load_int_property($in); break;
						case 'throughHour': $o->throughHour = $this->load_int_property($in); break;
						case 'throughMinute': $o->throughMinute = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookFormCalendar(\XMLReader $in) : WebhookFormCalendar {
		$n = $in->name;
		$o = new WebhookFormCalendar();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'futureOnly': $o->futureOnly = $this->load_bool_property($in); break;
						case 'pastOnly': $o->pastOnly = $this->load_bool_property($in); break;
						case 'earliestDate': $o->earliestDate = $this->load_Date_property($in); break;
						case 'latestDate': $o->latestDate = $this->load_Date_property($in); break;
						case 'sunday': $o->sunday = $this->load_WebhookFormDaySchedule($in); break;
						case 'monday': $o->monday = $this->load_WebhookFormDaySchedule($in); break;
						case 'tuesday': $o->tuesday = $this->load_WebhookFormDaySchedule($in); break;
						case 'wednesday': $o->wednesday = $this->load_WebhookFormDaySchedule($in); break;
						case 'thursday': $o->thursday = $this->load_WebhookFormDaySchedule($in); break;
						case 'friday': $o->friday = $this->load_WebhookFormDaySchedule($in); break;
						case 'saturday': $o->saturday = $this->load_WebhookFormDaySchedule($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookFormOption(\XMLReader $in) : WebhookFormOption {
		$n = $in->name;
		$o = new WebhookFormOption();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'label': $o->label = $this->load_string_property($in); break;
						case 'selected': $o->selected = $this->load_bool_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'barcode': $o->barcode = $this->load_string_property($in); break;
						case 'supplierArticleNumber': $o->supplierArticleNumber = $this->load_string_property($in); break;
						case 'pluNumber': $o->pluNumber = $this->load_string_property($in); break;
						case 'extArticleId': $o->extArticleId = $this->load_string_property($in); break;
						case 'color': $o->color = $this->load_string_property($in); break;
						case 'image': $o->image = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookFormSelect(\XMLReader $in) : WebhookFormSelect {
		$n = $in->name;
		$o = new WebhookFormSelect();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'multiple': $o->multiple = $this->load_bool_property($in); break;
						case 'columns': $o->columns = $this->load_int_property($in); break;
						case 'options': $o->options[] = $this->load_WebhookFormOption($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookFormField(\XMLReader $in) : WebhookFormField {
		$n = $in->name;
		$o = new WebhookFormField();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'required': $o->required = $this->load_bool_property($in); break;
						case 'label': $o->label = $this->load_string_property($in); break;
						case 'hint': $o->hint = $this->load_string_property($in); break;
						case 'value': $o->value = $this->load_string_property($in); break;
						case 'minimumLength': $o->minimumLength = $this->load_int_property($in); break;
						case 'maximumLength': $o->maximumLength = $this->load_int_property($in); break;
						case 'regex': $o->regex = $this->load_string_property($in); break;
						case 'prefix': $o->prefix = $this->load_string_property($in); break;
						case 'suffix': $o->suffix = $this->load_string_property($in); break;
						case 'number': $o->number = $this->load_WebhookFormNumber($in); break;
						case 'calendar': $o->calendar = $this->load_WebhookFormCalendar($in); break;
						case 'select': $o->select = $this->load_WebhookFormSelect($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookForm(\XMLReader $in) : WebhookForm {
		$n = $in->name;
		$o = new WebhookForm();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_string_property($in); break;
						case 'title': $o->title = $this->load_string_property($in); break;
						case 'enableReset': $o->enableReset = $this->load_bool_property($in); break;
						case 'submitText': $o->submitText = $this->load_string_property($in); break;
						case 'cancelText': $o->cancelText = $this->load_string_property($in); break;
						case 'fields': $o->fields[] = $this->load_WebhookFormField($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookDisplayBarcode(\XMLReader $in) : WebhookDisplayBarcode {
		$n = $in->name;
		$o = new WebhookDisplayBarcode();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'codeType': $o->codeType = $this->load_string_property($in); break;
						case 'code': $o->code = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookOpenUrl(\XMLReader $in) : WebhookOpenUrl {
		$n = $in->name;
		$o = new WebhookOpenUrl();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'url': $o->url = $this->load_string_property($in); break;
						case 'autoOpen': $o->autoOpen = $this->load_bool_property($in); break;
						case 'urlTitle': $o->urlTitle = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookError(\XMLReader $in) : WebhookError {
		$n = $in->name;
		$o = new WebhookError();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'code': $o->code = $this->load_string_property($in); break;
						case 'message': $o->message = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookRequestScanCode(\XMLReader $in) : WebhookRequestScanCode {
		$n = $in->name;
		$o = new WebhookRequestScanCode();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'required': $o->required = $this->load_bool_property($in); break;
						case 'requestTitle': $o->requestTitle = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookScanCode(\XMLReader $in) : WebhookScanCode {
		$n = $in->name;
		$o = new WebhookScanCode();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'recognized': $o->recognized = $this->load_bool_property($in); break;
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookLineChange(\XMLReader $in) : WebhookLineChange {
		$n = $in->name;
		$o = new WebhookLineChange();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineId': $o->lineId = $this->load_string_property($in); break;
						case 'externalDiscount': $o->externalDiscount = $this->load_ApplyWebhookExternalDiscount($in); break;
						case 'webhookConsumerId': $o->webhookConsumerId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookLineAddition(\XMLReader $in) : WebhookLineAddition {
		$n = $in->name;
		$o = new WebhookLineAddition();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineId': $o->lineId = $this->load_string_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'barcode': $o->barcode = $this->load_string_property($in); break;
						case 'pluNumber': $o->pluNumber = $this->load_string_property($in); break;
						case 'supplierArticleNumber': $o->supplierArticleNumber = $this->load_string_property($in); break;
						case 'extArticleId': $o->extArticleId = $this->load_string_property($in); break;
						case 'priceIncl': $o->priceIncl = $this->load_BigDecimal_property($in); break;
						case 'quantity': $o->quantity = $this->load_BigDecimal_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
						case 'externalDiscount': $o->externalDiscount = $this->load_ApplyWebhookExternalDiscount($in); break;
						case 'webhookConsumerId': $o->webhookConsumerId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookLineDeletion(\XMLReader $in) : WebhookLineDeletion {
		$n = $in->name;
		$o = new WebhookLineDeletion();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'lineId': $o->lineId = $this->load_string_property($in); break;
						case 'webhookConsumerId': $o->webhookConsumerId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookReq(\XMLReader $in) : WebhookReq {
		$n = $in->name;
		$o = new WebhookReq();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'browser': $o->browser = $this->load_WebhookBrowserInput($in); break;
						case 'dialog': $o->dialog = $this->load_WebhookDialogInput($in); break;
						case 'scanCode': $o->scanCode = $this->load_WebhookScanCodeInput($in); break;
						case 'openUrl': $o->openUrl = $this->load_WebhookOpenUrlInput($in); break;
						case 'session': $o->session = $this->load_WebhookSessionInput($in); break;
						case 'addSessionLine': $o->addSessionLine = $this->load_WebhookSessionLineInput($in); break;
						case 'updateSessionLine': $o->updateSessionLine = $this->load_WebhookSessionLineInput($in); break;
						case 'removeSessionLine': $o->removeSessionLine = $this->load_WebhookSessionLineInput($in); break;
						case 'selectRelation': $o->selectRelation = $this->load_WebhookSelectRelationInput($in); break;
						case 'customAction': $o->customAction = $this->load_WebhookCustomActionInput($in); break;
						case 'form': $o->form = $this->load_WebhookFormInput($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ExternalPaymentReq(\XMLReader $in) : ExternalPaymentReq {
		$n = $in->name;
		$o = new ExternalPaymentReq();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'externalPaymentId': $o->externalPaymentId = $this->load_string_property($in); break;
						case 'method': $o->method = $this->load_string_property($in); break;
						case 'amount': $amount = $this->load_int_property($in); break;
						case 'callbackUrl': $o->callbackUrl = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->amount = isset($amount) ? BigDecimal::ofUnscaledValue($amount, 2) : null;
		return $o;
	}
	private function load_ExternalPaymentResp(\XMLReader $in) : ExternalPaymentResp {
		$n = $in->name;
		$o = new ExternalPaymentResp();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'externalPaymentId': $o->externalPaymentId = $this->load_string_property($in); break;
						case 'started': $o->started = $this->load_bool_property($in); break;
						case 'confirmed': $o->confirmed = $this->load_bool_property($in); break;
						case 'cancelled': $o->cancelled = $this->load_bool_property($in); break;
						case 'finalAmount': $finalAmount = $this->load_int_property($in); break;
						case 'externalTransactionReference': $o->externalTransactionReference = $this->load_string_property($in); break;
						case 'receiptTexts': $o->receiptTexts[] = $this->load_ExternalPaymentReceiptText($in); break;
						case 'cardType': $o->cardType = $this->load_string_property($in); break;
						case 'terminalId': $o->terminalId = $this->load_string_property($in); break;
						case 'externalMethod': $o->externalMethod = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->finalAmount = isset($finalAmount) ? BigDecimal::ofUnscaledValue($finalAmount, 2) : null;
		return $o;
	}
	private function load_ExternalPaymentWebhookRequest(\XMLReader $in) : ExternalPaymentWebhookRequest {
		$n = $in->name;
		$o = new ExternalPaymentWebhookRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'browser': $o->browser = $this->load_WebhookBrowserInput($in); break;
						case 'dialog': $o->dialog = $this->load_WebhookDialogInput($in); break;
						case 'scanCode': $o->scanCode = $this->load_WebhookScanCodeInput($in); break;
						case 'openUrl': $o->openUrl = $this->load_WebhookOpenUrlInput($in); break;
						case 'session': $o->session = $this->load_WebhookSessionInput($in); break;
						case 'addSessionLine': $o->addSessionLine = $this->load_WebhookSessionLineInput($in); break;
						case 'updateSessionLine': $o->updateSessionLine = $this->load_WebhookSessionLineInput($in); break;
						case 'removeSessionLine': $o->removeSessionLine = $this->load_WebhookSessionLineInput($in); break;
						case 'selectRelation': $o->selectRelation = $this->load_WebhookSelectRelationInput($in); break;
						case 'customAction': $o->customAction = $this->load_WebhookCustomActionInput($in); break;
						case 'form': $o->form = $this->load_WebhookFormInput($in); break;
						case 'externalPayment': $o->externalPayment = $this->load_ExternalPaymentReq($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_SendWebhookRequest(\XMLReader $in) : SendWebhookRequest {
		$n = $in->name;
		$o = new SendWebhookRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'browser': $o->browser = $this->load_WebhookBrowserInput($in); break;
						case 'dialog': $o->dialog = $this->load_WebhookDialogInput($in); break;
						case 'scanCode': $o->scanCode = $this->load_WebhookScanCodeInput($in); break;
						case 'openUrl': $o->openUrl = $this->load_WebhookOpenUrlInput($in); break;
						case 'session': $o->session = $this->load_WebhookSessionInput($in); break;
						case 'addSessionLine': $o->addSessionLine = $this->load_WebhookSessionLineInput($in); break;
						case 'updateSessionLine': $o->updateSessionLine = $this->load_WebhookSessionLineInput($in); break;
						case 'removeSessionLine': $o->removeSessionLine = $this->load_WebhookSessionLineInput($in); break;
						case 'selectRelation': $o->selectRelation = $this->load_WebhookSelectRelationInput($in); break;
						case 'customAction': $o->customAction = $this->load_WebhookCustomActionInput($in); break;
						case 'form': $o->form = $this->load_WebhookFormInput($in); break;
						case 'webhookEvent': $o->webhookEvent = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetWebhookConsumersResponse(\XMLReader $in) : GetWebhookConsumersResponse {
		$n = $in->name;
		$o = new GetWebhookConsumersResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'webhookConsumerList': $o->webhookConsumerList = ($this->load_WebhookConsumerList($in))->webhookConsumer; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_StartExternalPaymentResponse(\XMLReader $in) : StartExternalPaymentResponse {
		$n = $in->name;
		$o = new StartExternalPaymentResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'isStarted': $o->isStarted = $this->load_bool_property($in); break;
						case 'isConfirmed': $o->isConfirmed = $this->load_bool_property($in); break;
						case 'isCancelled': $o->isCancelled = $this->load_bool_property($in); break;
						case 'finalAmount': $finalAmount = $this->load_int_property($in); break;
						case 'messages': $o->messages = ($this->load_ExternalPaymentMessageList($in))->message; break;
						case 'code': $o->code = $this->load_ExternalPaymentCode($in); break;
						case 'url': $o->url = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->finalAmount = isset($finalAmount) ? BigDecimal::ofUnscaledValue($finalAmount, 2) : null;
		return $o;
	}
	private function load_PollExternalPaymentResponse(\XMLReader $in) : PollExternalPaymentResponse {
		$n = $in->name;
		$o = new PollExternalPaymentResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'isConfirmed': $o->isConfirmed = $this->load_bool_property($in); break;
						case 'isCancelled': $o->isCancelled = $this->load_bool_property($in); break;
						case 'finalAmount': $finalAmount = $this->load_int_property($in); break;
						case 'messages': $o->messages = ($this->load_ExternalPaymentMessageList($in))->message; break;
						case 'code': $o->code = $this->load_ExternalPaymentCode($in); break;
						case 'url': $o->url = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->finalAmount = isset($finalAmount) ? BigDecimal::ofUnscaledValue($finalAmount, 2) : null;
		return $o;
	}
	private function load_RequestCancelExternalPaymentResponse(\XMLReader $in) : RequestCancelExternalPaymentResponse {
		$n = $in->name;
		$o = new RequestCancelExternalPaymentResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'isConfirmed': $o->isConfirmed = $this->load_bool_property($in); break;
						case 'isCancelled': $o->isCancelled = $this->load_bool_property($in); break;
						case 'finalAmount': $finalAmount = $this->load_int_property($in); break;
						case 'messages': $o->messages = ($this->load_ExternalPaymentMessageList($in))->message; break;
						case 'code': $o->code = $this->load_ExternalPaymentCode($in); break;
						case 'url': $o->url = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->finalAmount = isset($finalAmount) ? BigDecimal::ofUnscaledValue($finalAmount, 2) : null;
		return $o;
	}
	private function load_CancelExternalPaymentResponse(\XMLReader $in) : CancelExternalPaymentResponse {
		$n = $in->name;
		$o = new CancelExternalPaymentResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ExternalPaymentWebhookResponse(\XMLReader $in) : ExternalPaymentWebhookResponse {
		$n = $in->name;
		$o = new ExternalPaymentWebhookResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'messages': $o->messages[] = $this->load_WebhookMessage($in); break;
						case 'dialog': $o->dialog = $this->load_WebhookDialog($in); break;
						case 'displayBarcode': $o->displayBarcode = $this->load_WebhookDisplayBarcode($in); break;
						case 'openUrl': $o->openUrl = $this->load_WebhookOpenUrl($in); break;
						case 'error': $o->error = $this->load_WebhookError($in); break;
						case 'requestScanCode': $o->requestScanCode = $this->load_WebhookRequestScanCode($in); break;
						case 'scanCode': $o->scanCode = $this->load_WebhookScanCode($in); break;
						case 'lineChanges': $o->lineChanges[] = $this->load_WebhookLineChange($in); break;
						case 'lineAdditions': $o->lineAdditions[] = $this->load_WebhookLineAddition($in); break;
						case 'lineDeletions': $o->lineDeletions[] = $this->load_WebhookLineDeletion($in); break;
						case 'keepPolling': $o->keepPolling = $this->load_bool_property($in); break;
						case 'form': $o->form = $this->load_WebhookForm($in); break;
						case 'externalPayment': $o->externalPayment = $this->load_ExternalPaymentResp($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_WebhookResp(\XMLReader $in) : WebhookResp {
		$n = $in->name;
		$o = new WebhookResp();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'messages': $o->messages[] = $this->load_WebhookMessage($in); break;
						case 'dialog': $o->dialog = $this->load_WebhookDialog($in); break;
						case 'displayBarcode': $o->displayBarcode = $this->load_WebhookDisplayBarcode($in); break;
						case 'openUrl': $o->openUrl = $this->load_WebhookOpenUrl($in); break;
						case 'error': $o->error = $this->load_WebhookError($in); break;
						case 'requestScanCode': $o->requestScanCode = $this->load_WebhookRequestScanCode($in); break;
						case 'scanCode': $o->scanCode = $this->load_WebhookScanCode($in); break;
						case 'lineChanges': $o->lineChanges[] = $this->load_WebhookLineChange($in); break;
						case 'lineAdditions': $o->lineAdditions[] = $this->load_WebhookLineAddition($in); break;
						case 'lineDeletions': $o->lineDeletions[] = $this->load_WebhookLineDeletion($in); break;
						case 'keepPolling': $o->keepPolling = $this->load_bool_property($in); break;
						case 'form': $o->form = $this->load_WebhookForm($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_InterbranchOrderLine(\XMLReader $in) : InterbranchOrderLine {
		$n = $in->name;
		$o = new InterbranchOrderLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'quantity': $quantity = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->quantity = isset($quantity) ? BigDecimal::ofUnscaledValue($quantity, $decimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_InterbranchOrderLineList(\XMLReader $in) : InterbranchOrderLineList {
		$n = $in->name;
		$o = new InterbranchOrderLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchOrderLine': $o->interbranchOrderLine[] = $this->load_InterbranchOrderLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_InterbranchOrder(\XMLReader $in) : InterbranchOrder {
		$n = $in->name;
		$o = new InterbranchOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchOrderNumber': $o->interbranchOrderNumber = $this->load_YearNumber($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'fromBranchNumber': $o->fromBranchNumber = $this->load_int_property($in); break;
						case 'toBranchNumber': $o->toBranchNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'interbranchOrderState': $o->interbranchOrderState = $this->load_string_property($in); break;
						case 'interbranchOrderLineList': $o->interbranchOrderLineList = ($this->load_InterbranchOrderLineList($in))->interbranchOrderLine; break;
						case 'scancode': $o->scancode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_InterbranchOrderList(\XMLReader $in) : InterbranchOrderList {
		$n = $in->name;
		$o = new InterbranchOrderList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchOrder': $o->interbranchOrder[] = $this->load_InterbranchOrder($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetInterbranchOrdersRequest(\XMLReader $in) : GetInterbranchOrdersRequest {
		$n = $in->name;
		$o = new GetInterbranchOrdersRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
						case 'fromBranchNumber': $o->fromBranchNumber = $this->load_int_property($in); break;
						case 'toBranchNumber': $o->toBranchNumber = $this->load_int_property($in); break;
						case 'interbranchOrderState': $o->interbranchOrderState[] = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_InterbranchOrderRequest(\XMLReader $in) : InterbranchOrderRequest {
		$n = $in->name;
		$o = new InterbranchOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fromBranchNumber': $o->fromBranchNumber = $this->load_int_property($in); break;
						case 'toBranchNumber': $o->toBranchNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'interbranchOrderLineList': $o->interbranchOrderLineList = ($this->load_InterbranchOrderLineList($in))->interbranchOrderLine; break;
						case 'scancode': $o->scancode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateInterbranchOrderRequest(\XMLReader $in) : CreateInterbranchOrderRequest {
		$n = $in->name;
		$o = new CreateInterbranchOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchOrderRequest': $o->interbranchOrderRequest = $this->load_InterbranchOrderRequest($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateInterbranchOrderRequest(\XMLReader $in) : UpdateInterbranchOrderRequest {
		$n = $in->name;
		$o = new UpdateInterbranchOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchOrderNumber': $o->interbranchOrderNumber = $this->load_YearNumber($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'interbranchOrderLineList': $o->interbranchOrderLineList = ($this->load_InterbranchOrderLineList($in))->interbranchOrderLine; break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'scancode': $o->scancode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ClaimInterbranchOrderRequest(\XMLReader $in) : ClaimInterbranchOrderRequest {
		$n = $in->name;
		$o = new ClaimInterbranchOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchOrderNumber': $o->interbranchOrderNumber = $this->load_YearNumber($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReleaseInterbranchOrderRequest(\XMLReader $in) : ReleaseInterbranchOrderRequest {
		$n = $in->name;
		$o = new ReleaseInterbranchOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchOrderNumber': $o->interbranchOrderNumber = $this->load_YearNumber($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CancelInterbranchOrderRequest(\XMLReader $in) : CancelInterbranchOrderRequest {
		$n = $in->name;
		$o = new CancelInterbranchOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchOrderNumber': $o->interbranchOrderNumber = $this->load_YearNumber($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_InterbranchShipmentLine(\XMLReader $in) : InterbranchShipmentLine {
		$n = $in->name;
		$o = new InterbranchShipmentLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'quantity': $quantity = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
						case 'cancelledQuantity': $cancelledQuantity = $this->load_int_property($in); break;
						case 'cancelledDecimalPlaces': $cancelledDecimalPlaces = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->quantity = isset($quantity) ? BigDecimal::ofUnscaledValue($quantity, $decimalPlaces ?? 2) : null;
		$o->cancelledQuantity = isset($cancelledQuantity) ? BigDecimal::ofUnscaledValue($cancelledQuantity, $cancelledDecimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_InterbranchShipmentLineList(\XMLReader $in) : InterbranchShipmentLineList {
		$n = $in->name;
		$o = new InterbranchShipmentLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchShipmentLine': $o->interbranchShipmentLine[] = $this->load_InterbranchShipmentLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_InterbranchShipment(\XMLReader $in) : InterbranchShipment {
		$n = $in->name;
		$o = new InterbranchShipment();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchShipmentNumber': $o->interbranchShipmentNumber = $this->load_YearNumber($in); break;
						case 'interbranchOrderNumber': $o->interbranchOrderNumber = $this->load_YearNumber($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'fromBranchNumber': $o->fromBranchNumber = $this->load_int_property($in); break;
						case 'toBranchNumber': $o->toBranchNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'interbranchShipmentState': $o->interbranchShipmentState = $this->load_string_property($in); break;
						case 'interbranchShipmentLineList': $o->interbranchShipmentLineList = ($this->load_InterbranchShipmentLineList($in))->interbranchShipmentLine; break;
						case 'scancode': $o->scancode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_InterbranchShipmentList(\XMLReader $in) : InterbranchShipmentList {
		$n = $in->name;
		$o = new InterbranchShipmentList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchShipment': $o->interbranchShipment[] = $this->load_InterbranchShipment($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetInterbranchShipmentsRequest(\XMLReader $in) : GetInterbranchShipmentsRequest {
		$n = $in->name;
		$o = new GetInterbranchShipmentsRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ShipInterbranchOrderRequest(\XMLReader $in) : ShipInterbranchOrderRequest {
		$n = $in->name;
		$o = new ShipInterbranchOrderRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchOrderNumber': $o->interbranchOrderNumber = $this->load_YearNumber($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'interbranchOrderLineList': $o->interbranchOrderLineList = ($this->load_InterbranchOrderLineList($in))->interbranchOrderLine; break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'scancode': $o->scancode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_InterbranchDeliveryLine(\XMLReader $in) : InterbranchDeliveryLine {
		$n = $in->name;
		$o = new InterbranchDeliveryLine();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'quantity': $quantity = $this->load_int_property($in); break;
						case 'decimalPlaces': $decimalPlaces = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->quantity = isset($quantity) ? BigDecimal::ofUnscaledValue($quantity, $decimalPlaces ?? 2) : null;
		return $o;
	}
	private function load_InterbranchDeliveryLineList(\XMLReader $in) : InterbranchDeliveryLineList {
		$n = $in->name;
		$o = new InterbranchDeliveryLineList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchDeliveryLine': $o->interbranchDeliveryLine[] = $this->load_InterbranchDeliveryLine($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_InterbranchDelivery(\XMLReader $in) : InterbranchDelivery {
		$n = $in->name;
		$o = new InterbranchDelivery();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchDeliveryNumber': $o->interbranchDeliveryNumber = $this->load_YearNumberPart($in); break;
						case 'interbranchShipmentNumber': $o->interbranchShipmentNumber = $this->load_YearNumber($in); break;
						case 'interbranchOrderNumber': $o->interbranchOrderNumber = $this->load_YearNumber($in); break;
						case 'entryTimestamp': $o->entryTimestamp = $this->load_SoapMplusDateTime($in)->toDateTime(); break;
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'fromBranchNumber': $o->fromBranchNumber = $this->load_int_property($in); break;
						case 'toBranchNumber': $o->toBranchNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'interbranchDeliveryLineList': $o->interbranchDeliveryLineList = ($this->load_InterbranchDeliveryLineList($in))->interbranchDeliveryLine; break;
						case 'scancode': $o->scancode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_InterbranchDeliveryList(\XMLReader $in) : InterbranchDeliveryList {
		$n = $in->name;
		$o = new InterbranchDeliveryList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchDelivery': $o->interbranchDelivery[] = $this->load_InterbranchDelivery($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetInterbranchDeliveriesRequest(\XMLReader $in) : GetInterbranchDeliveriesRequest {
		$n = $in->name;
		$o = new GetInterbranchDeliveriesRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'syncMarker': $o->syncMarker = $this->load_int_property($in); break;
						case 'syncMarkerLimit': $o->syncMarkerLimit = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeliverInterbranchShipmentRequest(\XMLReader $in) : DeliverInterbranchShipmentRequest {
		$n = $in->name;
		$o = new DeliverInterbranchShipmentRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchShipmentNumber': $o->interbranchShipmentNumber = $this->load_YearNumber($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_InterbranchShipmentRequest(\XMLReader $in) : InterbranchShipmentRequest {
		$n = $in->name;
		$o = new InterbranchShipmentRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fromBranchNumber': $o->fromBranchNumber = $this->load_int_property($in); break;
						case 'toBranchNumber': $o->toBranchNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'interbranchOrderLineList': $o->interbranchOrderLineList = ($this->load_InterbranchOrderLineList($in))->interbranchOrderLine; break;
						case 'scancode': $o->scancode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateInterbranchShipmentRequest(\XMLReader $in) : CreateInterbranchShipmentRequest {
		$n = $in->name;
		$o = new CreateInterbranchShipmentRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchShipmentRequest': $o->interbranchShipmentRequest = $this->load_InterbranchShipmentRequest($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_InterbranchDeliveryRequest(\XMLReader $in) : InterbranchDeliveryRequest {
		$n = $in->name;
		$o = new InterbranchDeliveryRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fromBranchNumber': $o->fromBranchNumber = $this->load_int_property($in); break;
						case 'toBranchNumber': $o->toBranchNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'reference': $o->reference = $this->load_string_property($in); break;
						case 'interbranchOrderLineList': $o->interbranchOrderLineList = ($this->load_InterbranchOrderLineList($in))->interbranchOrderLine; break;
						case 'scancode': $o->scancode = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateInterbranchDeliveryRequest(\XMLReader $in) : CreateInterbranchDeliveryRequest {
		$n = $in->name;
		$o = new CreateInterbranchDeliveryRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchDeliveryRequest': $o->interbranchDeliveryRequest = $this->load_InterbranchDeliveryRequest($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'workplaceNumber': $o->workplaceNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ArticleFilter(\XMLReader $in) : ArticleFilter {
		$n = $in->name;
		$o = new ArticleFilter();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'articleNumbers': $o->articleNumbers[] = $this->load_int_property($in); break;
						case 'turnoverGroupNumbers': $o->turnoverGroupNumbers[] = $this->load_int_property($in); break;
						case 'articleCategoryIds': $o->articleCategoryIds[] = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RunInterbranchPlannerRequest(\XMLReader $in) : RunInterbranchPlannerRequest {
		$n = $in->name;
		$o = new RunInterbranchPlannerRequest();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyKey': $o->idempotencyKey = $this->load_string_property($in); break;
						case 'mode': $o->mode = $this->load_string_property($in); break;
						case 'fromBranchNumbers': $o->fromBranchNumbers[] = $this->load_int_property($in); break;
						case 'toBranchNumbers': $o->toBranchNumbers[] = $this->load_int_property($in); break;
						case 'articleFilter': $o->articleFilter = $this->load_ArticleFilter($in); break;
						case 'roundByPrimaryPackaging': $o->roundByPrimaryPackaging = $this->load_bool_property($in); break;
						case 'defaultPrimaryPackaging': $o->defaultPrimaryPackaging = $this->load_BigDecimal_property($in); break;
						case 'roundBySpecificPackaging': $o->roundBySpecificPackaging = $this->load_BigDecimal_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_InterbranchPlannerMessage(\XMLReader $in) : InterbranchPlannerMessage {
		$n = $in->name;
		$o = new InterbranchPlannerMessage();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'fromBranchNumber': $o->fromBranchNumber = $this->load_int_property($in); break;
						case 'toBranchNumber': $o->toBranchNumber = $this->load_int_property($in); break;
						case 'articleNumber': $o->articleNumber = $this->load_int_property($in); break;
						case 'type': $o->type = $this->load_string_property($in); break;
						case 'text': $o->text = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetInterbranchOrdersResponse(\XMLReader $in) : GetInterbranchOrdersResponse {
		$n = $in->name;
		$o = new GetInterbranchOrdersResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchOrderList': $o->interbranchOrderList = ($this->load_InterbranchOrderList($in))->interbranchOrder; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateInterbranchOrderResponse(\XMLReader $in) : CreateInterbranchOrderResponse {
		$n = $in->name;
		$o = new CreateInterbranchOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'interbranchOrder': $o->interbranchOrder = $this->load_InterbranchOrder($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_UpdateInterbranchOrderResponse(\XMLReader $in) : UpdateInterbranchOrderResponse {
		$n = $in->name;
		$o = new UpdateInterbranchOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'interbranchOrder': $o->interbranchOrder = $this->load_InterbranchOrder($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ClaimInterbranchOrderResponse(\XMLReader $in) : ClaimInterbranchOrderResponse {
		$n = $in->name;
		$o = new ClaimInterbranchOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'interbranchOrder': $o->interbranchOrder = $this->load_InterbranchOrder($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ReleaseInterbranchOrderResponse(\XMLReader $in) : ReleaseInterbranchOrderResponse {
		$n = $in->name;
		$o = new ReleaseInterbranchOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'interbranchOrder': $o->interbranchOrder = $this->load_InterbranchOrder($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CancelInterbranchOrderResponse(\XMLReader $in) : CancelInterbranchOrderResponse {
		$n = $in->name;
		$o = new CancelInterbranchOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'interbranchOrder': $o->interbranchOrder = $this->load_InterbranchOrder($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetInterbranchShipmentsResponse(\XMLReader $in) : GetInterbranchShipmentsResponse {
		$n = $in->name;
		$o = new GetInterbranchShipmentsResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchShipmentList': $o->interbranchShipmentList = ($this->load_InterbranchShipmentList($in))->interbranchShipment; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_ShipInterbranchOrderResponse(\XMLReader $in) : ShipInterbranchOrderResponse {
		$n = $in->name;
		$o = new ShipInterbranchOrderResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'interbranchShipment': $o->interbranchShipment = $this->load_InterbranchShipment($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_GetInterbranchDeliveriesResponse(\XMLReader $in) : GetInterbranchDeliveriesResponse {
		$n = $in->name;
		$o = new GetInterbranchDeliveriesResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'interbranchDeliveryList': $o->interbranchDeliveryList = ($this->load_InterbranchDeliveryList($in))->interbranchDelivery; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_DeliverInterbranchShipmentResponse(\XMLReader $in) : DeliverInterbranchShipmentResponse {
		$n = $in->name;
		$o = new DeliverInterbranchShipmentResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'interbranchDelivery': $o->interbranchDelivery = $this->load_InterbranchDelivery($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateInterbranchShipmentResponse(\XMLReader $in) : CreateInterbranchShipmentResponse {
		$n = $in->name;
		$o = new CreateInterbranchShipmentResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'interbranchShipment': $o->interbranchShipment = $this->load_InterbranchShipment($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_CreateInterbranchDeliveryResponse(\XMLReader $in) : CreateInterbranchDeliveryResponse {
		$n = $in->name;
		$o = new CreateInterbranchDeliveryResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'interbranchDelivery': $o->interbranchDelivery = $this->load_InterbranchDelivery($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_RunInterbranchPlannerResponse(\XMLReader $in) : RunInterbranchPlannerResponse {
		$n = $in->name;
		$o = new RunInterbranchPlannerResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'idempotencyResult': $o->idempotencyResult = $this->load_string_property($in); break;
						case 'result': $o->result = $this->load_string_property($in); break;
						case 'errorMessage': $o->errorMessage = $this->load_string_property($in); break;
						case 'createdInterbranchOrders': $o->createdInterbranchOrders[] = $this->load_YearNumber($in); break;
						case 'updatedInterbranchOrders': $o->updatedInterbranchOrders[] = $this->load_YearNumber($in); break;
						case 'messages': $o->messages[] = $this->load_InterbranchPlannerMessage($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getSalesPriceList(\XMLReader $in) : getSalesPriceList {
		$n = $in->name;
		$o = new getSalesPriceList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPriceGroupList(\XMLReader $in) : getPriceGroupList {
		$n = $in->name;
		$o = new getPriceGroupList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_logMistake(\XMLReader $in) : logMistake {
		$n = $in->name;
		$o = new logMistake();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'request': $o->request = $this->load_LogMistakeRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createRelation(\XMLReader $in) : createRelation {
		$n = $in->name;
		$o = new createRelation();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relation': $o->relation = $this->load_Relation($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateRelation(\XMLReader $in) : updateRelation {
		$n = $in->name;
		$o = new updateRelation();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relation': $o->relation = $this->load_Relation($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getRelation(\XMLReader $in) : getRelation {
		$n = $in->name;
		$o = new getRelation();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relationNumber': $o->relationNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_findRelation(\XMLReader $in) : findRelation {
		$n = $in->name;
		$o = new findRelation();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'relation': $o->relation = $this->load_Relation($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getRelations(\XMLReader $in) : getRelations {
		$n = $in->name;
		$o = new getRelations();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetRelationsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getCustomFieldLists(\XMLReader $in) : getCustomFieldLists {
		$n = $in->name;
		$o = new getCustomFieldLists();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getCardCategories(\XMLReader $in) : getCardCategories {
		$n = $in->name;
		$o = new getCardCategories();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_adjustPoints(\XMLReader $in) : adjustPoints {
		$n = $in->name;
		$o = new adjustPoints();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_AdjustPointsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getRelationPoints_(\XMLReader $in) : getRelationPoints_ {
		$n = $in->name;
		$o = new getRelationPoints_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetRelationPointsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getEmployees(\XMLReader $in) : getEmployees {
		$n = $in->name;
		$o = new getEmployees();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_getEmployeesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getEmployee(\XMLReader $in) : getEmployee {
		$n = $in->name;
		$o = new getEmployee();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_findEmployee(\XMLReader $in) : findEmployee {
		$n = $in->name;
		$o = new findEmployee();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employee': $o->employee = $this->load_Employee($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createEmployee(\XMLReader $in) : createEmployee {
		$n = $in->name;
		$o = new createEmployee();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employee': $o->employee = $this->load_Employee($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateEmployee(\XMLReader $in) : updateEmployee {
		$n = $in->name;
		$o = new updateEmployee();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'employee': $o->employee = $this->load_Employee($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getActiveEmployeeList(\XMLReader $in) : getActiveEmployeeList {
		$n = $in->name;
		$o = new getActiveEmployeeList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_verifyEmployeePassword(\XMLReader $in) : verifyEmployeePassword {
		$n = $in->name;
		$o = new verifyEmployeePassword();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'employee-number': $o->employee_number = $this->load_int_property($in); break;
						case 'password': $o->password = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_verifyEmployeePasswordResponse(\XMLReader $in) : verifyEmployeePasswordResponse {
		$n = $in->name;
		$o = new verifyEmployeePasswordResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'response': $o->response = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getMaxTableNumber(\XMLReader $in) : getMaxTableNumber {
		$n = $in->name;
		$o = new getMaxTableNumber();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getMaxTableNumberResponse(\XMLReader $in) : getMaxTableNumberResponse {
		$n = $in->name;
		$o = new getMaxTableNumberResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'maxTableNumber': $o->maxTableNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTableList(\XMLReader $in) : getTableList {
		$n = $in->name;
		$o = new getTableList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTableListV2(\XMLReader $in) : getTableListV2 {
		$n = $in->name;
		$o = new getTableListV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTableListV3(\XMLReader $in) : getTableListV3 {
		$n = $in->name;
		$o = new getTableListV3();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_getTableListV3Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getMainTableList(\XMLReader $in) : getMainTableList {
		$n = $in->name;
		$o = new getMainTableList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_getMainTableListRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getSubTableList(\XMLReader $in) : getSubTableList {
		$n = $in->name;
		$o = new getSubTableList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_getSubTableListRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getCourseList(\XMLReader $in) : getCourseList {
		$n = $in->name;
		$o = new getCourseList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getCourseListV2(\XMLReader $in) : getCourseListV2 {
		$n = $in->name;
		$o = new getCourseListV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetCourseListV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getVatGroupList(\XMLReader $in) : getVatGroupList {
		$n = $in->name;
		$o = new getVatGroupList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveTableOrder(\XMLReader $in) : saveTableOrder {
		$n = $in->name;
		$o = new saveTableOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'order': $o->order = $this->load_Order($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveTableOrderV2(\XMLReader $in) : saveTableOrderV2 {
		$n = $in->name;
		$o = new saveTableOrderV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'request': $o->request = $this->load_SaveTableOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createAndPayTableOrder(\XMLReader $in) : createAndPayTableOrder {
		$n = $in->name;
		$o = new createAndPayTableOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_CreateAndPayTableOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_moveTableOrder(\XMLReader $in) : moveTableOrder {
		$n = $in->name;
		$o = new moveTableOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'order': $o->order = $this->load_Order($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_moveTableOrderV2(\XMLReader $in) : moveTableOrderV2 {
		$n = $in->name;
		$o = new moveTableOrderV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'request': $o->request = $this->load_MoveTableOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_moveTableOrderV3(\XMLReader $in) : moveTableOrderV3 {
		$n = $in->name;
		$o = new moveTableOrderV3();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_MoveTableOrderV3Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTableOrder(\XMLReader $in) : getTableOrder {
		$n = $in->name;
		$o = new getTableOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTableOrderV2(\XMLReader $in) : getTableOrderV2 {
		$n = $in->name;
		$o = new getTableOrderV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'request': $o->request = $this->load_GetTableOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTableOrderV3(\XMLReader $in) : getTableOrderV3 {
		$n = $in->name;
		$o = new getTableOrderV3();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetTableOrderV3Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_findTableOrder(\XMLReader $in) : findTableOrder {
		$n = $in->name;
		$o = new findTableOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'extOrderId': $o->extOrderId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_releaseTable(\XMLReader $in) : releaseTable {
		$n = $in->name;
		$o = new releaseTable();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'request': $o->request = $this->load_ReleaseTableRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_releaseTableV2(\XMLReader $in) : releaseTableV2 {
		$n = $in->name;
		$o = new releaseTableV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReleaseTableV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_setSubTableCount(\XMLReader $in) : setSubTableCount {
		$n = $in->name;
		$o = new setSubTableCount();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'request': $o->request = $this->load_SetSubtableCountRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTableOrderCourseList(\XMLReader $in) : getTableOrderCourseList {
		$n = $in->name;
		$o = new getTableOrderCourseList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTableOrderCourseListV2(\XMLReader $in) : getTableOrderCourseListV2 {
		$n = $in->name;
		$o = new getTableOrderCourseListV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'request': $o->request = $this->load_GetTableOrderCourseListRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTableOrderCourseListV3(\XMLReader $in) : getTableOrderCourseListV3 {
		$n = $in->name;
		$o = new getTableOrderCourseListV3();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetTableOrderCourseListRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_requestTableOrderCourse(\XMLReader $in) : requestTableOrderCourse {
		$n = $in->name;
		$o = new requestTableOrderCourse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
						case 'employeeNumber': $o->employeeNumber = $this->load_int_property($in); break;
						case 'courseNumber': $o->courseNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_requestNextTableOrderCourseV2(\XMLReader $in) : requestNextTableOrderCourseV2 {
		$n = $in->name;
		$o = new requestNextTableOrderCourseV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'request': $o->request = $this->load_RequestNextTableOrderCourseRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_requestNextTableOrderCourseV3(\XMLReader $in) : requestNextTableOrderCourseV3 {
		$n = $in->name;
		$o = new requestNextTableOrderCourseV3();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_RequestNextTableOrderCourseV3Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_storeSinglyEftTransaction(\XMLReader $in) : storeSinglyEftTransaction {
		$n = $in->name;
		$o = new storeSinglyEftTransaction();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_TerminalId($in); break;
						case 'eft-transaction': $o->eft_transaction = $this->load_EftTransactionDetails($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_queueBranchOrder(\XMLReader $in) : queueBranchOrder {
		$n = $in->name;
		$o = new queueBranchOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'order': $o->order = $this->load_Order($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_queueBranchOrderPayment(\XMLReader $in) : queueBranchOrderPayment {
		$n = $in->name;
		$o = new queueBranchOrderPayment();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'paymentRequest': $o->paymentRequest = $this->load_QueueBranchOrderPaymentRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getQueueBranchOrderPaymentStatus(\XMLReader $in) : getQueueBranchOrderPaymentStatus {
		$n = $in->name;
		$o = new getQueueBranchOrderPaymentStatus();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'queuedPaymentId': $o->queuedPaymentId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateOrder(\XMLReader $in) : updateOrder {
		$n = $in->name;
		$o = new updateOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'order': $o->order = $this->load_Order($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateOrderV2(\XMLReader $in) : updateOrderV2 {
		$n = $in->name;
		$o = new updateOrderV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateOrderV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveOrder(\XMLReader $in) : saveOrder {
		$n = $in->name;
		$o = new saveOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'order': $o->order = $this->load_Order($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getOrder(\XMLReader $in) : getOrder {
		$n = $in->name;
		$o = new getOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPackingSlips(\XMLReader $in) : getPackingSlips {
		$n = $in->name;
		$o = new getPackingSlips();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetPackingSlipsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPackingSlipsByOrder(\XMLReader $in) : getPackingSlipsByOrder {
		$n = $in->name;
		$o = new getPackingSlipsByOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetPackingSlipsByOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getOrderChanges(\XMLReader $in) : getOrderChanges {
		$n = $in->name;
		$o = new getOrderChanges();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetOrderChangesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getOrderHistory(\XMLReader $in) : getOrderHistory {
		$n = $in->name;
		$o = new getOrderHistory();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetOrderHistoryRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_findOrder(\XMLReader $in) : findOrder {
		$n = $in->name;
		$o = new findOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'extOrderId': $o->extOrderId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_cancelOrder(\XMLReader $in) : cancelOrder {
		$n = $in->name;
		$o = new cancelOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
						case 'request': $o->request = $this->load_CancelOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_cancelOrderV2(\XMLReader $in) : cancelOrderV2 {
		$n = $in->name;
		$o = new cancelOrderV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_CancelOrderV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_cancelTableOrder(\XMLReader $in) : cancelTableOrder {
		$n = $in->name;
		$o = new cancelTableOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'branchNumber': $o->branchNumber = $this->load_int_property($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_cancelTableOrderV2(\XMLReader $in) : cancelTableOrderV2 {
		$n = $in->name;
		$o = new cancelTableOrderV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'request': $o->request = $this->load_CancelTableOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_payInvoice(\XMLReader $in) : payInvoice {
		$n = $in->name;
		$o = new payInvoice();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_PayInvoiceRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_deliverOrder(\XMLReader $in) : deliverOrder {
		$n = $in->name;
		$o = new deliverOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_DeliverOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_deliverOrderV2(\XMLReader $in) : deliverOrderV2 {
		$n = $in->name;
		$o = new deliverOrderV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_DeliverOrderV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getOrderCategories(\XMLReader $in) : getOrderCategories {
		$n = $in->name;
		$o = new getOrderCategories();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getReceipts(\XMLReader $in) : getReceipts {
		$n = $in->name;
		$o = new getReceipts();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetReceiptsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getReceipt(\XMLReader $in) : getReceipt {
		$n = $in->name;
		$o = new getReceipt();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'receiptId': $o->receiptId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getReceiptsByOrder(\XMLReader $in) : getReceiptsByOrder {
		$n = $in->name;
		$o = new getReceiptsByOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'orderId': $o->orderId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getReceiptsByCashCount(\XMLReader $in) : getReceiptsByCashCount {
		$n = $in->name;
		$o = new getReceiptsByCashCount();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetReceiptsByCashCountRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_printReceipt(\XMLReader $in) : printReceipt {
		$n = $in->name;
		$o = new printReceipt();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_printReceiptV2(\XMLReader $in) : printReceiptV2 {
		$n = $in->name;
		$o = new printReceiptV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_PrintReceiptV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_printTableReceipt(\XMLReader $in) : printTableReceipt {
		$n = $in->name;
		$o = new printTableReceipt();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'tableNumber': $o->tableNumber = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_printTableReceiptV2(\XMLReader $in) : printTableReceiptV2 {
		$n = $in->name;
		$o = new printTableReceiptV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'request': $o->request = $this->load_PrintTableReceiptRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_printTableReceiptV3(\XMLReader $in) : printTableReceiptV3 {
		$n = $in->name;
		$o = new printTableReceiptV3();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_PrintTableReceiptV3Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getInvoices(\XMLReader $in) : getInvoices {
		$n = $in->name;
		$o = new getInvoices();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetInvoicesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveInvoice(\XMLReader $in) : saveInvoice {
		$n = $in->name;
		$o = new saveInvoice();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'invoice': $o->invoice = $this->load_Invoice($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getInvoice(\XMLReader $in) : getInvoice {
		$n = $in->name;
		$o = new getInvoice();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_findInvoice(\XMLReader $in) : findInvoice {
		$n = $in->name;
		$o = new findInvoice();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'extInvoiceId': $o->extInvoiceId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_creditInvoice(\XMLReader $in) : creditInvoice {
		$n = $in->name;
		$o = new creditInvoice();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'invoiceId': $o->invoiceId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getJournals(\XMLReader $in) : getJournals {
		$n = $in->name;
		$o = new getJournals();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetJournalsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getFinancialJournal(\XMLReader $in) : getFinancialJournal {
		$n = $in->name;
		$o = new getFinancialJournal();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetFinancialJournalRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getFinancialJournalByCashCount(\XMLReader $in) : getFinancialJournalByCashCount {
		$n = $in->name;
		$o = new getFinancialJournalByCashCount();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetFinancialJournalByCashCountRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getCashCountList(\XMLReader $in) : getCashCountList {
		$n = $in->name;
		$o = new getCashCountList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetCashCountListRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getCashDrawerBalancingList(\XMLReader $in) : getCashDrawerBalancingList {
		$n = $in->name;
		$o = new getCashDrawerBalancingList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetCashDrawerBalancingListRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTurnoverGroups(\XMLReader $in) : getTurnoverGroups {
		$n = $in->name;
		$o = new getTurnoverGroups();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetTurnoverGroupsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateTurnoverGroups(\XMLReader $in) : updateTurnoverGroups {
		$n = $in->name;
		$o = new updateTurnoverGroups();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateTurnoverGroupsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getProducts(\XMLReader $in) : getProducts {
		$n = $in->name;
		$o = new getProducts();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetProductsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createProduct(\XMLReader $in) : createProduct {
		$n = $in->name;
		$o = new createProduct();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'product': $o->product = $this->load_Product($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateProduct(\XMLReader $in) : updateProduct {
		$n = $in->name;
		$o = new updateProduct();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'product': $o->product = $this->load_Product($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getArticleVariants(\XMLReader $in) : getArticleVariants {
		$n = $in->name;
		$o = new getArticleVariants();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetArticleVariantsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getArticlesVariants(\XMLReader $in) : getArticlesVariants {
		$n = $in->name;
		$o = new getArticlesVariants();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetArticlesVariantsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_newArticleVariant(\XMLReader $in) : newArticleVariant {
		$n = $in->name;
		$o = new newArticleVariant();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_NewArticleVariantRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateArticleVariant(\XMLReader $in) : updateArticleVariant {
		$n = $in->name;
		$o = new updateArticleVariant();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateArticleVariantRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_deleteArticleVariants(\XMLReader $in) : deleteArticleVariants {
		$n = $in->name;
		$o = new deleteArticleVariants();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_DeleteArticleVariantsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getStock(\XMLReader $in) : getStock {
		$n = $in->name;
		$o = new getStock();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetStockRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getStockHistory(\XMLReader $in) : getStockHistory {
		$n = $in->name;
		$o = new getStockHistory();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetStockHistoryRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getStockHistoryV2(\XMLReader $in) : getStockHistoryV2 {
		$n = $in->name;
		$o = new getStockHistoryV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetStockHistoryV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateStock(\XMLReader $in) : updateStock {
		$n = $in->name;
		$o = new updateStock();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateStockRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_setStock(\XMLReader $in) : setStock {
		$n = $in->name;
		$o = new setStock();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SetStockRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getArticleGroups(\XMLReader $in) : getArticleGroups {
		$n = $in->name;
		$o = new getArticleGroups();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetArticleGroupsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getArticleGroupChanges(\XMLReader $in) : getArticleGroupChanges {
		$n = $in->name;
		$o = new getArticleGroupChanges();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetArticleGroupChangesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateArticleGroup(\XMLReader $in) : updateArticleGroup {
		$n = $in->name;
		$o = new updateArticleGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateArticleGroupRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_newArticleGroup(\XMLReader $in) : newArticleGroup {
		$n = $in->name;
		$o = new newArticleGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_NewArticleGroupRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_deleteArticleGroup(\XMLReader $in) : deleteArticleGroup {
		$n = $in->name;
		$o = new deleteArticleGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_DeleteArticleGroupRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_addProductsToArticleGroup(\XMLReader $in) : addProductsToArticleGroup {
		$n = $in->name;
		$o = new addProductsToArticleGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_AddProductsToArticleGroupRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_replaceProductsOfArticleGroup(\XMLReader $in) : replaceProductsOfArticleGroup {
		$n = $in->name;
		$o = new replaceProductsOfArticleGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReplaceProductsOfArticleGroupRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_deleteProductsFromArticleGroup(\XMLReader $in) : deleteProductsFromArticleGroup {
		$n = $in->name;
		$o = new deleteProductsFromArticleGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_DeleteProductsFromArticleGroupRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_sendMessage(\XMLReader $in) : sendMessage {
		$n = $in->name;
		$o = new sendMessage();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SendMessageRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_sendMessageResponse(\XMLReader $in) : sendMessageResponse {
		$n = $in->name;
		$o = new sendMessageResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'response': $o->response = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getMessages(\XMLReader $in) : getMessages {
		$n = $in->name;
		$o = new getMessages();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetMessagesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getShifts(\XMLReader $in) : getShifts {
		$n = $in->name;
		$o = new getShifts();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetShiftsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPurchaseOrders(\XMLReader $in) : getPurchaseOrders {
		$n = $in->name;
		$o = new getPurchaseOrders();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetPurchaseOrdersRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_savePurchaseOrder(\XMLReader $in) : savePurchaseOrder {
		$n = $in->name;
		$o = new savePurchaseOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseOrder': $o->purchaseOrder = $this->load_PurchaseOrder($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPurchaseOrdersV2(\XMLReader $in) : getPurchaseOrdersV2 {
		$n = $in->name;
		$o = new getPurchaseOrdersV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetPurchaseOrdersV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_savePurchaseOrderV2_(\XMLReader $in) : savePurchaseOrderV2_ {
		$n = $in->name;
		$o = new savePurchaseOrderV2_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SavePurchaseOrderV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPurchaseDeliveries(\XMLReader $in) : getPurchaseDeliveries {
		$n = $in->name;
		$o = new getPurchaseDeliveries();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetPurchaseDeliveriesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_savePurchaseDelivery(\XMLReader $in) : savePurchaseDelivery {
		$n = $in->name;
		$o = new savePurchaseDelivery();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'purchaseDelivery': $o->purchaseDelivery = $this->load_PurchaseDelivery($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPurchaseDeliveriesV2(\XMLReader $in) : getPurchaseDeliveriesV2 {
		$n = $in->name;
		$o = new getPurchaseDeliveriesV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetPurchaseDeliveriesV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_savePurchaseDeliveryV2_(\XMLReader $in) : savePurchaseDeliveryV2_ {
		$n = $in->name;
		$o = new savePurchaseDeliveryV2_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SavePurchaseDeliveryV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_encryptString(\XMLReader $in) : encryptString {
		$n = $in->name;
		$o = new encryptString();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_EncryptStringRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getArticleCardLayout(\XMLReader $in) : getArticleCardLayout {
		$n = $in->name;
		$o = new getArticleCardLayout();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetArticleCardLayoutRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateArticleCardLayout(\XMLReader $in) : updateArticleCardLayout {
		$n = $in->name;
		$o = new updateArticleCardLayout();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateArticleCardLayoutRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getRetailSpaceRental(\XMLReader $in) : getRetailSpaceRental {
		$n = $in->name;
		$o = new getRetailSpaceRental();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetRetailSpaceRentalRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getRetailSpaceRentals(\XMLReader $in) : getRetailSpaceRentals {
		$n = $in->name;
		$o = new getRetailSpaceRentals();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetRetailSpaceRentalsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_EidSearch(\XMLReader $in) : EidSearch {
		$n = $in->name;
		$o = new EidSearch();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_EidSearchRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getOverview(\XMLReader $in) : getOverview {
		$n = $in->name;
		$o = new getOverview();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_OverviewRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getOverviewFields(\XMLReader $in) : getOverviewFields {
		$n = $in->name;
		$o = new getOverviewFields();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetOverviewFieldsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateBatch(\XMLReader $in) : updateBatch {
		$n = $in->name;
		$o = new updateBatch();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateBatchRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_print_(\XMLReader $in) : print_ {
		$n = $in->name;
		$o = new print_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_PrintRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getKitchenTickets(\XMLReader $in) : getKitchenTickets {
		$n = $in->name;
		$o = new getKitchenTickets();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetKitchenTicketsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveStockCorrections(\XMLReader $in) : saveStockCorrections {
		$n = $in->name;
		$o = new saveStockCorrections();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SaveStockCorrectionsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPurchaseBook(\XMLReader $in) : getPurchaseBook {
		$n = $in->name;
		$o = new getPurchaseBook();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetPurchaseBookRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_savePurchaseBook(\XMLReader $in) : savePurchaseBook {
		$n = $in->name;
		$o = new savePurchaseBook();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_PurchaseBook($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_addToPurchaseBook(\XMLReader $in) : addToPurchaseBook {
		$n = $in->name;
		$o = new addToPurchaseBook();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_AddToPurchaseBookRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getStockCorrections(\XMLReader $in) : getStockCorrections {
		$n = $in->name;
		$o = new getStockCorrections();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetStockCorrectionsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getArticlesNutritionalCharacteristics(\XMLReader $in) : getArticlesNutritionalCharacteristics {
		$n = $in->name;
		$o = new getArticlesNutritionalCharacteristics();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetArticlesNutritionalCharacteristicsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateArticleNutritionalCharacteristics(\XMLReader $in) : updateArticleNutritionalCharacteristics {
		$n = $in->name;
		$o = new updateArticleNutritionalCharacteristics();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateArticleNutritionalCharacteristicsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPreparationMethodGroups(\XMLReader $in) : getPreparationMethodGroups {
		$n = $in->name;
		$o = new getPreparationMethodGroups();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetPreparationMethodGroupsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_deletePreparationMethodGroup(\XMLReader $in) : deletePreparationMethodGroup {
		$n = $in->name;
		$o = new deletePreparationMethodGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_DeletePreparationMethodGroupRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getArticlesPreparationMethodGroups(\XMLReader $in) : getArticlesPreparationMethodGroups {
		$n = $in->name;
		$o = new getArticlesPreparationMethodGroups();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetArticlesPreparationMethodGroupsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateArticlePreparationMethodGroups(\XMLReader $in) : updateArticlePreparationMethodGroups {
		$n = $in->name;
		$o = new updateArticlePreparationMethodGroups();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateArticlePreparationMethodGroupsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_placeTableOrder(\XMLReader $in) : placeTableOrder {
		$n = $in->name;
		$o = new placeTableOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_PlaceTableOrderReq($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTapTickTotals(\XMLReader $in) : getTapTickTotals {
		$n = $in->name;
		$o = new getTapTickTotals();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_TapTickTotalsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTapTickHistory(\XMLReader $in) : getTapTickHistory {
		$n = $in->name;
		$o = new getTapTickHistory();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_TapTickHistoryRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_findRelationV2(\XMLReader $in) : findRelationV2 {
		$n = $in->name;
		$o = new findRelationV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_FindRelationV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTodoLists(\XMLReader $in) : getTodoLists {
		$n = $in->name;
		$o = new getTodoLists();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetTodoListsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTodoList(\XMLReader $in) : getTodoList {
		$n = $in->name;
		$o = new getTodoList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createTodoList(\XMLReader $in) : createTodoList {
		$n = $in->name;
		$o = new createTodoList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_CreateTodoListRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveTodoList(\XMLReader $in) : saveTodoList {
		$n = $in->name;
		$o = new saveTodoList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SaveTodoListRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveTodoListResponse(\XMLReader $in) : saveTodoListResponse {
		$n = $in->name;
		$o = new saveTodoListResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'response': $o->response = $this->load_Struct_1($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveTodoListV2(\XMLReader $in) : saveTodoListV2 {
		$n = $in->name;
		$o = new saveTodoListV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SaveTodoListV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_addToTodoList(\XMLReader $in) : addToTodoList {
		$n = $in->name;
		$o = new addToTodoList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_AddToTodoListRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_addToTodoListResponse(\XMLReader $in) : addToTodoListResponse {
		$n = $in->name;
		$o = new addToTodoListResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'response': $o->response = $this->load_Struct_2($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_removeTodoList(\XMLReader $in) : removeTodoList {
		$n = $in->name;
		$o = new removeTodoList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'id': $o->id = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_removeTodoListResponse(\XMLReader $in) : removeTodoListResponse {
		$n = $in->name;
		$o = new removeTodoListResponse();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'response': $o->response = $this->load_Struct_3($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getFilterProfiles(\XMLReader $in) : getFilterProfiles {
		$n = $in->name;
		$o = new getFilterProfiles();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetFilterProfilesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_savePreparationMethodGroup(\XMLReader $in) : savePreparationMethodGroup {
		$n = $in->name;
		$o = new savePreparationMethodGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SavePreparationMethodGroupRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getNutritionalCharacteristics(\XMLReader $in) : getNutritionalCharacteristics {
		$n = $in->name;
		$o = new getNutritionalCharacteristics();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetNutritionalCharacteristicsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateNutritionalCharacteristics(\XMLReader $in) : updateNutritionalCharacteristics {
		$n = $in->name;
		$o = new updateNutritionalCharacteristics();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateNutritionalCharacteristicsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_determinePricing(\XMLReader $in) : determinePricing {
		$n = $in->name;
		$o = new determinePricing();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_DeterminePricingRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_setRelationPresence(\XMLReader $in) : setRelationPresence {
		$n = $in->name;
		$o = new setRelationPresence();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SetRelationPresenceRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getRelationPresence(\XMLReader $in) : getRelationPresence {
		$n = $in->name;
		$o = new getRelationPresence();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetRelationPresenceRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getArticleBranchDeviations(\XMLReader $in) : getArticleBranchDeviations {
		$n = $in->name;
		$o = new getArticleBranchDeviations();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetArticleBranchDeviationsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveArticleBranchDeviations(\XMLReader $in) : saveArticleBranchDeviations {
		$n = $in->name;
		$o = new saveArticleBranchDeviations();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SaveArticleBranchDeviationsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateArticleNutrients(\XMLReader $in) : updateArticleNutrients {
		$n = $in->name;
		$o = new updateArticleNutrients();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateArticleNutrientsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateArticleDynamicMinMaxStock(\XMLReader $in) : updateArticleDynamicMinMaxStock {
		$n = $in->name;
		$o = new updateArticleDynamicMinMaxStock();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateArticleDynamicMinMaxStockRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getArticleDynamicMinMaxStock(\XMLReader $in) : getArticleDynamicMinMaxStock {
		$n = $in->name;
		$o = new getArticleDynamicMinMaxStock();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetArticleDynamicMinMaxStockRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getCardFilterOptions(\XMLReader $in) : getCardFilterOptions {
		$n = $in->name;
		$o = new getCardFilterOptions();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetCardFilterOptionsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPlannedCycleCounts(\XMLReader $in) : getPlannedCycleCounts {
		$n = $in->name;
		$o = new getPlannedCycleCounts();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetPlannedCycleCountsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getActiveCycleCount(\XMLReader $in) : getActiveCycleCount {
		$n = $in->name;
		$o = new getActiveCycleCount();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetActiveCycleCountRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_setArticleRecalled(\XMLReader $in) : setArticleRecalled {
		$n = $in->name;
		$o = new setArticleRecalled();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SetArticleRecalledRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getArticleComponents(\XMLReader $in) : getArticleComponents {
		$n = $in->name;
		$o = new getArticleComponents();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetArticleComponentsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveArticleComponents(\XMLReader $in) : saveArticleComponents {
		$n = $in->name;
		$o = new saveArticleComponents();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SaveArticleComponentsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getConfiguration(\XMLReader $in) : getConfiguration {
		$n = $in->name;
		$o = new getConfiguration();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetConfigurationRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateConfiguration(\XMLReader $in) : updateConfiguration {
		$n = $in->name;
		$o = new updateConfiguration();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateConfigurationRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getConfigurationTree(\XMLReader $in) : getConfigurationTree {
		$n = $in->name;
		$o = new getConfigurationTree();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetConfigurationTreeRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getConfigurationValues(\XMLReader $in) : getConfigurationValues {
		$n = $in->name;
		$o = new getConfigurationValues();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetConfigurationValuesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateConfigurationValues(\XMLReader $in) : updateConfigurationValues {
		$n = $in->name;
		$o = new updateConfigurationValues();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateConfigurationValuesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getButtonLayout(\XMLReader $in) : getButtonLayout {
		$n = $in->name;
		$o = new getButtonLayout();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getButtonLayoutGroupForBranch(\XMLReader $in) : getButtonLayoutGroupForBranch {
		$n = $in->name;
		$o = new getButtonLayoutGroupForBranch();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ButtonLayoutGroupForBranchRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getButtonLayoutGroupsWithAssignedWorkplaces(\XMLReader $in) : getButtonLayoutGroupsWithAssignedWorkplaces {
		$n = $in->name;
		$o = new getButtonLayoutGroupsWithAssignedWorkplaces();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetButtonLayoutGroupsWithAssignedWorkplacesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getButtonLayoutGroupDetails(\XMLReader $in) : getButtonLayoutGroupDetails {
		$n = $in->name;
		$o = new getButtonLayoutGroupDetails();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetButtonLayoutGroupDetailsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveButtonLayoutGroupDetails(\XMLReader $in) : saveButtonLayoutGroupDetails {
		$n = $in->name;
		$o = new saveButtonLayoutGroupDetails();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SaveButtonLayoutGroupDetailsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_deleteButtonLayoutGroup(\XMLReader $in) : deleteButtonLayoutGroup {
		$n = $in->name;
		$o = new deleteButtonLayoutGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_DeleteButtonLayoutGroupRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_assignButtonLayoutGroupToWorkplaces(\XMLReader $in) : assignButtonLayoutGroupToWorkplaces {
		$n = $in->name;
		$o = new assignButtonLayoutGroupToWorkplaces();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_AssignButtonLayoutGroupToWorkplacesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getArticlesInLayout(\XMLReader $in) : getArticlesInLayout {
		$n = $in->name;
		$o = new getArticlesInLayout();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getDayStockConfiguration(\XMLReader $in) : getDayStockConfiguration {
		$n = $in->name;
		$o = new getDayStockConfiguration();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetDayStockConfigurationRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveDayStockConfiguration_(\XMLReader $in) : saveDayStockConfiguration_ {
		$n = $in->name;
		$o = new saveDayStockConfiguration_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SaveDayStockConfigurationRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getActivities(\XMLReader $in) : getActivities {
		$n = $in->name;
		$o = new getActivities();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetActivitiesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getActivityTypes(\XMLReader $in) : getActivityTypes {
		$n = $in->name;
		$o = new getActivityTypes();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetActivityTypesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveActivityTypes(\XMLReader $in) : saveActivityTypes {
		$n = $in->name;
		$o = new saveActivityTypes();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SaveActivityTypesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createActivity_(\XMLReader $in) : createActivity_ {
		$n = $in->name;
		$o = new createActivity_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_CreateActivityRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateActivity_(\XMLReader $in) : updateActivity_ {
		$n = $in->name;
		$o = new updateActivity_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateActivityRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveActivity_(\XMLReader $in) : saveActivity_ {
		$n = $in->name;
		$o = new saveActivity_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SaveActivityRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_deleteActivity(\XMLReader $in) : deleteActivity {
		$n = $in->name;
		$o = new deleteActivity();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_DeleteActivityRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getGksInformation(\XMLReader $in) : getGksInformation {
		$n = $in->name;
		$o = new getGksInformation();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetGksInformationRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getMealplanMomentsConfiguration(\XMLReader $in) : getMealplanMomentsConfiguration {
		$n = $in->name;
		$o = new getMealplanMomentsConfiguration();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetMealplanMomentsConfigurationRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getScheduledMealPlans(\XMLReader $in) : getScheduledMealPlans {
		$n = $in->name;
		$o = new getScheduledMealPlans();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetScheduledMealPlansRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getArticleAlterationsGroups(\XMLReader $in) : getArticleAlterationsGroups {
		$n = $in->name;
		$o = new getArticleAlterationsGroups();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetArticleAlterationsGroupsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveArticleAlterationsGroup(\XMLReader $in) : saveArticleAlterationsGroup {
		$n = $in->name;
		$o = new saveArticleAlterationsGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SaveArticleAlterationsGroupRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_deleteArticleAlterationsGroup(\XMLReader $in) : deleteArticleAlterationsGroup {
		$n = $in->name;
		$o = new deleteArticleAlterationsGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_DeleteArticleAlterationsGroupRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateAttachedArticleAlterationsGroups(\XMLReader $in) : updateAttachedArticleAlterationsGroups {
		$n = $in->name;
		$o = new updateAttachedArticleAlterationsGroups();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateAttachedArticleAlterationsGroupsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateArticleMenu(\XMLReader $in) : updateArticleMenu {
		$n = $in->name;
		$o = new updateArticleMenu();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateArticleMenuRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateOnlineAuthorizationTree(\XMLReader $in) : updateOnlineAuthorizationTree {
		$n = $in->name;
		$o = new updateOnlineAuthorizationTree();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateOnlineAuthorizationTreeRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getOwnerLabels(\XMLReader $in) : getOwnerLabels {
		$n = $in->name;
		$o = new getOwnerLabels();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetOwnerLabelsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getWordAliases(\XMLReader $in) : getWordAliases {
		$n = $in->name;
		$o = new getWordAliases();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetWordAliasesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getApiVersion(\XMLReader $in) : getApiVersion {
		$n = $in->name;
		$o = new getApiVersion();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getDatabaseVersion(\XMLReader $in) : getDatabaseVersion {
		$n = $in->name;
		$o = new getDatabaseVersion();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getLicenseInformation(\XMLReader $in) : getLicenseInformation {
		$n = $in->name;
		$o = new getLicenseInformation();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getAvailableTerminalList(\XMLReader $in) : getAvailableTerminalList {
		$n = $in->name;
		$o = new getAvailableTerminalList();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_registerTerminal(\XMLReader $in) : registerTerminal {
		$n = $in->name;
		$o = new registerTerminal();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'forceRegistration': $o->forceRegistration = $this->load_bool_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTerminalSettings(\XMLReader $in) : getTerminalSettings {
		$n = $in->name;
		$o = new getTerminalSettings();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getBranchInformation(\XMLReader $in) : getBranchInformation {
		$n = $in->name;
		$o = new getBranchInformation();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetBranchInformationRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getBranchGroups(\XMLReader $in) : getBranchGroups {
		$n = $in->name;
		$o = new getBranchGroups();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetBranchGroupsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getDeliveryMethods(\XMLReader $in) : getDeliveryMethods {
		$n = $in->name;
		$o = new getDeliveryMethods();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getDeliveryMethodsV2(\XMLReader $in) : getDeliveryMethodsV2 {
		$n = $in->name;
		$o = new getDeliveryMethodsV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetDeliveryMethodsV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createDeliveryMethod(\XMLReader $in) : createDeliveryMethod {
		$n = $in->name;
		$o = new createDeliveryMethod();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_CreateDeliveryMethodRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateDeliveryMethod(\XMLReader $in) : updateDeliveryMethod {
		$n = $in->name;
		$o = new updateDeliveryMethod();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateDeliveryMethodRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getBranches(\XMLReader $in) : getBranches {
		$n = $in->name;
		$o = new getBranches();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getCurrentSyncMarkers(\XMLReader $in) : getCurrentSyncMarkers {
		$n = $in->name;
		$o = new getCurrentSyncMarkers();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getCurrentSyncMarkersV2(\XMLReader $in) : getCurrentSyncMarkersV2 {
		$n = $in->name;
		$o = new getCurrentSyncMarkersV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetCurrentSyncMarkersV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getNutrientTypes(\XMLReader $in) : getNutrientTypes {
		$n = $in->name;
		$o = new getNutrientTypes();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetNutrientTypesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_verifyCredentials(\XMLReader $in) : verifyCredentials {
		$n = $in->name;
		$o = new verifyCredentials();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_VerifyCredentialsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveCredentials(\XMLReader $in) : saveCredentials {
		$n = $in->name;
		$o = new saveCredentials();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SaveCredentialsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPasswordRequirements(\XMLReader $in) : getPasswordRequirements {
		$n = $in->name;
		$o = new getPasswordRequirements();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_PasswordRequirementsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_passwordReset(\XMLReader $in) : passwordReset {
		$n = $in->name;
		$o = new passwordReset();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_PasswordResetRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getFloorplans(\XMLReader $in) : getFloorplans {
		$n = $in->name;
		$o = new getFloorplans();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetFloorplansRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_changeTableProperty(\XMLReader $in) : changeTableProperty {
		$n = $in->name;
		$o = new changeTableProperty();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ChangeTablePropertyReq($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getEmployeeAuthorizations(\XMLReader $in) : getEmployeeAuthorizations {
		$n = $in->name;
		$o = new getEmployeeAuthorizations();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetEmployeeAuthorizationsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getGroupAuthorizations(\XMLReader $in) : getGroupAuthorizations {
		$n = $in->name;
		$o = new getGroupAuthorizations();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetGroupAuthorizationsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateGroupAuthorizations(\XMLReader $in) : updateGroupAuthorizations {
		$n = $in->name;
		$o = new updateGroupAuthorizations();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateGroupAuthorizationsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getAuthorizationGroups(\XMLReader $in) : getAuthorizationGroups {
		$n = $in->name;
		$o = new getAuthorizationGroups();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetAuthorizationGroupsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getAuthorizationTree(\XMLReader $in) : getAuthorizationTree {
		$n = $in->name;
		$o = new getAuthorizationTree();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetAuthorizationTreeRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getEmployeeBranchAuthorizations(\XMLReader $in) : getEmployeeBranchAuthorizations {
		$n = $in->name;
		$o = new getEmployeeBranchAuthorizations();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetEmployeeBranchAuthorizationsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveAuthorizationGroup(\XMLReader $in) : saveAuthorizationGroup {
		$n = $in->name;
		$o = new saveAuthorizationGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SaveAuthorizationGroupRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_deleteAuthorizationGroup(\XMLReader $in) : deleteAuthorizationGroup {
		$n = $in->name;
		$o = new deleteAuthorizationGroup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_DeleteAuthorizationGroupRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getEmployeeAuthorizationGroups(\XMLReader $in) : getEmployeeAuthorizationGroups {
		$n = $in->name;
		$o = new getEmployeeAuthorizationGroups();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetEmployeeAuthorizationGroupsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateEmployeeAuthorizationGroups(\XMLReader $in) : updateEmployeeAuthorizationGroups {
		$n = $in->name;
		$o = new updateEmployeeAuthorizationGroups();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateEmployeeAuthorizationGroupsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getEmployeeAuthorizationSyncMarkers(\XMLReader $in) : getEmployeeAuthorizationSyncMarkers {
		$n = $in->name;
		$o = new getEmployeeAuthorizationSyncMarkers();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetEmployeeAuthorizationSyncMarkersRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getSpecialBarcodePatterns(\XMLReader $in) : getSpecialBarcodePatterns {
		$n = $in->name;
		$o = new getSpecialBarcodePatterns();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetSpecialBarcodePatternsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_parseSpecialBarcode(\XMLReader $in) : parseSpecialBarcode {
		$n = $in->name;
		$o = new parseSpecialBarcode();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ParseSpecialBarcodeRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getEmployeeWorkplaceLoginStates(\XMLReader $in) : getEmployeeWorkplaceLoginStates {
		$n = $in->name;
		$o = new getEmployeeWorkplaceLoginStates();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetEmployeeWorkplaceLoginStatesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createImage(\XMLReader $in) : createImage {
		$n = $in->name;
		$o = new createImage();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_CreateImageRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createImageFromUrl(\XMLReader $in) : createImageFromUrl {
		$n = $in->name;
		$o = new createImageFromUrl();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_CreateImageFromUrlRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getCardImageLabels(\XMLReader $in) : getCardImageLabels {
		$n = $in->name;
		$o = new getCardImageLabels();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetCardImageLabelsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getCardImages(\XMLReader $in) : getCardImages {
		$n = $in->name;
		$o = new getCardImages();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetCardImagesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveCardImages(\XMLReader $in) : saveCardImages {
		$n = $in->name;
		$o = new saveCardImages();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SaveCardImagesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getImages(\XMLReader $in) : getImages {
		$n = $in->name;
		$o = new getImages();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetImagesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPrintLayouts(\XMLReader $in) : getPrintLayouts {
		$n = $in->name;
		$o = new getPrintLayouts();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetPrintLayoutsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPrintLayoutAssignments(\XMLReader $in) : getPrintLayoutAssignments {
		$n = $in->name;
		$o = new getPrintLayoutAssignments();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetPrintLayoutAssignmentsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getRenderedPrintLayout(\XMLReader $in) : getRenderedPrintLayout {
		$n = $in->name;
		$o = new getRenderedPrintLayout();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetRenderedPrintLayoutRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPrintLayoutMarkup(\XMLReader $in) : getPrintLayoutMarkup {
		$n = $in->name;
		$o = new getPrintLayoutMarkup();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetPrintLayoutMarkupRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_printPrintLayout(\XMLReader $in) : printPrintLayout {
		$n = $in->name;
		$o = new printPrintLayout();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_PrintPrintLayoutRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_checkGiftcardPayment(\XMLReader $in) : checkGiftcardPayment {
		$n = $in->name;
		$o = new checkGiftcardPayment();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_CheckGiftcardPaymentRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_registerGiftcardPayment(\XMLReader $in) : registerGiftcardPayment {
		$n = $in->name;
		$o = new registerGiftcardPayment();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_RegisterGiftcardPaymentRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_registerGiftcardPaymentV2(\XMLReader $in) : registerGiftcardPaymentV2 {
		$n = $in->name;
		$o = new registerGiftcardPaymentV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_RegisterGiftcardPaymentV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createGiftcard(\XMLReader $in) : createGiftcard {
		$n = $in->name;
		$o = new createGiftcard();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_CreateGiftcardRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reloadGiftcard(\XMLReader $in) : reloadGiftcard {
		$n = $in->name;
		$o = new reloadGiftcard();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReloadGiftcardRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getGiftcardTypes(\XMLReader $in) : getGiftcardTypes {
		$n = $in->name;
		$o = new getGiftcardTypes();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetGiftcardTypesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getRelationGiftcards(\XMLReader $in) : getRelationGiftcards {
		$n = $in->name;
		$o = new getRelationGiftcards();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetRelationGiftcardsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getGiftcard_(\XMLReader $in) : getGiftcard_ {
		$n = $in->name;
		$o = new getGiftcard_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetGiftcardRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getGiftcardHistory(\XMLReader $in) : getGiftcardHistory {
		$n = $in->name;
		$o = new getGiftcardHistory();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetGiftcardHistoryRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getGiftcards(\XMLReader $in) : getGiftcards {
		$n = $in->name;
		$o = new getGiftcards();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetGiftcardsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveGiftcards(\XMLReader $in) : saveGiftcards {
		$n = $in->name;
		$o = new saveGiftcards();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SaveGiftcardsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_restituteGiftcards(\XMLReader $in) : restituteGiftcards {
		$n = $in->name;
		$o = new restituteGiftcards();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_RestituteGiftcardsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_linkGiftcardsToRelation(\XMLReader $in) : linkGiftcardsToRelation {
		$n = $in->name;
		$o = new linkGiftcardsToRelation();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_LinkGiftcardsToRelationRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getVouchers(\XMLReader $in) : getVouchers {
		$n = $in->name;
		$o = new getVouchers();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetVouchersRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getVoucher(\XMLReader $in) : getVoucher {
		$n = $in->name;
		$o = new getVoucher();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetVoucherRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getVoucherCategories(\XMLReader $in) : getVoucherCategories {
		$n = $in->name;
		$o = new getVoucherCategories();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetVoucherCategoriesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getVoucherIssuances(\XMLReader $in) : getVoucherIssuances {
		$n = $in->name;
		$o = new getVoucherIssuances();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetVoucherIssuancesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getVoucherSettings(\XMLReader $in) : getVoucherSettings {
		$n = $in->name;
		$o = new getVoucherSettings();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetVoucherSettingsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_issueVouchers(\XMLReader $in) : issueVouchers {
		$n = $in->name;
		$o = new issueVouchers();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_IssueVouchersRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_issueVoucherExternalScanCodes(\XMLReader $in) : issueVoucherExternalScanCodes {
		$n = $in->name;
		$o = new issueVoucherExternalScanCodes();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_IssueVoucherExternalScanCodesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getVoucherExternalScanCodes(\XMLReader $in) : getVoucherExternalScanCodes {
		$n = $in->name;
		$o = new getVoucherExternalScanCodes();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetVoucherExternalScanCodesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getRedeemableVoucherIssuances(\XMLReader $in) : getRedeemableVoucherIssuances {
		$n = $in->name;
		$o = new getRedeemableVoucherIssuances();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetRedeemableVoucherIssuancesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_redeemVoucherIssuance(\XMLReader $in) : redeemVoucherIssuance {
		$n = $in->name;
		$o = new redeemVoucherIssuance();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_RedeemVoucherIssuanceRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reportTurnoverByBranch_(\XMLReader $in) : reportTurnoverByBranch_ {
		$n = $in->name;
		$o = new reportTurnoverByBranch_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReportTurnoverByBranchRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reportTurnoverByEmployee_(\XMLReader $in) : reportTurnoverByEmployee_ {
		$n = $in->name;
		$o = new reportTurnoverByEmployee_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReportTurnoverByEmployeeRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reportTurnoverByActivity_(\XMLReader $in) : reportTurnoverByActivity_ {
		$n = $in->name;
		$o = new reportTurnoverByActivity_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReportTurnoverByActivityRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reportTurnoverByTurnoverGroup_(\XMLReader $in) : reportTurnoverByTurnoverGroup_ {
		$n = $in->name;
		$o = new reportTurnoverByTurnoverGroup_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReportTurnoverByTurnoverGroupRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reportTurnoverByArticle_(\XMLReader $in) : reportTurnoverByArticle_ {
		$n = $in->name;
		$o = new reportTurnoverByArticle_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReportTurnoverByArticleRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reportHoursByEmployee_(\XMLReader $in) : reportHoursByEmployee_ {
		$n = $in->name;
		$o = new reportHoursByEmployee_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReportHoursByEmployeeRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reportPaymentMethods_(\XMLReader $in) : reportPaymentMethods_ {
		$n = $in->name;
		$o = new reportPaymentMethods_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReportPaymentMethodsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reportTables_(\XMLReader $in) : reportTables_ {
		$n = $in->name;
		$o = new reportTables_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReportTablesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reportCancellations_(\XMLReader $in) : reportCancellations_ {
		$n = $in->name;
		$o = new reportCancellations_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReportCancellationsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reportBPE_(\XMLReader $in) : reportBPE_ {
		$n = $in->name;
		$o = new reportBPE_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReportBPERequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reportBranchPerformance_(\XMLReader $in) : reportBranchPerformance_ {
		$n = $in->name;
		$o = new reportBranchPerformance_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReportBranchPerformanceRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reportAverageSpending_(\XMLReader $in) : reportAverageSpending_ {
		$n = $in->name;
		$o = new reportAverageSpending_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReportAverageSpendingRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reportTurnover_(\XMLReader $in) : reportTurnover_ {
		$n = $in->name;
		$o = new reportTurnover_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReportTurnoverRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reportPaymentMethodDetails(\XMLReader $in) : reportPaymentMethodDetails {
		$n = $in->name;
		$o = new reportPaymentMethodDetails();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReportPaymentMethodDetailsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reportPrintableFinancialTotals(\XMLReader $in) : reportPrintableFinancialTotals {
		$n = $in->name;
		$o = new reportPrintableFinancialTotals();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReportPrintableFinancialTotalsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_reportArticlePerformance_(\XMLReader $in) : reportArticlePerformance_ {
		$n = $in->name;
		$o = new reportArticlePerformance_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReportArticlePerformanceRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getSalesRepeatTemplates(\XMLReader $in) : getSalesRepeatTemplates {
		$n = $in->name;
		$o = new getSalesRepeatTemplates();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetSalesRepeatTemplatesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveSalesRepeatTemplate_(\XMLReader $in) : saveSalesRepeatTemplate_ {
		$n = $in->name;
		$o = new saveSalesRepeatTemplate_();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SaveSalesRepeatTemplateRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_performBpeBudgetChecks(\XMLReader $in) : performBpeBudgetChecks {
		$n = $in->name;
		$o = new performBpeBudgetChecks();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_PerformBpeBudgetChecksRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getTicketCounterSales(\XMLReader $in) : getTicketCounterSales {
		$n = $in->name;
		$o = new getTicketCounterSales();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetTicketCounterSalesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getSalePromotions(\XMLReader $in) : getSalePromotions {
		$n = $in->name;
		$o = new getSalePromotions();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetSalePromotionsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPaymentMethods(\XMLReader $in) : getPaymentMethods {
		$n = $in->name;
		$o = new getPaymentMethods();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getPaymentMethodsV2(\XMLReader $in) : getPaymentMethodsV2 {
		$n = $in->name;
		$o = new getPaymentMethodsV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetPaymentMethodsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getAvailablePaymentMethods(\XMLReader $in) : getAvailablePaymentMethods {
		$n = $in->name;
		$o = new getAvailablePaymentMethods();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getAvailablePaymentMethodsV2(\XMLReader $in) : getAvailablePaymentMethodsV2 {
		$n = $in->name;
		$o = new getAvailablePaymentMethodsV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetAvailablePaymentMethodsV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createOrder(\XMLReader $in) : createOrder {
		$n = $in->name;
		$o = new createOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'order': $o->order = $this->load_Order($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createOrderV2(\XMLReader $in) : createOrderV2 {
		$n = $in->name;
		$o = new createOrderV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_CreateOrderV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createOrderV3(\XMLReader $in) : createOrderV3 {
		$n = $in->name;
		$o = new createOrderV3();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_CreateOrderV3Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_payOrder(\XMLReader $in) : payOrder {
		$n = $in->name;
		$o = new payOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_PayOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_payOrderV2(\XMLReader $in) : payOrderV2 {
		$n = $in->name;
		$o = new payOrderV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_PayOrderV2Request($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_payTableOrder(\XMLReader $in) : payTableOrder {
		$n = $in->name;
		$o = new payTableOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'order': $o->order = $this->load_Order($in); break;
						case 'paymentList': $o->paymentList = ($this->load_PaymentList($in))->payment; break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_payTableOrderV2(\XMLReader $in) : payTableOrderV2 {
		$n = $in->name;
		$o = new payTableOrderV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'request': $o->request = $this->load_PayTableOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_prepayTableOrder(\XMLReader $in) : prepayTableOrder {
		$n = $in->name;
		$o = new prepayTableOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'order': $o->order = $this->load_Order($in); break;
						case 'paymentList': $o->paymentList = ($this->load_PaymentList($in))->payment; break;
						case 'prepayAmount': $prepayAmount = $this->load_int_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		$o->prepayAmount = isset($prepayAmount) ? BigDecimal::ofUnscaledValue($prepayAmount, 2) : null;
		return $o;
	}
	private function load_prepayTableOrderV2(\XMLReader $in) : prepayTableOrderV2 {
		$n = $in->name;
		$o = new prepayTableOrderV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'request': $o->request = $this->load_PrepayTableOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getOrdersByExtOrderIds(\XMLReader $in) : getOrdersByExtOrderIds {
		$n = $in->name;
		$o = new getOrdersByExtOrderIds();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetOrdersByExtOrderIdsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getProposals(\XMLReader $in) : getProposals {
		$n = $in->name;
		$o = new getProposals();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetProposalsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getProposal(\XMLReader $in) : getProposal {
		$n = $in->name;
		$o = new getProposal();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'proposalId': $o->proposalId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveProposal(\XMLReader $in) : saveProposal {
		$n = $in->name;
		$o = new saveProposal();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'proposal': $o->proposal = $this->load_Proposal($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_cancelProposal(\XMLReader $in) : cancelProposal {
		$n = $in->name;
		$o = new cancelProposal();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'proposalId': $o->proposalId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createOrderFromProposal(\XMLReader $in) : createOrderFromProposal {
		$n = $in->name;
		$o = new createOrderFromProposal();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'proposalId': $o->proposalId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createInvoiceFromProposal(\XMLReader $in) : createInvoiceFromProposal {
		$n = $in->name;
		$o = new createInvoiceFromProposal();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'proposalId': $o->proposalId = $this->load_string_property($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getOrdersByReceipts(\XMLReader $in) : getOrdersByReceipts {
		$n = $in->name;
		$o = new getOrdersByReceipts();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetOrdersByReceiptsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getCurrentTableOrders(\XMLReader $in) : getCurrentTableOrders {
		$n = $in->name;
		$o = new getCurrentTableOrders();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetCurrentTableOrdersRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getOrders(\XMLReader $in) : getOrders {
		$n = $in->name;
		$o = new getOrders();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetOrdersRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_determineContractLines(\XMLReader $in) : determineContractLines {
		$n = $in->name;
		$o = new determineContractLines();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_DetermineContractLinesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createInvoiceFromPackingSlips(\XMLReader $in) : createInvoiceFromPackingSlips {
		$n = $in->name;
		$o = new createInvoiceFromPackingSlips();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_CreateInvoiceFromPackingSlipsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getCashCountInfo(\XMLReader $in) : getCashCountInfo {
		$n = $in->name;
		$o = new getCashCountInfo();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetCashCountInfoRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_saveCashCount(\XMLReader $in) : saveCashCount {
		$n = $in->name;
		$o = new saveCashCount();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SaveCashCountRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_processInvoice(\XMLReader $in) : processInvoice {
		$n = $in->name;
		$o = new processInvoice();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ProcessInvoiceRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_processProposal(\XMLReader $in) : processProposal {
		$n = $in->name;
		$o = new processProposal();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ProcessProposalRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_processOrder(\XMLReader $in) : processOrder {
		$n = $in->name;
		$o = new processOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ProcessOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getWebhookConsumers(\XMLReader $in) : getWebhookConsumers {
		$n = $in->name;
		$o = new getWebhookConsumers();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetWebhookConsumersRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_startExternalPayment(\XMLReader $in) : startExternalPayment {
		$n = $in->name;
		$o = new startExternalPayment();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'request': $o->request = $this->load_StartExternalPaymentRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_pollExternalPayment(\XMLReader $in) : pollExternalPayment {
		$n = $in->name;
		$o = new pollExternalPayment();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'request': $o->request = $this->load_PollExternalPaymentRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_requestCancelExternalPayment(\XMLReader $in) : requestCancelExternalPayment {
		$n = $in->name;
		$o = new requestCancelExternalPayment();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'request': $o->request = $this->load_RequestCancelExternalPaymentRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_cancelExternalPayment(\XMLReader $in) : cancelExternalPayment {
		$n = $in->name;
		$o = new cancelExternalPayment();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'terminal': $o->terminal = $this->load_Terminal($in); break;
						case 'request': $o->request = $this->load_CancelExternalPaymentRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_startExternalPaymentV2(\XMLReader $in) : startExternalPaymentV2 {
		$n = $in->name;
		$o = new startExternalPaymentV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ExternalPaymentWebhookRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_pollExternalPaymentV2(\XMLReader $in) : pollExternalPaymentV2 {
		$n = $in->name;
		$o = new pollExternalPaymentV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ExternalPaymentWebhookRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_requestCancelExternalPaymentV2(\XMLReader $in) : requestCancelExternalPaymentV2 {
		$n = $in->name;
		$o = new requestCancelExternalPaymentV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ExternalPaymentWebhookRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_cancelExternalPaymentV2(\XMLReader $in) : cancelExternalPaymentV2 {
		$n = $in->name;
		$o = new cancelExternalPaymentV2();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ExternalPaymentWebhookRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_sendWebhook(\XMLReader $in) : sendWebhook {
		$n = $in->name;
		$o = new sendWebhook();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_SendWebhookRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getInterbranchOrders(\XMLReader $in) : getInterbranchOrders {
		$n = $in->name;
		$o = new getInterbranchOrders();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetInterbranchOrdersRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createInterbranchOrder(\XMLReader $in) : createInterbranchOrder {
		$n = $in->name;
		$o = new createInterbranchOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_CreateInterbranchOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_updateInterbranchOrder(\XMLReader $in) : updateInterbranchOrder {
		$n = $in->name;
		$o = new updateInterbranchOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_UpdateInterbranchOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_claimInterbranchOrder(\XMLReader $in) : claimInterbranchOrder {
		$n = $in->name;
		$o = new claimInterbranchOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ClaimInterbranchOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_releaseInterbranchOrder(\XMLReader $in) : releaseInterbranchOrder {
		$n = $in->name;
		$o = new releaseInterbranchOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ReleaseInterbranchOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_cancelInterbranchOrder(\XMLReader $in) : cancelInterbranchOrder {
		$n = $in->name;
		$o = new cancelInterbranchOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_CancelInterbranchOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getInterbranchShipments(\XMLReader $in) : getInterbranchShipments {
		$n = $in->name;
		$o = new getInterbranchShipments();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetInterbranchShipmentsRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_shipInterbranchOrder(\XMLReader $in) : shipInterbranchOrder {
		$n = $in->name;
		$o = new shipInterbranchOrder();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_ShipInterbranchOrderRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_getInterbranchDeliveries(\XMLReader $in) : getInterbranchDeliveries {
		$n = $in->name;
		$o = new getInterbranchDeliveries();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_GetInterbranchDeliveriesRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_deliverInterbranchShipment(\XMLReader $in) : deliverInterbranchShipment {
		$n = $in->name;
		$o = new deliverInterbranchShipment();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_DeliverInterbranchShipmentRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createInterbranchShipment(\XMLReader $in) : createInterbranchShipment {
		$n = $in->name;
		$o = new createInterbranchShipment();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_CreateInterbranchShipmentRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_createInterbranchDelivery(\XMLReader $in) : createInterbranchDelivery {
		$n = $in->name;
		$o = new createInterbranchDelivery();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_CreateInterbranchDeliveryRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
	private function load_runInterbranchPlanner(\XMLReader $in) : runInterbranchPlanner {
		$n = $in->name;
		$o = new runInterbranchPlanner();
		if ($in->isEmptyElement) return $o;
		$continue = true;
		while ($continue && $in->read()) {
			switch ($in->nodeType) {
				case \XMLReader::ELEMENT:
					switch ($in->localName) {
						case 'request': $o->request = $this->load_RunInterbranchPlannerRequest($in); break;
					}
					break;
				case \XMLReader::END_ELEMENT:
					if ($in->name == $n) $continue = false;
					break;
			}
		}
		return $o;
	}
}

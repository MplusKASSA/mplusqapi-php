<?php declare(strict_types=1);
// Generated code
namespace MplusKASSA\MplusQapi;
use Brick\Math\BigDecimal;
abstract class SoapObject {
	const TNS = 'ns1';
	abstract public function write(SoapGenerator $gen, string $elemName): void;
	public function __set(string $name, mixed $value): void { 
    throw new \Exception("$name is not an allowed property of this request");
}
}
class SoapMplusDateTime extends SoapObject {
	public int $sec;
	public int $min;
	public int $hour;
	public int $day;
	public int $mon;
	public int $year;
	public bool $isdst;
	public int $timezone;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('sec', $this->sec);
		$gen->writeInt('min', $this->min);
		$gen->writeInt('hour', $this->hour);
		$gen->writeInt('day', $this->day);
		$gen->writeInt('mon', $this->mon);
		$gen->writeInt('year', $this->year);
		$gen->writeBool('isdst', $this->isdst);
		$gen->writeInt('timezone', $this->timezone);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
    static public function fromDateTime(\DateTime $d): SoapMplusDateTime
    {
        $d->setTimezone(new \DateTimeZone('Europe/Amsterdam')); // Niet per definitie goed maar wel in de meeste gevallen
        $d = date_parse($d->format('Y-M-d H:i:s O'));
        
        $r = new SoapMplusDateTime();
        $r->year = $d['year'];
        $r->mon = $d['month'];
        $r->day = $d['day'];
        $r->hour = $d['hour'];
        $r->min = $d['minute'];
        $r->sec = $d['second'];
        $r->isdst = false;
        $r->timezone = $d['zone'] / 60; // api heeft deze gedefinieerd als minuten date_parse retourneerd seconden
        return $r;
    }

    public function toDateTime(): \DateTime
    {
        $r = new \DateTime();
        $r->setTime($this->hour, $this->min, $this->sec);
        $r->setDate($this->year, $this->mon, $this->day);
        return $r;
    }
}

class SoapMplusDate extends SoapObject {
	public int $day;
	public int $mon;
	public int $year;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('day', $this->day);
		$gen->writeInt('mon', $this->mon);
		$gen->writeInt('year', $this->year);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
    static public function fromDateTime(\DateTime $d): SoapMplusDate
    {
        $d->setTimezone(new \DateTimeZone('Europe/Amsterdam')); // Niet per definitie goed maar wel in de meeste gevallen
        $d = date_parse($d->format('Y-M-d'));
        
        $r = new SoapMplusDate();
        $r->year = $d['year'];
        $r->mon = $d['month'];
        $r->day = $d['day'];
        return $r;
    }

    public function toDateTime(): \DateTime
    {
        $r = new \DateTime();
        $r->setTime(0, 0);
        $r->setDate($this->year, $this->mon, $this->day);
        return $r;
    }
}

class NumberList extends SoapObject {
	/** @var int[] */
	public $number = array();
	public function __construct($list = array()) { $this->number = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->number as $elem) $gen->writeInt('number', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CategoryIdSet extends SoapObject {
	/** @var int[] */
	public $category = array();
	public function __construct($list = array()) { $this->category = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->category as $elem) $gen->writeInt('category', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CustomField extends SoapObject {
	public string $fieldName;
	public ?string $dataType = null;
	public ?bool $isRequired = null;
	public ?string $strValue = null;
	public ?int $intValue = null;
	public ?int $decimalPlaces = null;
	public ?bool $boolValue = null;
	public ?\DateTime $dateValue = null;
	public ?\DateTime $dateTimeValue = null;
	/** @var int[] */
	public $multiSelectInt = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'fieldName', null, $this->fieldName);
		if ($this->dataType !== null) $gen->out->writeElementNs(self::TNS, 'dataType', null, $this->dataType);
		if ($this->isRequired !== null) $gen->writeBool('isRequired', $this->isRequired);
		if ($this->strValue !== null) $gen->out->writeElementNs(self::TNS, 'strValue', null, $this->strValue);
		if ($this->intValue !== null) $gen->writeInt('intValue', $this->intValue);
		if ($this->decimalPlaces !== null) $gen->writeInt('decimalPlaces', $this->decimalPlaces);
		if ($this->boolValue !== null) $gen->writeBool('boolValue', $this->boolValue);
		if ($this->dateValue !== null) (SoapMplusDate::fromDateTime($this->dateValue))->write($gen, 'dateValue');
		if ($this->dateTimeValue !== null) (SoapMplusDateTime::fromDateTime($this->dateTimeValue))->write($gen, 'dateTimeValue');
		foreach ($this->multiSelectInt as $elem) $gen->writeInt('multiSelectInt', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CustomFieldList extends SoapObject {
	/** @var CustomField[] */
	public $customField = array();
	public function __construct($list = array()) { $this->customField = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->customField as $elem) $elem->write($gen, 'customField');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Employee extends SoapObject {
	public ?int $employeeNumber = null;
	public ?string $extEmployeeId = null;
	public ?int $syncMarker = null;
	public ?\DateTime $createTimestamp = null;
	public ?\DateTime $changeTimestamp = null;
	public ?string $name = null;
	public ?string $username = null;
	public ?string $password = null;
	public ?\DateTime $birthDate = null;
	public ?string $phoneWork = null;
	public ?string $phoneHome = null;
	public ?string $phoneMobile = null;
	public ?string $email = null;
	public ?string $bankAccountNumber = null;
	public ?string $bankName = null;
	public ?int $rfid = null;
	public ?string $extraText = null;
	public ?bool $active = null;
	public ?int $categoryId = null;
	public ?string $category = null;
	/** @var int[] */
	public $categoryIds = null;
	public ?string $personNumber = null;
	/** @var CustomField[] */
	public $customFieldList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->extEmployeeId !== null) $gen->out->writeElementNs(self::TNS, 'extEmployeeId', null, $this->extEmployeeId);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->createTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->createTimestamp))->write($gen, 'createTimestamp');
		if ($this->changeTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->changeTimestamp))->write($gen, 'changeTimestamp');
		if ($this->name !== null) $gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		if ($this->username !== null) $gen->out->writeElementNs(self::TNS, 'username', null, $this->username);
		if ($this->password !== null) $gen->out->writeElementNs(self::TNS, 'password', null, $this->password);
		if ($this->birthDate !== null) (SoapMplusDate::fromDateTime($this->birthDate))->write($gen, 'birthDate');
		if ($this->phoneWork !== null) $gen->out->writeElementNs(self::TNS, 'phoneWork', null, $this->phoneWork);
		if ($this->phoneHome !== null) $gen->out->writeElementNs(self::TNS, 'phoneHome', null, $this->phoneHome);
		if ($this->phoneMobile !== null) $gen->out->writeElementNs(self::TNS, 'phoneMobile', null, $this->phoneMobile);
		if ($this->email !== null) $gen->out->writeElementNs(self::TNS, 'email', null, $this->email);
		if ($this->bankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'bankAccountNumber', null, $this->bankAccountNumber);
		if ($this->bankName !== null) $gen->out->writeElementNs(self::TNS, 'bankName', null, $this->bankName);
		if ($this->rfid !== null) $gen->writeInt('rfid', $this->rfid);
		if ($this->extraText !== null) $gen->out->writeElementNs(self::TNS, 'extraText', null, $this->extraText);
		if ($this->active !== null) $gen->writeBool('active', $this->active);
		if ($this->categoryId !== null) $gen->writeInt('categoryId', $this->categoryId);
		if ($this->category !== null) $gen->out->writeElementNs(self::TNS, 'category', null, $this->category);
		if ($this->categoryIds !== null) {
$tmp_categoryIds = new CategoryIdSet($this->categoryIds);
$tmp_categoryIds->write($gen, 'categoryIds');
}
		if ($this->personNumber !== null) $gen->out->writeElementNs(self::TNS, 'personNumber', null, $this->personNumber);
		if ($this->customFieldList !== null) {
$tmp_customFieldList = new CustomFieldList($this->customFieldList);
$tmp_customFieldList->write($gen, 'customFieldList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class EmployeeList extends SoapObject {
	/** @var Employee[] */
	public $employee = array();
	public function __construct($list = array()) { $this->employee = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->employee as $elem) $elem->write($gen, 'employee');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Image extends SoapObject {
	public int $imageId;
	public string $imageName;
	public string $imageHash;
	public string $imagePath;
	public string $imageUrl;
	public string $imageData;
	public string $imageDataResult;
	public string $thumbHash;
	public string $thumbPath;
	public string $thumbUrl;
	public string $thumbData;
	public string $thumbDataResult;
	public int $imageWidth;
	public int $imageHeight;
	public int $thumbWidth;
	public int $thumbHeight;
	public \DateTime $createdTimestamp;
	public \DateTime $changedTimestamp;
	public function __construct() {
		$this->createdTimestamp = new \DateTime();
		$this->changedTimestamp = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('imageId', $this->imageId);
		$gen->out->writeElementNs(self::TNS, 'imageName', null, $this->imageName);
		$gen->out->writeElementNs(self::TNS, 'imageHash', null, $this->imageHash);
		$gen->out->writeElementNs(self::TNS, 'imagePath', null, $this->imagePath);
		$gen->out->writeElementNs(self::TNS, 'imageUrl', null, $this->imageUrl);
		$gen->out->writeElementNs(self::TNS, 'imageData', null, $this->imageData);
		$gen->out->writeElementNs(self::TNS, 'imageDataResult', null, $this->imageDataResult);
		$gen->out->writeElementNs(self::TNS, 'thumbHash', null, $this->thumbHash);
		$gen->out->writeElementNs(self::TNS, 'thumbPath', null, $this->thumbPath);
		$gen->out->writeElementNs(self::TNS, 'thumbUrl', null, $this->thumbUrl);
		$gen->out->writeElementNs(self::TNS, 'thumbData', null, $this->thumbData);
		$gen->out->writeElementNs(self::TNS, 'thumbDataResult', null, $this->thumbDataResult);
		$gen->writeInt('imageWidth', $this->imageWidth);
		$gen->writeInt('imageHeight', $this->imageHeight);
		$gen->writeInt('thumbWidth', $this->thumbWidth);
		$gen->writeInt('thumbHeight', $this->thumbHeight);
		(SoapMplusDateTime::fromDateTime($this->createdTimestamp))->write($gen, 'createdTimestamp');
		(SoapMplusDateTime::fromDateTime($this->changedTimestamp))->write($gen, 'changedTimestamp');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ImageList extends SoapObject {
	/** @var Image[] */
	public $image = array();
	public function __construct($list = array()) { $this->image = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->image as $elem) $elem->write($gen, 'image');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RelationArticleDiscount extends SoapObject {
	public ?int $relationArticleDiscountId = null;
	public ?int $relationNumber = null;
	public ?int $articleNumber = null;
	public ?int $articleDiscountGroupNumber = null;
	public ?BigDecimal $minimumAmount = null;
	public ?int $discountPercentage = null;
	public ?BigDecimal $priceIncl = null;
	public ?BigDecimal $priceExcl = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->relationArticleDiscountId !== null) $gen->writeInt('relationArticleDiscountId', $this->relationArticleDiscountId);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->articleDiscountGroupNumber !== null) $gen->writeInt('articleDiscountGroupNumber', $this->articleDiscountGroupNumber);
		if ($this->minimumAmount !== null) $gen->writeValueAndScale('minimumAmount', 'minimumAmountDecimalPlaces', $this->minimumAmount, 2);
		if ($this->discountPercentage !== null) $gen->writeInt('discountPercentage', $this->discountPercentage);
		if ($this->priceIncl !== null) $gen->writeValueAndScale('priceIncl', '', $this->priceIncl, 2);
		if ($this->priceExcl !== null) $gen->writeValueAndScale('priceExcl', '', $this->priceExcl, 2);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RelationArticleDiscountList extends SoapObject {
	/** @var RelationArticleDiscount[] */
	public $relationArticleDiscount = array();
	public function __construct($list = array()) { $this->relationArticleDiscount = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->relationArticleDiscount as $elem) $elem->write($gen, 'relationArticleDiscount');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VatGroup extends SoapObject {
	public ?int $branchNumber = null;
	public ?string $extBranchId = null;
	public ?int $countryCode = null;
	public ?string $countryIso3 = null;
	public int $vatCode;
	public int $vatPercentage;
	public ?BigDecimal $exclAmount = null;
	public ?BigDecimal $vatAmount = null;
	public ?int $accountNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		if ($this->countryCode !== null) $gen->writeInt('countryCode', $this->countryCode);
		if ($this->countryIso3 !== null) $gen->out->writeElementNs(self::TNS, 'countryIso3', null, $this->countryIso3);
		$gen->writeInt('vatCode', $this->vatCode);
		$gen->writeInt('vatPercentage', $this->vatPercentage);
		if ($this->exclAmount !== null) $gen->writeValueAndScale('exclAmount', '', $this->exclAmount, 2);
		if ($this->vatAmount !== null) $gen->writeValueAndScale('vatAmount', '', $this->vatAmount, 2);
		if ($this->accountNumber !== null) $gen->writeInt('accountNumber', $this->accountNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VatGroupList extends SoapObject {
	/** @var VatGroup[] */
	public $vatGroup = array();
	public function __construct($list = array()) { $this->vatGroup = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->vatGroup as $elem) $elem->write($gen, 'vatGroup');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RelationList extends SoapObject {
	/** @var Relation[] */
	public $relation = array();
	public function __construct($list = array()) { $this->relation = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->relation as $elem) $elem->write($gen, 'relation');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Relation extends SoapObject {
	public ?int $relationNumber = null;
	public ?string $extRelationId = null;
	public ?int $syncMarker = null;
	public ?\DateTime $createTimestamp = null;
	public ?\DateTime $changeTimestamp = null;
	public ?bool $active = null;
	public ?string $name = null;
	public ?string $address = null;
	public ?string $zipcode = null;
	public ?string $city = null;
	public ?string $country = null;
	public ?string $deliveryAddress = null;
	public ?string $deliveryZipcode = null;
	public ?string $deliveryCity = null;
	public ?string $deliveryCountry = null;
	public ?string $contact = null;
	public ?string $telephone = null;
	public ?string $mobile = null;
	public ?string $email = null;
	public ?string $website = null;
	public ?\DateTime $birthDate = null;
	public ?string $relationCode = null;
	public ?int $points = null;
	public ?int $balance = null;
	public ?int $priceGroupNumber = null;
	public ?int $discountPercentage = null;
	public ?int $categoryId = null;
	/** @var int[] */
	public $categoryIds = null;
	public ?string $cardNumber = null;
	public ?string $bankAccountNumber = null;
	public ?int $creditLimit = null;
	public ?int $paymentWithinDays = null;
	public ?string $vatNumber = null;
	public ?string $commerceNumber = null;
	public ?string $extraText = null;
	public ?string $defaultVatMethod = null;
	public ?bool $neverPrintOrEmailReceipt = null;
	public ?bool $alwaysPrintReceipt = null;
	public ?bool $alwaysPrintLargeFormatReceipt = null;
	public ?bool $alwaysEmailReceipt = null;
	public ?bool $condenseCombinedInvoice = null;
	/** @var Image[] */
	public $imageList = null;
	/** @var CustomField[] */
	public $customFieldList = null;
	/** @var Relation[] */
	public $contactList = null;
	/** @var RelationArticleDiscount[] */
	public $relationArticleDiscountList = null;
	public ?string $companyName = null;
	/** @var int[] */
	public $branchesNonPurchasable = array();
	/** @var string[] */
	public $cardNumbers = array();
	public function writeProps(SoapGenerator $gen): void {
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->extRelationId !== null) $gen->out->writeElementNs(self::TNS, 'extRelationId', null, $this->extRelationId);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->createTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->createTimestamp))->write($gen, 'createTimestamp');
		if ($this->changeTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->changeTimestamp))->write($gen, 'changeTimestamp');
		if ($this->active !== null) $gen->writeBool('active', $this->active);
		if ($this->name !== null) $gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		if ($this->address !== null) $gen->out->writeElementNs(self::TNS, 'address', null, $this->address);
		if ($this->zipcode !== null) $gen->out->writeElementNs(self::TNS, 'zipcode', null, $this->zipcode);
		if ($this->city !== null) $gen->out->writeElementNs(self::TNS, 'city', null, $this->city);
		if ($this->country !== null) $gen->out->writeElementNs(self::TNS, 'country', null, $this->country);
		if ($this->deliveryAddress !== null) $gen->out->writeElementNs(self::TNS, 'deliveryAddress', null, $this->deliveryAddress);
		if ($this->deliveryZipcode !== null) $gen->out->writeElementNs(self::TNS, 'deliveryZipcode', null, $this->deliveryZipcode);
		if ($this->deliveryCity !== null) $gen->out->writeElementNs(self::TNS, 'deliveryCity', null, $this->deliveryCity);
		if ($this->deliveryCountry !== null) $gen->out->writeElementNs(self::TNS, 'deliveryCountry', null, $this->deliveryCountry);
		if ($this->contact !== null) $gen->out->writeElementNs(self::TNS, 'contact', null, $this->contact);
		if ($this->telephone !== null) $gen->out->writeElementNs(self::TNS, 'telephone', null, $this->telephone);
		if ($this->mobile !== null) $gen->out->writeElementNs(self::TNS, 'mobile', null, $this->mobile);
		if ($this->email !== null) $gen->out->writeElementNs(self::TNS, 'email', null, $this->email);
		if ($this->website !== null) $gen->out->writeElementNs(self::TNS, 'website', null, $this->website);
		if ($this->birthDate !== null) (SoapMplusDate::fromDateTime($this->birthDate))->write($gen, 'birthDate');
		if ($this->relationCode !== null) $gen->out->writeElementNs(self::TNS, 'relationCode', null, $this->relationCode);
		if ($this->points !== null) $gen->writeInt('points', $this->points);
		if ($this->balance !== null) $gen->writeInt('balance', $this->balance);
		if ($this->priceGroupNumber !== null) $gen->writeInt('priceGroupNumber', $this->priceGroupNumber);
		if ($this->discountPercentage !== null) $gen->writeInt('discountPercentage', $this->discountPercentage);
		if ($this->categoryId !== null) $gen->writeInt('categoryId', $this->categoryId);
		if ($this->categoryIds !== null) {
$tmp_categoryIds = new CategoryIdSet($this->categoryIds);
$tmp_categoryIds->write($gen, 'categoryIds');
}
		if ($this->cardNumber !== null) $gen->out->writeElementNs(self::TNS, 'cardNumber', null, $this->cardNumber);
		if ($this->bankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'bankAccountNumber', null, $this->bankAccountNumber);
		if ($this->creditLimit !== null) $gen->writeInt('creditLimit', $this->creditLimit);
		if ($this->paymentWithinDays !== null) $gen->writeInt('paymentWithinDays', $this->paymentWithinDays);
		if ($this->vatNumber !== null) $gen->out->writeElementNs(self::TNS, 'vatNumber', null, $this->vatNumber);
		if ($this->commerceNumber !== null) $gen->out->writeElementNs(self::TNS, 'commerceNumber', null, $this->commerceNumber);
		if ($this->extraText !== null) $gen->out->writeElementNs(self::TNS, 'extraText', null, $this->extraText);
		if ($this->defaultVatMethod !== null) $gen->out->writeElementNs(self::TNS, 'defaultVatMethod', null, $this->defaultVatMethod);
		if ($this->neverPrintOrEmailReceipt !== null) $gen->writeBool('neverPrintOrEmailReceipt', $this->neverPrintOrEmailReceipt);
		if ($this->alwaysPrintReceipt !== null) $gen->writeBool('alwaysPrintReceipt', $this->alwaysPrintReceipt);
		if ($this->alwaysPrintLargeFormatReceipt !== null) $gen->writeBool('alwaysPrintLargeFormatReceipt', $this->alwaysPrintLargeFormatReceipt);
		if ($this->alwaysEmailReceipt !== null) $gen->writeBool('alwaysEmailReceipt', $this->alwaysEmailReceipt);
		if ($this->condenseCombinedInvoice !== null) $gen->writeBool('condenseCombinedInvoice', $this->condenseCombinedInvoice);
		if ($this->imageList !== null) {
$tmp_imageList = new ImageList($this->imageList);
$tmp_imageList->write($gen, 'imageList');
}
		if ($this->customFieldList !== null) {
$tmp_customFieldList = new CustomFieldList($this->customFieldList);
$tmp_customFieldList->write($gen, 'customFieldList');
}
		if ($this->contactList !== null) {
$tmp_contactList = new RelationList($this->contactList);
$tmp_contactList->write($gen, 'contactList');
}
		if ($this->relationArticleDiscountList !== null) {
$tmp_relationArticleDiscountList = new RelationArticleDiscountList($this->relationArticleDiscountList);
$tmp_relationArticleDiscountList->write($gen, 'relationArticleDiscountList');
}
		if ($this->companyName !== null) $gen->out->writeElementNs(self::TNS, 'companyName', null, $this->companyName);
		foreach ($this->branchesNonPurchasable as $elem) $gen->writeInt('branchesNonPurchasable', $elem);
		foreach ($this->cardNumbers as $elem) $gen->out->writeElementNs(self::TNS, 'cardNumbers', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Colour extends SoapObject {
	public int $red;
	public int $green;
	public int $blue;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('red', $this->red);
		$gen->writeInt('green', $this->green);
		$gen->writeInt('blue', $this->blue);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class EmployeeIdentifier extends SoapObject {
	public int $employeeNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('employeeNumber', $this->employeeNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RelationIdentifier extends SoapObject {
	public int $relationNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('relationNumber', $this->relationNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TableIdentifier extends SoapObject {
	public int $branchNumber;
	public int $tableNumber;
	public int $tableSubNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('tableNumber', $this->tableNumber);
		$gen->writeInt('tableSubNumber', $this->tableSubNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WorkplaceIdentifier extends SoapObject {
	public int $branchNumber;
	public int $workplaceNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BranchAccountNumber extends SoapObject {
	public int $branchNumber;
	public ?string $extBranchId = null;
	public ?int $accountNumber = null;
	public ?int $purchaseAccountNumber = null;
	public ?int $stockAccountNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		if ($this->accountNumber !== null) $gen->writeInt('accountNumber', $this->accountNumber);
		if ($this->purchaseAccountNumber !== null) $gen->writeInt('purchaseAccountNumber', $this->purchaseAccountNumber);
		if ($this->stockAccountNumber !== null) $gen->writeInt('stockAccountNumber', $this->stockAccountNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BranchAccountNumberList extends SoapObject {
	/** @var BranchAccountNumber[] */
	public $branchAccountNumber = array();
	public function __construct($list = array()) { $this->branchAccountNumber = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->branchAccountNumber as $elem) $elem->write($gen, 'branchAccountNumber');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GiftcardType extends SoapObject {
	public string $cardTypeId;
	public string $name;
	public int $sequenceNumber;
	public bool $isDeleted;
	public int $turnoverGroupNumber;
	public string $paymentMethodId;
	public ?int $monthsValid = null;
	public bool $nonStandardValue;
	public bool $issuable;
	public bool $reloadable;
	public bool $redeemable;
	public bool $restitutable;
	public bool $personalizable;
	/** @var int[] */
	public $branchNumbers = array();
	/** @var int[] */
	public $availableValues = array();
	public ?int $maximumBalance = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardTypeId', null, $this->cardTypeId);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->writeInt('sequenceNumber', $this->sequenceNumber);
		$gen->writeBool('isDeleted', $this->isDeleted);
		$gen->writeInt('turnoverGroupNumber', $this->turnoverGroupNumber);
		$gen->out->writeElementNs(self::TNS, 'paymentMethodId', null, $this->paymentMethodId);
		if ($this->monthsValid !== null) $gen->writeInt('monthsValid', $this->monthsValid);
		$gen->writeBool('nonStandardValue', $this->nonStandardValue);
		$gen->writeBool('issuable', $this->issuable);
		$gen->writeBool('reloadable', $this->reloadable);
		$gen->writeBool('redeemable', $this->redeemable);
		$gen->writeBool('restitutable', $this->restitutable);
		$gen->writeBool('personalizable', $this->personalizable);
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		foreach ($this->availableValues as $elem) $gen->writeInt('availableValues', $elem);
		if ($this->maximumBalance !== null) $gen->writeInt('maximumBalance', $this->maximumBalance);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BpeConfiguration extends SoapObject {
	public bool $employeeBudgetsConfigured;
	public string $budgetPeriod;
	public string $budgetExceededAction;
	public string $budgetDefaultLimit;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeBool('employeeBudgetsConfigured', $this->employeeBudgetsConfigured);
		$gen->out->writeElementNs(self::TNS, 'budgetPeriod', null, $this->budgetPeriod);
		$gen->out->writeElementNs(self::TNS, 'budgetExceededAction', null, $this->budgetExceededAction);
		$gen->out->writeElementNs(self::TNS, 'budgetDefaultLimit', null, $this->budgetDefaultLimit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class EftReceiptLine extends SoapObject {
	public bool $doubleHeight;
	public bool $doubleWidth;
	public string $line;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeBool('doubleHeight', $this->doubleHeight);
		$gen->writeBool('doubleWidth', $this->doubleWidth);
		$gen->out->writeElementNs(self::TNS, 'line', null, $this->line);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class EftReceipt extends SoapObject {
	/** @var EftReceiptLine[] */
	public $line = array();
	public function __construct($list = array()) { $this->line = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->line as $elem) $elem->write($gen, 'line');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class EftTransactionDetails extends SoapObject {
	public string $eftTransactionId;
	public int $txid;
	public BigDecimal $amountCents;
	public \DateTime $timestampPos;
	public \DateTime $timestampTerminal;
	public string $terminalId;
	public string $transactionId;
	public string $cardNumber;
	/** @var EftReceiptLine[] */
	public $customerReceipt = array();
	public int $customerReceiptCopies;
	/** @var EftReceiptLine[] */
	public $merchantReceipt = array();
	public int $merchantReceiptCopies;
	public bool $requireCustomerSignature;
	public bool $requireMerchantSignature;
	public bool $requireIdentification;
	public string $eJournal;
	public string $eftDriver;
	public string $state;
	public int $employeeNumber;
	public int $authorizingEmployeeNumber;
	public function __construct() {
		$this->timestampPos = new \DateTime();
		$this->timestampTerminal = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'eftTransactionId', null, $this->eftTransactionId);
		$gen->writeInt('txid', $this->txid);
		$gen->writeValueAndScale('amountCents', '', $this->amountCents, 2);
		(SoapMplusDateTime::fromDateTime($this->timestampPos))->write($gen, 'timestampPos');
		(SoapMplusDateTime::fromDateTime($this->timestampTerminal))->write($gen, 'timestampTerminal');
		$gen->out->writeElementNs(self::TNS, 'terminalId', null, $this->terminalId);
		$gen->out->writeElementNs(self::TNS, 'transactionId', null, $this->transactionId);
		$gen->out->writeElementNs(self::TNS, 'cardNumber', null, $this->cardNumber);
		$tmp_customerReceipt = new EftReceipt($this->customerReceipt);
$tmp_customerReceipt->write($gen, 'customerReceipt');

		$gen->writeInt('customerReceiptCopies', $this->customerReceiptCopies);
		$tmp_merchantReceipt = new EftReceipt($this->merchantReceipt);
$tmp_merchantReceipt->write($gen, 'merchantReceipt');

		$gen->writeInt('merchantReceiptCopies', $this->merchantReceiptCopies);
		$gen->writeBool('requireCustomerSignature', $this->requireCustomerSignature);
		$gen->writeBool('requireMerchantSignature', $this->requireMerchantSignature);
		$gen->writeBool('requireIdentification', $this->requireIdentification);
		$gen->out->writeElementNs(self::TNS, 'eJournal', null, $this->eJournal);
		$gen->out->writeElementNs(self::TNS, 'eftDriver', null, $this->eftDriver);
		$gen->out->writeElementNs(self::TNS, 'state', null, $this->state);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->writeInt('authorizingEmployeeNumber', $this->authorizingEmployeeNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ExternalPaymentReceiptText extends SoapObject {
	public ?string $type = null;
	public string $text;
	public ?bool $requiresSignature = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->type !== null) $gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		$gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->requiresSignature !== null) $gen->writeBool('requiresSignature', $this->requiresSignature);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ExternalPaymentTransactionDetails extends SoapObject {
	public string $externalPaymentId;
	public BigDecimal $amount;
	public string $externalTransactionReference;
	/** @var ExternalPaymentReceiptText[] */
	public $receiptTexts = array();
	public string $cardType;
	public string $terminalId;
	public string $externalMethod;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'externalPaymentId', null, $this->externalPaymentId);
		$gen->writeValueAndScale('amount', '', $this->amount, 2);
		$gen->out->writeElementNs(self::TNS, 'externalTransactionReference', null, $this->externalTransactionReference);
		foreach ($this->receiptTexts as $elem) $elem->write($gen, 'receiptTexts');
		$gen->out->writeElementNs(self::TNS, 'cardType', null, $this->cardType);
		$gen->out->writeElementNs(self::TNS, 'terminalId', null, $this->terminalId);
		$gen->out->writeElementNs(self::TNS, 'externalMethod', null, $this->externalMethod);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Payment extends SoapObject {
	public ?string $paymentId = null;
	public ?\DateTime $financialDate = null;
	public ?\DateTime $entryTimestamp = null;
	public ?int $branchNumber = null;
	public ?string $extBranchId = null;
	public ?int $workplaceNumber = null;
	public ?int $employeeNumber = null;
	public ?string $employeeName = null;
	public string $method;
	public ?string $description = null;
	public BigDecimal $amount;
	public ?string $paymentMethodType = null;
	public ?int $accountNumber = null;
	/** @var BranchAccountNumber[] */
	public $branchAccountNumberList = null;
	public ?EftTransactionDetails $eftTransactionDetails = null;
	public ?string $giftcardNumber = null;
	public ?string $externalPaymentId = null;
	public ?ExternalPaymentTransactionDetails $externalPaymentTransactionDetails = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->paymentId !== null) $gen->out->writeElementNs(self::TNS, 'paymentId', null, $this->paymentId);
		if ($this->financialDate !== null) (SoapMplusDate::fromDateTime($this->financialDate))->write($gen, 'financialDate');
		if ($this->entryTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		if ($this->workplaceNumber !== null) $gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->employeeName !== null) $gen->out->writeElementNs(self::TNS, 'employeeName', null, $this->employeeName);
		$gen->out->writeElementNs(self::TNS, 'method', null, $this->method);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		$gen->writeValueAndScale('amount', '', $this->amount, 2);
		if ($this->paymentMethodType !== null) $gen->out->writeElementNs(self::TNS, 'paymentMethodType', null, $this->paymentMethodType);
		if ($this->accountNumber !== null) $gen->writeInt('accountNumber', $this->accountNumber);
		if ($this->branchAccountNumberList !== null) {
$tmp_branchAccountNumberList = new BranchAccountNumberList($this->branchAccountNumberList);
$tmp_branchAccountNumberList->write($gen, 'branchAccountNumberList');
}
		if ($this->eftTransactionDetails !== null) $this->eftTransactionDetails->write($gen, 'eftTransactionDetails');
		if ($this->giftcardNumber !== null) $gen->out->writeElementNs(self::TNS, 'giftcardNumber', null, $this->giftcardNumber);
		if ($this->externalPaymentId !== null) $gen->out->writeElementNs(self::TNS, 'externalPaymentId', null, $this->externalPaymentId);
		if ($this->externalPaymentTransactionDetails !== null) $this->externalPaymentTransactionDetails->write($gen, 'externalPaymentTransactionDetails');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PaymentList extends SoapObject {
	/** @var Payment[] */
	public $payment = array();
	public function __construct($list = array()) { $this->payment = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->payment as $elem) $elem->write($gen, 'payment');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PaymentMethod extends SoapObject {
	public string $method;
	public string $description;
	public string $buttonText;
	public bool $allowNegativeAmount;
	public ?bool $active = null;
	public ?string $type = null;
	public ?int $accountNumber = null;
	/** @var BranchAccountNumber[] */
	public $branchAccountNumberList = null;
	public ?string $depositPaymentMethod = null;
	public ?bool $hasExternalPaymentWebhook = null;
	public ?BpeConfiguration $bpeConfiguration = null;
	public ?GiftcardType $giftcardType = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'method', null, $this->method);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		$gen->out->writeElementNs(self::TNS, 'buttonText', null, $this->buttonText);
		$gen->writeBool('allowNegativeAmount', $this->allowNegativeAmount);
		if ($this->active !== null) $gen->writeBool('active', $this->active);
		if ($this->type !== null) $gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		if ($this->accountNumber !== null) $gen->writeInt('accountNumber', $this->accountNumber);
		if ($this->branchAccountNumberList !== null) {
$tmp_branchAccountNumberList = new BranchAccountNumberList($this->branchAccountNumberList);
$tmp_branchAccountNumberList->write($gen, 'branchAccountNumberList');
}
		if ($this->depositPaymentMethod !== null) $gen->out->writeElementNs(self::TNS, 'depositPaymentMethod', null, $this->depositPaymentMethod);
		if ($this->hasExternalPaymentWebhook !== null) $gen->writeBool('hasExternalPaymentWebhook', $this->hasExternalPaymentWebhook);
		if ($this->bpeConfiguration !== null) $this->bpeConfiguration->write($gen, 'bpeConfiguration');
		if ($this->giftcardType !== null) $this->giftcardType->write($gen, 'giftcardType');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PaymentMethodList extends SoapObject {
	/** @var PaymentMethod[] */
	public $paymentMethod = array();
	public function __construct($list = array()) { $this->paymentMethod = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->paymentMethod as $elem) $elem->write($gen, 'paymentMethod');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalePromotionLineData extends SoapObject {
	public string $salePromotionId;
	public string $salePromotionLineId;
	public ?string $description = null;
	public ?int $setNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'salePromotionId', null, $this->salePromotionId);
		$gen->out->writeElementNs(self::TNS, 'salePromotionLineId', null, $this->salePromotionLineId);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->setNumber !== null) $gen->writeInt('setNumber', $this->setNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TerminalId extends SoapObject {
	public int $branchNumber;
	public int $terminalNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('terminalNumber', $this->terminalNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Terminal extends SoapObject {
	public int $branchNumber;
	public string $branchName;
	public int $terminalNumber;
	public string $terminalName;
	public string $terminalStatus;
	public string $uniqueDeviceIdentifier;
	public ?string $gksProductionNumber = null;
	public ?string $hardwareIdentifier = null;
	public ?string $terminalSoftwareName = null;
	public ?string $terminalSoftwareVersion = null;
	public ?string $instanceId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->out->writeElementNs(self::TNS, 'branchName', null, $this->branchName);
		$gen->writeInt('terminalNumber', $this->terminalNumber);
		$gen->out->writeElementNs(self::TNS, 'terminalName', null, $this->terminalName);
		$gen->out->writeElementNs(self::TNS, 'terminalStatus', null, $this->terminalStatus);
		$gen->out->writeElementNs(self::TNS, 'uniqueDeviceIdentifier', null, $this->uniqueDeviceIdentifier);
		if ($this->gksProductionNumber !== null) $gen->out->writeElementNs(self::TNS, 'gksProductionNumber', null, $this->gksProductionNumber);
		if ($this->hardwareIdentifier !== null) $gen->out->writeElementNs(self::TNS, 'hardwareIdentifier', null, $this->hardwareIdentifier);
		if ($this->terminalSoftwareName !== null) $gen->out->writeElementNs(self::TNS, 'terminalSoftwareName', null, $this->terminalSoftwareName);
		if ($this->terminalSoftwareVersion !== null) $gen->out->writeElementNs(self::TNS, 'terminalSoftwareVersion', null, $this->terminalSoftwareVersion);
		if ($this->instanceId !== null) $gen->out->writeElementNs(self::TNS, 'instanceId', null, $this->instanceId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class IdempotentReq extends SoapObject {
	public string $idempotencyKey;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'idempotencyKey', null, $this->idempotencyKey);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class IdempotentResp extends SoapObject {
	public string $idempotencyResult;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'idempotencyResult', null, $this->idempotencyResult);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookExternalDiscount extends SoapObject {
	public string $discountId;
	public string $discountDescription;
	public string $webhookConsumerId;
	public ?int $discountPercentage = null;
	public ?int $discountAmount = null;
	public ?string $discountType = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'discountId', null, $this->discountId);
		$gen->out->writeElementNs(self::TNS, 'discountDescription', null, $this->discountDescription);
		$gen->out->writeElementNs(self::TNS, 'webhookConsumerId', null, $this->webhookConsumerId);
		if ($this->discountPercentage !== null) $gen->writeInt('discountPercentage', $this->discountPercentage);
		if ($this->discountAmount !== null) $gen->writeInt('discountAmount', $this->discountAmount);
		if ($this->discountType !== null) $gen->out->writeElementNs(self::TNS, 'discountType', null, $this->discountType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BranchFilter extends SoapObject {
	/** @var int[] */
	public $branchNumbers = array();
	public function __construct($list = array()) { $this->branchNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class AuthorizationsList extends SoapObject {
	/** @var Authorization[] */
	public $authorizations = array();
	public function __construct($list = array()) { $this->authorizations = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->authorizations as $elem) $elem->write($gen, 'authorizations');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Authorization extends SoapObject {
	public string $authorization;
	public string $id;
	/** @var Authorization[] */
	public $subAuthorizations = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'authorization', null, $this->authorization);
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		if ($this->subAuthorizations !== null) {
$tmp_subAuthorizations = new AuthorizationsList($this->subAuthorizations);
$tmp_subAuthorizations->write($gen, 'subAuthorizations');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BranchGroupFilter extends SoapObject {
	/** @var int[] */
	public $branchGroups = array();
	public function __construct($list = array()) { $this->branchGroups = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->branchGroups as $elem) $gen->writeInt('branchGroups', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OwnerLabelFilter extends SoapObject {
	/** @var string[] */
	public $ownerLabels = array();
	public function __construct($list = array()) { $this->ownerLabels = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->ownerLabels as $elem) $gen->out->writeElementNs(self::TNS, 'ownerLabels', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Order extends SoapObject {
	public string $orderId;
	public ?string $extOrderId = null;
	/** @var string[] */
	public $invoiceIds = null;
	/** @var string[] */
	public $extInvoiceIds = null;
	public ?string $transactionString = null;
	public ?int $syncMarker = null;
	public ?string $orderType = null;
	public ?int $entryBranchNumber = null;
	public ?string $entryExtBranchId = null;
	public ?int $employeeNumber = null;
	public ?string $employeeName = null;
	public ?\DateTime $entryTimestamp = null;
	public ?int $relationNumber = null;
	public ?string $relationName = null;
	public ?int $relationCategoryId = null;
	public ?string $relationBankAccountNumber = null;
	public ?string $relationVatNumber = null;
	public ?Address $deliveryAddress = null;
	public ?Address $invoiceAddress = null;
	public ?\DateTime $financialDate = null;
	public ?int $financialBranchNumber = null;
	public ?string $financialExtBranchId = null;
	public ?int $workplaceNumber = null;
	public ?string $reference = null;
	public ?string $activityId = null;
	public ?BigDecimal $totalInclAmount = null;
	public ?BigDecimal $totalExclAmount = null;
	public ?string $vatMethod = null;
	/** @var VatGroup[] */
	public $vatGroupList = null;
	public ?string $deliveryMethod = null;
	public ?\DateTime $deliveryDate = null;
	public ?\DateTime $deliveryPeriodBegin = null;
	public ?\DateTime $deliveryPeriodEnd = null;
	public ?string $paymentMethod = null;
	public ?int $changeCounter = null;
	public ?int $versionNumber = null;
	public ?BigDecimal $prepaidAmount = null;
	public ?bool $fullyPaid = null;
	public ?string $deliveryState = null;
	public ?string $cancelState = null;
	public ?string $completeState = null;
	public ?int $tableNumber = null;
	public ?int $tableSubNumber = null;
	public ?string $tableDescription = null;
	public ?int $numberOfGuests = null;
	public ?YearNumber $orderNumber = null;
	public ?WorkplaceYearNumber $branchOrderNumber = null;
	public ?string $orderBarcode = null;
	public ?int $orderCategoryNumber = null;
	public ?string $orderCategoryDescription = null;
	public ?string $onDeliveryUrl = null;
	public ?string $onInvoiceUrl = null;
	/** @var Line[] */
	public $lineList = null;
	/** @var Payment[] */
	public $paymentList = null;
	public ?string $vatChange = null;
	public ?int $vatCountryCode = null;
	public ?string $vatCountryIso3 = null;
	public ?WebhookSessionData $webhookSessionData = null;
	public ?YearNumber $cateringOrderNumber = null;
	/** @var YearNumber[] */
	public $invoiceNumbers = null;
	/** @var string[] */
	public $packingSlipIds = null;
	/** @var YearNumber[] */
	public $packingSlipNumbers = null;
	public ?string $proposalId = null;
	public ?string $extProposalId = null;
	public ?YearNumber $proposalNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->extOrderId !== null) $gen->out->writeElementNs(self::TNS, 'extOrderId', null, $this->extOrderId);
		if ($this->invoiceIds !== null) {
$tmp_invoiceIds = new IdList($this->invoiceIds);
$tmp_invoiceIds->write($gen, 'invoiceIds');
}
		if ($this->extInvoiceIds !== null) {
$tmp_extInvoiceIds = new IdList($this->extInvoiceIds);
$tmp_extInvoiceIds->write($gen, 'extInvoiceIds');
}
		if ($this->transactionString !== null) $gen->out->writeElementNs(self::TNS, 'transactionString', null, $this->transactionString);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->orderType !== null) $gen->out->writeElementNs(self::TNS, 'orderType', null, $this->orderType);
		if ($this->entryBranchNumber !== null) $gen->writeInt('entryBranchNumber', $this->entryBranchNumber);
		if ($this->entryExtBranchId !== null) $gen->out->writeElementNs(self::TNS, 'entryExtBranchId', null, $this->entryExtBranchId);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->employeeName !== null) $gen->out->writeElementNs(self::TNS, 'employeeName', null, $this->employeeName);
		if ($this->entryTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->relationName !== null) $gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
		if ($this->relationCategoryId !== null) $gen->writeInt('relationCategoryId', $this->relationCategoryId);
		if ($this->relationBankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationBankAccountNumber', null, $this->relationBankAccountNumber);
		if ($this->relationVatNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationVatNumber', null, $this->relationVatNumber);
		if ($this->deliveryAddress !== null) $this->deliveryAddress->write($gen, 'deliveryAddress');
		if ($this->invoiceAddress !== null) $this->invoiceAddress->write($gen, 'invoiceAddress');
		if ($this->financialDate !== null) (SoapMplusDate::fromDateTime($this->financialDate))->write($gen, 'financialDate');
		if ($this->financialBranchNumber !== null) $gen->writeInt('financialBranchNumber', $this->financialBranchNumber);
		if ($this->financialExtBranchId !== null) $gen->out->writeElementNs(self::TNS, 'financialExtBranchId', null, $this->financialExtBranchId);
		if ($this->workplaceNumber !== null) $gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->activityId !== null) $gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
		if ($this->totalInclAmount !== null) $gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		if ($this->totalExclAmount !== null) $gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		if ($this->vatMethod !== null) $gen->out->writeElementNs(self::TNS, 'vatMethod', null, $this->vatMethod);
		if ($this->vatGroupList !== null) {
$tmp_vatGroupList = new VatGroupList($this->vatGroupList);
$tmp_vatGroupList->write($gen, 'vatGroupList');
}
		if ($this->deliveryMethod !== null) $gen->out->writeElementNs(self::TNS, 'deliveryMethod', null, $this->deliveryMethod);
		if ($this->deliveryDate !== null) (SoapMplusDate::fromDateTime($this->deliveryDate))->write($gen, 'deliveryDate');
		if ($this->deliveryPeriodBegin !== null) (SoapMplusDateTime::fromDateTime($this->deliveryPeriodBegin))->write($gen, 'deliveryPeriodBegin');
		if ($this->deliveryPeriodEnd !== null) (SoapMplusDateTime::fromDateTime($this->deliveryPeriodEnd))->write($gen, 'deliveryPeriodEnd');
		if ($this->paymentMethod !== null) $gen->out->writeElementNs(self::TNS, 'paymentMethod', null, $this->paymentMethod);
		if ($this->changeCounter !== null) $gen->writeInt('changeCounter', $this->changeCounter);
		if ($this->versionNumber !== null) $gen->writeInt('versionNumber', $this->versionNumber);
		if ($this->prepaidAmount !== null) $gen->writeValueAndScale('prepaidAmount', '', $this->prepaidAmount, 2);
		if ($this->fullyPaid !== null) $gen->writeBool('fullyPaid', $this->fullyPaid);
		if ($this->deliveryState !== null) $gen->out->writeElementNs(self::TNS, 'deliveryState', null, $this->deliveryState);
		if ($this->cancelState !== null) $gen->out->writeElementNs(self::TNS, 'cancelState', null, $this->cancelState);
		if ($this->completeState !== null) $gen->out->writeElementNs(self::TNS, 'completeState', null, $this->completeState);
		if ($this->tableNumber !== null) $gen->writeInt('tableNumber', $this->tableNumber);
		if ($this->tableSubNumber !== null) $gen->writeInt('tableSubNumber', $this->tableSubNumber);
		if ($this->tableDescription !== null) $gen->out->writeElementNs(self::TNS, 'tableDescription', null, $this->tableDescription);
		if ($this->numberOfGuests !== null) $gen->writeInt('numberOfGuests', $this->numberOfGuests);
		if ($this->orderNumber !== null) $this->orderNumber->write($gen, 'orderNumber');
		if ($this->branchOrderNumber !== null) $this->branchOrderNumber->write($gen, 'branchOrderNumber');
		if ($this->orderBarcode !== null) $gen->out->writeElementNs(self::TNS, 'orderBarcode', null, $this->orderBarcode);
		if ($this->orderCategoryNumber !== null) $gen->writeInt('orderCategoryNumber', $this->orderCategoryNumber);
		if ($this->orderCategoryDescription !== null) $gen->out->writeElementNs(self::TNS, 'orderCategoryDescription', null, $this->orderCategoryDescription);
		if ($this->onDeliveryUrl !== null) $gen->out->writeElementNs(self::TNS, 'onDeliveryUrl', null, $this->onDeliveryUrl);
		if ($this->onInvoiceUrl !== null) $gen->out->writeElementNs(self::TNS, 'onInvoiceUrl', null, $this->onInvoiceUrl);
		if ($this->lineList !== null) {
$tmp_lineList = new LineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');
}
		if ($this->paymentList !== null) {
$tmp_paymentList = new PaymentList($this->paymentList);
$tmp_paymentList->write($gen, 'paymentList');
}
		if ($this->vatChange !== null) $gen->out->writeElementNs(self::TNS, 'vatChange', null, $this->vatChange);
		if ($this->vatCountryCode !== null) $gen->writeInt('vatCountryCode', $this->vatCountryCode);
		if ($this->vatCountryIso3 !== null) $gen->out->writeElementNs(self::TNS, 'vatCountryIso3', null, $this->vatCountryIso3);
		if ($this->webhookSessionData !== null) $this->webhookSessionData->write($gen, 'webhookSessionData');
		if ($this->cateringOrderNumber !== null) $this->cateringOrderNumber->write($gen, 'cateringOrderNumber');
		if ($this->invoiceNumbers !== null) {
$tmp_invoiceNumbers = new YearNumberList($this->invoiceNumbers);
$tmp_invoiceNumbers->write($gen, 'invoiceNumbers');
}
		if ($this->packingSlipIds !== null) {
$tmp_packingSlipIds = new IdList($this->packingSlipIds);
$tmp_packingSlipIds->write($gen, 'packingSlipIds');
}
		if ($this->packingSlipNumbers !== null) {
$tmp_packingSlipNumbers = new YearNumberList($this->packingSlipNumbers);
$tmp_packingSlipNumbers->write($gen, 'packingSlipNumbers');
}
		if ($this->proposalId !== null) $gen->out->writeElementNs(self::TNS, 'proposalId', null, $this->proposalId);
		if ($this->extProposalId !== null) $gen->out->writeElementNs(self::TNS, 'extProposalId', null, $this->extProposalId);
		if ($this->proposalNumber !== null) $this->proposalNumber->write($gen, 'proposalNumber');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderList extends SoapObject {
	/** @var Order[] */
	public $order = array();
	public function __construct($list = array()) { $this->order = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->order as $elem) $elem->write($gen, 'order');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderTypeList extends SoapObject {
	/** @var string[] */
	public $orderType = array();
	public function __construct($list = array()) { $this->orderType = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->orderType as $elem) $gen->out->writeElementNs(self::TNS, 'orderType', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Address extends SoapObject {
	public ?string $addressId = null;
	public ?string $name = null;
	public ?string $contact = null;
	public ?string $address = null;
	public ?string $zipcode = null;
	public ?string $city = null;
	public ?string $country = null;
	public ?string $label = null;
	public ?string $companyName = null;
	public ?string $supplierInformation = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->addressId !== null) $gen->out->writeElementNs(self::TNS, 'addressId', null, $this->addressId);
		if ($this->name !== null) $gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		if ($this->contact !== null) $gen->out->writeElementNs(self::TNS, 'contact', null, $this->contact);
		if ($this->address !== null) $gen->out->writeElementNs(self::TNS, 'address', null, $this->address);
		if ($this->zipcode !== null) $gen->out->writeElementNs(self::TNS, 'zipcode', null, $this->zipcode);
		if ($this->city !== null) $gen->out->writeElementNs(self::TNS, 'city', null, $this->city);
		if ($this->country !== null) $gen->out->writeElementNs(self::TNS, 'country', null, $this->country);
		if ($this->label !== null) $gen->out->writeElementNs(self::TNS, 'label', null, $this->label);
		if ($this->companyName !== null) $gen->out->writeElementNs(self::TNS, 'companyName', null, $this->companyName);
		if ($this->supplierInformation !== null) $gen->out->writeElementNs(self::TNS, 'supplierInformation', null, $this->supplierInformation);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class YearNumber extends SoapObject {
	public int $year;
	public int $number;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('year', $this->year);
		$gen->writeInt('number', $this->number);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class YearNumberList extends SoapObject {
	/** @var YearNumber[] */
	public $yearNumber = array();
	public function __construct($list = array()) { $this->yearNumber = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->yearNumber as $elem) $elem->write($gen, 'yearNumber');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class YearNumberPart extends SoapObject {
	public int $year;
	public int $number;
	public int $part;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('year', $this->year);
		$gen->writeInt('number', $this->number);
		$gen->writeInt('part', $this->part);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ContractFrequencyList extends SoapObject {
	/** @var string[] */
	public $contractFrequency = array();
	public function __construct($list = array()) { $this->contractFrequency = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->contractFrequency as $elem) $gen->out->writeElementNs(self::TNS, 'contractFrequency', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalesLineContractLine extends SoapObject {
	public int $lineNumber;
	public int $articleNumber;
	public BigDecimal $quantity;
	public BigDecimal $priceIncl;
	public BigDecimal $priceExcl;
	public BigDecimal $amountIncl;
	public BigDecimal $amountExcl;
	public string $frequency;
	public ?\DateTime $startDate = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('lineNumber', $this->lineNumber);
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeBigDecimal('quantity', $this->quantity);
		$gen->writeBigDecimal('priceIncl', $this->priceIncl);
		$gen->writeBigDecimal('priceExcl', $this->priceExcl);
		$gen->writeBigDecimal('amountIncl', $this->amountIncl);
		$gen->writeBigDecimal('amountExcl', $this->amountExcl);
		$gen->out->writeElementNs(self::TNS, 'frequency', null, $this->frequency);
		if ($this->startDate !== null) $gen->writeDate('startDate', $this->startDate);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalesLineContractLineList extends SoapObject {
	/** @var SalesLineContractLine[] */
	public $contractLine = array();
	public function __construct($list = array()) { $this->contractLine = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->contractLine as $elem) $elem->write($gen, 'contractLine');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookLineData extends SoapObject {
	public string $webhookLineId;
	public ?string $webhookConsumerId = null;
	public ?WebhookExternalDiscount $webhookExternalDiscount = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'webhookLineId', null, $this->webhookLineId);
		if ($this->webhookConsumerId !== null) $gen->out->writeElementNs(self::TNS, 'webhookConsumerId', null, $this->webhookConsumerId);
		if ($this->webhookExternalDiscount !== null) $this->webhookExternalDiscount->write($gen, 'webhookExternalDiscount');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LineList extends SoapObject {
	/** @var Line[] */
	public $line = array();
	public function __construct($list = array()) { $this->line = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->line as $elem) $elem->write($gen, 'line');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Line extends SoapObject {
	public ?string $lineId = null;
	public ?int $employeeNumber = null;
	public int $articleNumber;
	public ?string $pluNumber = null;
	public ?string $text = null;
	public ?int $supplierRelationNumber = null;
	public ?string $supplierRelationName = null;
	public ?string $supplierArticleNumber = null;
	public ?LineData $data = null;
	public ?int $courseNumber = null;
	public ?string $menuHash = null;
	public ?string $menuDescription = null;
	public ?BigDecimal $menuAmount = null;
	public ?SalePromotionLineData $salePromotionData = null;
	public ?WebhookLineData $webhookData = null;
	public ?string $lineType = null;
	/** @var Line[] */
	public $preparationList = null;
	public ?bool $suppressDisposableComponent = null;
	public ?string $tempId = null;
	public ?string $retourReason = null;
	public ?int $sequenceNumber = null;
	/** @var SalesLineContractLine[] */
	public $contractLines = null;
	/** @var Line[] */
	public $uncondensedLines = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->lineId !== null) $gen->out->writeElementNs(self::TNS, 'lineId', null, $this->lineId);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->pluNumber !== null) $gen->out->writeElementNs(self::TNS, 'pluNumber', null, $this->pluNumber);
		if ($this->text !== null) $gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->supplierRelationNumber !== null) $gen->writeInt('supplierRelationNumber', $this->supplierRelationNumber);
		if ($this->supplierRelationName !== null) $gen->out->writeElementNs(self::TNS, 'supplierRelationName', null, $this->supplierRelationName);
		if ($this->supplierArticleNumber !== null) $gen->out->writeElementNs(self::TNS, 'supplierArticleNumber', null, $this->supplierArticleNumber);
		if ($this->data !== null) $this->data->write($gen, 'data');
		if ($this->courseNumber !== null) $gen->writeInt('courseNumber', $this->courseNumber);
		if ($this->menuHash !== null) $gen->out->writeElementNs(self::TNS, 'menuHash', null, $this->menuHash);
		if ($this->menuDescription !== null) $gen->out->writeElementNs(self::TNS, 'menuDescription', null, $this->menuDescription);
		if ($this->menuAmount !== null) $gen->writeValueAndScale('menuAmount', '', $this->menuAmount, 2);
		if ($this->salePromotionData !== null) $this->salePromotionData->write($gen, 'salePromotionData');
		if ($this->webhookData !== null) $this->webhookData->write($gen, 'webhookData');
		if ($this->lineType !== null) $gen->out->writeElementNs(self::TNS, 'lineType', null, $this->lineType);
		if ($this->preparationList !== null) {
$tmp_preparationList = new LineList($this->preparationList);
$tmp_preparationList->write($gen, 'preparationList');
}
		if ($this->suppressDisposableComponent !== null) $gen->writeBool('suppressDisposableComponent', $this->suppressDisposableComponent);
		if ($this->tempId !== null) $gen->out->writeElementNs(self::TNS, 'tempId', null, $this->tempId);
		if ($this->retourReason !== null) $gen->out->writeElementNs(self::TNS, 'retourReason', null, $this->retourReason);
		if ($this->sequenceNumber !== null) $gen->writeInt('sequenceNumber', $this->sequenceNumber);
		if ($this->contractLines !== null) {
$tmp_contractLines = new SalesLineContractLineList($this->contractLines);
$tmp_contractLines->write($gen, 'contractLines');
}
		if ($this->uncondensedLines !== null) {
$tmp_uncondensedLines = new LineList($this->uncondensedLines);
$tmp_uncondensedLines->write($gen, 'uncondensedLines');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Text extends SoapObject {
	public string $text;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TextList extends SoapObject {
	/** @var Text[] */
	public $text = array();
	public function __construct($list = array()) { $this->text = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->text as $elem) $elem->write($gen, 'text');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherId extends SoapObject {
	public string $id;
	public ?int $version = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		if ($this->version !== null) $gen->writeInt('version', $this->version);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherIdList extends SoapObject {
	/** @var VoucherId[] */
	public $voucherId = array();
	public function __construct($list = array()) { $this->voucherId = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->voucherId as $elem) $elem->write($gen, 'voucherId');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherIssuanceRedeem extends SoapObject {
	public string $id;
	public string $voucherIssuanceId;
	public ?string $salesOrderId = null;
	public ?string $salesIssuanceId = null;
	public ?string $salesTurnoverId = null;
	public ?string $salesOrderLineId = null;
	public ?string $salesIssuanceLineId = null;
	public ?string $salesTurnoverLineId = null;
	public ?int $relationNumber = null;
	public bool $cancelled;
	public \DateTime $redeemTs;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'voucherIssuanceId', null, $this->voucherIssuanceId);
		if ($this->salesOrderId !== null) $gen->out->writeElementNs(self::TNS, 'salesOrderId', null, $this->salesOrderId);
		if ($this->salesIssuanceId !== null) $gen->out->writeElementNs(self::TNS, 'salesIssuanceId', null, $this->salesIssuanceId);
		if ($this->salesTurnoverId !== null) $gen->out->writeElementNs(self::TNS, 'salesTurnoverId', null, $this->salesTurnoverId);
		if ($this->salesOrderLineId !== null) $gen->out->writeElementNs(self::TNS, 'salesOrderLineId', null, $this->salesOrderLineId);
		if ($this->salesIssuanceLineId !== null) $gen->out->writeElementNs(self::TNS, 'salesIssuanceLineId', null, $this->salesIssuanceLineId);
		if ($this->salesTurnoverLineId !== null) $gen->out->writeElementNs(self::TNS, 'salesTurnoverLineId', null, $this->salesTurnoverLineId);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		$gen->writeBool('cancelled', $this->cancelled);
		$gen->writeDateTime('redeemTs', $this->redeemTs);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherIssuanceRedeemList extends SoapObject {
	/** @var VoucherIssuanceRedeem[] */
	public $voucherIssuanceRedeem = array();
	public function __construct($list = array()) { $this->voucherIssuanceRedeem = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->voucherIssuanceRedeem as $elem) $elem->write($gen, 'voucherIssuanceRedeem');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherIssuance extends SoapObject {
	public ?string $id = null;
	public ?string $scanCode = null;
	public ?string $groupId = null;
	public VoucherId $voucherId;
	public ?string $salesTurnoverId = null;
	public ?string $salesIssuanceId = null;
	public ?string $salesTurnoverLineId = null;
	public ?string $salesIssuanceLineId = null;
	public ?int $relationNumber = null;
	public bool $cancelled;
	public \DateTime $startTs;
	public ?\DateTime $endTs = null;
	/** @var VoucherIssuanceRedeem[] */
	public $voucherIssuanceRedeems = null;
	public ?string $groupScanCode = null;
	public function __construct() {
		$this->voucherId = new VoucherId();
	}
	public function writeProps(SoapGenerator $gen): void {
		if ($this->id !== null) $gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		if ($this->scanCode !== null) $gen->out->writeElementNs(self::TNS, 'scanCode', null, $this->scanCode);
		if ($this->groupId !== null) $gen->out->writeElementNs(self::TNS, 'groupId', null, $this->groupId);
		$this->voucherId->write($gen, 'voucherId');
		if ($this->salesTurnoverId !== null) $gen->out->writeElementNs(self::TNS, 'salesTurnoverId', null, $this->salesTurnoverId);
		if ($this->salesIssuanceId !== null) $gen->out->writeElementNs(self::TNS, 'salesIssuanceId', null, $this->salesIssuanceId);
		if ($this->salesTurnoverLineId !== null) $gen->out->writeElementNs(self::TNS, 'salesTurnoverLineId', null, $this->salesTurnoverLineId);
		if ($this->salesIssuanceLineId !== null) $gen->out->writeElementNs(self::TNS, 'salesIssuanceLineId', null, $this->salesIssuanceLineId);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		$gen->writeBool('cancelled', $this->cancelled);
		$gen->writeDateTime('startTs', $this->startTs);
		if ($this->endTs !== null) $gen->writeDateTime('endTs', $this->endTs);
		if ($this->voucherIssuanceRedeems !== null) {
$tmp_voucherIssuanceRedeems = new VoucherIssuanceRedeemList($this->voucherIssuanceRedeems);
$tmp_voucherIssuanceRedeems->write($gen, 'voucherIssuanceRedeems');
}
		if ($this->groupScanCode !== null) $gen->out->writeElementNs(self::TNS, 'groupScanCode', null, $this->groupScanCode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherIssuanceList extends SoapObject {
	/** @var VoucherIssuance[] */
	public $voucherIssuance = array();
	public function __construct($list = array()) { $this->voucherIssuance = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->voucherIssuance as $elem) $elem->write($gen, 'voucherIssuance');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherIssuanceCompact extends VoucherIssuance {
	public int $quantity;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->writeInt('quantity', $this->quantity);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherIssuanceCompactList extends SoapObject {
	/** @var VoucherIssuanceCompact[] */
	public $voucherIssuanceCompact = array();
	public function __construct($list = array()) { $this->voucherIssuanceCompact = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->voucherIssuanceCompact as $elem) $elem->write($gen, 'voucherIssuanceCompact');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherIssuanceCandidate extends VoucherIssuanceCompact {
	public int $sourceArticleNumber;
	public bool $relationRequired;
	public bool $pendingStartTsRequired;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->writeInt('sourceArticleNumber', $this->sourceArticleNumber);
		$gen->writeBool('relationRequired', $this->relationRequired);
		$gen->writeBool('pendingStartTsRequired', $this->pendingStartTsRequired);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherIssuanceCandidateList extends SoapObject {
	/** @var VoucherIssuanceCandidate[] */
	public $voucherIssuanceCandidate = array();
	public function __construct($list = array()) { $this->voucherIssuanceCandidate = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->voucherIssuanceCandidate as $elem) $elem->write($gen, 'voucherIssuanceCandidate');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherIssuanceScanCode extends SoapObject {
	public ?string $id = null;
	public ?string $scanCode = null;
	public ?string $groupId = null;
	public ?string $raw = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->id !== null) $gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		if ($this->scanCode !== null) $gen->out->writeElementNs(self::TNS, 'scanCode', null, $this->scanCode);
		if ($this->groupId !== null) $gen->out->writeElementNs(self::TNS, 'groupId', null, $this->groupId);
		if ($this->raw !== null) $gen->out->writeElementNs(self::TNS, 'raw', null, $this->raw);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherRedeemCount extends SoapObject {
	public string $period;
	public int $count;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'period', null, $this->period);
		$gen->writeInt('count', $this->count);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherRedeemCountList extends SoapObject {
	/** @var VoucherRedeemCount[] */
	public $voucherRedeemCount = array();
	public function __construct($list = array()) { $this->voucherRedeemCount = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->voucherRedeemCount as $elem) $elem->write($gen, 'voucherRedeemCount');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherCanApplyResult extends SoapObject {
	/** @var VoucherRedeemCount[] */
	public $recentRedeemCounts = null;
	public ?bool $noLine = null;
	public ?bool $voucherNoArticleLine = null;
	public ?bool $articleOutOfStock = null;
	public ?bool $expired = null;
	public ?bool $fullyRedeemed = null;
	public ?bool $relationRequired = null;
	public ?bool $recentlyRedeemed = null;
	public ?bool $upcoming = null;
	public ?\DateTime $upcomingTs = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->recentRedeemCounts !== null) {
$tmp_recentRedeemCounts = new VoucherRedeemCountList($this->recentRedeemCounts);
$tmp_recentRedeemCounts->write($gen, 'recentRedeemCounts');
}
		if ($this->noLine !== null) $gen->writeBool('noLine', $this->noLine);
		if ($this->voucherNoArticleLine !== null) $gen->writeBool('voucherNoArticleLine', $this->voucherNoArticleLine);
		if ($this->articleOutOfStock !== null) $gen->writeBool('articleOutOfStock', $this->articleOutOfStock);
		if ($this->expired !== null) $gen->writeBool('expired', $this->expired);
		if ($this->fullyRedeemed !== null) $gen->writeBool('fullyRedeemed', $this->fullyRedeemed);
		if ($this->relationRequired !== null) $gen->writeBool('relationRequired', $this->relationRequired);
		if ($this->recentlyRedeemed !== null) $gen->writeBool('recentlyRedeemed', $this->recentlyRedeemed);
		if ($this->upcoming !== null) $gen->writeBool('upcoming', $this->upcoming);
		if ($this->upcomingTs !== null) $gen->writeDateTime('upcomingTs', $this->upcomingTs);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UnappliedVoucherIssuance extends SoapObject {
	public string $id;
	public string $voucherId;
	public VoucherCanApplyResult $canApplyResult;
	public int $quantity;
	public function __construct() {
		$this->canApplyResult = new VoucherCanApplyResult();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'voucherId', null, $this->voucherId);
		$this->canApplyResult->write($gen, 'canApplyResult');
		$gen->writeInt('quantity', $this->quantity);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UnappliedVoucherIssuanceList extends SoapObject {
	/** @var UnappliedVoucherIssuance[] */
	public $unappliedVoucherIssuance = array();
	public function __construct($list = array()) { $this->unappliedVoucherIssuance = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->unappliedVoucherIssuance as $elem) $elem->write($gen, 'unappliedVoucherIssuance');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherIssuanceRedeemable extends SoapObject {
	/** @var VoucherIssuance[] */
	public $issuances = null;
	public VoucherIssuanceScanCode $scanCode;
	/** @var UnappliedVoucherIssuance[] */
	public $unappliedIssuances = null;
	public function __construct() {
		$this->scanCode = new VoucherIssuanceScanCode();
	}
	public function writeProps(SoapGenerator $gen): void {
		if ($this->issuances !== null) {
$tmp_issuances = new VoucherIssuanceList($this->issuances);
$tmp_issuances->write($gen, 'issuances');
}
		$this->scanCode->write($gen, 'scanCode');
		if ($this->unappliedIssuances !== null) {
$tmp_unappliedIssuances = new UnappliedVoucherIssuanceList($this->unappliedIssuances);
$tmp_unappliedIssuances->write($gen, 'unappliedIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherIssuanceRedeemableList extends SoapObject {
	/** @var VoucherIssuanceRedeemable[] */
	public $voucherIssuanceRedeemable = array();
	public function __construct($list = array()) { $this->voucherIssuanceRedeemable = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->voucherIssuanceRedeemable as $elem) $elem->write($gen, 'voucherIssuanceRedeemable');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RequestSalesRepeatTemplateTypeFilter extends SoapObject {
	/** @var string[] */
	public $salesRepeatTemplateTypes = array();
	public function __construct($list = array()) { $this->salesRepeatTemplateTypes = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->salesRepeatTemplateTypes as $elem) $gen->out->writeElementNs(self::TNS, 'salesRepeatTemplateTypes', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RequestSalesRepeatTemplateIdsFilter extends SoapObject {
	/** @var string[] */
	public $templateIds = null;
	public function __construct($list = array()) { $this->templateIds = $list; }
	public function writeProps(SoapGenerator $gen): void {
		if ($this->templateIds !== null) {
$tmp_templateIds = new IdList($this->templateIds);
$tmp_templateIds->write($gen, 'templateIds');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class YearNumberVersion extends SoapObject {
	public int $year;
	public int $number;
	public int $version;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('year', $this->year);
		$gen->writeInt('number', $this->number);
		$gen->writeInt('version', $this->version);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WorkplaceYearNumber extends SoapObject {
	public int $branchNumber;
	public int $workplaceNumber;
	public int $year;
	public int $number;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
		$gen->writeInt('year', $this->year);
		$gen->writeInt('number', $this->number);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class NumberSet extends SoapObject {
	/** @var int[] */
	public $number = array();
	public function __construct($list = array()) { $this->number = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->number as $elem) $gen->writeInt('number', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class IdList extends SoapObject {
	/** @var string[] */
	public $id = array();
	public function __construct($list = array()) { $this->id = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->id as $elem) $gen->out->writeElementNs(self::TNS, 'id', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalesPrice extends SoapObject {
	public int $salesPriceNumber;
	public ?string $description = null;
	public ?\DateTime $startDate = null;
	public ?\DateTime $endDate = null;
	public ?BigDecimal $priceIncl = null;
	public ?BigDecimal $priceExcl = null;
	public ?int $discountPercentage = null;
	public ?int $minimumAmount = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('salesPriceNumber', $this->salesPriceNumber);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->startDate !== null) (SoapMplusDate::fromDateTime($this->startDate))->write($gen, 'startDate');
		if ($this->endDate !== null) (SoapMplusDate::fromDateTime($this->endDate))->write($gen, 'endDate');
		if ($this->priceIncl !== null) $gen->writeValueAndScale('priceIncl', '', $this->priceIncl, 2);
		if ($this->priceExcl !== null) $gen->writeValueAndScale('priceExcl', '', $this->priceExcl, 2);
		if ($this->discountPercentage !== null) $gen->writeInt('discountPercentage', $this->discountPercentage);
		if ($this->minimumAmount !== null) $gen->writeInt('minimumAmount', $this->minimumAmount);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalesPriceList extends SoapObject {
	/** @var SalesPrice[] */
	public $salesPrice = array();
	public function __construct($list = array()) { $this->salesPrice = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->salesPrice as $elem) $elem->write($gen, 'salesPrice');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PriceGroup extends SoapObject {
	public int $priceGroupNumber;
	public ?string $description = null;
	public ?BigDecimal $priceIncl = null;
	public ?BigDecimal $priceExcl = null;
	public ?int $discountPercentage = null;
	public ?int $minimumAmount = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('priceGroupNumber', $this->priceGroupNumber);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->priceIncl !== null) $gen->writeValueAndScale('priceIncl', '', $this->priceIncl, 2);
		if ($this->priceExcl !== null) $gen->writeValueAndScale('priceExcl', '', $this->priceExcl, 2);
		if ($this->discountPercentage !== null) $gen->writeInt('discountPercentage', $this->discountPercentage);
		if ($this->minimumAmount !== null) $gen->writeInt('minimumAmount', $this->minimumAmount);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PriceGroupList extends SoapObject {
	/** @var PriceGroup[] */
	public $priceGroup = array();
	public function __construct($list = array()) { $this->priceGroup = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->priceGroup as $elem) $elem->write($gen, 'priceGroup');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Mistake extends SoapObject {
	public int $articleNumber;
	public BigDecimal $quantity;
	public BigDecimal $priceIncl;
	public BigDecimal $priceExcl;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeValueAndScale('quantity', 'decimalPlaces', $this->quantity, 2);
		$gen->writeValueAndScale('priceIncl', '', $this->priceIncl, 2);
		$gen->writeValueAndScale('priceExcl', '', $this->priceExcl, 2);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class MistakeList extends SoapObject {
	/** @var Mistake[] */
	public $mistake = array();
	public function __construct($list = array()) { $this->mistake = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->mistake as $elem) $elem->write($gen, 'mistake');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LogMistakeRequest extends SoapObject {
	public int $employeeNumber;
	/** @var Mistake[] */
	public $mistakeList = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->mistakeList !== null) {
$tmp_mistakeList = new MistakeList($this->mistakeList);
$tmp_mistakeList->write($gen, 'mistakeList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRelationsRequest extends SoapObject {
	/** @var int[] */
	public $relationNumbers = array();
	public ?int $categoryId = null;
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->relationNumbers as $elem) $gen->writeInt('relationNumbers', $elem);
		if ($this->categoryId !== null) $gen->writeInt('categoryId', $this->categoryId);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CardCategory extends SoapObject {
	public int $categoryId;
	public string $name;
	public bool $isVipGroup;
	public bool $isSupplierGroup;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('categoryId', $this->categoryId);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->writeBool('isVipGroup', $this->isVipGroup);
		$gen->writeBool('isSupplierGroup', $this->isSupplierGroup);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CardCategoryList extends SoapObject {
	/** @var CardCategory[] */
	public $cardCategory = array();
	public function __construct($list = array()) { $this->cardCategory = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->cardCategory as $elem) $elem->write($gen, 'cardCategory');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class AdjustPointsRequest extends SoapObject {
	public int $relationNumber;
	public int $pointsAdjustment;
	public ?string $mode = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('relationNumber', $this->relationNumber);
		$gen->writeInt('pointsAdjustment', $this->pointsAdjustment);
		if ($this->mode !== null) $gen->out->writeElementNs(self::TNS, 'mode', null, $this->mode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRelationPoints extends SoapObject {
	public int $relationNumber;
	public int $points;
	public int $syncMarker;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('relationNumber', $this->relationNumber);
		$gen->writeInt('points', $this->points);
		$gen->writeInt('syncMarker', $this->syncMarker);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRelationPointsRequest extends SoapObject {
	/** @var int[] */
	public $relationNumbers = array();
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->relationNumbers as $elem) $gen->writeInt('relationNumbers', $elem);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getEmployeesRequest extends SoapObject {
	/** @var int[] */
	public $employeeNumbers = array();
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->employeeNumbers as $elem) $gen->writeInt('employeeNumbers', $elem);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class EmployeeName extends SoapObject {
	public int $number;
	public string $loginname;
	public string $name;
	public bool $allowNegativeOrdering;
	public ?bool $allowTableRetour = null;
	public ?bool $allowNextCourse = null;
	public ?bool $allowSplit = null;
	public ?bool $allowPay = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('number', $this->number);
		$gen->out->writeElementNs(self::TNS, 'loginname', null, $this->loginname);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->writeBool('allowNegativeOrdering', $this->allowNegativeOrdering);
		if ($this->allowTableRetour !== null) $gen->writeBool('allowTableRetour', $this->allowTableRetour);
		if ($this->allowNextCourse !== null) $gen->writeBool('allowNextCourse', $this->allowNextCourse);
		if ($this->allowSplit !== null) $gen->writeBool('allowSplit', $this->allowSplit);
		if ($this->allowPay !== null) $gen->writeBool('allowPay', $this->allowPay);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TableNumberList extends SoapObject {
	/** @var TableNumber[] */
	public $tableNumber = array();
	public function __construct($list = array()) { $this->tableNumber = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->tableNumber as $elem) $elem->write($gen, 'tableNumber');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Table extends SoapObject {
	public int $number;
	public string $tableStatus;
	public ?int $relationNumber = null;
	public ?string $relationName = null;
	public ?string $tableName = null;
	public ?int $numberOfGuests = null;
	public ?int $courseNumber = null;
	public ?string $courseName = null;
	public ?string $courseAbbreviation = null;
	public ?\DateTime $createTimestamp = null;
	public ?\DateTime $changeTimestamp = null;
	public ?BigDecimal $totalInclAmount = null;
	public ?BigDecimal $totalExclAmount = null;
	public ?BigDecimal $prepaidAmount = null;
	public ?string $cardNumber = null;
	public ?int $employeeNumber = null;
	public ?string $employeeName = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('number', $this->number);
		$gen->out->writeElementNs(self::TNS, 'tableStatus', null, $this->tableStatus);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->relationName !== null) $gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
		if ($this->tableName !== null) $gen->out->writeElementNs(self::TNS, 'tableName', null, $this->tableName);
		if ($this->numberOfGuests !== null) $gen->writeInt('numberOfGuests', $this->numberOfGuests);
		if ($this->courseNumber !== null) $gen->writeInt('courseNumber', $this->courseNumber);
		if ($this->courseName !== null) $gen->out->writeElementNs(self::TNS, 'courseName', null, $this->courseName);
		if ($this->courseAbbreviation !== null) $gen->out->writeElementNs(self::TNS, 'courseAbbreviation', null, $this->courseAbbreviation);
		if ($this->createTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->createTimestamp))->write($gen, 'createTimestamp');
		if ($this->changeTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->changeTimestamp))->write($gen, 'changeTimestamp');
		if ($this->totalInclAmount !== null) $gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		if ($this->totalExclAmount !== null) $gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		if ($this->prepaidAmount !== null) $gen->writeValueAndScale('prepaidAmount', '', $this->prepaidAmount, 2);
		if ($this->cardNumber !== null) $gen->out->writeElementNs(self::TNS, 'cardNumber', null, $this->cardNumber);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->employeeName !== null) $gen->out->writeElementNs(self::TNS, 'employeeName', null, $this->employeeName);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TableNumber extends SoapObject {
	public int $tableNumber;
	public int $subNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('tableNumber', $this->tableNumber);
		$gen->writeInt('subNumber', $this->subNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TableRelation extends SoapObject {
	public int $relationNumber;
	public string $relationName;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('relationNumber', $this->relationNumber);
		$gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TableCourse extends SoapObject {
	public int $number;
	public string $name;
	public string $abbreviation;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('number', $this->number);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->out->writeElementNs(self::TNS, 'abbreviation', null, $this->abbreviation);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OccupiedTableDetails extends SoapObject {
	public \DateTime $createTimestamp;
	public \DateTime $changeTimestamp;
	public BigDecimal $totalInclAmount;
	public BigDecimal $totalExclAmount;
	public BigDecimal $prepaidAmount;
	public bool $dishesReady;
	public bool $receiptPrinted;
	public ?int $numberOfGuests = null;
	public ?TableRelation $relation = null;
	public ?TableCourse $currentCourse = null;
	public ?bool $isVip = null;
	public ?WorkplaceIdentifier $claimedBy = null;
	public ?TableEmployee $employee = null;
	public function __construct() {
		$this->createTimestamp = new \DateTime();
		$this->changeTimestamp = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		(SoapMplusDateTime::fromDateTime($this->createTimestamp))->write($gen, 'createTimestamp');
		(SoapMplusDateTime::fromDateTime($this->changeTimestamp))->write($gen, 'changeTimestamp');
		$gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		$gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		$gen->writeValueAndScale('prepaidAmount', '', $this->prepaidAmount, 2);
		$gen->writeBool('dishesReady', $this->dishesReady);
		$gen->writeBool('receiptPrinted', $this->receiptPrinted);
		if ($this->numberOfGuests !== null) $gen->writeInt('numberOfGuests', $this->numberOfGuests);
		if ($this->relation !== null) $this->relation->write($gen, 'relation');
		if ($this->currentCourse !== null) $this->currentCourse->write($gen, 'currentCourse');
		if ($this->isVip !== null) $gen->writeBool('isVip', $this->isVip);
		if ($this->claimedBy !== null) $this->claimedBy->write($gen, 'claimedBy');
		if ($this->employee !== null) $this->employee->write($gen, 'employee');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SubTableState extends SoapObject {
	public TableNumber $tableNumber;
	public string $state;
	public string $tableName;
	public ?string $cardNumber = null;
	public ?OccupiedTableDetails $details = null;
	public function __construct() {
		$this->tableNumber = new TableNumber();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->tableNumber->write($gen, 'tableNumber');
		$gen->out->writeElementNs(self::TNS, 'state', null, $this->state);
		$gen->out->writeElementNs(self::TNS, 'tableName', null, $this->tableName);
		if ($this->cardNumber !== null) $gen->out->writeElementNs(self::TNS, 'cardNumber', null, $this->cardNumber);
		if ($this->details !== null) $this->details->write($gen, 'details');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SubTableList extends SoapObject {
	/** @var SubTableState[] */
	public $subTable = array();
	public function __construct($list = array()) { $this->subTable = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->subTable as $elem) $elem->write($gen, 'subTable');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WholeTable extends SoapObject {
	public int $number;
	public bool $onFloorPlan;
	public bool $askName;
	public int $standardSubTableCount;
	public int $currentSubTableCount;
	/** @var SubTableState[] */
	public $subTables = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('number', $this->number);
		$gen->writeBool('onFloorPlan', $this->onFloorPlan);
		$gen->writeBool('askName', $this->askName);
		$gen->writeInt('standardSubTableCount', $this->standardSubTableCount);
		$gen->writeInt('currentSubTableCount', $this->currentSubTableCount);
		$tmp_subTables = new SubTableList($this->subTables);
$tmp_subTables->write($gen, 'subTables');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTableListV3Request extends SoapObject {
	public int $branchNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class MainTable extends SoapObject {
	public int $number;
	public bool $askName;
	public int $standardSubTableCount;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('number', $this->number);
		$gen->writeBool('askName', $this->askName);
		$gen->writeInt('standardSubTableCount', $this->standardSubTableCount);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getMainTableListRequest extends SoapObject {
	public int $branchNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getSubTableListRequest extends SoapObject {
	public int $branchNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Course extends SoapObject {
	public int $number;
	public string $name;
	public string $abbreviation;
	public ?int $sequenceNumber = null;
	public ?bool $isPresent = null;
	public ?bool $isRequested = null;
	public ?\DateTime $requestedAt = null;
	public ?bool $isTableSet = null;
	public ?\DateTime $tableSetAt = null;
	public ?bool $isWineServed = null;
	public ?\DateTime $wineServedAt = null;
	public string $type;
	public bool $doSetTable;
	public bool $canBeServedWithWine;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('number', $this->number);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->out->writeElementNs(self::TNS, 'abbreviation', null, $this->abbreviation);
		if ($this->sequenceNumber !== null) $gen->writeInt('sequenceNumber', $this->sequenceNumber);
		if ($this->isPresent !== null) $gen->writeBool('isPresent', $this->isPresent);
		if ($this->isRequested !== null) $gen->writeBool('isRequested', $this->isRequested);
		if ($this->requestedAt !== null) $gen->writeDateTime('requestedAt', $this->requestedAt);
		if ($this->isTableSet !== null) $gen->writeBool('isTableSet', $this->isTableSet);
		if ($this->tableSetAt !== null) $gen->writeDateTime('tableSetAt', $this->tableSetAt);
		if ($this->isWineServed !== null) $gen->writeBool('isWineServed', $this->isWineServed);
		if ($this->wineServedAt !== null) $gen->writeDateTime('wineServedAt', $this->wineServedAt);
		$gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		$gen->writeBool('doSetTable', $this->doSetTable);
		$gen->writeBool('canBeServedWithWine', $this->canBeServedWithWine);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CourseInfo extends SoapObject {
	public int $number;
	public int $sequenceNumber;
	public string $name;
	public string $abbreviation;
	public string $type;
	public bool $doSetTable;
	public bool $canBeServedWithWine;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('number', $this->number);
		$gen->writeInt('sequenceNumber', $this->sequenceNumber);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->out->writeElementNs(self::TNS, 'abbreviation', null, $this->abbreviation);
		$gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		$gen->writeBool('doSetTable', $this->doSetTable);
		$gen->writeBool('canBeServedWithWine', $this->canBeServedWithWine);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCourseListV2Request extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LineData extends SoapObject {
	public BigDecimal $quantity;
	public ?BigDecimal $deliveredQuantity = null;
	public ?BigDecimal $cancelledQuantity = null;
	public ?BigDecimal $price = null;
	public ?BigDecimal $priceExcl = null;
	public ?BigDecimal $originalPrice = null;
	public ?BigDecimal $originalPriceExcl = null;
	public ?BigDecimal $purchasePrice = null;
	public ?BigDecimal $averagePurchasePrice = null;
	public ?BigDecimal $exchangeRateBuyPrice = null;
	public ?BigDecimal $exchangeRateSellPrice = null;
	public ?int $exchangeRateMultiplier = null;
	public ?int $turnoverGroup = null;
	public ?string $turnoverGroupName = null;
	public ?string $turnoverGroupType = null;
	public ?int $turnoverGroupAccountNumber = null;
	public ?int $vatCode = null;
	public ?int $vatPercentage = null;
	public ?int $pricePerQuantity = null;
	public ?string $siUnit = null;
	public ?string $discountType = null;
	public ?int $discountPercentage = null;
	public ?BigDecimal $discountAmount = null;
	public ?BigDecimal $discountAmountExcl = null;
	public ?string $bpeId = null;
	public ?string $bpeDescription = null;
	public ?BigDecimal $bpeAmount = null;
	public ?BigDecimal $bpeAmountExcl = null;
	public ?string $menuId = null;
	public ?string $menuLinesId = null;
	public ?BigDecimal $totalInclAmount = null;
	public ?BigDecimal $totalExclAmount = null;
	public ?string $priceType = null;
	public ?int $purchaseAccountNumber = null;
	public ?int $stockAccountNumber = null;
	public ?int $bpeAccordationEmployeeNumber = null;
	public ?string $redeemedVoucherIssuanceId = null;
	public ?\DateTime $pendingVoucherIssuanceStartTs = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeValueAndScale('quantity', 'decimalPlaces', $this->quantity, 2);
		if ($this->deliveredQuantity !== null) $gen->writeValueAndScale('deliveredQuantity', 'deliveredDecimalPlaces', $this->deliveredQuantity, 2);
		if ($this->cancelledQuantity !== null) $gen->writeValueAndScale('cancelledQuantity', 'cancelledDecimalPlaces', $this->cancelledQuantity, 2);
		if ($this->price !== null) $gen->writeValueAndScale('price', '', $this->price, 2);
		if ($this->priceExcl !== null) $gen->writeValueAndScale('priceExcl', '', $this->priceExcl, 2);
		if ($this->originalPrice !== null) $gen->writeValueAndScale('originalPrice', '', $this->originalPrice, 2);
		if ($this->originalPriceExcl !== null) $gen->writeValueAndScale('originalPriceExcl', '', $this->originalPriceExcl, 2);
		if ($this->purchasePrice !== null) $gen->writeValueAndScale('purchasePrice', '', $this->purchasePrice, 2);
		if ($this->averagePurchasePrice !== null) $gen->writeBigDecimal('averagePurchasePrice', $this->averagePurchasePrice);
		if ($this->exchangeRateBuyPrice !== null) $gen->writeValueAndScale('exchangeRateBuyPrice', 'exchangeRateBuyPriceDecimalPlaces', $this->exchangeRateBuyPrice, 2);
		if ($this->exchangeRateSellPrice !== null) $gen->writeValueAndScale('exchangeRateSellPrice', 'exchangeRateSellPriceDecimalPlaces', $this->exchangeRateSellPrice, 2);
		if ($this->exchangeRateMultiplier !== null) $gen->writeInt('exchangeRateMultiplier', $this->exchangeRateMultiplier);
		if ($this->turnoverGroup !== null) $gen->writeInt('turnoverGroup', $this->turnoverGroup);
		if ($this->turnoverGroupName !== null) $gen->out->writeElementNs(self::TNS, 'turnoverGroupName', null, $this->turnoverGroupName);
		if ($this->turnoverGroupType !== null) $gen->out->writeElementNs(self::TNS, 'turnoverGroupType', null, $this->turnoverGroupType);
		if ($this->turnoverGroupAccountNumber !== null) $gen->writeInt('turnoverGroupAccountNumber', $this->turnoverGroupAccountNumber);
		if ($this->vatCode !== null) $gen->writeInt('vatCode', $this->vatCode);
		if ($this->vatPercentage !== null) $gen->writeInt('vatPercentage', $this->vatPercentage);
		if ($this->pricePerQuantity !== null) $gen->writeInt('pricePerQuantity', $this->pricePerQuantity);
		if ($this->siUnit !== null) $gen->out->writeElementNs(self::TNS, 'siUnit', null, $this->siUnit);
		if ($this->discountType !== null) $gen->out->writeElementNs(self::TNS, 'discountType', null, $this->discountType);
		if ($this->discountPercentage !== null) $gen->writeInt('discountPercentage', $this->discountPercentage);
		if ($this->discountAmount !== null) $gen->writeValueAndScale('discountAmount', '', $this->discountAmount, 2);
		if ($this->discountAmountExcl !== null) $gen->writeValueAndScale('discountAmountExcl', '', $this->discountAmountExcl, 2);
		if ($this->bpeId !== null) $gen->out->writeElementNs(self::TNS, 'bpeId', null, $this->bpeId);
		if ($this->bpeDescription !== null) $gen->out->writeElementNs(self::TNS, 'bpeDescription', null, $this->bpeDescription);
		if ($this->bpeAmount !== null) $gen->writeValueAndScale('bpeAmount', '', $this->bpeAmount, 2);
		if ($this->bpeAmountExcl !== null) $gen->writeValueAndScale('bpeAmountExcl', '', $this->bpeAmountExcl, 2);
		if ($this->menuId !== null) $gen->out->writeElementNs(self::TNS, 'menuId', null, $this->menuId);
		if ($this->menuLinesId !== null) $gen->out->writeElementNs(self::TNS, 'menuLinesId', null, $this->menuLinesId);
		if ($this->totalInclAmount !== null) $gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		if ($this->totalExclAmount !== null) $gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		if ($this->priceType !== null) $gen->out->writeElementNs(self::TNS, 'priceType', null, $this->priceType);
		if ($this->purchaseAccountNumber !== null) $gen->writeInt('purchaseAccountNumber', $this->purchaseAccountNumber);
		if ($this->stockAccountNumber !== null) $gen->writeInt('stockAccountNumber', $this->stockAccountNumber);
		if ($this->bpeAccordationEmployeeNumber !== null) $gen->writeInt('bpeAccordationEmployeeNumber', $this->bpeAccordationEmployeeNumber);
		if ($this->redeemedVoucherIssuanceId !== null) $gen->out->writeElementNs(self::TNS, 'redeemedVoucherIssuanceId', null, $this->redeemedVoucherIssuanceId);
		if ($this->pendingVoucherIssuanceStartTs !== null) $gen->writeDateTime('pendingVoucherIssuanceStartTs', $this->pendingVoucherIssuanceStartTs);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookSessionData extends SoapObject {
	public string $webhookSessionId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'webhookSessionId', null, $this->webhookSessionId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveTableOrderRequest extends SoapObject {
	public ?Order $order = null;
	public ?bool $releaseTable = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->order !== null) $this->order->write($gen, 'order');
		if ($this->releaseTable !== null) $gen->writeBool('releaseTable', $this->releaseTable);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateAndPayTableOrderRequest extends SoapObject {
	public ?Order $order = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->order !== null) $this->order->write($gen, 'order');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class MoveTableOrderRequest extends SoapObject {
	public ?Order $order = null;
	public int $tableNumber;
	public ?int $tableSubNumber = null;
	public ?bool $releaseTable = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->order !== null) $this->order->write($gen, 'order');
		$gen->writeInt('tableNumber', $this->tableNumber);
		if ($this->tableSubNumber !== null) $gen->writeInt('tableSubNumber', $this->tableSubNumber);
		if ($this->releaseTable !== null) $gen->writeBool('releaseTable', $this->releaseTable);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class MoveTableLine extends SoapObject {
	public string $lineId;
	public ?BigDecimal $quantity = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'lineId', null, $this->lineId);
		if ($this->quantity !== null) $gen->writeBigDecimal('quantity', $this->quantity);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class MoveTableLineList extends SoapObject {
	/** @var MoveTableLine[] */
	public $line = array();
	public function __construct($list = array()) { $this->line = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->line as $elem) $elem->write($gen, 'line');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class MoveTableOrderV3Request extends IdempotentReq {
	public WorkplaceIdentifier $workplace;
	public EmployeeIdentifier $employee;
	public string $orderId;
	/** @var MoveTableLine[] */
	public $lines = null;
	public TableIdentifier $destinationTable;
	public ?bool $releaseSourceTable = null;
	public function __construct() {
		$this->workplace = new WorkplaceIdentifier();
		$this->employee = new EmployeeIdentifier();
		$this->destinationTable = new TableIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$this->workplace->write($gen, 'workplace');
		$this->employee->write($gen, 'employee');
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->lines !== null) {
$tmp_lines = new MoveTableLineList($this->lines);
$tmp_lines->write($gen, 'lines');
}
		$this->destinationTable->write($gen, 'destinationTable');
		if ($this->releaseSourceTable !== null) $gen->writeBool('releaseSourceTable', $this->releaseSourceTable);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetTableOrderRequest extends SoapObject {
	public ?int $tableNumber = null;
	public ?int $tableSubNumber = null;
	public ?bool $claimTable = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->tableNumber !== null) $gen->writeInt('tableNumber', $this->tableNumber);
		if ($this->tableSubNumber !== null) $gen->writeInt('tableSubNumber', $this->tableSubNumber);
		if ($this->claimTable !== null) $gen->writeBool('claimTable', $this->claimTable);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetTableOrderV3Request extends SoapObject {
	public int $branchNumber;
	public int $workplaceNumber;
	public ?string $hardwareIdentifier = null;
	public int $tableNumber;
	public ?int $tableSubNumber = null;
	public ?bool $claimTable = null;
	public ?bool $uncondensedLines = null;
	public ?string $claimMethod = null;
	public ?bool $forceCondensedLines = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->hardwareIdentifier !== null) $gen->out->writeElementNs(self::TNS, 'hardwareIdentifier', null, $this->hardwareIdentifier);
		$gen->writeInt('tableNumber', $this->tableNumber);
		if ($this->tableSubNumber !== null) $gen->writeInt('tableSubNumber', $this->tableSubNumber);
		if ($this->claimTable !== null) $gen->writeBool('claimTable', $this->claimTable);
		if ($this->uncondensedLines !== null) $gen->writeBool('uncondensedLines', $this->uncondensedLines);
		if ($this->claimMethod !== null) $gen->out->writeElementNs(self::TNS, 'claimMethod', null, $this->claimMethod);
		if ($this->forceCondensedLines !== null) $gen->writeBool('forceCondensedLines', $this->forceCondensedLines);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReleaseTableRequest extends SoapObject {
	public ?int $tableNumber = null;
	public ?int $tableSubNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->tableNumber !== null) $gen->writeInt('tableNumber', $this->tableNumber);
		if ($this->tableSubNumber !== null) $gen->writeInt('tableSubNumber', $this->tableSubNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReleaseTableV2Request extends SoapObject {
	public WorkplaceIdentifier $workplace;
	public TableIdentifier $table;
	public function __construct() {
		$this->workplace = new WorkplaceIdentifier();
		$this->table = new TableIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->workplace->write($gen, 'workplace');
		$this->table->write($gen, 'table');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SetSubtableCountRequest extends SoapObject {
	public int $brancheNumber;
	public int $tableNumber;
	public int $newSubTableCount;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('brancheNumber', $this->brancheNumber);
		$gen->writeInt('tableNumber', $this->tableNumber);
		$gen->writeInt('newSubTableCount', $this->newSubTableCount);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CourseList extends SoapObject {
	/** @var Course[] */
	public $course = array();
	public function __construct($list = array()) { $this->course = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->course as $elem) $elem->write($gen, 'course');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetTableOrderCourseListRequest extends SoapObject {
	public int $branchNumber;
	public int $tableNumber;
	public ?int $tableSubNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('tableNumber', $this->tableNumber);
		if ($this->tableSubNumber !== null) $gen->writeInt('tableSubNumber', $this->tableSubNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RequestNextTableOrderCourseRequest extends SoapObject {
	public int $branchNumber;
	public int $tableNumber;
	public int $tableSubNumber;
	public int $employeeNumber;
	public int $courseNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('tableNumber', $this->tableNumber);
		$gen->writeInt('tableSubNumber', $this->tableSubNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->writeInt('courseNumber', $this->courseNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RequestNextTableOrderCourseV3Request extends SoapObject {
	public WorkplaceIdentifier $workplace;
	public EmployeeIdentifier $employee;
	public TableIdentifier $table;
	public int $courseNumber;
	public function __construct() {
		$this->workplace = new WorkplaceIdentifier();
		$this->employee = new EmployeeIdentifier();
		$this->table = new TableIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->workplace->write($gen, 'workplace');
		$this->employee->write($gen, 'employee');
		$this->table->write($gen, 'table');
		$gen->writeInt('courseNumber', $this->courseNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class QueueBranchOrderInfo extends SoapObject {
	public string $orderId;
	public string $orderString;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		$gen->out->writeElementNs(self::TNS, 'orderString', null, $this->orderString);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class QueueBranchOrderPaymentRequest extends SoapObject {
	public string $orderId;
	/** @var Payment[] */
	public $paymentList = array();
	public ?string $bookingMethod = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		$tmp_paymentList = new PaymentList($this->paymentList);
$tmp_paymentList->write($gen, 'paymentList');

		if ($this->bookingMethod !== null) $gen->out->writeElementNs(self::TNS, 'bookingMethod', null, $this->bookingMethod);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateOrderInfo extends SoapObject {
	public string $orderId;
	public string $orderString;
	public ?bool $orderQueued = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		$gen->out->writeElementNs(self::TNS, 'orderString', null, $this->orderString);
		if ($this->orderQueued !== null) $gen->writeBool('orderQueued', $this->orderQueued);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateOrderV2Request extends SoapObject {
	public Order $order;
	public ?bool $applySalesAndActions = null;
	public ?bool $applySalesPrices = null;
	public ?bool $applyPriceGroups = null;
	public function __construct() {
		$this->order = new Order();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->order->write($gen, 'order');
		if ($this->applySalesAndActions !== null) $gen->writeBool('applySalesAndActions', $this->applySalesAndActions);
		if ($this->applySalesPrices !== null) $gen->writeBool('applySalesPrices', $this->applySalesPrices);
		if ($this->applyPriceGroups !== null) $gen->writeBool('applyPriceGroups', $this->applyPriceGroups);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveOrderInfo extends SoapObject {
	public string $orderId;
	public string $orderString;
	public ?bool $orderQueued = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		$gen->out->writeElementNs(self::TNS, 'orderString', null, $this->orderString);
		if ($this->orderQueued !== null) $gen->writeBool('orderQueued', $this->orderQueued);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PackingSlip extends SoapObject {
	public string $packingSlipId;
	public ?YearNumber $packingSlipNumber = null;
	public ?string $packingSlipBarcode = null;
	public ?string $orderId = null;
	public ?string $extOrderId = null;
	public ?YearNumber $orderNumber = null;
	public ?string $orderBarcode = null;
	public ?string $invoiceId = null;
	public ?string $extInvoiceId = null;
	public ?YearNumber $invoiceNumber = null;
	public ?string $invoiceBarcode = null;
	public ?string $transactionString = null;
	public ?int $syncMarker = null;
	public ?int $employeeNumber = null;
	public ?string $employeeName = null;
	public ?\DateTime $entryTimestamp = null;
	public ?int $relationNumber = null;
	public ?string $relationName = null;
	public ?int $relationCategoryId = null;
	public ?string $relationBankAccountNumber = null;
	public ?string $relationVatNumber = null;
	public ?Address $deliveryAddress = null;
	public ?Address $invoiceAddress = null;
	public ?\DateTime $financialDate = null;
	public ?int $financialBranchNumber = null;
	public ?string $financialExtBranchId = null;
	public ?int $workplaceNumber = null;
	public ?int $entryBranchNumber = null;
	public ?string $entryExtBranchId = null;
	public ?string $reference = null;
	public ?string $activityId = null;
	public ?BigDecimal $totalInclAmount = null;
	public ?BigDecimal $totalExclAmount = null;
	public ?int $changeCounter = null;
	public ?string $state = null;
	public ?string $onInvoiceUrl = null;
	/** @var Line[] */
	public $lineList = null;
	public ?string $costCenter = null;
	public ?int $orderCategoryNumber = null;
	public ?string $packingSlipType = null;
	public ?string $vatMethod = null;
	public ?string $sessionId = null;
	public ?string $proposalId = null;
	public ?string $extProposalId = null;
	public ?YearNumber $proposalNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'packingSlipId', null, $this->packingSlipId);
		if ($this->packingSlipNumber !== null) $this->packingSlipNumber->write($gen, 'packingSlipNumber');
		if ($this->packingSlipBarcode !== null) $gen->out->writeElementNs(self::TNS, 'packingSlipBarcode', null, $this->packingSlipBarcode);
		if ($this->orderId !== null) $gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->extOrderId !== null) $gen->out->writeElementNs(self::TNS, 'extOrderId', null, $this->extOrderId);
		if ($this->orderNumber !== null) $this->orderNumber->write($gen, 'orderNumber');
		if ($this->orderBarcode !== null) $gen->out->writeElementNs(self::TNS, 'orderBarcode', null, $this->orderBarcode);
		if ($this->invoiceId !== null) $gen->out->writeElementNs(self::TNS, 'invoiceId', null, $this->invoiceId);
		if ($this->extInvoiceId !== null) $gen->out->writeElementNs(self::TNS, 'extInvoiceId', null, $this->extInvoiceId);
		if ($this->invoiceNumber !== null) $this->invoiceNumber->write($gen, 'invoiceNumber');
		if ($this->invoiceBarcode !== null) $gen->out->writeElementNs(self::TNS, 'invoiceBarcode', null, $this->invoiceBarcode);
		if ($this->transactionString !== null) $gen->out->writeElementNs(self::TNS, 'transactionString', null, $this->transactionString);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->employeeName !== null) $gen->out->writeElementNs(self::TNS, 'employeeName', null, $this->employeeName);
		if ($this->entryTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->relationName !== null) $gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
		if ($this->relationCategoryId !== null) $gen->writeInt('relationCategoryId', $this->relationCategoryId);
		if ($this->relationBankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationBankAccountNumber', null, $this->relationBankAccountNumber);
		if ($this->relationVatNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationVatNumber', null, $this->relationVatNumber);
		if ($this->deliveryAddress !== null) $this->deliveryAddress->write($gen, 'deliveryAddress');
		if ($this->invoiceAddress !== null) $this->invoiceAddress->write($gen, 'invoiceAddress');
		if ($this->financialDate !== null) (SoapMplusDate::fromDateTime($this->financialDate))->write($gen, 'financialDate');
		if ($this->financialBranchNumber !== null) $gen->writeInt('financialBranchNumber', $this->financialBranchNumber);
		if ($this->financialExtBranchId !== null) $gen->out->writeElementNs(self::TNS, 'financialExtBranchId', null, $this->financialExtBranchId);
		if ($this->workplaceNumber !== null) $gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->entryBranchNumber !== null) $gen->writeInt('entryBranchNumber', $this->entryBranchNumber);
		if ($this->entryExtBranchId !== null) $gen->out->writeElementNs(self::TNS, 'entryExtBranchId', null, $this->entryExtBranchId);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->activityId !== null) $gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
		if ($this->totalInclAmount !== null) $gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		if ($this->totalExclAmount !== null) $gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		if ($this->changeCounter !== null) $gen->writeInt('changeCounter', $this->changeCounter);
		if ($this->state !== null) $gen->out->writeElementNs(self::TNS, 'state', null, $this->state);
		if ($this->onInvoiceUrl !== null) $gen->out->writeElementNs(self::TNS, 'onInvoiceUrl', null, $this->onInvoiceUrl);
		if ($this->lineList !== null) {
$tmp_lineList = new LineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');
}
		if ($this->costCenter !== null) $gen->out->writeElementNs(self::TNS, 'costCenter', null, $this->costCenter);
		if ($this->orderCategoryNumber !== null) $gen->writeInt('orderCategoryNumber', $this->orderCategoryNumber);
		if ($this->packingSlipType !== null) $gen->out->writeElementNs(self::TNS, 'packingSlipType', null, $this->packingSlipType);
		if ($this->vatMethod !== null) $gen->out->writeElementNs(self::TNS, 'vatMethod', null, $this->vatMethod);
		if ($this->sessionId !== null) $gen->out->writeElementNs(self::TNS, 'sessionId', null, $this->sessionId);
		if ($this->proposalId !== null) $gen->out->writeElementNs(self::TNS, 'proposalId', null, $this->proposalId);
		if ($this->extProposalId !== null) $gen->out->writeElementNs(self::TNS, 'extProposalId', null, $this->extProposalId);
		if ($this->proposalNumber !== null) $this->proposalNumber->write($gen, 'proposalNumber');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PackingSlipList extends SoapObject {
	/** @var PackingSlip[] */
	public $packingSlip = array();
	public function __construct($list = array()) { $this->packingSlip = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->packingSlip as $elem) $elem->write($gen, 'packingSlip');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPackingSlipsRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public ?\DateTime $fromFinancialDate = null;
	public ?\DateTime $throughFinancialDate = null;
	/** @var int[] */
	public $branchNumbers = array();
	/** @var int[] */
	public $employeeNumbers = array();
	/** @var int[] */
	public $relationNumbers = array();
	/** @var int[] */
	public $supplierRelationNumbers = array();
	/** @var int[] */
	public $articleNumbers = array();
	/** @var int[] */
	public $articleTurnoverGroups = array();
	/** @var Text[] */
	public $articlePluNumbers = null;
	/** @var Text[] */
	public $articleBarcodes = null;
	public ?string $activityId = null;
	/** @var string[] */
	public $packingSlipIds = array();
	/** @var YearNumber[] */
	public $packingSlipNumbers = array();
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public ?bool $includeLineList = null;
	/** @var string[] */
	public $typeFilter = array();
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		if ($this->fromFinancialDate !== null) (SoapMplusDate::fromDateTime($this->fromFinancialDate))->write($gen, 'fromFinancialDate');
		if ($this->throughFinancialDate !== null) (SoapMplusDate::fromDateTime($this->throughFinancialDate))->write($gen, 'throughFinancialDate');
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		foreach ($this->employeeNumbers as $elem) $gen->writeInt('employeeNumbers', $elem);
		foreach ($this->relationNumbers as $elem) $gen->writeInt('relationNumbers', $elem);
		foreach ($this->supplierRelationNumbers as $elem) $gen->writeInt('supplierRelationNumbers', $elem);
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
		foreach ($this->articleTurnoverGroups as $elem) $gen->writeInt('articleTurnoverGroups', $elem);
		if ($this->articlePluNumbers !== null) {
$tmp_articlePluNumbers = new TextList($this->articlePluNumbers);
$tmp_articlePluNumbers->write($gen, 'articlePluNumbers');
}
		if ($this->articleBarcodes !== null) {
$tmp_articleBarcodes = new TextList($this->articleBarcodes);
$tmp_articleBarcodes->write($gen, 'articleBarcodes');
}
		if ($this->activityId !== null) $gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
		foreach ($this->packingSlipIds as $elem) $gen->out->writeElementNs(self::TNS, 'packingSlipIds', null, $elem);
		foreach ($this->packingSlipNumbers as $elem) $elem->write($gen, 'packingSlipNumbers');
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
		if ($this->includeLineList !== null) $gen->writeBool('includeLineList', $this->includeLineList);
		foreach ($this->typeFilter as $elem) $gen->out->writeElementNs(self::TNS, 'typeFilter', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPackingSlipsByOrderRequest extends SoapObject {
	public string $orderId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LineChangeList extends SoapObject {
	/** @var LineChange[] */
	public $lineChange = array();
	public function __construct($list = array()) { $this->lineChange = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->lineChange as $elem) $elem->write($gen, 'lineChange');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LineChangeData extends SoapObject {
	public ?BigDecimal $quantityOld = null;
	public ?BigDecimal $quantityNew = null;
	public ?BigDecimal $priceOld = null;
	public ?BigDecimal $priceNew = null;
	public ?BigDecimal $priceExclOld = null;
	public ?BigDecimal $priceExclNew = null;
	public ?BigDecimal $originalPriceOld = null;
	public ?BigDecimal $originalPriceNew = null;
	public ?BigDecimal $originalPriceExclOld = null;
	public ?BigDecimal $originalPriceExclNew = null;
	public ?BigDecimal $purchasePriceOld = null;
	public ?BigDecimal $purchasePriceNew = null;
	public ?BigDecimal $averagePurchasePriceOld = null;
	public ?BigDecimal $averagePurchasePriceNew = null;
	public ?int $turnoverGroupOld = null;
	public ?int $turnoverGroupNew = null;
	public ?string $turnoverGroupNameOld = null;
	public ?string $turnoverGroupNameNew = null;
	public ?string $turnoverGroupTypeOld = null;
	public ?string $turnoverGroupTypeNew = null;
	public ?int $vatCodeOld = null;
	public ?int $vatCodeNew = null;
	public ?int $vatPercentageOld = null;
	public ?int $vatPercentageNew = null;
	public ?string $siUnitOld = null;
	public ?string $siUnitNew = null;
	public ?string $discountTypeOld = null;
	public ?string $discountTypeNew = null;
	public ?int $discountPercentageOld = null;
	public ?int $discountPercentageNew = null;
	public ?BigDecimal $discountAmountOld = null;
	public ?BigDecimal $discountAmountNew = null;
	public ?BigDecimal $discountAmountExclOld = null;
	public ?BigDecimal $discountAmountExclNew = null;
	public ?\DateTime $deliveryDateOld = null;
	public ?\DateTime $deliveryDateNew = null;
	public ?\DateTime $deliveryPeriodBeginOld = null;
	public ?\DateTime $deliveryPeriodBeginNew = null;
	public ?\DateTime $deliveryPeriodEndOld = null;
	public ?\DateTime $deliveryPeriodEndNew = null;
	public ?BigDecimal $pointsAmountOld = null;
	public ?BigDecimal $pointsAmountNew = null;
	public ?BigDecimal $pointsAmountExclOld = null;
	public ?BigDecimal $pointsAmountExclNew = null;
	public ?string $bpeIdOld = null;
	public ?string $bpeIdNew = null;
	public ?string $bpeDescriptionOld = null;
	public ?string $bpeDescriptionNew = null;
	public ?BigDecimal $bpeAmountOld = null;
	public ?BigDecimal $bpeAmountNew = null;
	public ?BigDecimal $bpeAmountExclOld = null;
	public ?BigDecimal $bpeAmountExclNew = null;
	public ?BigDecimal $priceInCreditsOld = null;
	public ?BigDecimal $priceInCreditsNew = null;
	public ?BigDecimal $totalInclAmountOld = null;
	public ?BigDecimal $totalInclAmountNew = null;
	public ?BigDecimal $totalExclAmountOld = null;
	public ?BigDecimal $totalExclAmountNew = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->quantityOld !== null) $gen->writeValueAndScale('quantityOld', 'decimalPlacesOld', $this->quantityOld, 2);
		if ($this->quantityNew !== null) $gen->writeValueAndScale('quantityNew', 'decimalPlacesNew', $this->quantityNew, 2);
		if ($this->priceOld !== null) $gen->writeValueAndScale('priceOld', '', $this->priceOld, 2);
		if ($this->priceNew !== null) $gen->writeValueAndScale('priceNew', '', $this->priceNew, 2);
		if ($this->priceExclOld !== null) $gen->writeValueAndScale('priceExclOld', '', $this->priceExclOld, 2);
		if ($this->priceExclNew !== null) $gen->writeValueAndScale('priceExclNew', '', $this->priceExclNew, 2);
		if ($this->originalPriceOld !== null) $gen->writeValueAndScale('originalPriceOld', '', $this->originalPriceOld, 2);
		if ($this->originalPriceNew !== null) $gen->writeValueAndScale('originalPriceNew', '', $this->originalPriceNew, 2);
		if ($this->originalPriceExclOld !== null) $gen->writeValueAndScale('originalPriceExclOld', '', $this->originalPriceExclOld, 2);
		if ($this->originalPriceExclNew !== null) $gen->writeValueAndScale('originalPriceExclNew', '', $this->originalPriceExclNew, 2);
		if ($this->purchasePriceOld !== null) $gen->writeValueAndScale('purchasePriceOld', '', $this->purchasePriceOld, 2);
		if ($this->purchasePriceNew !== null) $gen->writeValueAndScale('purchasePriceNew', '', $this->purchasePriceNew, 2);
		if ($this->averagePurchasePriceOld !== null) $gen->writeValueAndScale('averagePurchasePriceOld', '', $this->averagePurchasePriceOld, 2);
		if ($this->averagePurchasePriceNew !== null) $gen->writeValueAndScale('averagePurchasePriceNew', '', $this->averagePurchasePriceNew, 2);
		if ($this->turnoverGroupOld !== null) $gen->writeInt('turnoverGroupOld', $this->turnoverGroupOld);
		if ($this->turnoverGroupNew !== null) $gen->writeInt('turnoverGroupNew', $this->turnoverGroupNew);
		if ($this->turnoverGroupNameOld !== null) $gen->out->writeElementNs(self::TNS, 'turnoverGroupNameOld', null, $this->turnoverGroupNameOld);
		if ($this->turnoverGroupNameNew !== null) $gen->out->writeElementNs(self::TNS, 'turnoverGroupNameNew', null, $this->turnoverGroupNameNew);
		if ($this->turnoverGroupTypeOld !== null) $gen->out->writeElementNs(self::TNS, 'turnoverGroupTypeOld', null, $this->turnoverGroupTypeOld);
		if ($this->turnoverGroupTypeNew !== null) $gen->out->writeElementNs(self::TNS, 'turnoverGroupTypeNew', null, $this->turnoverGroupTypeNew);
		if ($this->vatCodeOld !== null) $gen->writeInt('vatCodeOld', $this->vatCodeOld);
		if ($this->vatCodeNew !== null) $gen->writeInt('vatCodeNew', $this->vatCodeNew);
		if ($this->vatPercentageOld !== null) $gen->writeInt('vatPercentageOld', $this->vatPercentageOld);
		if ($this->vatPercentageNew !== null) $gen->writeInt('vatPercentageNew', $this->vatPercentageNew);
		if ($this->siUnitOld !== null) $gen->out->writeElementNs(self::TNS, 'siUnitOld', null, $this->siUnitOld);
		if ($this->siUnitNew !== null) $gen->out->writeElementNs(self::TNS, 'siUnitNew', null, $this->siUnitNew);
		if ($this->discountTypeOld !== null) $gen->out->writeElementNs(self::TNS, 'discountTypeOld', null, $this->discountTypeOld);
		if ($this->discountTypeNew !== null) $gen->out->writeElementNs(self::TNS, 'discountTypeNew', null, $this->discountTypeNew);
		if ($this->discountPercentageOld !== null) $gen->writeInt('discountPercentageOld', $this->discountPercentageOld);
		if ($this->discountPercentageNew !== null) $gen->writeInt('discountPercentageNew', $this->discountPercentageNew);
		if ($this->discountAmountOld !== null) $gen->writeValueAndScale('discountAmountOld', '', $this->discountAmountOld, 2);
		if ($this->discountAmountNew !== null) $gen->writeValueAndScale('discountAmountNew', '', $this->discountAmountNew, 2);
		if ($this->discountAmountExclOld !== null) $gen->writeValueAndScale('discountAmountExclOld', '', $this->discountAmountExclOld, 2);
		if ($this->discountAmountExclNew !== null) $gen->writeValueAndScale('discountAmountExclNew', '', $this->discountAmountExclNew, 2);
		if ($this->deliveryDateOld !== null) (SoapMplusDate::fromDateTime($this->deliveryDateOld))->write($gen, 'deliveryDateOld');
		if ($this->deliveryDateNew !== null) (SoapMplusDate::fromDateTime($this->deliveryDateNew))->write($gen, 'deliveryDateNew');
		if ($this->deliveryPeriodBeginOld !== null) (SoapMplusDateTime::fromDateTime($this->deliveryPeriodBeginOld))->write($gen, 'deliveryPeriodBeginOld');
		if ($this->deliveryPeriodBeginNew !== null) (SoapMplusDateTime::fromDateTime($this->deliveryPeriodBeginNew))->write($gen, 'deliveryPeriodBeginNew');
		if ($this->deliveryPeriodEndOld !== null) (SoapMplusDateTime::fromDateTime($this->deliveryPeriodEndOld))->write($gen, 'deliveryPeriodEndOld');
		if ($this->deliveryPeriodEndNew !== null) (SoapMplusDateTime::fromDateTime($this->deliveryPeriodEndNew))->write($gen, 'deliveryPeriodEndNew');
		if ($this->pointsAmountOld !== null) $gen->writeValueAndScale('pointsAmountOld', '', $this->pointsAmountOld, 2);
		if ($this->pointsAmountNew !== null) $gen->writeValueAndScale('pointsAmountNew', '', $this->pointsAmountNew, 2);
		if ($this->pointsAmountExclOld !== null) $gen->writeValueAndScale('pointsAmountExclOld', '', $this->pointsAmountExclOld, 2);
		if ($this->pointsAmountExclNew !== null) $gen->writeValueAndScale('pointsAmountExclNew', '', $this->pointsAmountExclNew, 2);
		if ($this->bpeIdOld !== null) $gen->out->writeElementNs(self::TNS, 'bpeIdOld', null, $this->bpeIdOld);
		if ($this->bpeIdNew !== null) $gen->out->writeElementNs(self::TNS, 'bpeIdNew', null, $this->bpeIdNew);
		if ($this->bpeDescriptionOld !== null) $gen->out->writeElementNs(self::TNS, 'bpeDescriptionOld', null, $this->bpeDescriptionOld);
		if ($this->bpeDescriptionNew !== null) $gen->out->writeElementNs(self::TNS, 'bpeDescriptionNew', null, $this->bpeDescriptionNew);
		if ($this->bpeAmountOld !== null) $gen->writeValueAndScale('bpeAmountOld', '', $this->bpeAmountOld, 2);
		if ($this->bpeAmountNew !== null) $gen->writeValueAndScale('bpeAmountNew', '', $this->bpeAmountNew, 2);
		if ($this->bpeAmountExclOld !== null) $gen->writeValueAndScale('bpeAmountExclOld', '', $this->bpeAmountExclOld, 2);
		if ($this->bpeAmountExclNew !== null) $gen->writeValueAndScale('bpeAmountExclNew', '', $this->bpeAmountExclNew, 2);
		if ($this->priceInCreditsOld !== null) $gen->writeValueAndScale('priceInCreditsOld', '', $this->priceInCreditsOld, 2);
		if ($this->priceInCreditsNew !== null) $gen->writeValueAndScale('priceInCreditsNew', '', $this->priceInCreditsNew, 2);
		if ($this->totalInclAmountOld !== null) $gen->writeValueAndScale('totalInclAmountOld', '', $this->totalInclAmountOld, 2);
		if ($this->totalInclAmountNew !== null) $gen->writeValueAndScale('totalInclAmountNew', '', $this->totalInclAmountNew, 2);
		if ($this->totalExclAmountOld !== null) $gen->writeValueAndScale('totalExclAmountOld', '', $this->totalExclAmountOld, 2);
		if ($this->totalExclAmountNew !== null) $gen->writeValueAndScale('totalExclAmountNew', '', $this->totalExclAmountNew, 2);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LineChange extends SoapObject {
	public ?string $lineId = null;
	public ?int $versionNumber = null;
	public ?int $employeeNumber = null;
	public int $articleNumber;
	public ?string $pluNumber = null;
	public ?int $supplierRelationNumber = null;
	public ?string $supplierRelationName = null;
	public ?string $supplierArticleNumber = null;
	public ?string $lineType = null;
	public ?bool $added = null;
	public ?bool $removed = null;
	public ?LineChangeData $data = null;
	public ?string $textOld = null;
	public ?string $textNew = null;
	public ?string $translatedTextOld = null;
	public ?string $translatedTextNew = null;
	public ?int $courseNumberOld = null;
	public ?int $courseNumberNew = null;
	public ?string $menuHashOld = null;
	public ?string $menuHashNew = null;
	public ?string $menuDescriptionOld = null;
	public ?string $menuDescriptionNew = null;
	public ?BigDecimal $menuAmountOld = null;
	public ?BigDecimal $menuAmountNew = null;
	public ?int $menuSequenceNumberOld = null;
	public ?int $menuSequenceNumberNew = null;
	/** @var LineChange[] */
	public $preparationList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->lineId !== null) $gen->out->writeElementNs(self::TNS, 'lineId', null, $this->lineId);
		if ($this->versionNumber !== null) $gen->writeInt('versionNumber', $this->versionNumber);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->pluNumber !== null) $gen->out->writeElementNs(self::TNS, 'pluNumber', null, $this->pluNumber);
		if ($this->supplierRelationNumber !== null) $gen->writeInt('supplierRelationNumber', $this->supplierRelationNumber);
		if ($this->supplierRelationName !== null) $gen->out->writeElementNs(self::TNS, 'supplierRelationName', null, $this->supplierRelationName);
		if ($this->supplierArticleNumber !== null) $gen->out->writeElementNs(self::TNS, 'supplierArticleNumber', null, $this->supplierArticleNumber);
		if ($this->lineType !== null) $gen->out->writeElementNs(self::TNS, 'lineType', null, $this->lineType);
		if ($this->added !== null) $gen->writeBool('added', $this->added);
		if ($this->removed !== null) $gen->writeBool('removed', $this->removed);
		if ($this->data !== null) $this->data->write($gen, 'data');
		if ($this->textOld !== null) $gen->out->writeElementNs(self::TNS, 'textOld', null, $this->textOld);
		if ($this->textNew !== null) $gen->out->writeElementNs(self::TNS, 'textNew', null, $this->textNew);
		if ($this->translatedTextOld !== null) $gen->out->writeElementNs(self::TNS, 'translatedTextOld', null, $this->translatedTextOld);
		if ($this->translatedTextNew !== null) $gen->out->writeElementNs(self::TNS, 'translatedTextNew', null, $this->translatedTextNew);
		if ($this->courseNumberOld !== null) $gen->writeInt('courseNumberOld', $this->courseNumberOld);
		if ($this->courseNumberNew !== null) $gen->writeInt('courseNumberNew', $this->courseNumberNew);
		if ($this->menuHashOld !== null) $gen->out->writeElementNs(self::TNS, 'menuHashOld', null, $this->menuHashOld);
		if ($this->menuHashNew !== null) $gen->out->writeElementNs(self::TNS, 'menuHashNew', null, $this->menuHashNew);
		if ($this->menuDescriptionOld !== null) $gen->out->writeElementNs(self::TNS, 'menuDescriptionOld', null, $this->menuDescriptionOld);
		if ($this->menuDescriptionNew !== null) $gen->out->writeElementNs(self::TNS, 'menuDescriptionNew', null, $this->menuDescriptionNew);
		if ($this->menuAmountOld !== null) $gen->writeValueAndScale('menuAmountOld', '', $this->menuAmountOld, 2);
		if ($this->menuAmountNew !== null) $gen->writeValueAndScale('menuAmountNew', '', $this->menuAmountNew, 2);
		if ($this->menuSequenceNumberOld !== null) $gen->writeInt('menuSequenceNumberOld', $this->menuSequenceNumberOld);
		if ($this->menuSequenceNumberNew !== null) $gen->writeInt('menuSequenceNumberNew', $this->menuSequenceNumberNew);
		if ($this->preparationList !== null) {
$tmp_preparationList = new LineChangeList($this->preparationList);
$tmp_preparationList->write($gen, 'preparationList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderChange extends SoapObject {
	public string $orderId;
	public ?string $extOrderId = null;
	public ?\DateTime $entryTimestamp = null;
	public ?int $entryBranchNumber = null;
	public ?int $workplaceNumber = null;
	public ?string $entryExtBranchId = null;
	public ?int $financialBranchNumber = null;
	public ?string $financialExtBranchId = null;
	public ?string $reference = null;
	public ?int $changeCounter = null;
	public ?int $versionNumber = null;
	public ?YearNumber $orderNumber = null;
	public ?int $syncMarker = null;
	public ?int $tableNumber = null;
	public ?string $tableDescription = null;
	public ?string $orderType = null;
	public ?int $employeeNumberOld = null;
	public ?int $employeeNumberNew = null;
	public ?string $employeeNameOld = null;
	public ?string $employeeNameNew = null;
	public ?int $relationNumberOld = null;
	public ?int $relationNumberNew = null;
	public ?string $relationNameOld = null;
	public ?string $relationNameNew = null;
	public ?Address $deliveryAddressOld = null;
	public ?Address $deliveryAddressNew = null;
	public ?Address $invoiceAddressOld = null;
	public ?Address $invoiceAddressNew = null;
	public ?\DateTime $financialDateOld = null;
	public ?\DateTime $financialDateNew = null;
	public ?BigDecimal $totalInclAmountOld = null;
	public ?BigDecimal $totalInclAmountNew = null;
	public ?BigDecimal $totalExclAmountOld = null;
	public ?BigDecimal $totalExclAmountNew = null;
	public ?string $vatMethodOld = null;
	public ?string $vatMethodNew = null;
	public ?string $deliveryMethodOld = null;
	public ?string $deliveryMethodNew = null;
	public ?\DateTime $deliveryDateOld = null;
	public ?\DateTime $deliveryDateNew = null;
	public ?\DateTime $deliveryPeriodBeginOld = null;
	public ?\DateTime $deliveryPeriodBeginNew = null;
	public ?\DateTime $deliveryPeriodEndOld = null;
	public ?\DateTime $deliveryPeriodEndNew = null;
	public ?string $paymentMethodOld = null;
	public ?string $paymentMethodNew = null;
	public ?BigDecimal $prepaidAmountOld = null;
	public ?BigDecimal $prepaidAmountNew = null;
	public ?bool $fullyPaidOld = null;
	public ?bool $fullyPaidNew = null;
	public ?string $deliveryStateOld = null;
	public ?string $deliveryStateNew = null;
	public ?string $cancelStateOld = null;
	public ?string $cancelStateNew = null;
	public ?string $completeStateOld = null;
	public ?string $completeStateNew = null;
	public ?int $numberOfGuestsOld = null;
	public ?int $numberOfGuestsNew = null;
	public ?int $orderCategoryNumberOld = null;
	public ?int $orderCategoryNumberNew = null;
	public ?string $orderCategoryDescriptionOld = null;
	public ?string $orderCategoryDescriptionNew = null;
	/** @var LineChange[] */
	public $lineChangeList = null;
	public ?string $vatChangeOld = null;
	public ?string $vatChangeNew = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->extOrderId !== null) $gen->out->writeElementNs(self::TNS, 'extOrderId', null, $this->extOrderId);
		if ($this->entryTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		if ($this->entryBranchNumber !== null) $gen->writeInt('entryBranchNumber', $this->entryBranchNumber);
		if ($this->workplaceNumber !== null) $gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->entryExtBranchId !== null) $gen->out->writeElementNs(self::TNS, 'entryExtBranchId', null, $this->entryExtBranchId);
		if ($this->financialBranchNumber !== null) $gen->writeInt('financialBranchNumber', $this->financialBranchNumber);
		if ($this->financialExtBranchId !== null) $gen->out->writeElementNs(self::TNS, 'financialExtBranchId', null, $this->financialExtBranchId);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->changeCounter !== null) $gen->writeInt('changeCounter', $this->changeCounter);
		if ($this->versionNumber !== null) $gen->writeInt('versionNumber', $this->versionNumber);
		if ($this->orderNumber !== null) $this->orderNumber->write($gen, 'orderNumber');
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->tableNumber !== null) $gen->writeInt('tableNumber', $this->tableNumber);
		if ($this->tableDescription !== null) $gen->out->writeElementNs(self::TNS, 'tableDescription', null, $this->tableDescription);
		if ($this->orderType !== null) $gen->out->writeElementNs(self::TNS, 'orderType', null, $this->orderType);
		if ($this->employeeNumberOld !== null) $gen->writeInt('employeeNumberOld', $this->employeeNumberOld);
		if ($this->employeeNumberNew !== null) $gen->writeInt('employeeNumberNew', $this->employeeNumberNew);
		if ($this->employeeNameOld !== null) $gen->out->writeElementNs(self::TNS, 'employeeNameOld', null, $this->employeeNameOld);
		if ($this->employeeNameNew !== null) $gen->out->writeElementNs(self::TNS, 'employeeNameNew', null, $this->employeeNameNew);
		if ($this->relationNumberOld !== null) $gen->writeInt('relationNumberOld', $this->relationNumberOld);
		if ($this->relationNumberNew !== null) $gen->writeInt('relationNumberNew', $this->relationNumberNew);
		if ($this->relationNameOld !== null) $gen->out->writeElementNs(self::TNS, 'relationNameOld', null, $this->relationNameOld);
		if ($this->relationNameNew !== null) $gen->out->writeElementNs(self::TNS, 'relationNameNew', null, $this->relationNameNew);
		if ($this->deliveryAddressOld !== null) $this->deliveryAddressOld->write($gen, 'deliveryAddressOld');
		if ($this->deliveryAddressNew !== null) $this->deliveryAddressNew->write($gen, 'deliveryAddressNew');
		if ($this->invoiceAddressOld !== null) $this->invoiceAddressOld->write($gen, 'invoiceAddressOld');
		if ($this->invoiceAddressNew !== null) $this->invoiceAddressNew->write($gen, 'invoiceAddressNew');
		if ($this->financialDateOld !== null) (SoapMplusDate::fromDateTime($this->financialDateOld))->write($gen, 'financialDateOld');
		if ($this->financialDateNew !== null) (SoapMplusDate::fromDateTime($this->financialDateNew))->write($gen, 'financialDateNew');
		if ($this->totalInclAmountOld !== null) $gen->writeValueAndScale('totalInclAmountOld', '', $this->totalInclAmountOld, 2);
		if ($this->totalInclAmountNew !== null) $gen->writeValueAndScale('totalInclAmountNew', '', $this->totalInclAmountNew, 2);
		if ($this->totalExclAmountOld !== null) $gen->writeValueAndScale('totalExclAmountOld', '', $this->totalExclAmountOld, 2);
		if ($this->totalExclAmountNew !== null) $gen->writeValueAndScale('totalExclAmountNew', '', $this->totalExclAmountNew, 2);
		if ($this->vatMethodOld !== null) $gen->out->writeElementNs(self::TNS, 'vatMethodOld', null, $this->vatMethodOld);
		if ($this->vatMethodNew !== null) $gen->out->writeElementNs(self::TNS, 'vatMethodNew', null, $this->vatMethodNew);
		if ($this->deliveryMethodOld !== null) $gen->out->writeElementNs(self::TNS, 'deliveryMethodOld', null, $this->deliveryMethodOld);
		if ($this->deliveryMethodNew !== null) $gen->out->writeElementNs(self::TNS, 'deliveryMethodNew', null, $this->deliveryMethodNew);
		if ($this->deliveryDateOld !== null) (SoapMplusDate::fromDateTime($this->deliveryDateOld))->write($gen, 'deliveryDateOld');
		if ($this->deliveryDateNew !== null) (SoapMplusDate::fromDateTime($this->deliveryDateNew))->write($gen, 'deliveryDateNew');
		if ($this->deliveryPeriodBeginOld !== null) (SoapMplusDateTime::fromDateTime($this->deliveryPeriodBeginOld))->write($gen, 'deliveryPeriodBeginOld');
		if ($this->deliveryPeriodBeginNew !== null) (SoapMplusDateTime::fromDateTime($this->deliveryPeriodBeginNew))->write($gen, 'deliveryPeriodBeginNew');
		if ($this->deliveryPeriodEndOld !== null) (SoapMplusDateTime::fromDateTime($this->deliveryPeriodEndOld))->write($gen, 'deliveryPeriodEndOld');
		if ($this->deliveryPeriodEndNew !== null) (SoapMplusDateTime::fromDateTime($this->deliveryPeriodEndNew))->write($gen, 'deliveryPeriodEndNew');
		if ($this->paymentMethodOld !== null) $gen->out->writeElementNs(self::TNS, 'paymentMethodOld', null, $this->paymentMethodOld);
		if ($this->paymentMethodNew !== null) $gen->out->writeElementNs(self::TNS, 'paymentMethodNew', null, $this->paymentMethodNew);
		if ($this->prepaidAmountOld !== null) $gen->writeValueAndScale('prepaidAmountOld', '', $this->prepaidAmountOld, 2);
		if ($this->prepaidAmountNew !== null) $gen->writeValueAndScale('prepaidAmountNew', '', $this->prepaidAmountNew, 2);
		if ($this->fullyPaidOld !== null) $gen->writeBool('fullyPaidOld', $this->fullyPaidOld);
		if ($this->fullyPaidNew !== null) $gen->writeBool('fullyPaidNew', $this->fullyPaidNew);
		if ($this->deliveryStateOld !== null) $gen->out->writeElementNs(self::TNS, 'deliveryStateOld', null, $this->deliveryStateOld);
		if ($this->deliveryStateNew !== null) $gen->out->writeElementNs(self::TNS, 'deliveryStateNew', null, $this->deliveryStateNew);
		if ($this->cancelStateOld !== null) $gen->out->writeElementNs(self::TNS, 'cancelStateOld', null, $this->cancelStateOld);
		if ($this->cancelStateNew !== null) $gen->out->writeElementNs(self::TNS, 'cancelStateNew', null, $this->cancelStateNew);
		if ($this->completeStateOld !== null) $gen->out->writeElementNs(self::TNS, 'completeStateOld', null, $this->completeStateOld);
		if ($this->completeStateNew !== null) $gen->out->writeElementNs(self::TNS, 'completeStateNew', null, $this->completeStateNew);
		if ($this->numberOfGuestsOld !== null) $gen->writeInt('numberOfGuestsOld', $this->numberOfGuestsOld);
		if ($this->numberOfGuestsNew !== null) $gen->writeInt('numberOfGuestsNew', $this->numberOfGuestsNew);
		if ($this->orderCategoryNumberOld !== null) $gen->writeInt('orderCategoryNumberOld', $this->orderCategoryNumberOld);
		if ($this->orderCategoryNumberNew !== null) $gen->writeInt('orderCategoryNumberNew', $this->orderCategoryNumberNew);
		if ($this->orderCategoryDescriptionOld !== null) $gen->out->writeElementNs(self::TNS, 'orderCategoryDescriptionOld', null, $this->orderCategoryDescriptionOld);
		if ($this->orderCategoryDescriptionNew !== null) $gen->out->writeElementNs(self::TNS, 'orderCategoryDescriptionNew', null, $this->orderCategoryDescriptionNew);
		if ($this->lineChangeList !== null) {
$tmp_lineChangeList = new LineChangeList($this->lineChangeList);
$tmp_lineChangeList->write($gen, 'lineChangeList');
}
		if ($this->vatChangeOld !== null) $gen->out->writeElementNs(self::TNS, 'vatChangeOld', null, $this->vatChangeOld);
		if ($this->vatChangeNew !== null) $gen->out->writeElementNs(self::TNS, 'vatChangeNew', null, $this->vatChangeNew);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderChangeList extends SoapObject {
	/** @var OrderChange[] */
	public $orderChange = array();
	public function __construct($list = array()) { $this->orderChange = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->orderChange as $elem) $elem->write($gen, 'orderChange');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOrderChangesRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public ?\DateTime $fromFinancialDate = null;
	public ?\DateTime $throughFinancialDate = null;
	/** @var int[] */
	public $branchNumbers = array();
	/** @var int[] */
	public $employeeNumbers = array();
	/** @var int[] */
	public $relationNumbers = array();
	/** @var int[] */
	public $articleNumbers = array();
	/** @var int[] */
	public $articleTurnoverGroups = array();
	/** @var Text[] */
	public $articlePluNumbers = null;
	/** @var Text[] */
	public $articleBarcodes = null;
	/** @var string[] */
	public $orderTypeList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		if ($this->fromFinancialDate !== null) (SoapMplusDate::fromDateTime($this->fromFinancialDate))->write($gen, 'fromFinancialDate');
		if ($this->throughFinancialDate !== null) (SoapMplusDate::fromDateTime($this->throughFinancialDate))->write($gen, 'throughFinancialDate');
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		foreach ($this->employeeNumbers as $elem) $gen->writeInt('employeeNumbers', $elem);
		foreach ($this->relationNumbers as $elem) $gen->writeInt('relationNumbers', $elem);
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
		foreach ($this->articleTurnoverGroups as $elem) $gen->writeInt('articleTurnoverGroups', $elem);
		if ($this->articlePluNumbers !== null) {
$tmp_articlePluNumbers = new TextList($this->articlePluNumbers);
$tmp_articlePluNumbers->write($gen, 'articlePluNumbers');
}
		if ($this->articleBarcodes !== null) {
$tmp_articleBarcodes = new TextList($this->articleBarcodes);
$tmp_articleBarcodes->write($gen, 'articleBarcodes');
}
		if ($this->orderTypeList !== null) {
$tmp_orderTypeList = new OrderTypeList($this->orderTypeList);
$tmp_orderTypeList->write($gen, 'orderTypeList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderPaymentList extends SoapObject {
	/** @var OrderPayment[] */
	public $orderPayment = array();
	public function __construct($list = array()) { $this->orderPayment = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->orderPayment as $elem) $elem->write($gen, 'orderPayment');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LineChangeEventList extends SoapObject {
	/** @var LineChangeEvent[] */
	public $lineChangeEvent = array();
	public function __construct($list = array()) { $this->lineChangeEvent = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->lineChangeEvent as $elem) $elem->write($gen, 'lineChangeEvent');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LONG64_DataChange extends SoapObject {
	public ?int $oldValue = null;
	public ?int $newValue = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->oldValue !== null) $gen->writeInt('oldValue', $this->oldValue);
		if ($this->newValue !== null) $gen->writeInt('newValue', $this->newValue);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Decimal_DataChange extends SoapObject {
	public ?BigDecimal $oldValue = null;
	public ?BigDecimal $newValue = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->oldValue !== null) $gen->writeBigDecimal('oldValue', $this->oldValue);
		if ($this->newValue !== null) $gen->writeBigDecimal('newValue', $this->newValue);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SoapMplusDate_DataChange extends SoapObject {
	public ?\DateTime $oldValue = null;
	public ?\DateTime $newValue = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->oldValue !== null) $gen->writeDate('oldValue', $this->oldValue);
		if ($this->newValue !== null) $gen->writeDate('newValue', $this->newValue);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SoapMplusDateTime_DataChange extends SoapObject {
	public ?\DateTime $oldValue = null;
	public ?\DateTime $newValue = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->oldValue !== null) $gen->writeDateTime('oldValue', $this->oldValue);
		if ($this->newValue !== null) $gen->writeDateTime('newValue', $this->newValue);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Int_DataChange extends SoapObject {
	public ?int $oldValue = null;
	public ?int $newValue = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->oldValue !== null) $gen->writeInt('oldValue', $this->oldValue);
		if ($this->newValue !== null) $gen->writeInt('newValue', $this->newValue);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Bool_DataChange extends SoapObject {
	public ?bool $oldValue = null;
	public ?bool $newValue = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->oldValue !== null) $gen->writeBool('oldValue', $this->oldValue);
		if ($this->newValue !== null) $gen->writeBool('newValue', $this->newValue);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class String_DataChange extends SoapObject {
	public ?string $oldValue = null;
	public ?string $newValue = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->oldValue !== null) $gen->out->writeElementNs(self::TNS, 'oldValue', null, $this->oldValue);
		if ($this->newValue !== null) $gen->out->writeElementNs(self::TNS, 'newValue', null, $this->newValue);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TableNumber_DataChange extends SoapObject {
	public ?TableNumber $oldValue = null;
	public ?TableNumber $newValue = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->oldValue !== null) $this->oldValue->write($gen, 'oldValue');
		if ($this->newValue !== null) $this->newValue->write($gen, 'newValue');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderCancelState_DataChange extends SoapObject {
	public ?string $oldValue = null;
	public ?string $newValue = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->oldValue !== null) $gen->out->writeElementNs(self::TNS, 'oldValue', null, $this->oldValue);
		if ($this->newValue !== null) $gen->out->writeElementNs(self::TNS, 'newValue', null, $this->newValue);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderDeliveryState_DataChange extends SoapObject {
	public ?string $oldValue = null;
	public ?string $newValue = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->oldValue !== null) $gen->out->writeElementNs(self::TNS, 'oldValue', null, $this->oldValue);
		if ($this->newValue !== null) $gen->out->writeElementNs(self::TNS, 'newValue', null, $this->newValue);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderCompleteState_DataChange extends SoapObject {
	public ?string $oldValue = null;
	public ?string $newValue = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->oldValue !== null) $gen->out->writeElementNs(self::TNS, 'oldValue', null, $this->oldValue);
		if ($this->newValue !== null) $gen->out->writeElementNs(self::TNS, 'newValue', null, $this->newValue);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VatMethod_DataChange extends SoapObject {
	public ?string $oldValue = null;
	public ?string $newValue = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->oldValue !== null) $gen->out->writeElementNs(self::TNS, 'oldValue', null, $this->oldValue);
		if ($this->newValue !== null) $gen->out->writeElementNs(self::TNS, 'newValue', null, $this->newValue);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VatChange_DataChange extends SoapObject {
	public ?string $oldValue = null;
	public ?string $newValue = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->oldValue !== null) $gen->out->writeElementNs(self::TNS, 'oldValue', null, $this->oldValue);
		if ($this->newValue !== null) $gen->out->writeElementNs(self::TNS, 'newValue', null, $this->newValue);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TableSplitEvent extends SoapObject {
	public ?string $orderId = null;
	public ?int $versionNumber = null;
	public ?int $tableNumber = null;
	public ?int $tableSubNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->orderId !== null) $gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->versionNumber !== null) $gen->writeInt('versionNumber', $this->versionNumber);
		if ($this->tableNumber !== null) $gen->writeInt('tableNumber', $this->tableNumber);
		if ($this->tableSubNumber !== null) $gen->writeInt('tableSubNumber', $this->tableSubNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TurnoverGroupType_DataChange extends SoapObject {
	public ?string $oldValue = null;
	public ?string $newValue = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->oldValue !== null) $gen->out->writeElementNs(self::TNS, 'oldValue', null, $this->oldValue);
		if ($this->newValue !== null) $gen->out->writeElementNs(self::TNS, 'newValue', null, $this->newValue);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DiscountType_DataChange extends SoapObject {
	public ?string $oldValue = null;
	public ?string $newValue = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->oldValue !== null) $gen->out->writeElementNs(self::TNS, 'oldValue', null, $this->oldValue);
		if ($this->newValue !== null) $gen->out->writeElementNs(self::TNS, 'newValue', null, $this->newValue);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LineChangeEventData extends SoapObject {
	public ?LONG64_DataChange $quantity = null;
	public ?Int_DataChange $decimalPlaces = null;
	public ?Decimal_DataChange $price = null;
	public ?Decimal_DataChange $priceExcl = null;
	public ?Decimal_DataChange $originalPrice = null;
	public ?Decimal_DataChange $originalPriceExcl = null;
	public ?Decimal_DataChange $purchasePrice = null;
	public ?Decimal_DataChange $averagePurchasePrice = null;
	public ?Int_DataChange $turnoverGroup = null;
	public ?String_DataChange $turnoverGroupName = null;
	public ?TurnoverGroupType_DataChange $turnoverGroupType = null;
	public ?Int_DataChange $vatCode = null;
	public ?Decimal_DataChange $vatPercentage = null;
	public ?String_DataChange $siUnit = null;
	public ?DiscountType_DataChange $discountType = null;
	public ?String_DataChange $discountDescription = null;
	public ?Decimal_DataChange $discountPercentage = null;
	public ?Decimal_DataChange $discountAmount = null;
	public ?Decimal_DataChange $discountAmountExcl = null;
	public ?SoapMplusDate_DataChange $deliveryDate = null;
	public ?SoapMplusDateTime_DataChange $deliveryPeriodBegin = null;
	public ?SoapMplusDateTime_DataChange $deliveryPeriodEnd = null;
	public ?Decimal_DataChange $pointsAmount = null;
	public ?Decimal_DataChange $pointsAmountExcl = null;
	public ?String_DataChange $bpeId = null;
	public ?String_DataChange $bpeDescription = null;
	public ?Decimal_DataChange $bpeAmount = null;
	public ?Decimal_DataChange $bpeAmountExcl = null;
	public ?Decimal_DataChange $priceInCredits = null;
	public ?Decimal_DataChange $totalInclAmount = null;
	public ?Decimal_DataChange $totalExclAmount = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->quantity !== null) $this->quantity->write($gen, 'quantity');
		if ($this->decimalPlaces !== null) $this->decimalPlaces->write($gen, 'decimalPlaces');
		if ($this->price !== null) $this->price->write($gen, 'price');
		if ($this->priceExcl !== null) $this->priceExcl->write($gen, 'priceExcl');
		if ($this->originalPrice !== null) $this->originalPrice->write($gen, 'originalPrice');
		if ($this->originalPriceExcl !== null) $this->originalPriceExcl->write($gen, 'originalPriceExcl');
		if ($this->purchasePrice !== null) $this->purchasePrice->write($gen, 'purchasePrice');
		if ($this->averagePurchasePrice !== null) $this->averagePurchasePrice->write($gen, 'averagePurchasePrice');
		if ($this->turnoverGroup !== null) $this->turnoverGroup->write($gen, 'turnoverGroup');
		if ($this->turnoverGroupName !== null) $this->turnoverGroupName->write($gen, 'turnoverGroupName');
		if ($this->turnoverGroupType !== null) $this->turnoverGroupType->write($gen, 'turnoverGroupType');
		if ($this->vatCode !== null) $this->vatCode->write($gen, 'vatCode');
		if ($this->vatPercentage !== null) $this->vatPercentage->write($gen, 'vatPercentage');
		if ($this->siUnit !== null) $this->siUnit->write($gen, 'siUnit');
		if ($this->discountType !== null) $this->discountType->write($gen, 'discountType');
		if ($this->discountDescription !== null) $this->discountDescription->write($gen, 'discountDescription');
		if ($this->discountPercentage !== null) $this->discountPercentage->write($gen, 'discountPercentage');
		if ($this->discountAmount !== null) $this->discountAmount->write($gen, 'discountAmount');
		if ($this->discountAmountExcl !== null) $this->discountAmountExcl->write($gen, 'discountAmountExcl');
		if ($this->deliveryDate !== null) $this->deliveryDate->write($gen, 'deliveryDate');
		if ($this->deliveryPeriodBegin !== null) $this->deliveryPeriodBegin->write($gen, 'deliveryPeriodBegin');
		if ($this->deliveryPeriodEnd !== null) $this->deliveryPeriodEnd->write($gen, 'deliveryPeriodEnd');
		if ($this->pointsAmount !== null) $this->pointsAmount->write($gen, 'pointsAmount');
		if ($this->pointsAmountExcl !== null) $this->pointsAmountExcl->write($gen, 'pointsAmountExcl');
		if ($this->bpeId !== null) $this->bpeId->write($gen, 'bpeId');
		if ($this->bpeDescription !== null) $this->bpeDescription->write($gen, 'bpeDescription');
		if ($this->bpeAmount !== null) $this->bpeAmount->write($gen, 'bpeAmount');
		if ($this->bpeAmountExcl !== null) $this->bpeAmountExcl->write($gen, 'bpeAmountExcl');
		if ($this->priceInCredits !== null) $this->priceInCredits->write($gen, 'priceInCredits');
		if ($this->totalInclAmount !== null) $this->totalInclAmount->write($gen, 'totalInclAmount');
		if ($this->totalExclAmount !== null) $this->totalExclAmount->write($gen, 'totalExclAmount');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LineChangeEvent extends SoapObject {
	public ?string $lineId = null;
	public ?int $versionNumber = null;
	public ?int $employeeNumber = null;
	public int $articleNumber;
	public ?string $pluNumber = null;
	public ?string $text = null;
	public ?int $supplierRelationNumber = null;
	public ?string $supplierRelationName = null;
	public ?string $supplierArticleNumber = null;
	public ?string $subLineType = null;
	public ?string $mainLineId = null;
	public ?bool $added = null;
	public ?bool $removed = null;
	public ?LineChangeEventData $data = null;
	public ?String_DataChange $textChange = null;
	public ?String_DataChange $translatedText = null;
	public ?Int_DataChange $courseNumber = null;
	public ?String_DataChange $menuHash = null;
	public ?String_DataChange $menuDescription = null;
	public ?Decimal_DataChange $menuAmount = null;
	public ?Int_DataChange $menuSequenceNumber = null;
	/** @var LineChangeEvent[] */
	public $preparationList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->lineId !== null) $gen->out->writeElementNs(self::TNS, 'lineId', null, $this->lineId);
		if ($this->versionNumber !== null) $gen->writeInt('versionNumber', $this->versionNumber);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->pluNumber !== null) $gen->out->writeElementNs(self::TNS, 'pluNumber', null, $this->pluNumber);
		if ($this->text !== null) $gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->supplierRelationNumber !== null) $gen->writeInt('supplierRelationNumber', $this->supplierRelationNumber);
		if ($this->supplierRelationName !== null) $gen->out->writeElementNs(self::TNS, 'supplierRelationName', null, $this->supplierRelationName);
		if ($this->supplierArticleNumber !== null) $gen->out->writeElementNs(self::TNS, 'supplierArticleNumber', null, $this->supplierArticleNumber);
		if ($this->subLineType !== null) $gen->out->writeElementNs(self::TNS, 'subLineType', null, $this->subLineType);
		if ($this->mainLineId !== null) $gen->out->writeElementNs(self::TNS, 'mainLineId', null, $this->mainLineId);
		if ($this->added !== null) $gen->writeBool('added', $this->added);
		if ($this->removed !== null) $gen->writeBool('removed', $this->removed);
		if ($this->data !== null) $this->data->write($gen, 'data');
		if ($this->textChange !== null) $this->textChange->write($gen, 'textChange');
		if ($this->translatedText !== null) $this->translatedText->write($gen, 'translatedText');
		if ($this->courseNumber !== null) $this->courseNumber->write($gen, 'courseNumber');
		if ($this->menuHash !== null) $this->menuHash->write($gen, 'menuHash');
		if ($this->menuDescription !== null) $this->menuDescription->write($gen, 'menuDescription');
		if ($this->menuAmount !== null) $this->menuAmount->write($gen, 'menuAmount');
		if ($this->menuSequenceNumber !== null) $this->menuSequenceNumber->write($gen, 'menuSequenceNumber');
		if ($this->preparationList !== null) {
$tmp_preparationList = new LineChangeEventList($this->preparationList);
$tmp_preparationList->write($gen, 'preparationList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderPayment extends SoapObject {
	public string $orderId;
	public string $paymentId;
	public ?string $financialTransactionId = null;
	public ?string $posTransactionId = null;
	public int $sequenceNumber;
	public BigDecimal $amount;
	public ?\DateTime $entryTimestamp = null;
	public string $paymentMethodId;
	public ?string $paymentMethodDescription = null;
	public ?int $relationNumber = null;
	public ?string $paymentTransactionId = null;
	public ?int $credits = null;
	public ?BigDecimal $valuePerCredit = null;
	public ?int $employeeNumber = null;
	public ?string $employeeName = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		$gen->out->writeElementNs(self::TNS, 'paymentId', null, $this->paymentId);
		if ($this->financialTransactionId !== null) $gen->out->writeElementNs(self::TNS, 'financialTransactionId', null, $this->financialTransactionId);
		if ($this->posTransactionId !== null) $gen->out->writeElementNs(self::TNS, 'posTransactionId', null, $this->posTransactionId);
		$gen->writeInt('sequenceNumber', $this->sequenceNumber);
		$gen->writeBigDecimal('amount', $this->amount);
		if ($this->entryTimestamp !== null) $gen->writeDateTime('entryTimestamp', $this->entryTimestamp);
		$gen->out->writeElementNs(self::TNS, 'paymentMethodId', null, $this->paymentMethodId);
		if ($this->paymentMethodDescription !== null) $gen->out->writeElementNs(self::TNS, 'paymentMethodDescription', null, $this->paymentMethodDescription);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->paymentTransactionId !== null) $gen->out->writeElementNs(self::TNS, 'paymentTransactionId', null, $this->paymentTransactionId);
		if ($this->credits !== null) $gen->writeInt('credits', $this->credits);
		if ($this->valuePerCredit !== null) $gen->writeBigDecimal('valuePerCredit', $this->valuePerCredit);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->employeeName !== null) $gen->out->writeElementNs(self::TNS, 'employeeName', null, $this->employeeName);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderHistory extends SoapObject {
	public ?\DateTime $entryTimestamp = null;
	public ?int $changeCounter = null;
	public ?int $versionNumber = null;
	public ?LONG64_DataChange $employeeNumber = null;
	public ?String_DataChange $employeeName = null;
	public ?LONG64_DataChange $relationNumber = null;
	public ?String_DataChange $relationName = null;
	public ?SoapMplusDate_DataChange $financialDate = null;
	public ?Decimal_DataChange $totalInclAmount = null;
	public ?Decimal_DataChange $totalExclAmount = null;
	public ?VatMethod_DataChange $vatMethod = null;
	public ?String_DataChange $deliveryMethod = null;
	public ?SoapMplusDate_DataChange $deliveryDate = null;
	public ?SoapMplusDateTime_DataChange $deliveryPeriodBegin = null;
	public ?SoapMplusDateTime_DataChange $deliveryPeriodEnd = null;
	public ?String_DataChange $paymentMethod = null;
	public ?Decimal_DataChange $prepaidAmount = null;
	public ?Bool_DataChange $fullyPaid = null;
	public ?OrderDeliveryState_DataChange $deliveryState = null;
	public ?OrderCancelState_DataChange $cancelState = null;
	public ?OrderCompleteState_DataChange $completeState = null;
	public ?Int_DataChange $numberOfGuests = null;
	public ?Int_DataChange $orderCategoryNumber = null;
	public ?String_DataChange $orderCategoryDescription = null;
	/** @var LineChangeEvent[] */
	public $lineChangeEventList = null;
	public ?VatChange_DataChange $vatChange = null;
	public ?TableSplitEvent $tableSplitTo = null;
	public ?TableSplitEvent $tableSplitFrom = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->entryTimestamp !== null) $gen->writeDateTime('entryTimestamp', $this->entryTimestamp);
		if ($this->changeCounter !== null) $gen->writeInt('changeCounter', $this->changeCounter);
		if ($this->versionNumber !== null) $gen->writeInt('versionNumber', $this->versionNumber);
		if ($this->employeeNumber !== null) $this->employeeNumber->write($gen, 'employeeNumber');
		if ($this->employeeName !== null) $this->employeeName->write($gen, 'employeeName');
		if ($this->relationNumber !== null) $this->relationNumber->write($gen, 'relationNumber');
		if ($this->relationName !== null) $this->relationName->write($gen, 'relationName');
		if ($this->financialDate !== null) $this->financialDate->write($gen, 'financialDate');
		if ($this->totalInclAmount !== null) $this->totalInclAmount->write($gen, 'totalInclAmount');
		if ($this->totalExclAmount !== null) $this->totalExclAmount->write($gen, 'totalExclAmount');
		if ($this->vatMethod !== null) $this->vatMethod->write($gen, 'vatMethod');
		if ($this->deliveryMethod !== null) $this->deliveryMethod->write($gen, 'deliveryMethod');
		if ($this->deliveryDate !== null) $this->deliveryDate->write($gen, 'deliveryDate');
		if ($this->deliveryPeriodBegin !== null) $this->deliveryPeriodBegin->write($gen, 'deliveryPeriodBegin');
		if ($this->deliveryPeriodEnd !== null) $this->deliveryPeriodEnd->write($gen, 'deliveryPeriodEnd');
		if ($this->paymentMethod !== null) $this->paymentMethod->write($gen, 'paymentMethod');
		if ($this->prepaidAmount !== null) $this->prepaidAmount->write($gen, 'prepaidAmount');
		if ($this->fullyPaid !== null) $this->fullyPaid->write($gen, 'fullyPaid');
		if ($this->deliveryState !== null) $this->deliveryState->write($gen, 'deliveryState');
		if ($this->cancelState !== null) $this->cancelState->write($gen, 'cancelState');
		if ($this->completeState !== null) $this->completeState->write($gen, 'completeState');
		if ($this->numberOfGuests !== null) $this->numberOfGuests->write($gen, 'numberOfGuests');
		if ($this->orderCategoryNumber !== null) $this->orderCategoryNumber->write($gen, 'orderCategoryNumber');
		if ($this->orderCategoryDescription !== null) $this->orderCategoryDescription->write($gen, 'orderCategoryDescription');
		if ($this->lineChangeEventList !== null) {
$tmp_lineChangeEventList = new LineChangeEventList($this->lineChangeEventList);
$tmp_lineChangeEventList->write($gen, 'lineChangeEventList');
}
		if ($this->vatChange !== null) $this->vatChange->write($gen, 'vatChange');
		if ($this->tableSplitTo !== null) $this->tableSplitTo->write($gen, 'tableSplitTo');
		if ($this->tableSplitFrom !== null) $this->tableSplitFrom->write($gen, 'tableSplitFrom');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderHistoryList extends SoapObject {
	/** @var OrderHistory[] */
	public $orderHistory = array();
	public function __construct($list = array()) { $this->orderHistory = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->orderHistory as $elem) $elem->write($gen, 'orderHistory');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderHistoryOrderDetails extends SoapObject {
	public string $orderId;
	public ?string $extOrderId = null;
	public ?\DateTime $entryTimestamp = null;
	public ?int $entryBranchNumber = null;
	public ?int $workplaceNumber = null;
	public ?string $entryExtBranchId = null;
	public ?int $financialBranchNumber = null;
	public ?string $financialExtBranchId = null;
	public ?string $reference = null;
	public ?YearNumber $orderNumber = null;
	public ?YearNumberVersion $cateringOrderNumber = null;
	public ?int $syncMarker = null;
	public ?int $tableNumber = null;
	public ?string $tableDescription = null;
	public ?int $tableSubNumber = null;
	public ?TableNumber_DataChange $tableMove = null;
	public ?string $orderType = null;
	/** @var OrderHistory[] */
	public $orderHistoryList = null;
	/** @var OrderPayment[] */
	public $orderPaymentList = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->extOrderId !== null) $gen->out->writeElementNs(self::TNS, 'extOrderId', null, $this->extOrderId);
		if ($this->entryTimestamp !== null) $gen->writeDateTime('entryTimestamp', $this->entryTimestamp);
		if ($this->entryBranchNumber !== null) $gen->writeInt('entryBranchNumber', $this->entryBranchNumber);
		if ($this->workplaceNumber !== null) $gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->entryExtBranchId !== null) $gen->out->writeElementNs(self::TNS, 'entryExtBranchId', null, $this->entryExtBranchId);
		if ($this->financialBranchNumber !== null) $gen->writeInt('financialBranchNumber', $this->financialBranchNumber);
		if ($this->financialExtBranchId !== null) $gen->out->writeElementNs(self::TNS, 'financialExtBranchId', null, $this->financialExtBranchId);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->orderNumber !== null) $this->orderNumber->write($gen, 'orderNumber');
		if ($this->cateringOrderNumber !== null) $this->cateringOrderNumber->write($gen, 'cateringOrderNumber');
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->tableNumber !== null) $gen->writeInt('tableNumber', $this->tableNumber);
		if ($this->tableDescription !== null) $gen->out->writeElementNs(self::TNS, 'tableDescription', null, $this->tableDescription);
		if ($this->tableSubNumber !== null) $gen->writeInt('tableSubNumber', $this->tableSubNumber);
		if ($this->tableMove !== null) $this->tableMove->write($gen, 'tableMove');
		if ($this->orderType !== null) $gen->out->writeElementNs(self::TNS, 'orderType', null, $this->orderType);
		if ($this->orderHistoryList !== null) {
$tmp_orderHistoryList = new OrderHistoryList($this->orderHistoryList);
$tmp_orderHistoryList->write($gen, 'orderHistoryList');
}
		if ($this->orderPaymentList !== null) {
$tmp_orderPaymentList = new OrderPaymentList($this->orderPaymentList);
$tmp_orderPaymentList->write($gen, 'orderPaymentList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderHistoryOrderDetailsList extends SoapObject {
	/** @var OrderHistoryOrderDetails[] */
	public $salesOrderHistory = array();
	/** @var OrderHistoryOrderDetails[] */
	public $externalSalesOrderHistory = array();
	/** @var OrderHistoryOrderDetails[] */
	public $repeatSalesOrderHistory = array();
	/** @var OrderHistoryOrderDetails[] */
	public $tableOrderHistory = array();
	/** @var OrderHistoryOrderDetails[] */
	public $cafeteriaOrderHistory = array();
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->salesOrderHistory as $elem) $elem->write($gen, 'salesOrderHistory');
		foreach ($this->externalSalesOrderHistory as $elem) $elem->write($gen, 'externalSalesOrderHistory');
		foreach ($this->repeatSalesOrderHistory as $elem) $elem->write($gen, 'repeatSalesOrderHistory');
		foreach ($this->tableOrderHistory as $elem) $elem->write($gen, 'tableOrderHistory');
		foreach ($this->cafeteriaOrderHistory as $elem) $elem->write($gen, 'cafeteriaOrderHistory');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOrderHistoryRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public ?\DateTime $fromEntryDateTime = null;
	public ?\DateTime $throughEntryDateTime = null;
	/** @var int[] */
	public $branchNumbers = array();
	/** @var int[] */
	public $employeeNumbers = array();
	/** @var int[] */
	public $relationNumbers = array();
	/** @var TableNumber[] */
	public $tableNumberList = null;
	/** @var string[] */
	public $orderTypeList = null;
	/** @var string[] */
	public $orderIdList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		if ($this->fromEntryDateTime !== null) $gen->writeDateTime('fromEntryDateTime', $this->fromEntryDateTime);
		if ($this->throughEntryDateTime !== null) $gen->writeDateTime('throughEntryDateTime', $this->throughEntryDateTime);
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		foreach ($this->employeeNumbers as $elem) $gen->writeInt('employeeNumbers', $elem);
		foreach ($this->relationNumbers as $elem) $gen->writeInt('relationNumbers', $elem);
		if ($this->tableNumberList !== null) {
$tmp_tableNumberList = new TableNumberList($this->tableNumberList);
$tmp_tableNumberList->write($gen, 'tableNumberList');
}
		if ($this->orderTypeList !== null) {
$tmp_orderTypeList = new OrderTypeList($this->orderTypeList);
$tmp_orderTypeList->write($gen, 'orderTypeList');
}
		if ($this->orderIdList !== null) {
$tmp_orderIdList = new IdList($this->orderIdList);
$tmp_orderIdList->write($gen, 'orderIdList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CancelOrderRequest extends SoapObject {
	public ?int $branchNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CancelOrderV2Request extends SoapObject {
	public WorkplaceIdentifier $workplace;
	public EmployeeIdentifier $employee;
	public string $orderId;
	public function __construct() {
		$this->workplace = new WorkplaceIdentifier();
		$this->employee = new EmployeeIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->workplace->write($gen, 'workplace');
		$this->employee->write($gen, 'employee');
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CancelTableOrderRequest extends SoapObject {
	public int $branchNumber;
	public int $tableNumber;
	public int $tableSubNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('tableNumber', $this->tableNumber);
		$gen->writeInt('tableSubNumber', $this->tableSubNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PayInvoiceRequest extends SoapObject {
	public string $invoiceId;
	/** @var Payment[] */
	public $paymentList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'invoiceId', null, $this->invoiceId);
		$tmp_paymentList = new PaymentList($this->paymentList);
$tmp_paymentList->write($gen, 'paymentList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeliverOrderRequest extends SoapObject {
	public string $orderId;
	public ?string $turnoverType = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->turnoverType !== null) $gen->out->writeElementNs(self::TNS, 'turnoverType', null, $this->turnoverType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderDeliveryLine extends SoapObject {
	public string $lineId;
	public BigDecimal $quantity;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'lineId', null, $this->lineId);
		$gen->writeValueAndScale('quantity', 'decimalPlaces', $this->quantity, 2);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderDeliveryLineList extends SoapObject {
	/** @var OrderDeliveryLine[] */
	public $line = array();
	public function __construct($list = array()) { $this->line = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->line as $elem) $elem->write($gen, 'line');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderDelivery extends SoapObject {
	public string $orderId;
	/** @var OrderDeliveryLine[] */
	public $lineList = array();
	public ?string $turnoverType = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		$tmp_lineList = new OrderDeliveryLineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');

		if ($this->turnoverType !== null) $gen->out->writeElementNs(self::TNS, 'turnoverType', null, $this->turnoverType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeliverOrderV2Request extends SoapObject {
	public OrderDelivery $orderDelivery;
	public function __construct() {
		$this->orderDelivery = new OrderDelivery();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->orderDelivery->write($gen, 'orderDelivery');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OrderCategory extends SoapObject {
	public int $orderCategoryNumber;
	public string $orderCategoryDescription;
	/** @var int[] */
	public $orderCategoryDependencyNumbers = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('orderCategoryNumber', $this->orderCategoryNumber);
		$gen->out->writeElementNs(self::TNS, 'orderCategoryDescription', null, $this->orderCategoryDescription);
		foreach ($this->orderCategoryDependencyNumbers as $elem) $gen->writeInt('orderCategoryDependencyNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Answer extends SoapObject {
	public ?int $questionId = null;
	public ?string $questionText = null;
	public ?string $answerText = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->questionId !== null) $gen->writeInt('questionId', $this->questionId);
		if ($this->questionText !== null) $gen->out->writeElementNs(self::TNS, 'questionText', null, $this->questionText);
		if ($this->answerText !== null) $gen->out->writeElementNs(self::TNS, 'answerText', null, $this->answerText);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class AnswerList extends SoapObject {
	/** @var Answer[] */
	public $answer = array();
	public function __construct($list = array()) { $this->answer = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->answer as $elem) $elem->write($gen, 'answer');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Receipt extends SoapObject {
	public string $receiptId;
	public ?string $extReceiptId = null;
	/** @var string[] */
	public $orderIds = null;
	/** @var string[] */
	public $extOrderIds = null;
	public ?string $transactionString = null;
	public ?int $syncMarker = null;
	public ?WorkplaceYearNumber $receiptNumber = null;
	public ?string $receiptBarcode = null;
	public string $receiptType;
	public int $employeeNumber;
	public string $employeeName;
	public \DateTime $entryTimestamp;
	public ?int $relationNumber = null;
	public ?string $relationName = null;
	public ?int $relationCategoryId = null;
	public ?string $relationBankAccountNumber = null;
	public \DateTime $financialDate;
	public int $financialBranchNumber;
	public ?string $financialExtBranchId = null;
	public int $workplaceNumber;
	public ?int $entryBranchNumber = null;
	public ?string $entryExtBranchId = null;
	public ?string $reference = null;
	public ?string $activityId = null;
	public BigDecimal $totalInclAmount;
	public BigDecimal $totalExclAmount;
	public string $vatMethod;
	/** @var VatGroup[] */
	public $vatGroupList = null;
	public ?int $changeCounter = null;
	public ?int $versionNumber = null;
	public BigDecimal $paidAmount;
	public string $state;
	/** @var Line[] */
	public $lineList = null;
	/** @var Payment[] */
	public $paymentList = null;
	/** @var Answer[] */
	public $answerList = null;
	public ?string $vatChange = null;
	public ?int $numberOfGuests = null;
	public ?string $creditedReceiptId = null;
	public ?int $tableNumber = null;
	public ?int $tableSubNumber = null;
	public ?int $salesCategoryNumber = null;
	public ?string $salesCategoryDescription = null;
	public function __construct() {
		$this->entryTimestamp = new \DateTime();
		$this->financialDate = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'receiptId', null, $this->receiptId);
		if ($this->extReceiptId !== null) $gen->out->writeElementNs(self::TNS, 'extReceiptId', null, $this->extReceiptId);
		if ($this->orderIds !== null) {
$tmp_orderIds = new IdList($this->orderIds);
$tmp_orderIds->write($gen, 'orderIds');
}
		if ($this->extOrderIds !== null) {
$tmp_extOrderIds = new IdList($this->extOrderIds);
$tmp_extOrderIds->write($gen, 'extOrderIds');
}
		if ($this->transactionString !== null) $gen->out->writeElementNs(self::TNS, 'transactionString', null, $this->transactionString);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->receiptNumber !== null) $this->receiptNumber->write($gen, 'receiptNumber');
		if ($this->receiptBarcode !== null) $gen->out->writeElementNs(self::TNS, 'receiptBarcode', null, $this->receiptBarcode);
		$gen->out->writeElementNs(self::TNS, 'receiptType', null, $this->receiptType);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->out->writeElementNs(self::TNS, 'employeeName', null, $this->employeeName);
		(SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->relationName !== null) $gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
		if ($this->relationCategoryId !== null) $gen->writeInt('relationCategoryId', $this->relationCategoryId);
		if ($this->relationBankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationBankAccountNumber', null, $this->relationBankAccountNumber);
		(SoapMplusDate::fromDateTime($this->financialDate))->write($gen, 'financialDate');
		$gen->writeInt('financialBranchNumber', $this->financialBranchNumber);
		if ($this->financialExtBranchId !== null) $gen->out->writeElementNs(self::TNS, 'financialExtBranchId', null, $this->financialExtBranchId);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->entryBranchNumber !== null) $gen->writeInt('entryBranchNumber', $this->entryBranchNumber);
		if ($this->entryExtBranchId !== null) $gen->out->writeElementNs(self::TNS, 'entryExtBranchId', null, $this->entryExtBranchId);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->activityId !== null) $gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
		$gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		$gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		$gen->out->writeElementNs(self::TNS, 'vatMethod', null, $this->vatMethod);
		if ($this->vatGroupList !== null) {
$tmp_vatGroupList = new VatGroupList($this->vatGroupList);
$tmp_vatGroupList->write($gen, 'vatGroupList');
}
		if ($this->changeCounter !== null) $gen->writeInt('changeCounter', $this->changeCounter);
		if ($this->versionNumber !== null) $gen->writeInt('versionNumber', $this->versionNumber);
		$gen->writeValueAndScale('paidAmount', '', $this->paidAmount, 2);
		$gen->out->writeElementNs(self::TNS, 'state', null, $this->state);
		if ($this->lineList !== null) {
$tmp_lineList = new LineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');
}
		if ($this->paymentList !== null) {
$tmp_paymentList = new PaymentList($this->paymentList);
$tmp_paymentList->write($gen, 'paymentList');
}
		if ($this->answerList !== null) {
$tmp_answerList = new AnswerList($this->answerList);
$tmp_answerList->write($gen, 'answerList');
}
		if ($this->vatChange !== null) $gen->out->writeElementNs(self::TNS, 'vatChange', null, $this->vatChange);
		if ($this->numberOfGuests !== null) $gen->writeInt('numberOfGuests', $this->numberOfGuests);
		if ($this->creditedReceiptId !== null) $gen->out->writeElementNs(self::TNS, 'creditedReceiptId', null, $this->creditedReceiptId);
		if ($this->tableNumber !== null) $gen->writeInt('tableNumber', $this->tableNumber);
		if ($this->tableSubNumber !== null) $gen->writeInt('tableSubNumber', $this->tableSubNumber);
		if ($this->salesCategoryNumber !== null) $gen->writeInt('salesCategoryNumber', $this->salesCategoryNumber);
		if ($this->salesCategoryDescription !== null) $gen->out->writeElementNs(self::TNS, 'salesCategoryDescription', null, $this->salesCategoryDescription);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReceiptList extends SoapObject {
	/** @var Receipt[] */
	public $receipt = array();
	public function __construct($list = array()) { $this->receipt = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->receipt as $elem) $elem->write($gen, 'receipt');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetReceiptsRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public ?\DateTime $fromFinancialDate = null;
	public ?\DateTime $throughFinancialDate = null;
	/** @var int[] */
	public $branchNumbers = array();
	/** @var int[] */
	public $employeeNumbers = array();
	/** @var int[] */
	public $relationNumbers = array();
	/** @var int[] */
	public $supplierRelationNumbers = array();
	/** @var int[] */
	public $articleNumbers = array();
	/** @var int[] */
	public $articleTurnoverGroups = array();
	/** @var Text[] */
	public $articlePluNumbers = array();
	/** @var Text[] */
	public $articleBarcodes = array();
	public ?string $activityId = null;
	public ?bool $includeOrderReferences = null;
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	/** @var string[] */
	public $receiptIds = array();
	public ?bool $includeLineList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		if ($this->fromFinancialDate !== null) (SoapMplusDate::fromDateTime($this->fromFinancialDate))->write($gen, 'fromFinancialDate');
		if ($this->throughFinancialDate !== null) (SoapMplusDate::fromDateTime($this->throughFinancialDate))->write($gen, 'throughFinancialDate');
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		foreach ($this->employeeNumbers as $elem) $gen->writeInt('employeeNumbers', $elem);
		foreach ($this->relationNumbers as $elem) $gen->writeInt('relationNumbers', $elem);
		foreach ($this->supplierRelationNumbers as $elem) $gen->writeInt('supplierRelationNumbers', $elem);
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
		foreach ($this->articleTurnoverGroups as $elem) $gen->writeInt('articleTurnoverGroups', $elem);
		$tmp_articlePluNumbers = new TextList($this->articlePluNumbers);
$tmp_articlePluNumbers->write($gen, 'articlePluNumbers');

		$tmp_articleBarcodes = new TextList($this->articleBarcodes);
$tmp_articleBarcodes->write($gen, 'articleBarcodes');

		if ($this->activityId !== null) $gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
		if ($this->includeOrderReferences !== null) $gen->writeBool('includeOrderReferences', $this->includeOrderReferences);
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
		foreach ($this->receiptIds as $elem) $gen->out->writeElementNs(self::TNS, 'receiptIds', null, $elem);
		if ($this->includeLineList !== null) $gen->writeBool('includeLineList', $this->includeLineList);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetReceiptsByCashCountRequest extends SoapObject {
	public string $cashCountId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cashCountId', null, $this->cashCountId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintReceiptV2Request extends IdempotentReq {
	public WorkplaceIdentifier $workplaceIdentifier;
	public ?TableIdentifier $tableIdentifier = null;
	public ?string $receiptId = null;
	public function __construct() {
		$this->workplaceIdentifier = new WorkplaceIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$this->workplaceIdentifier->write($gen, 'workplaceIdentifier');
		if ($this->tableIdentifier !== null) $this->tableIdentifier->write($gen, 'tableIdentifier');
		if ($this->receiptId !== null) $gen->out->writeElementNs(self::TNS, 'receiptId', null, $this->receiptId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintTableReceiptRequest extends SoapObject {
	public int $branchNumber;
	public int $tableNumber;
	public int $tableSubNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('tableNumber', $this->tableNumber);
		$gen->writeInt('tableSubNumber', $this->tableSubNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintTableReceiptV3Request extends IdempotentReq {
	public WorkplaceIdentifier $workplaceIdentifier;
	public TableIdentifier $tableIdentifier;
	public function __construct() {
		$this->workplaceIdentifier = new WorkplaceIdentifier();
		$this->tableIdentifier = new TableIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$this->workplaceIdentifier->write($gen, 'workplaceIdentifier');
		$this->tableIdentifier->write($gen, 'tableIdentifier');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Invoice extends SoapObject {
	public ?string $invoiceId = null;
	public ?string $extInvoiceId = null;
	/** @var string[] */
	public $orderIds = null;
	/** @var string[] */
	public $extOrderIds = null;
	public ?string $transactionString = null;
	public ?int $syncMarker = null;
	public ?YearNumber $invoiceNumber = null;
	public ?string $invoiceBarcode = null;
	public ?string $invoiceType = null;
	public ?int $employeeNumber = null;
	public ?string $employeeName = null;
	public ?\DateTime $entryTimestamp = null;
	public ?int $relationNumber = null;
	public ?string $relationName = null;
	public ?int $relationCategoryId = null;
	public ?string $relationBankAccountNumber = null;
	public ?string $relationVatNumber = null;
	public ?Address $deliveryAddress = null;
	public ?Address $invoiceAddress = null;
	public ?\DateTime $financialDate = null;
	public ?int $financialBranchNumber = null;
	public ?string $financialExtBranchId = null;
	public ?int $workplaceNumber = null;
	public ?int $entryBranchNumber = null;
	public ?string $entryExtBranchId = null;
	public ?string $reference = null;
	public ?string $activityId = null;
	public ?\DateTime $dueDate = null;
	public ?BigDecimal $totalInclAmount = null;
	public ?BigDecimal $totalExclAmount = null;
	public ?string $vatMethod = null;
	/** @var VatGroup[] */
	public $vatGroupList = null;
	public ?int $changeCounter = null;
	public ?int $versionNumber = null;
	public ?BigDecimal $paidAmount = null;
	public ?string $state = null;
	public ?bool $finalized = null;
	public ?\DateTime $finalizedTimestamp = null;
	/** @var Line[] */
	public $lineList = null;
	/** @var Payment[] */
	public $paymentList = null;
	/** @var Answer[] */
	public $answerList = null;
	public ?string $vatChange = null;
	public ?int $vatCountryCode = null;
	public ?string $vatCountryIso3 = null;
	public ?string $costCenter = null;
	public ?string $creditedInvoiceId = null;
	public ?string $creditedReason = null;
	public ?int $orderCategoryNumber = null;
	public ?string $sessionId = null;
	/** @var YearNumber[] */
	public $orderNumbers = null;
	/** @var string[] */
	public $packingSlipIds = null;
	/** @var YearNumber[] */
	public $packingSlipNumbers = null;
	/** @var string[] */
	public $proposalIds = null;
	/** @var string[] */
	public $extProposalIds = null;
	/** @var YearNumber[] */
	public $proposalNumbers = null;
	public ?int $salesCategoryNumber = null;
	public ?string $salesCategoryDescription = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->invoiceId !== null) $gen->out->writeElementNs(self::TNS, 'invoiceId', null, $this->invoiceId);
		if ($this->extInvoiceId !== null) $gen->out->writeElementNs(self::TNS, 'extInvoiceId', null, $this->extInvoiceId);
		if ($this->orderIds !== null) {
$tmp_orderIds = new IdList($this->orderIds);
$tmp_orderIds->write($gen, 'orderIds');
}
		if ($this->extOrderIds !== null) {
$tmp_extOrderIds = new IdList($this->extOrderIds);
$tmp_extOrderIds->write($gen, 'extOrderIds');
}
		if ($this->transactionString !== null) $gen->out->writeElementNs(self::TNS, 'transactionString', null, $this->transactionString);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->invoiceNumber !== null) $this->invoiceNumber->write($gen, 'invoiceNumber');
		if ($this->invoiceBarcode !== null) $gen->out->writeElementNs(self::TNS, 'invoiceBarcode', null, $this->invoiceBarcode);
		if ($this->invoiceType !== null) $gen->out->writeElementNs(self::TNS, 'invoiceType', null, $this->invoiceType);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->employeeName !== null) $gen->out->writeElementNs(self::TNS, 'employeeName', null, $this->employeeName);
		if ($this->entryTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->relationName !== null) $gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
		if ($this->relationCategoryId !== null) $gen->writeInt('relationCategoryId', $this->relationCategoryId);
		if ($this->relationBankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationBankAccountNumber', null, $this->relationBankAccountNumber);
		if ($this->relationVatNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationVatNumber', null, $this->relationVatNumber);
		if ($this->deliveryAddress !== null) $this->deliveryAddress->write($gen, 'deliveryAddress');
		if ($this->invoiceAddress !== null) $this->invoiceAddress->write($gen, 'invoiceAddress');
		if ($this->financialDate !== null) (SoapMplusDate::fromDateTime($this->financialDate))->write($gen, 'financialDate');
		if ($this->financialBranchNumber !== null) $gen->writeInt('financialBranchNumber', $this->financialBranchNumber);
		if ($this->financialExtBranchId !== null) $gen->out->writeElementNs(self::TNS, 'financialExtBranchId', null, $this->financialExtBranchId);
		if ($this->workplaceNumber !== null) $gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->entryBranchNumber !== null) $gen->writeInt('entryBranchNumber', $this->entryBranchNumber);
		if ($this->entryExtBranchId !== null) $gen->out->writeElementNs(self::TNS, 'entryExtBranchId', null, $this->entryExtBranchId);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->activityId !== null) $gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
		if ($this->dueDate !== null) (SoapMplusDate::fromDateTime($this->dueDate))->write($gen, 'dueDate');
		if ($this->totalInclAmount !== null) $gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		if ($this->totalExclAmount !== null) $gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		if ($this->vatMethod !== null) $gen->out->writeElementNs(self::TNS, 'vatMethod', null, $this->vatMethod);
		if ($this->vatGroupList !== null) {
$tmp_vatGroupList = new VatGroupList($this->vatGroupList);
$tmp_vatGroupList->write($gen, 'vatGroupList');
}
		if ($this->changeCounter !== null) $gen->writeInt('changeCounter', $this->changeCounter);
		if ($this->versionNumber !== null) $gen->writeInt('versionNumber', $this->versionNumber);
		if ($this->paidAmount !== null) $gen->writeValueAndScale('paidAmount', '', $this->paidAmount, 2);
		if ($this->state !== null) $gen->out->writeElementNs(self::TNS, 'state', null, $this->state);
		if ($this->finalized !== null) $gen->writeBool('finalized', $this->finalized);
		if ($this->finalizedTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->finalizedTimestamp))->write($gen, 'finalizedTimestamp');
		if ($this->lineList !== null) {
$tmp_lineList = new LineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');
}
		if ($this->paymentList !== null) {
$tmp_paymentList = new PaymentList($this->paymentList);
$tmp_paymentList->write($gen, 'paymentList');
}
		if ($this->answerList !== null) {
$tmp_answerList = new AnswerList($this->answerList);
$tmp_answerList->write($gen, 'answerList');
}
		if ($this->vatChange !== null) $gen->out->writeElementNs(self::TNS, 'vatChange', null, $this->vatChange);
		if ($this->vatCountryCode !== null) $gen->writeInt('vatCountryCode', $this->vatCountryCode);
		if ($this->vatCountryIso3 !== null) $gen->out->writeElementNs(self::TNS, 'vatCountryIso3', null, $this->vatCountryIso3);
		if ($this->costCenter !== null) $gen->out->writeElementNs(self::TNS, 'costCenter', null, $this->costCenter);
		if ($this->creditedInvoiceId !== null) $gen->out->writeElementNs(self::TNS, 'creditedInvoiceId', null, $this->creditedInvoiceId);
		if ($this->creditedReason !== null) $gen->out->writeElementNs(self::TNS, 'creditedReason', null, $this->creditedReason);
		if ($this->orderCategoryNumber !== null) $gen->writeInt('orderCategoryNumber', $this->orderCategoryNumber);
		if ($this->sessionId !== null) $gen->out->writeElementNs(self::TNS, 'sessionId', null, $this->sessionId);
		if ($this->orderNumbers !== null) {
$tmp_orderNumbers = new YearNumberList($this->orderNumbers);
$tmp_orderNumbers->write($gen, 'orderNumbers');
}
		if ($this->packingSlipIds !== null) {
$tmp_packingSlipIds = new IdList($this->packingSlipIds);
$tmp_packingSlipIds->write($gen, 'packingSlipIds');
}
		if ($this->packingSlipNumbers !== null) {
$tmp_packingSlipNumbers = new YearNumberList($this->packingSlipNumbers);
$tmp_packingSlipNumbers->write($gen, 'packingSlipNumbers');
}
		if ($this->proposalIds !== null) {
$tmp_proposalIds = new IdList($this->proposalIds);
$tmp_proposalIds->write($gen, 'proposalIds');
}
		if ($this->extProposalIds !== null) {
$tmp_extProposalIds = new IdList($this->extProposalIds);
$tmp_extProposalIds->write($gen, 'extProposalIds');
}
		if ($this->proposalNumbers !== null) {
$tmp_proposalNumbers = new YearNumberList($this->proposalNumbers);
$tmp_proposalNumbers->write($gen, 'proposalNumbers');
}
		if ($this->salesCategoryNumber !== null) $gen->writeInt('salesCategoryNumber', $this->salesCategoryNumber);
		if ($this->salesCategoryDescription !== null) $gen->out->writeElementNs(self::TNS, 'salesCategoryDescription', null, $this->salesCategoryDescription);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InvoiceList extends SoapObject {
	/** @var Invoice[] */
	public $invoice = array();
	public function __construct($list = array()) { $this->invoice = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->invoice as $elem) $elem->write($gen, 'invoice');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetInvoicesRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public ?\DateTime $fromFinancialDate = null;
	public ?\DateTime $throughFinancialDate = null;
	/** @var int[] */
	public $branchNumbers = array();
	/** @var int[] */
	public $employeeNumbers = array();
	/** @var int[] */
	public $relationNumbers = array();
	/** @var int[] */
	public $supplierRelationNumbers = array();
	/** @var int[] */
	public $articleNumbers = array();
	/** @var int[] */
	public $articleTurnoverGroups = array();
	/** @var Text[] */
	public $articlePluNumbers = array();
	/** @var Text[] */
	public $articleBarcodes = array();
	public ?string $activityId = null;
	public ?bool $finalizeInvoices = null;
	/** @var string[] */
	public $invoiceIds = array();
	/** @var YearNumber[] */
	public $invoiceNumbers = array();
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public ?bool $includeLineList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		if ($this->fromFinancialDate !== null) (SoapMplusDate::fromDateTime($this->fromFinancialDate))->write($gen, 'fromFinancialDate');
		if ($this->throughFinancialDate !== null) (SoapMplusDate::fromDateTime($this->throughFinancialDate))->write($gen, 'throughFinancialDate');
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		foreach ($this->employeeNumbers as $elem) $gen->writeInt('employeeNumbers', $elem);
		foreach ($this->relationNumbers as $elem) $gen->writeInt('relationNumbers', $elem);
		foreach ($this->supplierRelationNumbers as $elem) $gen->writeInt('supplierRelationNumbers', $elem);
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
		foreach ($this->articleTurnoverGroups as $elem) $gen->writeInt('articleTurnoverGroups', $elem);
		$tmp_articlePluNumbers = new TextList($this->articlePluNumbers);
$tmp_articlePluNumbers->write($gen, 'articlePluNumbers');

		$tmp_articleBarcodes = new TextList($this->articleBarcodes);
$tmp_articleBarcodes->write($gen, 'articleBarcodes');

		if ($this->activityId !== null) $gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
		if ($this->finalizeInvoices !== null) $gen->writeBool('finalizeInvoices', $this->finalizeInvoices);
		foreach ($this->invoiceIds as $elem) $gen->out->writeElementNs(self::TNS, 'invoiceIds', null, $elem);
		foreach ($this->invoiceNumbers as $elem) $elem->write($gen, 'invoiceNumbers');
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
		if ($this->includeLineList !== null) $gen->writeBool('includeLineList', $this->includeLineList);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveInvoiceInfo extends SoapObject {
	public string $invoiceId;
	public string $invoiceString;
	public ?YearNumber $invoiceNumber = null;
	public ?string $invoiceBarcode = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'invoiceId', null, $this->invoiceId);
		$gen->out->writeElementNs(self::TNS, 'invoiceString', null, $this->invoiceString);
		if ($this->invoiceNumber !== null) $this->invoiceNumber->write($gen, 'invoiceNumber');
		if ($this->invoiceBarcode !== null) $gen->out->writeElementNs(self::TNS, 'invoiceBarcode', null, $this->invoiceBarcode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class JournalFilterList extends SoapObject {
	/** @var string[] */
	public $journalFilter = array();
	public function __construct($list = array()) { $this->journalFilter = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->journalFilter as $elem) $gen->out->writeElementNs(self::TNS, 'journalFilter', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TurnoverGroup extends SoapObject {
	public string $turnoverGroupType;
	public int $turnoverGroup;
	public string $turnoverGroupName;
	public ?BigDecimal $inclAmount = null;
	public ?BigDecimal $exclAmount = null;
	public ?int $defaultAccountNumber = null;
	public ?int $accountNumber = null;
	public ?bool $allowPointsDistribution = null;
	public ?bool $allowPointsPayment = null;
	public ?bool $allowDiscount = null;
	/** @var BranchAccountNumber[] */
	public $branchAccountNumberList = null;
	public ?int $defaultPurchaseAccountNumber = null;
	public ?int $purchaseAccountNumber = null;
	public ?int $defaultStockAccountNumber = null;
	public ?int $stockAccountNumber = null;
	public ?int $defaultVatCode = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'turnoverGroupType', null, $this->turnoverGroupType);
		$gen->writeInt('turnoverGroup', $this->turnoverGroup);
		$gen->out->writeElementNs(self::TNS, 'turnoverGroupName', null, $this->turnoverGroupName);
		if ($this->inclAmount !== null) $gen->writeValueAndScale('inclAmount', '', $this->inclAmount, 2);
		if ($this->exclAmount !== null) $gen->writeValueAndScale('exclAmount', '', $this->exclAmount, 2);
		if ($this->defaultAccountNumber !== null) $gen->writeInt('defaultAccountNumber', $this->defaultAccountNumber);
		if ($this->accountNumber !== null) $gen->writeInt('accountNumber', $this->accountNumber);
		if ($this->allowPointsDistribution !== null) $gen->writeBool('allowPointsDistribution', $this->allowPointsDistribution);
		if ($this->allowPointsPayment !== null) $gen->writeBool('allowPointsPayment', $this->allowPointsPayment);
		if ($this->allowDiscount !== null) $gen->writeBool('allowDiscount', $this->allowDiscount);
		if ($this->branchAccountNumberList !== null) {
$tmp_branchAccountNumberList = new BranchAccountNumberList($this->branchAccountNumberList);
$tmp_branchAccountNumberList->write($gen, 'branchAccountNumberList');
}
		if ($this->defaultPurchaseAccountNumber !== null) $gen->writeInt('defaultPurchaseAccountNumber', $this->defaultPurchaseAccountNumber);
		if ($this->purchaseAccountNumber !== null) $gen->writeInt('purchaseAccountNumber', $this->purchaseAccountNumber);
		if ($this->defaultStockAccountNumber !== null) $gen->writeInt('defaultStockAccountNumber', $this->defaultStockAccountNumber);
		if ($this->stockAccountNumber !== null) $gen->writeInt('stockAccountNumber', $this->stockAccountNumber);
		if ($this->defaultVatCode !== null) $gen->writeInt('defaultVatCode', $this->defaultVatCode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TurnoverGroupList extends SoapObject {
	/** @var TurnoverGroup[] */
	public $turnoverGroup = array();
	public function __construct($list = array()) { $this->turnoverGroup = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->turnoverGroup as $elem) $elem->write($gen, 'turnoverGroup');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashCountLine extends SoapObject {
	public string $paymentMethod;
	public ?string $paymentMethodType = null;
	public ?int $accountNumber = null;
	public BigDecimal $startAmount;
	public BigDecimal $addedAmount;
	public BigDecimal $countedAmount;
	public BigDecimal $depositedAmount;
	public BigDecimal $differenceAmount;
	public ?int $differenceAccountNumber = null;
	public BigDecimal $endAmount;
	public ?string $depositPaymentMethod = null;
	public ?string $depositPaymentMethodType = null;
	public ?int $depositAccountNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'paymentMethod', null, $this->paymentMethod);
		if ($this->paymentMethodType !== null) $gen->out->writeElementNs(self::TNS, 'paymentMethodType', null, $this->paymentMethodType);
		if ($this->accountNumber !== null) $gen->writeInt('accountNumber', $this->accountNumber);
		$gen->writeValueAndScale('startAmount', '', $this->startAmount, 2);
		$gen->writeValueAndScale('addedAmount', '', $this->addedAmount, 2);
		$gen->writeValueAndScale('countedAmount', '', $this->countedAmount, 2);
		$gen->writeValueAndScale('depositedAmount', '', $this->depositedAmount, 2);
		$gen->writeValueAndScale('differenceAmount', '', $this->differenceAmount, 2);
		if ($this->differenceAccountNumber !== null) $gen->writeInt('differenceAccountNumber', $this->differenceAccountNumber);
		$gen->writeValueAndScale('endAmount', '', $this->endAmount, 2);
		if ($this->depositPaymentMethod !== null) $gen->out->writeElementNs(self::TNS, 'depositPaymentMethod', null, $this->depositPaymentMethod);
		if ($this->depositPaymentMethodType !== null) $gen->out->writeElementNs(self::TNS, 'depositPaymentMethodType', null, $this->depositPaymentMethodType);
		if ($this->depositAccountNumber !== null) $gen->writeInt('depositAccountNumber', $this->depositAccountNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashCountLineList extends SoapObject {
	/** @var CashCountLine[] */
	public $cashCountLine = array();
	public function __construct($list = array()) { $this->cashCountLine = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->cashCountLine as $elem) $elem->write($gen, 'cashCountLine');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Transaction extends SoapObject {
	public string $transactionId;
	public ?string $transactionString = null;
	public \DateTime $financialDate;
	public int $branchNumber;
	public ?string $extBranchId = null;
	public int $workplaceNumber;
	public YearNumber $transactionNumber;
	public int $employeeNumber;
	public \DateTime $entryTimestamp;
	public ?int $relationNumber = null;
	public function __construct() {
		$this->financialDate = new \DateTime();
		$this->transactionNumber = new YearNumber();
		$this->entryTimestamp = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'transactionId', null, $this->transactionId);
		if ($this->transactionString !== null) $gen->out->writeElementNs(self::TNS, 'transactionString', null, $this->transactionString);
		(SoapMplusDate::fromDateTime($this->financialDate))->write($gen, 'financialDate');
		$gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
		$this->transactionNumber->write($gen, 'transactionNumber');
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		(SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashCountExtraWorkplace extends SoapObject {
	public int $workplaceNumber;
	public ?string $shiftFirstReceiptId = null;
	public ?Transaction $shiftFirstTransaction = null;
	public ?string $shiftLastReceiptId = null;
	public ?Transaction $shiftLastTransaction = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->shiftFirstReceiptId !== null) $gen->out->writeElementNs(self::TNS, 'shiftFirstReceiptId', null, $this->shiftFirstReceiptId);
		if ($this->shiftFirstTransaction !== null) $this->shiftFirstTransaction->write($gen, 'shiftFirstTransaction');
		if ($this->shiftLastReceiptId !== null) $gen->out->writeElementNs(self::TNS, 'shiftLastReceiptId', null, $this->shiftLastReceiptId);
		if ($this->shiftLastTransaction !== null) $this->shiftLastTransaction->write($gen, 'shiftLastTransaction');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashCountExtraWorkplaceList extends SoapObject {
	/** @var CashCountExtraWorkplace[] */
	public $cashCountExtraWorkplace = array();
	public function __construct($list = array()) { $this->cashCountExtraWorkplace = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->cashCountExtraWorkplace as $elem) $elem->write($gen, 'cashCountExtraWorkplace');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashCount extends SoapObject {
	public string $cashCountId;
	public ?string $cashCountString = null;
	public \DateTime $financialDate;
	public \DateTime $entryTimestamp;
	public int $branchNumber;
	public ?string $extBranchId = null;
	public int $workplaceNumber;
	/** @var int[] */
	public $extraWorkplaceNumbers = array();
	public YearNumber $cashCountNumber;
	public int $versionNumber;
	public int $employeeNumber;
	public int $countingEmployeeNumber;
	public ?bool $isFinalized = null;
	public ?string $shiftFirstReceiptId = null;
	public Transaction $shiftFirstTransaction;
	public ?string $shiftLastReceiptId = null;
	public Transaction $shiftLastTransaction;
	/** @var CashCountExtraWorkplace[] */
	public $cashCountExtraWorkplaceList = null;
	/** @var CashCountLine[] */
	public $cashCountLineList = array();
	public function __construct() {
		$this->financialDate = new \DateTime();
		$this->entryTimestamp = new \DateTime();
		$this->cashCountNumber = new YearNumber();
		$this->shiftFirstTransaction = new Transaction();
		$this->shiftLastTransaction = new Transaction();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cashCountId', null, $this->cashCountId);
		if ($this->cashCountString !== null) $gen->out->writeElementNs(self::TNS, 'cashCountString', null, $this->cashCountString);
		(SoapMplusDate::fromDateTime($this->financialDate))->write($gen, 'financialDate');
		(SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		$gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
		foreach ($this->extraWorkplaceNumbers as $elem) $gen->writeInt('extraWorkplaceNumbers', $elem);
		$this->cashCountNumber->write($gen, 'cashCountNumber');
		$gen->writeInt('versionNumber', $this->versionNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->writeInt('countingEmployeeNumber', $this->countingEmployeeNumber);
		if ($this->isFinalized !== null) $gen->writeBool('isFinalized', $this->isFinalized);
		if ($this->shiftFirstReceiptId !== null) $gen->out->writeElementNs(self::TNS, 'shiftFirstReceiptId', null, $this->shiftFirstReceiptId);
		$this->shiftFirstTransaction->write($gen, 'shiftFirstTransaction');
		if ($this->shiftLastReceiptId !== null) $gen->out->writeElementNs(self::TNS, 'shiftLastReceiptId', null, $this->shiftLastReceiptId);
		$this->shiftLastTransaction->write($gen, 'shiftLastTransaction');
		if ($this->cashCountExtraWorkplaceList !== null) {
$tmp_cashCountExtraWorkplaceList = new CashCountExtraWorkplaceList($this->cashCountExtraWorkplaceList);
$tmp_cashCountExtraWorkplaceList->write($gen, 'cashCountExtraWorkplaceList');
}
		$tmp_cashCountLineList = new CashCountLineList($this->cashCountLineList);
$tmp_cashCountLineList->write($gen, 'cashCountLineList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashCountList extends SoapObject {
	/** @var CashCount[] */
	public $cashCount = array();
	public function __construct($list = array()) { $this->cashCount = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->cashCount as $elem) $elem->write($gen, 'cashCount');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Journal extends SoapObject {
	public \DateTime $financialDate;
	/** @var string[] */
	public $journalFilterList = null;
	public int $branchNumber;
	public ?string $extBranchId = null;
	/** @var TurnoverGroup[] */
	public $turnoverGroupList = null;
	/** @var Payment[] */
	public $paymentList = null;
	/** @var VatGroup[] */
	public $vatGroupList = null;
	public function __construct() {
		$this->financialDate = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		(SoapMplusDate::fromDateTime($this->financialDate))->write($gen, 'financialDate');
		if ($this->journalFilterList !== null) {
$tmp_journalFilterList = new JournalFilterList($this->journalFilterList);
$tmp_journalFilterList->write($gen, 'journalFilterList');
}
		$gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		if ($this->turnoverGroupList !== null) {
$tmp_turnoverGroupList = new TurnoverGroupList($this->turnoverGroupList);
$tmp_turnoverGroupList->write($gen, 'turnoverGroupList');
}
		if ($this->paymentList !== null) {
$tmp_paymentList = new PaymentList($this->paymentList);
$tmp_paymentList->write($gen, 'paymentList');
}
		if ($this->vatGroupList !== null) {
$tmp_vatGroupList = new VatGroupList($this->vatGroupList);
$tmp_vatGroupList->write($gen, 'vatGroupList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class JournalList extends SoapObject {
	/** @var Journal[] */
	public $journal = array();
	public function __construct($list = array()) { $this->journal = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->journal as $elem) $elem->write($gen, 'journal');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetJournalsRequest extends SoapObject {
	public \DateTime $fromFinancialDate;
	public \DateTime $throughFinancialDate;
	/** @var int[] */
	public $branchNumbers = array();
	/** @var string[] */
	public $journalFilterList = null;
	public ?string $reference = null;
	public function __construct() {
		$this->fromFinancialDate = new \DateTime();
		$this->throughFinancialDate = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		(SoapMplusDate::fromDateTime($this->fromFinancialDate))->write($gen, 'fromFinancialDate');
		(SoapMplusDate::fromDateTime($this->throughFinancialDate))->write($gen, 'throughFinancialDate');
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		if ($this->journalFilterList !== null) {
$tmp_journalFilterList = new JournalFilterList($this->journalFilterList);
$tmp_journalFilterList->write($gen, 'journalFilterList');
}
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class FinancialGroup extends SoapObject {
	public string $financialGroupType;
	public string $financialGroupSource;
	public ?int $financialGroupNumber = null;
	public ?string $financialGroupId = null;
	public string $financialGroupName;
	public int $accountNumber;
	public ?int $branchNumber = null;
	public ?string $extBranchId = null;
	/** @var int[] */
	public $workplaceNumbers = array();
	public ?\DateTime $fromFinancialDate = null;
	public ?\DateTime $throughFinancialDate = null;
	public ?\DateTime $fromFinancialDateTime = null;
	public ?\DateTime $throughFinancialDateTime = null;
	public ?bool $financialPeriodClosed = null;
	public ?BigDecimal $quantity = null;
	public ?BigDecimal $inclAmount = null;
	public ?BigDecimal $exclAmount = null;
	public ?BigDecimal $purchaseAmount = null;
	/** @var VatGroup[] */
	public $vatGroupList = null;
	public ?int $purchaseAccountNumber = null;
	public ?int $stockAccountNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'financialGroupType', null, $this->financialGroupType);
		$gen->out->writeElementNs(self::TNS, 'financialGroupSource', null, $this->financialGroupSource);
		if ($this->financialGroupNumber !== null) $gen->writeInt('financialGroupNumber', $this->financialGroupNumber);
		if ($this->financialGroupId !== null) $gen->out->writeElementNs(self::TNS, 'financialGroupId', null, $this->financialGroupId);
		$gen->out->writeElementNs(self::TNS, 'financialGroupName', null, $this->financialGroupName);
		$gen->writeInt('accountNumber', $this->accountNumber);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		foreach ($this->workplaceNumbers as $elem) $gen->writeInt('workplaceNumbers', $elem);
		if ($this->fromFinancialDate !== null) (SoapMplusDate::fromDateTime($this->fromFinancialDate))->write($gen, 'fromFinancialDate');
		if ($this->throughFinancialDate !== null) (SoapMplusDate::fromDateTime($this->throughFinancialDate))->write($gen, 'throughFinancialDate');
		if ($this->fromFinancialDateTime !== null) (SoapMplusDateTime::fromDateTime($this->fromFinancialDateTime))->write($gen, 'fromFinancialDateTime');
		if ($this->throughFinancialDateTime !== null) (SoapMplusDateTime::fromDateTime($this->throughFinancialDateTime))->write($gen, 'throughFinancialDateTime');
		if ($this->financialPeriodClosed !== null) $gen->writeBool('financialPeriodClosed', $this->financialPeriodClosed);
		if ($this->quantity !== null) $gen->writeValueAndScale('quantity', 'decimalPlaces', $this->quantity, 2);
		if ($this->inclAmount !== null) $gen->writeValueAndScale('inclAmount', '', $this->inclAmount, 2);
		if ($this->exclAmount !== null) $gen->writeValueAndScale('exclAmount', '', $this->exclAmount, 2);
		if ($this->purchaseAmount !== null) $gen->writeValueAndScale('purchaseAmount', '', $this->purchaseAmount, 2);
		if ($this->vatGroupList !== null) {
$tmp_vatGroupList = new VatGroupList($this->vatGroupList);
$tmp_vatGroupList->write($gen, 'vatGroupList');
}
		if ($this->purchaseAccountNumber !== null) $gen->writeInt('purchaseAccountNumber', $this->purchaseAccountNumber);
		if ($this->stockAccountNumber !== null) $gen->writeInt('stockAccountNumber', $this->stockAccountNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class FinancialGroupList extends SoapObject {
	/** @var FinancialGroup[] */
	public $financialGroup = array();
	public function __construct($list = array()) { $this->financialGroup = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->financialGroup as $elem) $elem->write($gen, 'financialGroup');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetFinancialJournalRequest extends SoapObject {
	public \DateTime $fromFinancialDate;
	public \DateTime $throughFinancialDate;
	public ?string $reference = null;
	public function __construct() {
		$this->fromFinancialDate = new \DateTime();
		$this->throughFinancialDate = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		(SoapMplusDate::fromDateTime($this->fromFinancialDate))->write($gen, 'fromFinancialDate');
		(SoapMplusDate::fromDateTime($this->throughFinancialDate))->write($gen, 'throughFinancialDate');
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetFinancialJournalByCashCountRequest extends SoapObject {
	public string $cashCountId;
	public ?string $reference = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cashCountId', null, $this->cashCountId);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCashCountListRequest extends SoapObject {
	public ?\DateTime $fromFinancialDate = null;
	public ?\DateTime $throughFinancialDate = null;
	public ?WorkplaceYearNumber $sinceCashCount = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->fromFinancialDate !== null) (SoapMplusDate::fromDateTime($this->fromFinancialDate))->write($gen, 'fromFinancialDate');
		if ($this->throughFinancialDate !== null) (SoapMplusDate::fromDateTime($this->throughFinancialDate))->write($gen, 'throughFinancialDate');
		if ($this->sinceCashCount !== null) $this->sinceCashCount->write($gen, 'sinceCashCount');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashDrawerCountLineDenomination extends SoapObject {
	public int $denomination;
	public int $denominationDecimalPlaces;
	public int $countedAmount;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('denomination', $this->denomination);
		$gen->writeInt('denominationDecimalPlaces', $this->denominationDecimalPlaces);
		$gen->writeInt('countedAmount', $this->countedAmount);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashDrawerCountLineDenominationList extends SoapObject {
	/** @var CashDrawerCountLineDenomination[] */
	public $cashDrawerCountLineDenomination = array();
	public function __construct($list = array()) { $this->cashDrawerCountLineDenomination = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->cashDrawerCountLineDenomination as $elem) $elem->write($gen, 'cashDrawerCountLineDenomination');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashDrawerCountLine extends SoapObject {
	public int $articleNumber;
	public BigDecimal $exchangeRateBuyPrice;
	public BigDecimal $exchangeRateSellPrice;
	public BigDecimal $actualAmount;
	public BigDecimal $countedAmount;
	public ?int $differenceMargin = null;
	/** @var CashDrawerCountLineDenomination[] */
	public $cashDrawerCountLineDenominationList = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeValueAndScale('exchangeRateBuyPrice', 'exchangeRateBuyPriceDecimalPlaces', $this->exchangeRateBuyPrice, 2);
		$gen->writeValueAndScale('exchangeRateSellPrice', 'exchangeRateSellPriceDecimalPlaces', $this->exchangeRateSellPrice, 2);
		$gen->writeValueAndScale('actualAmount', 'actualAmountDecimalPlaces', $this->actualAmount, 2);
		$gen->writeValueAndScale('countedAmount', 'countedAmountDecimalPlaces', $this->countedAmount, 2);
		if ($this->differenceMargin !== null) $gen->writeInt('differenceMargin', $this->differenceMargin);
		if ($this->cashDrawerCountLineDenominationList !== null) {
$tmp_cashDrawerCountLineDenominationList = new CashDrawerCountLineDenominationList($this->cashDrawerCountLineDenominationList);
$tmp_cashDrawerCountLineDenominationList->write($gen, 'cashDrawerCountLineDenominationList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashDrawerCountLineList extends SoapObject {
	/** @var CashDrawerCountLine[] */
	public $cashDrawerCountLine = array();
	public function __construct($list = array()) { $this->cashDrawerCountLine = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->cashDrawerCountLine as $elem) $elem->write($gen, 'cashDrawerCountLine');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashDrawerCount extends SoapObject {
	public string $cashDrawerCountId;
	public bool $isCheckingCount;
	public int $countingEmployeeNumber;
	public \DateTime $timestamp;
	public ?string $comment = null;
	public ?YearNumber $correctionNumber = null;
	public bool $isApproved;
	/** @var CashDrawerCountLine[] */
	public $cashDrawerCountLineList = array();
	public function __construct() {
		$this->timestamp = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cashDrawerCountId', null, $this->cashDrawerCountId);
		$gen->writeBool('isCheckingCount', $this->isCheckingCount);
		$gen->writeInt('countingEmployeeNumber', $this->countingEmployeeNumber);
		(SoapMplusDateTime::fromDateTime($this->timestamp))->write($gen, 'timestamp');
		if ($this->comment !== null) $gen->out->writeElementNs(self::TNS, 'comment', null, $this->comment);
		if ($this->correctionNumber !== null) $this->correctionNumber->write($gen, 'correctionNumber');
		$gen->writeBool('isApproved', $this->isApproved);
		$tmp_cashDrawerCountLineList = new CashDrawerCountLineList($this->cashDrawerCountLineList);
$tmp_cashDrawerCountLineList->write($gen, 'cashDrawerCountLineList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashDrawerCountList extends SoapObject {
	/** @var CashDrawerCount[] */
	public $cashDrawerCount = array();
	public function __construct($list = array()) { $this->cashDrawerCount = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->cashDrawerCount as $elem) $elem->write($gen, 'cashDrawerCount');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashDrawerBalancing extends SoapObject {
	public string $cashDrawerBalancingId;
	public string $cashDrawerBalancingString;
	public int $syncMarker;
	public \DateTime $financialDate;
	public int $financialDateSequenceNumber;
	public \DateTime $timestamp;
	public int $cashDrawerBranchNumber;
	public int $cashDrawerEmployeeNumber;
	public bool $isApproved;
	/** @var CashDrawerCount[] */
	public $cashDrawerCountList = array();
	public function __construct() {
		$this->financialDate = new \DateTime();
		$this->timestamp = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cashDrawerBalancingId', null, $this->cashDrawerBalancingId);
		$gen->out->writeElementNs(self::TNS, 'cashDrawerBalancingString', null, $this->cashDrawerBalancingString);
		$gen->writeInt('syncMarker', $this->syncMarker);
		(SoapMplusDate::fromDateTime($this->financialDate))->write($gen, 'financialDate');
		$gen->writeInt('financialDateSequenceNumber', $this->financialDateSequenceNumber);
		(SoapMplusDateTime::fromDateTime($this->timestamp))->write($gen, 'timestamp');
		$gen->writeInt('cashDrawerBranchNumber', $this->cashDrawerBranchNumber);
		$gen->writeInt('cashDrawerEmployeeNumber', $this->cashDrawerEmployeeNumber);
		$gen->writeBool('isApproved', $this->isApproved);
		$tmp_cashDrawerCountList = new CashDrawerCountList($this->cashDrawerCountList);
$tmp_cashDrawerCountList->write($gen, 'cashDrawerCountList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashDrawerBalancingList extends SoapObject {
	/** @var CashDrawerBalancing[] */
	public $cashDrawerBalancing = array();
	public function __construct($list = array()) { $this->cashDrawerBalancing = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->cashDrawerBalancing as $elem) $elem->write($gen, 'cashDrawerBalancing');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCashDrawerBalancingListRequest extends SoapObject {
	public ?\DateTime $fromFinancialDate = null;
	public ?\DateTime $throughFinancialDate = null;
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->fromFinancialDate !== null) (SoapMplusDate::fromDateTime($this->fromFinancialDate))->write($gen, 'fromFinancialDate');
		if ($this->throughFinancialDate !== null) (SoapMplusDate::fromDateTime($this->throughFinancialDate))->write($gen, 'throughFinancialDate');
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetTurnoverGroupsRequest extends SoapObject {
	public ?bool $onlyActive = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->onlyActive !== null) $gen->writeBool('onlyActive', $this->onlyActive);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateTurnoverGroupsRequest extends SoapObject {
	/** @var TurnoverGroup[] */
	public $turnoverGroupList = array();
	public function __construct($list = array()) { $this->turnoverGroupList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_turnoverGroupList = new TurnoverGroupList($this->turnoverGroupList);
$tmp_turnoverGroupList->write($gen, 'turnoverGroupList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class NutritionalCharacteristic extends SoapObject {
	public ?int $id = null;
	public ?string $name = null;
	public ?string $abbreviation = null;
	public ?string $type = null;
	public ?bool $isPresent = null;
	public ?string $presence = null;
	public ?int $sourceNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->id !== null) $gen->writeInt('id', $this->id);
		if ($this->name !== null) $gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		if ($this->abbreviation !== null) $gen->out->writeElementNs(self::TNS, 'abbreviation', null, $this->abbreviation);
		if ($this->type !== null) $gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		if ($this->isPresent !== null) $gen->writeBool('isPresent', $this->isPresent);
		if ($this->presence !== null) $gen->out->writeElementNs(self::TNS, 'presence', null, $this->presence);
		if ($this->sourceNumber !== null) $gen->writeInt('sourceNumber', $this->sourceNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class AllergenList extends SoapObject {
	/** @var NutritionalCharacteristic[] */
	public $allergen = array();
	public function __construct($list = array()) { $this->allergen = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->allergen as $elem) $elem->write($gen, 'allergen');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DietRestrictionList extends SoapObject {
	/** @var NutritionalCharacteristic[] */
	public $dietRestriction = array();
	public function __construct($list = array()) { $this->dietRestriction = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->dietRestriction as $elem) $elem->write($gen, 'dietRestriction');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class NutritionalCharacteristics extends SoapObject {
	/** @var NutritionalCharacteristic[] */
	public $allergenList = null;
	/** @var NutritionalCharacteristic[] */
	public $dietRestrictionList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->allergenList !== null) {
$tmp_allergenList = new AllergenList($this->allergenList);
$tmp_allergenList->write($gen, 'allergenList');
}
		if ($this->dietRestrictionList !== null) {
$tmp_dietRestrictionList = new DietRestrictionList($this->dietRestrictionList);
$tmp_dietRestrictionList->write($gen, 'dietRestrictionList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LinkedArticle extends SoapObject {
	public int $articleNumber;
	public BigDecimal $quantity;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeValueAndScale('quantity', 'decimalPlaces', $this->quantity, 2);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LinkedArticleList extends SoapObject {
	/** @var LinkedArticle[] */
	public $linkedArticle = array();
	public function __construct($list = array()) { $this->linkedArticle = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->linkedArticle as $elem) $elem->write($gen, 'linkedArticle');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Barcode extends SoapObject {
	public ?int $barcodeId = null;
	public ?string $description = null;
	public ?string $barcode = null;
	public ?\DateTime $barcodeDate = null;
	public ?BigDecimal $quantity = null;
	public ?string $contentUnit = null;
	public ?BigDecimal $contentQuantity = null;
	public ?BigDecimal $purchasePrice = null;
	public ?BigDecimal $priceIncl = null;
	public ?BigDecimal $priceExcl = null;
	public ?bool $isCurrent = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->barcodeId !== null) $gen->writeInt('barcodeId', $this->barcodeId);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->barcode !== null) $gen->out->writeElementNs(self::TNS, 'barcode', null, $this->barcode);
		if ($this->barcodeDate !== null) (SoapMplusDate::fromDateTime($this->barcodeDate))->write($gen, 'barcodeDate');
		if ($this->quantity !== null) $gen->writeValueAndScale('quantity', 'decimalPlaces', $this->quantity, 2);
		if ($this->contentUnit !== null) $gen->out->writeElementNs(self::TNS, 'contentUnit', null, $this->contentUnit);
		if ($this->contentQuantity !== null) $gen->writeValueAndScale('contentQuantity', 'contentQuantityDecimalPlaces', $this->contentQuantity, 2);
		if ($this->purchasePrice !== null) $gen->writeValueAndScale('purchasePrice', '', $this->purchasePrice, 2);
		if ($this->priceIncl !== null) $gen->writeValueAndScale('priceIncl', '', $this->priceIncl, 2);
		if ($this->priceExcl !== null) $gen->writeValueAndScale('priceExcl', '', $this->priceExcl, 2);
		if ($this->isCurrent !== null) $gen->writeBool('isCurrent', $this->isCurrent);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BarcodeList extends SoapObject {
	/** @var Barcode[] */
	public $barcode = array();
	public function __construct($list = array()) { $this->barcode = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->barcode as $elem) $elem->write($gen, 'barcode');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PreparationMethod extends SoapObject {
	public ?int $articleNumber = null;
	public string $description;
	public ?BigDecimal $priceIncl = null;
	public ?BigDecimal $priceExcl = null;
	public ?int $vatCode = null;
	public ?int $vatPercentage = null;
	public ?int $vatCodeAlternative = null;
	public ?int $vatPercentageAlternative = null;
	public ?int $syncMarker = null;
	public bool $closeAfterSelection;
	public ?int $groupNumber = null;
	public ?string $groupName = null;
	public bool $maxOneSelection;
	public bool $selectionRequired;
	public ?NutritionalCharacteristics $nutritionalCharacteristics = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->priceIncl !== null) $gen->writeValueAndScale('priceIncl', '', $this->priceIncl, 2);
		if ($this->priceExcl !== null) $gen->writeValueAndScale('priceExcl', '', $this->priceExcl, 2);
		if ($this->vatCode !== null) $gen->writeInt('vatCode', $this->vatCode);
		if ($this->vatPercentage !== null) $gen->writeInt('vatPercentage', $this->vatPercentage);
		if ($this->vatCodeAlternative !== null) $gen->writeInt('vatCodeAlternative', $this->vatCodeAlternative);
		if ($this->vatPercentageAlternative !== null) $gen->writeInt('vatPercentageAlternative', $this->vatPercentageAlternative);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		$gen->writeBool('closeAfterSelection', $this->closeAfterSelection);
		if ($this->groupNumber !== null) $gen->writeInt('groupNumber', $this->groupNumber);
		if ($this->groupName !== null) $gen->out->writeElementNs(self::TNS, 'groupName', null, $this->groupName);
		$gen->writeBool('maxOneSelection', $this->maxOneSelection);
		$gen->writeBool('selectionRequired', $this->selectionRequired);
		if ($this->nutritionalCharacteristics !== null) $this->nutritionalCharacteristics->write($gen, 'nutritionalCharacteristics');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PreparationMethodList extends SoapObject {
	/** @var PreparationMethod[] */
	public $preparationMethod = array();
	public function __construct($list = array()) { $this->preparationMethod = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->preparationMethod as $elem) $elem->write($gen, 'preparationMethod');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ComponentArticle extends SoapObject {
	public ?int $articleNumber = null;
	public ?BigDecimal $quantity = null;
	public ?string $description = null;
	public ?string $invoiceText = null;
	public ?string $receiptText = null;
	public ?string $displayText = null;
	public ?string $barcode = null;
	public ?\DateTime $barcodeDate = null;
	public ?string $contentUnit = null;
	public ?BigDecimal $contentQuantity = null;
	public ?int $turnoverGroup = null;
	public ?int $vatCode = null;
	public ?int $vatPercentage = null;
	public ?int $vatCodeAlternative = null;
	public ?int $vatPercentageAlternative = null;
	public ?BigDecimal $purchasePrice = null;
	public ?BigDecimal $priceIncl = null;
	public ?BigDecimal $priceExcl = null;
	/** @var LinkedArticle[] */
	public $linkedArticleList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->quantity !== null) $gen->writeValueAndScale('quantity', 'decimalPlaces', $this->quantity, 2);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->invoiceText !== null) $gen->out->writeElementNs(self::TNS, 'invoiceText', null, $this->invoiceText);
		if ($this->receiptText !== null) $gen->out->writeElementNs(self::TNS, 'receiptText', null, $this->receiptText);
		if ($this->displayText !== null) $gen->out->writeElementNs(self::TNS, 'displayText', null, $this->displayText);
		if ($this->barcode !== null) $gen->out->writeElementNs(self::TNS, 'barcode', null, $this->barcode);
		if ($this->barcodeDate !== null) (SoapMplusDate::fromDateTime($this->barcodeDate))->write($gen, 'barcodeDate');
		if ($this->contentUnit !== null) $gen->out->writeElementNs(self::TNS, 'contentUnit', null, $this->contentUnit);
		if ($this->contentQuantity !== null) $gen->writeValueAndScale('contentQuantity', 'contentQuantityDecimalPlaces', $this->contentQuantity, 2);
		if ($this->turnoverGroup !== null) $gen->writeInt('turnoverGroup', $this->turnoverGroup);
		if ($this->vatCode !== null) $gen->writeInt('vatCode', $this->vatCode);
		if ($this->vatPercentage !== null) $gen->writeInt('vatPercentage', $this->vatPercentage);
		if ($this->vatCodeAlternative !== null) $gen->writeInt('vatCodeAlternative', $this->vatCodeAlternative);
		if ($this->vatPercentageAlternative !== null) $gen->writeInt('vatPercentageAlternative', $this->vatPercentageAlternative);
		if ($this->purchasePrice !== null) $gen->writeValueAndScale('purchasePrice', '', $this->purchasePrice, 2);
		if ($this->priceIncl !== null) $gen->writeValueAndScale('priceIncl', '', $this->priceIncl, 2);
		if ($this->priceExcl !== null) $gen->writeValueAndScale('priceExcl', '', $this->priceExcl, 2);
		if ($this->linkedArticleList !== null) {
$tmp_linkedArticleList = new LinkedArticleList($this->linkedArticleList);
$tmp_linkedArticleList->write($gen, 'linkedArticleList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ComponentArticleList extends SoapObject {
	/** @var ComponentArticle[] */
	public $componentArticle = array();
	public function __construct($list = array()) { $this->componentArticle = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->componentArticle as $elem) $elem->write($gen, 'componentArticle');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Article extends SoapObject {
	public ?int $articleNumber = null;
	public ?string $extArticleId = null;
	public ?string $pluNumber = null;
	public ?int $syncMarker = null;
	public ?\DateTime $changeTimestamp = null;
	public ?\DateTime $createTimestamp = null;
	public ?bool $active = null;
	public ?string $description = null;
	public ?string $colour = null;
	public ?int $colourSequenceNumber = null;
	public ?string $size = null;
	public ?int $sizeSequenceNumber = null;
	public ?string $invoiceText = null;
	public ?string $receiptText = null;
	public ?string $displayText = null;
	public ?string $barcode = null;
	public ?\DateTime $barcodeDate = null;
	public ?string $contentUnit = null;
	public ?BigDecimal $contentQuantity = null;
	public ?string $brandName = null;
	public ?string $extraText = null;
	public ?int $turnoverGroup = null;
	public ?int $vatCode = null;
	public ?int $vatPercentage = null;
	public ?int $vatCodeAlternative = null;
	public ?int $vatPercentageAlternative = null;
	public ?BigDecimal $averagePurchasePrice = null;
	public ?BigDecimal $purchasePrice = null;
	public ?BigDecimal $priceIncl = null;
	public ?BigDecimal $priceExcl = null;
	public ?string $siUnit = null;
	public ?string $unit = null;
	public ?BigDecimal $orderQuantityValue = null;
	public ?int $supplierRelationNumber = null;
	public ?string $supplierRelationName = null;
	public ?string $supplierArticleNumber = null;
	public ?bool $webshop = null;
	public ?int $categoryId = null;
	/** @var int[] */
	public $categoryIds = null;
	public ?bool $stockArticle = null;
	public ?int $articleDiscountGroupNumber = null;
	public ?string $articleDiscountGroupName = null;
	public ?Course $course = null;
	public ?string $specialPrice = null;
	public ?bool $showPreparationMethodsDirectly = null;
	public ?bool $showPreparationMethodsPerGroup = null;
	public ?BigDecimal $exchangeRateBuyPrice = null;
	public ?BigDecimal $exchangeRateSellPrice = null;
	public ?int $exchangeRateMultiplier = null;
	/** @var Image[] */
	public $imageList = null;
	/** @var CustomField[] */
	public $customFieldList = null;
	/** @var SalesPrice[] */
	public $salesPriceList = null;
	/** @var PriceGroup[] */
	public $priceGroupList = null;
	/** @var PreparationMethod[] */
	public $preparationMethodList = null;
	/** @var ComponentArticle[] */
	public $componentArticleList = null;
	/** @var LinkedArticle[] */
	public $linkedArticleList = null;
	/** @var Barcode[] */
	public $barcodeList = null;
	/** @var RelationArticleDiscount[] */
	public $relationArticleDiscountList = null;
	public ?string $askFor = null;
	public ?NutritionalCharacteristics $nutritionalCharacteristics = null;
	public ?bool $discontinued = null;
	public ?string $stockSiUnit = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->extArticleId !== null) $gen->out->writeElementNs(self::TNS, 'extArticleId', null, $this->extArticleId);
		if ($this->pluNumber !== null) $gen->out->writeElementNs(self::TNS, 'pluNumber', null, $this->pluNumber);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->changeTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->changeTimestamp))->write($gen, 'changeTimestamp');
		if ($this->createTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->createTimestamp))->write($gen, 'createTimestamp');
		if ($this->active !== null) $gen->writeBool('active', $this->active);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->colour !== null) $gen->out->writeElementNs(self::TNS, 'colour', null, $this->colour);
		if ($this->colourSequenceNumber !== null) $gen->writeInt('colourSequenceNumber', $this->colourSequenceNumber);
		if ($this->size !== null) $gen->out->writeElementNs(self::TNS, 'size', null, $this->size);
		if ($this->sizeSequenceNumber !== null) $gen->writeInt('sizeSequenceNumber', $this->sizeSequenceNumber);
		if ($this->invoiceText !== null) $gen->out->writeElementNs(self::TNS, 'invoiceText', null, $this->invoiceText);
		if ($this->receiptText !== null) $gen->out->writeElementNs(self::TNS, 'receiptText', null, $this->receiptText);
		if ($this->displayText !== null) $gen->out->writeElementNs(self::TNS, 'displayText', null, $this->displayText);
		if ($this->barcode !== null) $gen->out->writeElementNs(self::TNS, 'barcode', null, $this->barcode);
		if ($this->barcodeDate !== null) (SoapMplusDate::fromDateTime($this->barcodeDate))->write($gen, 'barcodeDate');
		if ($this->contentUnit !== null) $gen->out->writeElementNs(self::TNS, 'contentUnit', null, $this->contentUnit);
		if ($this->contentQuantity !== null) $gen->writeValueAndScale('contentQuantity', 'contentQuantityDecimalPlaces', $this->contentQuantity, 2);
		if ($this->brandName !== null) $gen->out->writeElementNs(self::TNS, 'brandName', null, $this->brandName);
		if ($this->extraText !== null) $gen->out->writeElementNs(self::TNS, 'extraText', null, $this->extraText);
		if ($this->turnoverGroup !== null) $gen->writeInt('turnoverGroup', $this->turnoverGroup);
		if ($this->vatCode !== null) $gen->writeInt('vatCode', $this->vatCode);
		if ($this->vatPercentage !== null) $gen->writeInt('vatPercentage', $this->vatPercentage);
		if ($this->vatCodeAlternative !== null) $gen->writeInt('vatCodeAlternative', $this->vatCodeAlternative);
		if ($this->vatPercentageAlternative !== null) $gen->writeInt('vatPercentageAlternative', $this->vatPercentageAlternative);
		if ($this->averagePurchasePrice !== null) $gen->writeValueAndScale('averagePurchasePrice', '', $this->averagePurchasePrice, 2);
		if ($this->purchasePrice !== null) $gen->writeValueAndScale('purchasePrice', '', $this->purchasePrice, 2);
		if ($this->priceIncl !== null) $gen->writeValueAndScale('priceIncl', '', $this->priceIncl, 2);
		if ($this->priceExcl !== null) $gen->writeValueAndScale('priceExcl', '', $this->priceExcl, 2);
		if ($this->siUnit !== null) $gen->out->writeElementNs(self::TNS, 'siUnit', null, $this->siUnit);
		if ($this->unit !== null) $gen->out->writeElementNs(self::TNS, 'unit', null, $this->unit);
		if ($this->orderQuantityValue !== null) $gen->writeValueAndScale('orderQuantityValue', 'orderQuantityDecimalPlaces', $this->orderQuantityValue, 2);
		if ($this->supplierRelationNumber !== null) $gen->writeInt('supplierRelationNumber', $this->supplierRelationNumber);
		if ($this->supplierRelationName !== null) $gen->out->writeElementNs(self::TNS, 'supplierRelationName', null, $this->supplierRelationName);
		if ($this->supplierArticleNumber !== null) $gen->out->writeElementNs(self::TNS, 'supplierArticleNumber', null, $this->supplierArticleNumber);
		if ($this->webshop !== null) $gen->writeBool('webshop', $this->webshop);
		if ($this->categoryId !== null) $gen->writeInt('categoryId', $this->categoryId);
		if ($this->categoryIds !== null) {
$tmp_categoryIds = new CategoryIdSet($this->categoryIds);
$tmp_categoryIds->write($gen, 'categoryIds');
}
		if ($this->stockArticle !== null) $gen->writeBool('stockArticle', $this->stockArticle);
		if ($this->articleDiscountGroupNumber !== null) $gen->writeInt('articleDiscountGroupNumber', $this->articleDiscountGroupNumber);
		if ($this->articleDiscountGroupName !== null) $gen->out->writeElementNs(self::TNS, 'articleDiscountGroupName', null, $this->articleDiscountGroupName);
		if ($this->course !== null) $this->course->write($gen, 'course');
		if ($this->specialPrice !== null) $gen->out->writeElementNs(self::TNS, 'specialPrice', null, $this->specialPrice);
		if ($this->showPreparationMethodsDirectly !== null) $gen->writeBool('showPreparationMethodsDirectly', $this->showPreparationMethodsDirectly);
		if ($this->showPreparationMethodsPerGroup !== null) $gen->writeBool('showPreparationMethodsPerGroup', $this->showPreparationMethodsPerGroup);
		if ($this->exchangeRateBuyPrice !== null) $gen->writeValueAndScale('exchangeRateBuyPrice', 'exchangeRateBuyPriceDecimalPlaces', $this->exchangeRateBuyPrice, 2);
		if ($this->exchangeRateSellPrice !== null) $gen->writeValueAndScale('exchangeRateSellPrice', 'exchangeRateSellPriceDecimalPlaces', $this->exchangeRateSellPrice, 2);
		if ($this->exchangeRateMultiplier !== null) $gen->writeInt('exchangeRateMultiplier', $this->exchangeRateMultiplier);
		if ($this->imageList !== null) {
$tmp_imageList = new ImageList($this->imageList);
$tmp_imageList->write($gen, 'imageList');
}
		if ($this->customFieldList !== null) {
$tmp_customFieldList = new CustomFieldList($this->customFieldList);
$tmp_customFieldList->write($gen, 'customFieldList');
}
		if ($this->salesPriceList !== null) {
$tmp_salesPriceList = new SalesPriceList($this->salesPriceList);
$tmp_salesPriceList->write($gen, 'salesPriceList');
}
		if ($this->priceGroupList !== null) {
$tmp_priceGroupList = new PriceGroupList($this->priceGroupList);
$tmp_priceGroupList->write($gen, 'priceGroupList');
}
		if ($this->preparationMethodList !== null) {
$tmp_preparationMethodList = new PreparationMethodList($this->preparationMethodList);
$tmp_preparationMethodList->write($gen, 'preparationMethodList');
}
		if ($this->componentArticleList !== null) {
$tmp_componentArticleList = new ComponentArticleList($this->componentArticleList);
$tmp_componentArticleList->write($gen, 'componentArticleList');
}
		if ($this->linkedArticleList !== null) {
$tmp_linkedArticleList = new LinkedArticleList($this->linkedArticleList);
$tmp_linkedArticleList->write($gen, 'linkedArticleList');
}
		if ($this->barcodeList !== null) {
$tmp_barcodeList = new BarcodeList($this->barcodeList);
$tmp_barcodeList->write($gen, 'barcodeList');
}
		if ($this->relationArticleDiscountList !== null) {
$tmp_relationArticleDiscountList = new RelationArticleDiscountList($this->relationArticleDiscountList);
$tmp_relationArticleDiscountList->write($gen, 'relationArticleDiscountList');
}
		if ($this->askFor !== null) $gen->out->writeElementNs(self::TNS, 'askFor', null, $this->askFor);
		if ($this->nutritionalCharacteristics !== null) $this->nutritionalCharacteristics->write($gen, 'nutritionalCharacteristics');
		if ($this->discontinued !== null) $gen->writeBool('discontinued', $this->discontinued);
		if ($this->stockSiUnit !== null) $gen->out->writeElementNs(self::TNS, 'stockSiUnit', null, $this->stockSiUnit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleList extends SoapObject {
	/** @var Article[] */
	public $article = array();
	public function __construct($list = array()) { $this->article = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->article as $elem) $elem->write($gen, 'article');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SortOrderGroupList extends SoapObject {
	/** @var SortOrderGroup[] */
	public $sortOrderGroup = array();
	public function __construct($list = array()) { $this->sortOrderGroup = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->sortOrderGroup as $elem) $elem->write($gen, 'sortOrderGroup');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SortOrderGroup extends SoapObject {
	public int $groupNumber;
	public int $sortOrder;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('groupNumber', $this->groupNumber);
		$gen->writeInt('sortOrder', $this->sortOrder);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Product extends SoapObject {
	public ?int $productNumber = null;
	public ?int $syncMarker = null;
	public ?string $description = null;
	public ?string $extraText = null;
	/** @var Article[] */
	public $articleList = null;
	/** @var int[] */
	public $groupNumbers = array();
	/** @var SortOrderGroup[] */
	public $sortOrderGroupList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->productNumber !== null) $gen->writeInt('productNumber', $this->productNumber);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->extraText !== null) $gen->out->writeElementNs(self::TNS, 'extraText', null, $this->extraText);
		if ($this->articleList !== null) {
$tmp_articleList = new ArticleList($this->articleList);
$tmp_articleList->write($gen, 'articleList');
}
		foreach ($this->groupNumbers as $elem) $gen->writeInt('groupNumbers', $elem);
		if ($this->sortOrderGroupList !== null) {
$tmp_sortOrderGroupList = new SortOrderGroupList($this->sortOrderGroupList);
$tmp_sortOrderGroupList->write($gen, 'sortOrderGroupList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ProductList extends SoapObject {
	/** @var Product[] */
	public $product = array();
	public function __construct($list = array()) { $this->product = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->product as $elem) $elem->write($gen, 'product');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetProductsRequest extends SoapObject {
	/** @var int[] */
	public $articleNumbers = array();
	/** @var int[] */
	public $groupNumbers = array();
	/** @var Text[] */
	public $pluNumbers = array();
	public ?bool $onlyWebshop = null;
	public ?bool $onlyActive = null;
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public ?bool $syncMarkerExcludePreparationMethods = null;
	public ?\DateTime $changedSinceTimestamp = null;
	public ?int $changedSinceBranchNumber = null;
	public ?bool $includeAllArticlesOfSelectedProducts = null;
	/** @var int[] */
	public $productNumbers = array();
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
		foreach ($this->groupNumbers as $elem) $gen->writeInt('groupNumbers', $elem);
		$tmp_pluNumbers = new TextList($this->pluNumbers);
$tmp_pluNumbers->write($gen, 'pluNumbers');

		if ($this->onlyWebshop !== null) $gen->writeBool('onlyWebshop', $this->onlyWebshop);
		if ($this->onlyActive !== null) $gen->writeBool('onlyActive', $this->onlyActive);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		if ($this->syncMarkerExcludePreparationMethods !== null) $gen->writeBool('syncMarkerExcludePreparationMethods', $this->syncMarkerExcludePreparationMethods);
		if ($this->changedSinceTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->changedSinceTimestamp))->write($gen, 'changedSinceTimestamp');
		if ($this->changedSinceBranchNumber !== null) $gen->writeInt('changedSinceBranchNumber', $this->changedSinceBranchNumber);
		if ($this->includeAllArticlesOfSelectedProducts !== null) $gen->writeBool('includeAllArticlesOfSelectedProducts', $this->includeAllArticlesOfSelectedProducts);
		foreach ($this->productNumbers as $elem) $gen->writeInt('productNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleVariantList extends SoapObject {
	/** @var ArticleVariant[] */
	public $variant = array();
	public function __construct($list = array()) { $this->variant = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->variant as $elem) $elem->write($gen, 'variant');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleVariantSupplier extends SoapObject {
	public int $relationNumber;
	public bool $isPreferredSupplier;
	public bool $isPurchasable;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('relationNumber', $this->relationNumber);
		$gen->writeBool('isPreferredSupplier', $this->isPreferredSupplier);
		$gen->writeBool('isPurchasable', $this->isPurchasable);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleVariantSupplierList extends SoapObject {
	/** @var ArticleVariantSupplier[] */
	public $supplier = array();
	public function __construct($list = array()) { $this->supplier = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->supplier as $elem) $elem->write($gen, 'supplier');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleVariant extends SoapObject {
	public ?int $articleVariantId = null;
	public ?string $description = null;
	public ?string $receiptText = null;
	public ?string $translatedReceiptText = null;
	public ?string $invoiceText = null;
	public ?string $barcode = null;
	public ?\DateTime $barcodeDate = null;
	public BigDecimal $quantity;
	public ?BigDecimal $purchasePrice = null;
	public ?BigDecimal $priceIncl = null;
	public ?BigDecimal $priceExcl = null;
	public ?bool $isCurrent = null;
	public BigDecimal $quantityInPackaging;
	public ?string $packagingType = null;
	public ?BigDecimal $orderQuantity = null;
	public ?string $articleNumberSupplier = null;
	public ?string $packagingContent = null;
	/** @var ArticleVariant[] */
	public $packaging = array();
	/** @var ArticleVariantSupplier[] */
	public $suppliers = array();
	public function writeProps(SoapGenerator $gen): void {
		if ($this->articleVariantId !== null) $gen->writeInt('articleVariantId', $this->articleVariantId);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->receiptText !== null) $gen->out->writeElementNs(self::TNS, 'receiptText', null, $this->receiptText);
		if ($this->translatedReceiptText !== null) $gen->out->writeElementNs(self::TNS, 'translatedReceiptText', null, $this->translatedReceiptText);
		if ($this->invoiceText !== null) $gen->out->writeElementNs(self::TNS, 'invoiceText', null, $this->invoiceText);
		if ($this->barcode !== null) $gen->out->writeElementNs(self::TNS, 'barcode', null, $this->barcode);
		if ($this->barcodeDate !== null) $gen->writeDate('barcodeDate', $this->barcodeDate);
		$gen->writeBigDecimal('quantity', $this->quantity);
		if ($this->purchasePrice !== null) $gen->writeBigDecimal('purchasePrice', $this->purchasePrice);
		if ($this->priceIncl !== null) $gen->writeBigDecimal('priceIncl', $this->priceIncl);
		if ($this->priceExcl !== null) $gen->writeBigDecimal('priceExcl', $this->priceExcl);
		if ($this->isCurrent !== null) $gen->writeBool('isCurrent', $this->isCurrent);
		$gen->writeBigDecimal('quantityInPackaging', $this->quantityInPackaging);
		if ($this->packagingType !== null) $gen->out->writeElementNs(self::TNS, 'packagingType', null, $this->packagingType);
		if ($this->orderQuantity !== null) $gen->writeBigDecimal('orderQuantity', $this->orderQuantity);
		if ($this->articleNumberSupplier !== null) $gen->out->writeElementNs(self::TNS, 'articleNumberSupplier', null, $this->articleNumberSupplier);
		if ($this->packagingContent !== null) $gen->out->writeElementNs(self::TNS, 'packagingContent', null, $this->packagingContent);
		$tmp_packaging = new ArticleVariantList($this->packaging);
$tmp_packaging->write($gen, 'packaging');

		$tmp_suppliers = new ArticleVariantSupplierList($this->suppliers);
$tmp_suppliers->write($gen, 'suppliers');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticleVariantsRequest extends SoapObject {
	public int $articleNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticlesVariantsRequest extends SoapObject {
	/** @var int[] */
	public $articleNumbers = array();
	public function __construct($list = array()) { $this->articleNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_articleNumbers = new NumberList($this->articleNumbers);
$tmp_articleNumbers->write($gen, 'articleNumbers');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticlesVariantsResponseElem extends SoapObject {
	public int $articleNumber;
	/** @var ArticleVariant[] */
	public $variants = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$tmp_variants = new ArticleVariantList($this->variants);
$tmp_variants->write($gen, 'variants');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class NewArticleVariantRequest extends SoapObject {
	public int $articleNumber;
	public ?int $parentId = null;
	public ArticleVariant $articleVariant;
	public ?int $beforeId = null;
	public function __construct() {
		$this->articleVariant = new ArticleVariant();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->parentId !== null) $gen->writeInt('parentId', $this->parentId);
		$this->articleVariant->write($gen, 'articleVariant');
		if ($this->beforeId !== null) $gen->writeInt('beforeId', $this->beforeId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateArticleVariantRequest extends SoapObject {
	public int $articleNumber;
	public ArticleVariant $articleVariant;
	public function __construct() {
		$this->articleVariant = new ArticleVariant();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$this->articleVariant->write($gen, 'articleVariant');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeleteArticleVariantsRequest extends SoapObject {
	public int $articleNumber;
	/** @var int[] */
	public $articleVariantIds = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$tmp_articleVariantIds = new NumberList($this->articleVariantIds);
$tmp_articleVariantIds->write($gen, 'articleVariantIds');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleStock extends SoapObject {
	public ?int $branchNumber = null;
	public int $articleNumber;
	public ?\DateTime $changeTimestamp = null;
	public int $stockId;
	public BigDecimal $amountFree;
	public BigDecimal $amountReserved;
	public BigDecimal $amountIncoming;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->changeTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->changeTimestamp))->write($gen, 'changeTimestamp');
		$gen->writeInt('stockId', $this->stockId);
		$gen->writeValueAndScale('amountFree', 'decimalPlacesFree', $this->amountFree, 2);
		$gen->writeValueAndScale('amountReserved', 'decimalPlacesReserved', $this->amountReserved, 2);
		$gen->writeValueAndScale('amountIncoming', 'decimalPlacesIncoming', $this->amountIncoming, 2);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleNumberList extends SoapObject {
	/** @var int[] */
	public $articleNumbers = array();
	public function __construct($list = array()) { $this->articleNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetStockRequest extends SoapObject {
	public int $branchNumber;
	/** @var int[] */
	public $articleNumbers = array();
	public ?int $stockId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$tmp_articleNumbers = new ArticleNumberList($this->articleNumbers);
$tmp_articleNumbers->write($gen, 'articleNumbers');

		if ($this->stockId !== null) $gen->writeInt('stockId', $this->stockId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleStockHistory extends SoapObject {
	public int $stockId;
	public \DateTime $timestamp;
	public ?int $branchNumber = null;
	public int $articleNumber;
	public BigDecimal $amountChanged;
	public string $type;
	public ?string $orderId = null;
	public ?string $packingSlipId = null;
	public ?string $invoiceId = null;
	public ?YearNumber $invoiceNumber = null;
	public ?string $invoiceBarcode = null;
	public ?string $receiptId = null;
	public ?WorkplaceYearNumber $receiptNumber = null;
	public ?string $receiptBarcode = null;
	public ?YearNumber $correctionNumber = null;
	public ?BigDecimal $beforeCorrectionQuantity = null;
	public ?BigDecimal $afterCorrectionQuantity = null;
	public ?YearNumber $deliveryNumber = null;
	public ?YearNumber $internalShipmentNumber = null;
	public ?YearNumberPart $internalDeliveryNumber = null;
	public function __construct() {
		$this->timestamp = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('stockId', $this->stockId);
		(SoapMplusDateTime::fromDateTime($this->timestamp))->write($gen, 'timestamp');
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeValueAndScale('amountChanged', 'decimalPlaces', $this->amountChanged, 2);
		$gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		if ($this->orderId !== null) $gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->packingSlipId !== null) $gen->out->writeElementNs(self::TNS, 'packingSlipId', null, $this->packingSlipId);
		if ($this->invoiceId !== null) $gen->out->writeElementNs(self::TNS, 'invoiceId', null, $this->invoiceId);
		if ($this->invoiceNumber !== null) $this->invoiceNumber->write($gen, 'invoiceNumber');
		if ($this->invoiceBarcode !== null) $gen->out->writeElementNs(self::TNS, 'invoiceBarcode', null, $this->invoiceBarcode);
		if ($this->receiptId !== null) $gen->out->writeElementNs(self::TNS, 'receiptId', null, $this->receiptId);
		if ($this->receiptNumber !== null) $this->receiptNumber->write($gen, 'receiptNumber');
		if ($this->receiptBarcode !== null) $gen->out->writeElementNs(self::TNS, 'receiptBarcode', null, $this->receiptBarcode);
		if ($this->correctionNumber !== null) $this->correctionNumber->write($gen, 'correctionNumber');
		if ($this->beforeCorrectionQuantity !== null) $gen->writeValueAndScale('beforeCorrectionQuantity', 'beforeCorrectionDecimalPlaces', $this->beforeCorrectionQuantity, 2);
		if ($this->afterCorrectionQuantity !== null) $gen->writeValueAndScale('afterCorrectionQuantity', 'afterCorrectionDecimalPlaces', $this->afterCorrectionQuantity, 2);
		if ($this->deliveryNumber !== null) $this->deliveryNumber->write($gen, 'deliveryNumber');
		if ($this->internalShipmentNumber !== null) $this->internalShipmentNumber->write($gen, 'internalShipmentNumber');
		if ($this->internalDeliveryNumber !== null) $this->internalDeliveryNumber->write($gen, 'internalDeliveryNumber');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetStockHistoryRequest extends SoapObject {
	public int $branchNumber;
	/** @var int[] */
	public $articleNumbers = null;
	public ?\DateTime $fromFinancialDateTime = null;
	public ?\DateTime $throughFinancialDateTime = null;
	public ?int $sinceStockId = null;
	public ?int $sinceStockIdLimit = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->articleNumbers !== null) {
$tmp_articleNumbers = new ArticleNumberList($this->articleNumbers);
$tmp_articleNumbers->write($gen, 'articleNumbers');
}
		if ($this->fromFinancialDateTime !== null) (SoapMplusDateTime::fromDateTime($this->fromFinancialDateTime))->write($gen, 'fromFinancialDateTime');
		if ($this->throughFinancialDateTime !== null) (SoapMplusDateTime::fromDateTime($this->throughFinancialDateTime))->write($gen, 'throughFinancialDateTime');
		if ($this->sinceStockId !== null) $gen->writeInt('sinceStockId', $this->sinceStockId);
		if ($this->sinceStockIdLimit !== null) $gen->writeInt('sinceStockIdLimit', $this->sinceStockIdLimit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetStockHistoryV2Request extends SoapObject {
	/** @var int[] */
	public $branchNumbers = array();
	/** @var int[] */
	public $articleNumbers = null;
	public ?\DateTime $fromFinancialDateTime = null;
	public ?\DateTime $throughFinancialDateTime = null;
	public ?int $sinceStockId = null;
	public ?int $sinceStockIdLimit = null;
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		if ($this->articleNumbers !== null) {
$tmp_articleNumbers = new ArticleNumberList($this->articleNumbers);
$tmp_articleNumbers->write($gen, 'articleNumbers');
}
		if ($this->fromFinancialDateTime !== null) (SoapMplusDateTime::fromDateTime($this->fromFinancialDateTime))->write($gen, 'fromFinancialDateTime');
		if ($this->throughFinancialDateTime !== null) (SoapMplusDateTime::fromDateTime($this->throughFinancialDateTime))->write($gen, 'throughFinancialDateTime');
		if ($this->sinceStockId !== null) $gen->writeInt('sinceStockId', $this->sinceStockId);
		if ($this->sinceStockIdLimit !== null) $gen->writeInt('sinceStockIdLimit', $this->sinceStockIdLimit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateStockRequest extends SoapObject {
	public int $branchNumber;
	public int $articleNumber;
	public BigDecimal $amountChanged;
	public ?int $employeeNumber = null;
	public ?string $reference = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeValueAndScale('amountChanged', 'decimalPlaces', $this->amountChanged, 2);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SetStockRequest extends SoapObject {
	public int $branchNumber;
	public int $articleNumber;
	public BigDecimal $amount;
	public ?int $employeeNumber = null;
	public ?string $reference = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeValueAndScale('amount', 'decimalPlaces', $this->amount, 2);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticleGroupsRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	/** @var int[] */
	public $groupNumbers = array();
	public ?bool $retrieveArticleNumbers = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		foreach ($this->groupNumbers as $elem) $gen->writeInt('groupNumbers', $elem);
		if ($this->retrieveArticleNumbers !== null) $gen->writeBool('retrieveArticleNumbers', $this->retrieveArticleNumbers);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleGroupList extends SoapObject {
	/** @var ArticleGroup[] */
	public $articleGroups = array();
	public function __construct($list = array()) { $this->articleGroups = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->articleGroups as $elem) $elem->write($gen, 'articleGroups');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleGroup extends SoapObject {
	public int $groupNumber;
	public ?int $syncMarker = null;
	public string $name;
	public string $text;
	/** @var ArticleGroup[] */
	public $subGroupList = array();
	public int $sortOrder;
	/** @var int[] */
	public $productNumbers = null;
	public ?Image $image = null;
	/** @var int[] */
	public $articleNumbers = null;
	public ?bool $isDeleted = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('groupNumber', $this->groupNumber);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		$tmp_subGroupList = new ArticleGroupList($this->subGroupList);
$tmp_subGroupList->write($gen, 'subGroupList');

		$gen->writeInt('sortOrder', $this->sortOrder);
		if ($this->productNumbers !== null) {
$tmp_productNumbers = new NumberList($this->productNumbers);
$tmp_productNumbers->write($gen, 'productNumbers');
}
		if ($this->image !== null) $this->image->write($gen, 'image');
		if ($this->articleNumbers !== null) {
$tmp_articleNumbers = new NumberList($this->articleNumbers);
$tmp_articleNumbers->write($gen, 'articleNumbers');
}
		if ($this->isDeleted !== null) $gen->writeBool('isDeleted', $this->isDeleted);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticleGroupChangesRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	/** @var int[] */
	public $groupNumbers = array();
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		foreach ($this->groupNumbers as $elem) $gen->writeInt('groupNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ChangedArticleGroup extends SoapObject {
	public int $groupNumber;
	public ?int $parentGroupNumber = null;
	public ?int $syncMarker = null;
	public string $name;
	public string $text;
	/** @var int[] */
	public $subGroupNumbers = null;
	public int $sortOrder;
	/** @var int[] */
	public $productNumbers = null;
	public ?Image $image = null;
	public ?bool $isDeleted = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('groupNumber', $this->groupNumber);
		if ($this->parentGroupNumber !== null) $gen->writeInt('parentGroupNumber', $this->parentGroupNumber);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->subGroupNumbers !== null) {
$tmp_subGroupNumbers = new NumberList($this->subGroupNumbers);
$tmp_subGroupNumbers->write($gen, 'subGroupNumbers');
}
		$gen->writeInt('sortOrder', $this->sortOrder);
		if ($this->productNumbers !== null) {
$tmp_productNumbers = new NumberList($this->productNumbers);
$tmp_productNumbers->write($gen, 'productNumbers');
}
		if ($this->image !== null) $this->image->write($gen, 'image');
		if ($this->isDeleted !== null) $gen->writeBool('isDeleted', $this->isDeleted);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ChangedArticleGroupList extends SoapObject {
	/** @var ChangedArticleGroup[] */
	public $changedArticleGroups = array();
	public function __construct($list = array()) { $this->changedArticleGroups = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->changedArticleGroups as $elem) $elem->write($gen, 'changedArticleGroups');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateArticleGroupRequest extends SoapObject {
	public int $groupNumber;
	public ?string $name = null;
	public ?string $text = null;
	public ?int $sortOrder = null;
	public ?int $imageId = null;
	public ?int $parentGroupNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('groupNumber', $this->groupNumber);
		if ($this->name !== null) $gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		if ($this->text !== null) $gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->sortOrder !== null) $gen->writeInt('sortOrder', $this->sortOrder);
		if ($this->imageId !== null) $gen->writeInt('imageId', $this->imageId);
		if ($this->parentGroupNumber !== null) $gen->writeInt('parentGroupNumber', $this->parentGroupNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class NewArticleGroupRequest extends SoapObject {
	public int $parentGroupNumber;
	public string $name;
	public string $text;
	public ?int $sortOrder = null;
	public ?int $imageId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('parentGroupNumber', $this->parentGroupNumber);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->sortOrder !== null) $gen->writeInt('sortOrder', $this->sortOrder);
		if ($this->imageId !== null) $gen->writeInt('imageId', $this->imageId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeleteArticleGroupRequest extends SoapObject {
	public int $groupNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('groupNumber', $this->groupNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class AddProductsToArticleGroupRequest extends SoapObject {
	public int $groupNumber;
	public ?int $position = null;
	/** @var int[] */
	public $productNumbers = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('groupNumber', $this->groupNumber);
		if ($this->position !== null) $gen->writeInt('position', $this->position);
		$tmp_productNumbers = new NumberList($this->productNumbers);
$tmp_productNumbers->write($gen, 'productNumbers');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReplaceProductsOfArticleGroupRequest extends SoapObject {
	public int $groupNumber;
	/** @var int[] */
	public $productNumbers = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('groupNumber', $this->groupNumber);
		$tmp_productNumbers = new NumberList($this->productNumbers);
$tmp_productNumbers->write($gen, 'productNumbers');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeleteProductsFromArticleGroupRequest extends SoapObject {
	public int $groupNumber;
	/** @var int[] */
	public $productNumbers = null;
	public ?bool $removeAll = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('groupNumber', $this->groupNumber);
		if ($this->productNumbers !== null) {
$tmp_productNumbers = new NumberList($this->productNumbers);
$tmp_productNumbers->write($gen, 'productNumbers');
}
		if ($this->removeAll !== null) $gen->writeBool('removeAll', $this->removeAll);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SendMessageRequest extends SoapObject {
	public ?int $branchNumber = null;
	public ?int $terminalNumber = null;
	public string $text;
	public ?string $sender = null;
	public ?string $messageType = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->terminalNumber !== null) $gen->writeInt('terminalNumber', $this->terminalNumber);
		$gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->sender !== null) $gen->out->writeElementNs(self::TNS, 'sender', null, $this->sender);
		if ($this->messageType !== null) $gen->out->writeElementNs(self::TNS, 'messageType', null, $this->messageType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetMessagesRequest extends SoapObject {
	public ?int $sinceMessageId = null;
	public ?int $branchNumber = null;
	public ?int $terminalNumber = null;
	public ?bool $onlyUndelivered = null;
	public ?bool $setDelivered = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->sinceMessageId !== null) $gen->writeInt('sinceMessageId', $this->sinceMessageId);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->terminalNumber !== null) $gen->writeInt('terminalNumber', $this->terminalNumber);
		if ($this->onlyUndelivered !== null) $gen->writeBool('onlyUndelivered', $this->onlyUndelivered);
		if ($this->setDelivered !== null) $gen->writeBool('setDelivered', $this->setDelivered);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Message extends SoapObject {
	public ?int $messageId = null;
	public ?string $apiIdent = null;
	public ?string $sender = null;
	public ?string $text = null;
	public ?\DateTime $createTimestamp = null;
	public ?\DateTime $deliverTimestamp = null;
	public ?int $branchNumber = null;
	public ?int $terminalNumber = null;
	public ?string $messageType = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->messageId !== null) $gen->writeInt('messageId', $this->messageId);
		if ($this->apiIdent !== null) $gen->out->writeElementNs(self::TNS, 'apiIdent', null, $this->apiIdent);
		if ($this->sender !== null) $gen->out->writeElementNs(self::TNS, 'sender', null, $this->sender);
		if ($this->text !== null) $gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->createTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->createTimestamp))->write($gen, 'createTimestamp');
		if ($this->deliverTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->deliverTimestamp))->write($gen, 'deliverTimestamp');
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->terminalNumber !== null) $gen->writeInt('terminalNumber', $this->terminalNumber);
		if ($this->messageType !== null) $gen->out->writeElementNs(self::TNS, 'messageType', null, $this->messageType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class MessageList extends SoapObject {
	/** @var Message[] */
	public $message = array();
	public function __construct($list = array()) { $this->message = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->message as $elem) $elem->write($gen, 'message');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Shift extends SoapObject {
	public YearNumber $shiftNumber;
	public int $branchNumber;
	public ?string $extBranchId = null;
	public \DateTime $financialDate;
	public int $employeeNumber;
	public \DateTime $startTimestamp;
	public \DateTime $endTimestamp;
	public bool $ended;
	public bool $manuallyModified;
	public ?string $reference = null;
	public function __construct() {
		$this->shiftNumber = new YearNumber();
		$this->financialDate = new \DateTime();
		$this->startTimestamp = new \DateTime();
		$this->endTimestamp = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->shiftNumber->write($gen, 'shiftNumber');
		$gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		(SoapMplusDate::fromDateTime($this->financialDate))->write($gen, 'financialDate');
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		(SoapMplusDateTime::fromDateTime($this->startTimestamp))->write($gen, 'startTimestamp');
		(SoapMplusDateTime::fromDateTime($this->endTimestamp))->write($gen, 'endTimestamp');
		$gen->writeBool('ended', $this->ended);
		$gen->writeBool('manuallyModified', $this->manuallyModified);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ShiftList extends SoapObject {
	/** @var Shift[] */
	public $shift = array();
	public function __construct($list = array()) { $this->shift = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->shift as $elem) $elem->write($gen, 'shift');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetShiftsRequest extends SoapObject {
	/** @var int[] */
	public $branchNumbers = array();
	/** @var int[] */
	public $employeeNumbers = array();
	public \DateTime $fromFinancialDate;
	public \DateTime $throughFinancialDate;
	public function __construct() {
		$this->fromFinancialDate = new \DateTime();
		$this->throughFinancialDate = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		foreach ($this->employeeNumbers as $elem) $gen->writeInt('employeeNumbers', $elem);
		(SoapMplusDate::fromDateTime($this->fromFinancialDate))->write($gen, 'fromFinancialDate');
		(SoapMplusDate::fromDateTime($this->throughFinancialDate))->write($gen, 'throughFinancialDate');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseOrderLineList extends SoapObject {
	/** @var PurchaseOrderLine[] */
	public $line = array();
	public function __construct($list = array()) { $this->line = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->line as $elem) $elem->write($gen, 'line');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseOrderLineData extends SoapObject {
	public BigDecimal $quantity;
	public ?BigDecimal $deliveredQuantity = null;
	public ?BigDecimal $purchasePrice = null;
	public ?int $turnoverGroup = null;
	public ?string $turnoverGroupName = null;
	public ?string $turnoverGroupType = null;
	public ?int $vatCode = null;
	public ?int $vatPercentage = null;
	public ?string $siUnit = null;
	public ?int $discountPercentage = null;
	public ?BigDecimal $totalInclAmount = null;
	public ?BigDecimal $totalExclAmount = null;
	public ?int $articleVariantId = null;
	public ?BigDecimal $quantityInPackaging = null;
	public ?string $packagingType = null;
	public ?BigDecimal $quantityOfPackagesOrdered = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeValueAndScale('quantity', 'decimalPlaces', $this->quantity, 2);
		if ($this->deliveredQuantity !== null) $gen->writeValueAndScale('deliveredQuantity', 'deliveredDecimalPlaces', $this->deliveredQuantity, 2);
		if ($this->purchasePrice !== null) $gen->writeValueAndScale('purchasePrice', '', $this->purchasePrice, 2);
		if ($this->turnoverGroup !== null) $gen->writeInt('turnoverGroup', $this->turnoverGroup);
		if ($this->turnoverGroupName !== null) $gen->out->writeElementNs(self::TNS, 'turnoverGroupName', null, $this->turnoverGroupName);
		if ($this->turnoverGroupType !== null) $gen->out->writeElementNs(self::TNS, 'turnoverGroupType', null, $this->turnoverGroupType);
		if ($this->vatCode !== null) $gen->writeInt('vatCode', $this->vatCode);
		if ($this->vatPercentage !== null) $gen->writeInt('vatPercentage', $this->vatPercentage);
		if ($this->siUnit !== null) $gen->out->writeElementNs(self::TNS, 'siUnit', null, $this->siUnit);
		if ($this->discountPercentage !== null) $gen->writeInt('discountPercentage', $this->discountPercentage);
		if ($this->totalInclAmount !== null) $gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		if ($this->totalExclAmount !== null) $gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		if ($this->articleVariantId !== null) $gen->writeInt('articleVariantId', $this->articleVariantId);
		if ($this->quantityInPackaging !== null) $gen->writeBigDecimal('quantityInPackaging', $this->quantityInPackaging);
		if ($this->packagingType !== null) $gen->out->writeElementNs(self::TNS, 'packagingType', null, $this->packagingType);
		if ($this->quantityOfPackagesOrdered !== null) $gen->writeBigDecimal('quantityOfPackagesOrdered', $this->quantityOfPackagesOrdered);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseOrderLine extends SoapObject {
	public ?int $articleNumber = null;
	public ?string $pluNumber = null;
	public ?string $text = null;
	public ?int $supplierRelationNumber = null;
	public ?string $supplierRelationName = null;
	public ?string $supplierArticleNumber = null;
	public ?int $branchNumber = null;
	public ?string $extBranchId = null;
	public ?\DateTime $deliveryDate = null;
	public ?\DateTime $deliveryDateEnd = null;
	public ?int $relationNumber = null;
	public ?string $relationName = null;
	public ?int $relationCategoryId = null;
	public ?string $relationBankAccountNumber = null;
	public ?string $orderText = null;
	public ?PurchaseOrderLineData $data = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->pluNumber !== null) $gen->out->writeElementNs(self::TNS, 'pluNumber', null, $this->pluNumber);
		if ($this->text !== null) $gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->supplierRelationNumber !== null) $gen->writeInt('supplierRelationNumber', $this->supplierRelationNumber);
		if ($this->supplierRelationName !== null) $gen->out->writeElementNs(self::TNS, 'supplierRelationName', null, $this->supplierRelationName);
		if ($this->supplierArticleNumber !== null) $gen->out->writeElementNs(self::TNS, 'supplierArticleNumber', null, $this->supplierArticleNumber);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		if ($this->deliveryDate !== null) (SoapMplusDate::fromDateTime($this->deliveryDate))->write($gen, 'deliveryDate');
		if ($this->deliveryDateEnd !== null) (SoapMplusDate::fromDateTime($this->deliveryDateEnd))->write($gen, 'deliveryDateEnd');
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->relationName !== null) $gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
		if ($this->relationCategoryId !== null) $gen->writeInt('relationCategoryId', $this->relationCategoryId);
		if ($this->relationBankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationBankAccountNumber', null, $this->relationBankAccountNumber);
		if ($this->orderText !== null) $gen->out->writeElementNs(self::TNS, 'orderText', null, $this->orderText);
		if ($this->data !== null) $this->data->write($gen, 'data');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseOrder extends SoapObject {
	public ?YearNumber $purchaseOrderNumber = null;
	public ?string $extPurchaseOrderId = null;
	public ?\DateTime $orderDate = null;
	public ?\DateTime $deliveryDate = null;
	public ?\DateTime $entryTimestamp = null;
	public ?int $relationNumber = null;
	public ?string $relationName = null;
	public ?int $relationCategoryId = null;
	public ?string $relationBankAccountNumber = null;
	public ?int $branchNumber = null;
	public ?string $extBranchId = null;
	public ?int $employeeNumber = null;
	public ?string $employeeName = null;
	public ?BigDecimal $totalInclAmount = null;
	public ?BigDecimal $totalExclAmount = null;
	public ?string $reference = null;
	public ?bool $isPrinted = null;
	public ?string $state = null;
	public ?string $vatMethod = null;
	/** @var VatGroup[] */
	public $vatGroupList = null;
	public ?int $syncMarker = null;
	public ?int $versionNumber = null;
	public ?int $lineListCount = null;
	/** @var PurchaseOrderLine[] */
	public $lineList = null;
	/** @var YearNumber[] */
	public $purchaseDeliveryNumbers = null;
	public ?Address $deliveryAddress = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->purchaseOrderNumber !== null) $this->purchaseOrderNumber->write($gen, 'purchaseOrderNumber');
		if ($this->extPurchaseOrderId !== null) $gen->out->writeElementNs(self::TNS, 'extPurchaseOrderId', null, $this->extPurchaseOrderId);
		if ($this->orderDate !== null) (SoapMplusDate::fromDateTime($this->orderDate))->write($gen, 'orderDate');
		if ($this->deliveryDate !== null) (SoapMplusDate::fromDateTime($this->deliveryDate))->write($gen, 'deliveryDate');
		if ($this->entryTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->relationName !== null) $gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
		if ($this->relationCategoryId !== null) $gen->writeInt('relationCategoryId', $this->relationCategoryId);
		if ($this->relationBankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationBankAccountNumber', null, $this->relationBankAccountNumber);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->employeeName !== null) $gen->out->writeElementNs(self::TNS, 'employeeName', null, $this->employeeName);
		if ($this->totalInclAmount !== null) $gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		if ($this->totalExclAmount !== null) $gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->isPrinted !== null) $gen->writeBool('isPrinted', $this->isPrinted);
		if ($this->state !== null) $gen->out->writeElementNs(self::TNS, 'state', null, $this->state);
		if ($this->vatMethod !== null) $gen->out->writeElementNs(self::TNS, 'vatMethod', null, $this->vatMethod);
		if ($this->vatGroupList !== null) {
$tmp_vatGroupList = new VatGroupList($this->vatGroupList);
$tmp_vatGroupList->write($gen, 'vatGroupList');
}
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->versionNumber !== null) $gen->writeInt('versionNumber', $this->versionNumber);
		if ($this->lineListCount !== null) $gen->writeInt('lineListCount', $this->lineListCount);
		if ($this->lineList !== null) {
$tmp_lineList = new PurchaseOrderLineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');
}
		if ($this->purchaseDeliveryNumbers !== null) {
$tmp_purchaseDeliveryNumbers = new YearNumberList($this->purchaseDeliveryNumbers);
$tmp_purchaseDeliveryNumbers->write($gen, 'purchaseDeliveryNumbers');
}
		if ($this->deliveryAddress !== null) $this->deliveryAddress->write($gen, 'deliveryAddress');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseOrderList extends SoapObject {
	/** @var PurchaseOrder[] */
	public $purchaseOrder = array();
	public function __construct($list = array()) { $this->purchaseOrder = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->purchaseOrder as $elem) $elem->write($gen, 'purchaseOrder');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPurchaseOrdersRequest extends SoapObject {
	public ?YearNumber $purchaseOrderNumber = null;
	public ?string $extPurchaseOrderId = null;
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public ?\DateTime $fromOrderDate = null;
	public ?\DateTime $throughOrderDate = null;
	public ?\DateTime $fromDeliveryDate = null;
	public ?\DateTime $throughDeliveryDate = null;
	/** @var int[] */
	public $branchNumbers = array();
	/** @var int[] */
	public $employeeNumbers = array();
	/** @var int[] */
	public $relationNumbers = array();
	/** @var int[] */
	public $articleNumbers = array();
	/** @var int[] */
	public $articleTurnoverGroups = array();
	/** @var Text[] */
	public $articlePluNumbers = null;
	/** @var Text[] */
	public $articleBarcodes = null;
	/** @var string[] */
	public $purchaseOrderStates = array();
	public ?bool $includeLineList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->purchaseOrderNumber !== null) $this->purchaseOrderNumber->write($gen, 'purchaseOrderNumber');
		if ($this->extPurchaseOrderId !== null) $gen->out->writeElementNs(self::TNS, 'extPurchaseOrderId', null, $this->extPurchaseOrderId);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		if ($this->fromOrderDate !== null) (SoapMplusDate::fromDateTime($this->fromOrderDate))->write($gen, 'fromOrderDate');
		if ($this->throughOrderDate !== null) (SoapMplusDate::fromDateTime($this->throughOrderDate))->write($gen, 'throughOrderDate');
		if ($this->fromDeliveryDate !== null) (SoapMplusDate::fromDateTime($this->fromDeliveryDate))->write($gen, 'fromDeliveryDate');
		if ($this->throughDeliveryDate !== null) (SoapMplusDate::fromDateTime($this->throughDeliveryDate))->write($gen, 'throughDeliveryDate');
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		foreach ($this->employeeNumbers as $elem) $gen->writeInt('employeeNumbers', $elem);
		foreach ($this->relationNumbers as $elem) $gen->writeInt('relationNumbers', $elem);
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
		foreach ($this->articleTurnoverGroups as $elem) $gen->writeInt('articleTurnoverGroups', $elem);
		if ($this->articlePluNumbers !== null) {
$tmp_articlePluNumbers = new TextList($this->articlePluNumbers);
$tmp_articlePluNumbers->write($gen, 'articlePluNumbers');
}
		if ($this->articleBarcodes !== null) {
$tmp_articleBarcodes = new TextList($this->articleBarcodes);
$tmp_articleBarcodes->write($gen, 'articleBarcodes');
}
		foreach ($this->purchaseOrderStates as $elem) $gen->out->writeElementNs(self::TNS, 'purchaseOrderStates', null, $elem);
		if ($this->includeLineList !== null) $gen->writeBool('includeLineList', $this->includeLineList);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseOrderInfo extends SoapObject {
	public YearNumber $purchaseOrderNumber;
	public function __construct() {
		$this->purchaseOrderNumber = new YearNumber();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->purchaseOrderNumber->write($gen, 'purchaseOrderNumber');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseOrderV2LineList extends SoapObject {
	/** @var PurchaseOrderV2Line[] */
	public $line = array();
	public function __construct($list = array()) { $this->line = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->line as $elem) $elem->write($gen, 'line');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseOrderV2LineData extends SoapObject {
	public BigDecimal $quantity;
	public ?BigDecimal $deliveredQuantity = null;
	public ?string $purchasePrice = null;
	public ?int $turnoverGroup = null;
	public ?string $turnoverGroupName = null;
	public ?string $turnoverGroupType = null;
	public ?int $vatCode = null;
	public ?int $vatPercentage = null;
	public ?string $siUnit = null;
	public ?int $discountPercentage = null;
	public ?BigDecimal $totalInclAmount = null;
	public ?BigDecimal $totalExclAmount = null;
	public ?BigDecimal $exchangeRateBuyPrice = null;
	public ?BigDecimal $exchangeRateSellPrice = null;
	public ?int $exchangeRateMultiplier = null;
	public ?int $articleVariantId = null;
	public ?BigDecimal $quantityInPackaging = null;
	public ?string $packagingType = null;
	public ?BigDecimal $quantityOfPackagesOrdered = null;
	public ?BigDecimal $orderUnit = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeValueAndScale('quantity', 'decimalPlaces', $this->quantity, 2);
		if ($this->deliveredQuantity !== null) $gen->writeValueAndScale('deliveredQuantity', 'deliveredDecimalPlaces', $this->deliveredQuantity, 2);
		if ($this->purchasePrice !== null) $gen->out->writeElementNs(self::TNS, 'purchasePrice', null, $this->purchasePrice);
		if ($this->turnoverGroup !== null) $gen->writeInt('turnoverGroup', $this->turnoverGroup);
		if ($this->turnoverGroupName !== null) $gen->out->writeElementNs(self::TNS, 'turnoverGroupName', null, $this->turnoverGroupName);
		if ($this->turnoverGroupType !== null) $gen->out->writeElementNs(self::TNS, 'turnoverGroupType', null, $this->turnoverGroupType);
		if ($this->vatCode !== null) $gen->writeInt('vatCode', $this->vatCode);
		if ($this->vatPercentage !== null) $gen->writeInt('vatPercentage', $this->vatPercentage);
		if ($this->siUnit !== null) $gen->out->writeElementNs(self::TNS, 'siUnit', null, $this->siUnit);
		if ($this->discountPercentage !== null) $gen->writeInt('discountPercentage', $this->discountPercentage);
		if ($this->totalInclAmount !== null) $gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		if ($this->totalExclAmount !== null) $gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		if ($this->exchangeRateBuyPrice !== null) $gen->writeValueAndScale('exchangeRateBuyPrice', 'exchangeRateBuyPriceDecimalPlaces', $this->exchangeRateBuyPrice, 2);
		if ($this->exchangeRateSellPrice !== null) $gen->writeValueAndScale('exchangeRateSellPrice', 'exchangeRateSellPriceDecimalPlaces', $this->exchangeRateSellPrice, 2);
		if ($this->exchangeRateMultiplier !== null) $gen->writeInt('exchangeRateMultiplier', $this->exchangeRateMultiplier);
		if ($this->articleVariantId !== null) $gen->writeInt('articleVariantId', $this->articleVariantId);
		if ($this->quantityInPackaging !== null) $gen->writeBigDecimal('quantityInPackaging', $this->quantityInPackaging);
		if ($this->packagingType !== null) $gen->out->writeElementNs(self::TNS, 'packagingType', null, $this->packagingType);
		if ($this->quantityOfPackagesOrdered !== null) $gen->writeBigDecimal('quantityOfPackagesOrdered', $this->quantityOfPackagesOrdered);
		if ($this->orderUnit !== null) $gen->writeBigDecimal('orderUnit', $this->orderUnit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseOrderV2Line extends SoapObject {
	public int $lineNumber;
	public ?int $articleNumber = null;
	public ?string $pluNumber = null;
	public ?string $text = null;
	public ?int $supplierRelationNumber = null;
	public ?string $supplierRelationName = null;
	public ?string $supplierArticleNumber = null;
	public ?int $branchNumber = null;
	public ?string $extBranchId = null;
	public ?\DateTime $deliveryDate = null;
	public ?\DateTime $deliveryDateEnd = null;
	public ?int $relationNumber = null;
	public ?string $relationName = null;
	public ?int $relationCategoryId = null;
	public ?string $relationBankAccountNumber = null;
	public ?string $orderText = null;
	public ?PurchaseOrderV2LineData $data = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('lineNumber', $this->lineNumber);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->pluNumber !== null) $gen->out->writeElementNs(self::TNS, 'pluNumber', null, $this->pluNumber);
		if ($this->text !== null) $gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->supplierRelationNumber !== null) $gen->writeInt('supplierRelationNumber', $this->supplierRelationNumber);
		if ($this->supplierRelationName !== null) $gen->out->writeElementNs(self::TNS, 'supplierRelationName', null, $this->supplierRelationName);
		if ($this->supplierArticleNumber !== null) $gen->out->writeElementNs(self::TNS, 'supplierArticleNumber', null, $this->supplierArticleNumber);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		if ($this->deliveryDate !== null) (SoapMplusDate::fromDateTime($this->deliveryDate))->write($gen, 'deliveryDate');
		if ($this->deliveryDateEnd !== null) (SoapMplusDate::fromDateTime($this->deliveryDateEnd))->write($gen, 'deliveryDateEnd');
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->relationName !== null) $gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
		if ($this->relationCategoryId !== null) $gen->writeInt('relationCategoryId', $this->relationCategoryId);
		if ($this->relationBankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationBankAccountNumber', null, $this->relationBankAccountNumber);
		if ($this->orderText !== null) $gen->out->writeElementNs(self::TNS, 'orderText', null, $this->orderText);
		if ($this->data !== null) $this->data->write($gen, 'data');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseOrderV2 extends SoapObject {
	public ?YearNumber $purchaseOrderNumber = null;
	public ?string $extPurchaseOrderId = null;
	public ?\DateTime $orderDate = null;
	public ?\DateTime $deliveryDate = null;
	public ?\DateTime $entryTimestamp = null;
	public ?int $relationNumber = null;
	public ?string $relationName = null;
	public ?int $relationCategoryId = null;
	public ?string $relationBankAccountNumber = null;
	public ?int $branchNumber = null;
	public ?string $extBranchId = null;
	public ?int $employeeNumber = null;
	public ?string $employeeName = null;
	public ?BigDecimal $totalInclAmount = null;
	public ?BigDecimal $totalExclAmount = null;
	public ?string $reference = null;
	public ?bool $isPrinted = null;
	public ?string $state = null;
	public ?string $vatMethod = null;
	/** @var VatGroup[] */
	public $vatGroupList = null;
	public ?int $syncMarker = null;
	public ?int $versionNumber = null;
	public ?int $lineListCount = null;
	/** @var PurchaseOrderV2Line[] */
	public $lineList = null;
	/** @var YearNumber[] */
	public $purchaseDeliveryNumbers = null;
	public ?Address $deliveryAddress = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->purchaseOrderNumber !== null) $this->purchaseOrderNumber->write($gen, 'purchaseOrderNumber');
		if ($this->extPurchaseOrderId !== null) $gen->out->writeElementNs(self::TNS, 'extPurchaseOrderId', null, $this->extPurchaseOrderId);
		if ($this->orderDate !== null) (SoapMplusDate::fromDateTime($this->orderDate))->write($gen, 'orderDate');
		if ($this->deliveryDate !== null) (SoapMplusDate::fromDateTime($this->deliveryDate))->write($gen, 'deliveryDate');
		if ($this->entryTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->relationName !== null) $gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
		if ($this->relationCategoryId !== null) $gen->writeInt('relationCategoryId', $this->relationCategoryId);
		if ($this->relationBankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationBankAccountNumber', null, $this->relationBankAccountNumber);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->employeeName !== null) $gen->out->writeElementNs(self::TNS, 'employeeName', null, $this->employeeName);
		if ($this->totalInclAmount !== null) $gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		if ($this->totalExclAmount !== null) $gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->isPrinted !== null) $gen->writeBool('isPrinted', $this->isPrinted);
		if ($this->state !== null) $gen->out->writeElementNs(self::TNS, 'state', null, $this->state);
		if ($this->vatMethod !== null) $gen->out->writeElementNs(self::TNS, 'vatMethod', null, $this->vatMethod);
		if ($this->vatGroupList !== null) {
$tmp_vatGroupList = new VatGroupList($this->vatGroupList);
$tmp_vatGroupList->write($gen, 'vatGroupList');
}
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->versionNumber !== null) $gen->writeInt('versionNumber', $this->versionNumber);
		if ($this->lineListCount !== null) $gen->writeInt('lineListCount', $this->lineListCount);
		if ($this->lineList !== null) {
$tmp_lineList = new PurchaseOrderV2LineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');
}
		if ($this->purchaseDeliveryNumbers !== null) {
$tmp_purchaseDeliveryNumbers = new YearNumberList($this->purchaseDeliveryNumbers);
$tmp_purchaseDeliveryNumbers->write($gen, 'purchaseDeliveryNumbers');
}
		if ($this->deliveryAddress !== null) $this->deliveryAddress->write($gen, 'deliveryAddress');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseOrderV2List extends SoapObject {
	/** @var PurchaseOrderV2[] */
	public $purchaseOrder = array();
	public function __construct($list = array()) { $this->purchaseOrder = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->purchaseOrder as $elem) $elem->write($gen, 'purchaseOrder');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPurchaseOrdersV2Request extends SoapObject {
	public ?YearNumber $purchaseOrderNumber = null;
	public ?string $extPurchaseOrderId = null;
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public ?\DateTime $fromOrderDate = null;
	public ?\DateTime $throughOrderDate = null;
	public ?\DateTime $fromDeliveryDate = null;
	public ?\DateTime $throughDeliveryDate = null;
	/** @var int[] */
	public $branchNumbers = array();
	/** @var int[] */
	public $employeeNumbers = array();
	/** @var int[] */
	public $relationNumbers = array();
	/** @var int[] */
	public $articleNumbers = array();
	/** @var int[] */
	public $articleTurnoverGroups = array();
	/** @var Text[] */
	public $articlePluNumbers = null;
	/** @var Text[] */
	public $articleBarcodes = null;
	/** @var string[] */
	public $purchaseOrderStates = array();
	public ?bool $includeLineList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->purchaseOrderNumber !== null) $this->purchaseOrderNumber->write($gen, 'purchaseOrderNumber');
		if ($this->extPurchaseOrderId !== null) $gen->out->writeElementNs(self::TNS, 'extPurchaseOrderId', null, $this->extPurchaseOrderId);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		if ($this->fromOrderDate !== null) (SoapMplusDate::fromDateTime($this->fromOrderDate))->write($gen, 'fromOrderDate');
		if ($this->throughOrderDate !== null) (SoapMplusDate::fromDateTime($this->throughOrderDate))->write($gen, 'throughOrderDate');
		if ($this->fromDeliveryDate !== null) (SoapMplusDate::fromDateTime($this->fromDeliveryDate))->write($gen, 'fromDeliveryDate');
		if ($this->throughDeliveryDate !== null) (SoapMplusDate::fromDateTime($this->throughDeliveryDate))->write($gen, 'throughDeliveryDate');
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		foreach ($this->employeeNumbers as $elem) $gen->writeInt('employeeNumbers', $elem);
		foreach ($this->relationNumbers as $elem) $gen->writeInt('relationNumbers', $elem);
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
		foreach ($this->articleTurnoverGroups as $elem) $gen->writeInt('articleTurnoverGroups', $elem);
		if ($this->articlePluNumbers !== null) {
$tmp_articlePluNumbers = new TextList($this->articlePluNumbers);
$tmp_articlePluNumbers->write($gen, 'articlePluNumbers');
}
		if ($this->articleBarcodes !== null) {
$tmp_articleBarcodes = new TextList($this->articleBarcodes);
$tmp_articleBarcodes->write($gen, 'articleBarcodes');
}
		foreach ($this->purchaseOrderStates as $elem) $gen->out->writeElementNs(self::TNS, 'purchaseOrderStates', null, $elem);
		if ($this->includeLineList !== null) $gen->writeBool('includeLineList', $this->includeLineList);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseOrderV2LineList extends SoapObject {
	/** @var SavePurchaseOrderV2Line[] */
	public $line = array();
	public function __construct($list = array()) { $this->line = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->line as $elem) $elem->write($gen, 'line');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseOrderV2LineData extends SoapObject {
	public ?BigDecimal $quantity = null;
	public ?string $purchasePrice = null;
	public ?int $turnoverGroup = null;
	public ?int $vatCode = null;
	public ?int $vatPercentage = null;
	public ?int $discountPercentage = null;
	public ?int $articleVariantId = null;
	public ?BigDecimal $quantityInPackaging = null;
	public ?string $packagingType = null;
	public ?BigDecimal $quantityOfPackagesOrdered = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->quantity !== null) $gen->writeValueAndScale('quantity', 'decimalPlaces', $this->quantity, 2);
		if ($this->purchasePrice !== null) $gen->out->writeElementNs(self::TNS, 'purchasePrice', null, $this->purchasePrice);
		if ($this->turnoverGroup !== null) $gen->writeInt('turnoverGroup', $this->turnoverGroup);
		if ($this->vatCode !== null) $gen->writeInt('vatCode', $this->vatCode);
		if ($this->vatPercentage !== null) $gen->writeInt('vatPercentage', $this->vatPercentage);
		if ($this->discountPercentage !== null) $gen->writeInt('discountPercentage', $this->discountPercentage);
		if ($this->articleVariantId !== null) $gen->writeInt('articleVariantId', $this->articleVariantId);
		if ($this->quantityInPackaging !== null) $gen->writeBigDecimal('quantityInPackaging', $this->quantityInPackaging);
		if ($this->packagingType !== null) $gen->out->writeElementNs(self::TNS, 'packagingType', null, $this->packagingType);
		if ($this->quantityOfPackagesOrdered !== null) $gen->writeBigDecimal('quantityOfPackagesOrdered', $this->quantityOfPackagesOrdered);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseOrderV2Line extends SoapObject {
	public ?int $articleNumber = null;
	public ?string $pluNumber = null;
	public ?string $text = null;
	public ?int $branchNumber = null;
	public ?\DateTime $deliveryDate = null;
	public ?\DateTime $deliveryDateEnd = null;
	public ?int $relationNumber = null;
	public ?string $orderText = null;
	public ?SavePurchaseOrderV2LineData $data = null;
	public ?string $supplierArticleNumber = null;
	public ?string $barcode = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->pluNumber !== null) $gen->out->writeElementNs(self::TNS, 'pluNumber', null, $this->pluNumber);
		if ($this->text !== null) $gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->deliveryDate !== null) (SoapMplusDate::fromDateTime($this->deliveryDate))->write($gen, 'deliveryDate');
		if ($this->deliveryDateEnd !== null) (SoapMplusDate::fromDateTime($this->deliveryDateEnd))->write($gen, 'deliveryDateEnd');
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->orderText !== null) $gen->out->writeElementNs(self::TNS, 'orderText', null, $this->orderText);
		if ($this->data !== null) $this->data->write($gen, 'data');
		if ($this->supplierArticleNumber !== null) $gen->out->writeElementNs(self::TNS, 'supplierArticleNumber', null, $this->supplierArticleNumber);
		if ($this->barcode !== null) $gen->out->writeElementNs(self::TNS, 'barcode', null, $this->barcode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseOrderV2 extends SoapObject {
	public ?YearNumber $purchaseOrderNumber = null;
	public ?string $extPurchaseOrderId = null;
	public ?\DateTime $orderDate = null;
	public ?\DateTime $deliveryDate = null;
	public ?int $relationNumber = null;
	public ?int $branchNumber = null;
	public ?int $employeeNumber = null;
	public ?string $reference = null;
	public ?string $state = null;
	public ?string $vatMethod = null;
	public ?int $versionNumber = null;
	public ?string $deliveryAddressId = null;
	/** @var SavePurchaseOrderV2Line[] */
	public $lineList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->purchaseOrderNumber !== null) $this->purchaseOrderNumber->write($gen, 'purchaseOrderNumber');
		if ($this->extPurchaseOrderId !== null) $gen->out->writeElementNs(self::TNS, 'extPurchaseOrderId', null, $this->extPurchaseOrderId);
		if ($this->orderDate !== null) (SoapMplusDate::fromDateTime($this->orderDate))->write($gen, 'orderDate');
		if ($this->deliveryDate !== null) (SoapMplusDate::fromDateTime($this->deliveryDate))->write($gen, 'deliveryDate');
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->state !== null) $gen->out->writeElementNs(self::TNS, 'state', null, $this->state);
		if ($this->vatMethod !== null) $gen->out->writeElementNs(self::TNS, 'vatMethod', null, $this->vatMethod);
		if ($this->versionNumber !== null) $gen->writeInt('versionNumber', $this->versionNumber);
		if ($this->deliveryAddressId !== null) $gen->out->writeElementNs(self::TNS, 'deliveryAddressId', null, $this->deliveryAddressId);
		if ($this->lineList !== null) {
$tmp_lineList = new SavePurchaseOrderV2LineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseOrderV2Request extends SoapObject {
	public SavePurchaseOrderV2 $savePurchaseOrder;
	public function __construct() {
		$this->savePurchaseOrder = new SavePurchaseOrderV2();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->savePurchaseOrder->write($gen, 'savePurchaseOrder');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ErrorDetails extends SoapObject {
	public ?int $lineNumber = null;
	public ?int $articleNumber = null;
	public ?int $articleVariantId = null;
	public ?int $relationNumber = null;
	public ?string $supplierArticleNumber = null;
	public ?string $barcode = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->lineNumber !== null) $gen->writeInt('lineNumber', $this->lineNumber);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->articleVariantId !== null) $gen->writeInt('articleVariantId', $this->articleVariantId);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->supplierArticleNumber !== null) $gen->out->writeElementNs(self::TNS, 'supplierArticleNumber', null, $this->supplierArticleNumber);
		if ($this->barcode !== null) $gen->out->writeElementNs(self::TNS, 'barcode', null, $this->barcode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseDeliveryLineList extends SoapObject {
	/** @var PurchaseDeliveryLine[] */
	public $line = array();
	public function __construct($list = array()) { $this->line = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->line as $elem) $elem->write($gen, 'line');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseDeliveryLineData extends SoapObject {
	public BigDecimal $deliveredQuantity;
	public ?BigDecimal $purchasePrice = null;
	public ?int $turnoverGroup = null;
	public ?string $turnoverGroupName = null;
	public ?string $turnoverGroupType = null;
	public ?int $vatCode = null;
	public ?int $vatPercentage = null;
	public ?string $siUnit = null;
	public ?int $discountPercentage = null;
	public ?BigDecimal $totalInclAmount = null;
	public ?BigDecimal $totalExclAmount = null;
	public ?int $articleVariantId = null;
	public ?BigDecimal $quantityInPackaging = null;
	public ?string $packagingType = null;
	public ?BigDecimal $quantityOfPackagesDelivered = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeValueAndScale('deliveredQuantity', 'deliveredDecimalPlaces', $this->deliveredQuantity, 2);
		if ($this->purchasePrice !== null) $gen->writeValueAndScale('purchasePrice', '', $this->purchasePrice, 2);
		if ($this->turnoverGroup !== null) $gen->writeInt('turnoverGroup', $this->turnoverGroup);
		if ($this->turnoverGroupName !== null) $gen->out->writeElementNs(self::TNS, 'turnoverGroupName', null, $this->turnoverGroupName);
		if ($this->turnoverGroupType !== null) $gen->out->writeElementNs(self::TNS, 'turnoverGroupType', null, $this->turnoverGroupType);
		if ($this->vatCode !== null) $gen->writeInt('vatCode', $this->vatCode);
		if ($this->vatPercentage !== null) $gen->writeInt('vatPercentage', $this->vatPercentage);
		if ($this->siUnit !== null) $gen->out->writeElementNs(self::TNS, 'siUnit', null, $this->siUnit);
		if ($this->discountPercentage !== null) $gen->writeInt('discountPercentage', $this->discountPercentage);
		if ($this->totalInclAmount !== null) $gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		if ($this->totalExclAmount !== null) $gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		if ($this->articleVariantId !== null) $gen->writeInt('articleVariantId', $this->articleVariantId);
		if ($this->quantityInPackaging !== null) $gen->writeBigDecimal('quantityInPackaging', $this->quantityInPackaging);
		if ($this->packagingType !== null) $gen->out->writeElementNs(self::TNS, 'packagingType', null, $this->packagingType);
		if ($this->quantityOfPackagesDelivered !== null) $gen->writeBigDecimal('quantityOfPackagesDelivered', $this->quantityOfPackagesDelivered);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseDeliveryLine extends SoapObject {
	public ?int $articleNumber = null;
	public ?string $pluNumber = null;
	public ?string $text = null;
	public ?int $supplierRelationNumber = null;
	public ?string $supplierRelationName = null;
	public ?string $supplierArticleNumber = null;
	public ?int $branchNumber = null;
	public ?string $extBranchId = null;
	public ?int $relationNumber = null;
	public ?string $relationName = null;
	public ?int $relationCategoryId = null;
	public ?string $relationBankAccountNumber = null;
	public ?string $orderText = null;
	public ?PurchaseDeliveryLineData $data = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->pluNumber !== null) $gen->out->writeElementNs(self::TNS, 'pluNumber', null, $this->pluNumber);
		if ($this->text !== null) $gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->supplierRelationNumber !== null) $gen->writeInt('supplierRelationNumber', $this->supplierRelationNumber);
		if ($this->supplierRelationName !== null) $gen->out->writeElementNs(self::TNS, 'supplierRelationName', null, $this->supplierRelationName);
		if ($this->supplierArticleNumber !== null) $gen->out->writeElementNs(self::TNS, 'supplierArticleNumber', null, $this->supplierArticleNumber);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->relationName !== null) $gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
		if ($this->relationCategoryId !== null) $gen->writeInt('relationCategoryId', $this->relationCategoryId);
		if ($this->relationBankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationBankAccountNumber', null, $this->relationBankAccountNumber);
		if ($this->orderText !== null) $gen->out->writeElementNs(self::TNS, 'orderText', null, $this->orderText);
		if ($this->data !== null) $this->data->write($gen, 'data');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseDelivery extends SoapObject {
	public ?YearNumber $purchaseDeliveryNumber = null;
	public ?string $extPurchaseDeliveryId = null;
	public ?\DateTime $deliveryDate = null;
	public ?\DateTime $entryTimestamp = null;
	public ?int $relationNumber = null;
	public ?string $relationName = null;
	public ?int $relationCategoryId = null;
	public ?string $relationBankAccountNumber = null;
	public ?int $branchNumber = null;
	public ?string $extBranchId = null;
	public ?int $employeeNumber = null;
	public ?string $employeeName = null;
	public ?BigDecimal $totalInclAmount = null;
	public ?BigDecimal $totalExclAmount = null;
	public ?string $reference = null;
	public ?bool $isPrinted = null;
	/** @var VatGroup[] */
	public $vatGroupList = null;
	public ?int $syncMarker = null;
	public ?int $versionNumber = null;
	public ?int $lineListCount = null;
	/** @var PurchaseDeliveryLine[] */
	public $lineList = null;
	public ?YearNumber $purchaseOrderNumber = null;
	public ?Address $deliveryAddress = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->purchaseDeliveryNumber !== null) $this->purchaseDeliveryNumber->write($gen, 'purchaseDeliveryNumber');
		if ($this->extPurchaseDeliveryId !== null) $gen->out->writeElementNs(self::TNS, 'extPurchaseDeliveryId', null, $this->extPurchaseDeliveryId);
		if ($this->deliveryDate !== null) (SoapMplusDate::fromDateTime($this->deliveryDate))->write($gen, 'deliveryDate');
		if ($this->entryTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->relationName !== null) $gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
		if ($this->relationCategoryId !== null) $gen->writeInt('relationCategoryId', $this->relationCategoryId);
		if ($this->relationBankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationBankAccountNumber', null, $this->relationBankAccountNumber);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->employeeName !== null) $gen->out->writeElementNs(self::TNS, 'employeeName', null, $this->employeeName);
		if ($this->totalInclAmount !== null) $gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		if ($this->totalExclAmount !== null) $gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->isPrinted !== null) $gen->writeBool('isPrinted', $this->isPrinted);
		if ($this->vatGroupList !== null) {
$tmp_vatGroupList = new VatGroupList($this->vatGroupList);
$tmp_vatGroupList->write($gen, 'vatGroupList');
}
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->versionNumber !== null) $gen->writeInt('versionNumber', $this->versionNumber);
		if ($this->lineListCount !== null) $gen->writeInt('lineListCount', $this->lineListCount);
		if ($this->lineList !== null) {
$tmp_lineList = new PurchaseDeliveryLineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');
}
		if ($this->purchaseOrderNumber !== null) $this->purchaseOrderNumber->write($gen, 'purchaseOrderNumber');
		if ($this->deliveryAddress !== null) $this->deliveryAddress->write($gen, 'deliveryAddress');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseDeliveryList extends SoapObject {
	/** @var PurchaseDelivery[] */
	public $purchaseDelivery = array();
	public function __construct($list = array()) { $this->purchaseDelivery = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->purchaseDelivery as $elem) $elem->write($gen, 'purchaseDelivery');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPurchaseDeliveriesRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public ?\DateTime $fromDeliveryDate = null;
	public ?\DateTime $throughDeliveryDate = null;
	/** @var int[] */
	public $branchNumbers = array();
	/** @var int[] */
	public $employeeNumbers = array();
	/** @var int[] */
	public $relationNumbers = array();
	/** @var int[] */
	public $articleNumbers = array();
	/** @var int[] */
	public $articleTurnoverGroups = array();
	/** @var Text[] */
	public $articlePluNumbers = null;
	/** @var Text[] */
	public $articleBarcodes = null;
	public ?bool $includeLineList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		if ($this->fromDeliveryDate !== null) (SoapMplusDate::fromDateTime($this->fromDeliveryDate))->write($gen, 'fromDeliveryDate');
		if ($this->throughDeliveryDate !== null) (SoapMplusDate::fromDateTime($this->throughDeliveryDate))->write($gen, 'throughDeliveryDate');
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		foreach ($this->employeeNumbers as $elem) $gen->writeInt('employeeNumbers', $elem);
		foreach ($this->relationNumbers as $elem) $gen->writeInt('relationNumbers', $elem);
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
		foreach ($this->articleTurnoverGroups as $elem) $gen->writeInt('articleTurnoverGroups', $elem);
		if ($this->articlePluNumbers !== null) {
$tmp_articlePluNumbers = new TextList($this->articlePluNumbers);
$tmp_articlePluNumbers->write($gen, 'articlePluNumbers');
}
		if ($this->articleBarcodes !== null) {
$tmp_articleBarcodes = new TextList($this->articleBarcodes);
$tmp_articleBarcodes->write($gen, 'articleBarcodes');
}
		if ($this->includeLineList !== null) $gen->writeBool('includeLineList', $this->includeLineList);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseDeliveryInfo extends SoapObject {
	public YearNumber $purchaseDeliveryNumber;
	public function __construct() {
		$this->purchaseDeliveryNumber = new YearNumber();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->purchaseDeliveryNumber->write($gen, 'purchaseDeliveryNumber');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseDeliveryV2LineList extends SoapObject {
	/** @var PurchaseDeliveryV2Line[] */
	public $line = array();
	public function __construct($list = array()) { $this->line = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->line as $elem) $elem->write($gen, 'line');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseDeliveryV2LineData extends SoapObject {
	public BigDecimal $deliveredQuantity;
	public ?string $purchasePrice = null;
	public ?int $turnoverGroup = null;
	public ?string $turnoverGroupName = null;
	public ?string $turnoverGroupType = null;
	public ?int $vatCode = null;
	public ?int $vatPercentage = null;
	public ?string $siUnit = null;
	public ?int $discountPercentage = null;
	public ?BigDecimal $totalInclAmount = null;
	public ?BigDecimal $totalExclAmount = null;
	public ?BigDecimal $exchangeRateBuyPrice = null;
	public ?BigDecimal $exchangeRateSellPrice = null;
	public ?int $exchangeRateMultiplier = null;
	public ?int $articleVariantId = null;
	public ?BigDecimal $quantityInPackaging = null;
	public ?string $packagingType = null;
	public ?BigDecimal $barcodeSalesPrice = null;
	public ?BigDecimal $quantityOfPackagesDelivered = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeValueAndScale('deliveredQuantity', 'deliveredDecimalPlaces', $this->deliveredQuantity, 2);
		if ($this->purchasePrice !== null) $gen->out->writeElementNs(self::TNS, 'purchasePrice', null, $this->purchasePrice);
		if ($this->turnoverGroup !== null) $gen->writeInt('turnoverGroup', $this->turnoverGroup);
		if ($this->turnoverGroupName !== null) $gen->out->writeElementNs(self::TNS, 'turnoverGroupName', null, $this->turnoverGroupName);
		if ($this->turnoverGroupType !== null) $gen->out->writeElementNs(self::TNS, 'turnoverGroupType', null, $this->turnoverGroupType);
		if ($this->vatCode !== null) $gen->writeInt('vatCode', $this->vatCode);
		if ($this->vatPercentage !== null) $gen->writeInt('vatPercentage', $this->vatPercentage);
		if ($this->siUnit !== null) $gen->out->writeElementNs(self::TNS, 'siUnit', null, $this->siUnit);
		if ($this->discountPercentage !== null) $gen->writeInt('discountPercentage', $this->discountPercentage);
		if ($this->totalInclAmount !== null) $gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		if ($this->totalExclAmount !== null) $gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		if ($this->exchangeRateBuyPrice !== null) $gen->writeValueAndScale('exchangeRateBuyPrice', 'exchangeRateBuyPriceDecimalPlaces', $this->exchangeRateBuyPrice, 2);
		if ($this->exchangeRateSellPrice !== null) $gen->writeValueAndScale('exchangeRateSellPrice', 'exchangeRateSellPriceDecimalPlaces', $this->exchangeRateSellPrice, 2);
		if ($this->exchangeRateMultiplier !== null) $gen->writeInt('exchangeRateMultiplier', $this->exchangeRateMultiplier);
		if ($this->articleVariantId !== null) $gen->writeInt('articleVariantId', $this->articleVariantId);
		if ($this->quantityInPackaging !== null) $gen->writeBigDecimal('quantityInPackaging', $this->quantityInPackaging);
		if ($this->packagingType !== null) $gen->out->writeElementNs(self::TNS, 'packagingType', null, $this->packagingType);
		if ($this->barcodeSalesPrice !== null) $gen->writeBigDecimal('barcodeSalesPrice', $this->barcodeSalesPrice);
		if ($this->quantityOfPackagesDelivered !== null) $gen->writeBigDecimal('quantityOfPackagesDelivered', $this->quantityOfPackagesDelivered);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseDeliveryV2Line extends SoapObject {
	public int $lineNumber;
	public ?int $articleNumber = null;
	public ?string $pluNumber = null;
	public ?string $text = null;
	public ?int $supplierRelationNumber = null;
	public ?string $supplierRelationName = null;
	public ?string $supplierArticleNumber = null;
	public ?int $branchNumber = null;
	public ?string $extBranchId = null;
	public ?int $relationNumber = null;
	public ?string $relationName = null;
	public ?int $relationCategoryId = null;
	public ?string $relationBankAccountNumber = null;
	public ?string $orderText = null;
	public ?PurchaseDeliveryV2LineData $data = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('lineNumber', $this->lineNumber);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->pluNumber !== null) $gen->out->writeElementNs(self::TNS, 'pluNumber', null, $this->pluNumber);
		if ($this->text !== null) $gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->supplierRelationNumber !== null) $gen->writeInt('supplierRelationNumber', $this->supplierRelationNumber);
		if ($this->supplierRelationName !== null) $gen->out->writeElementNs(self::TNS, 'supplierRelationName', null, $this->supplierRelationName);
		if ($this->supplierArticleNumber !== null) $gen->out->writeElementNs(self::TNS, 'supplierArticleNumber', null, $this->supplierArticleNumber);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->relationName !== null) $gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
		if ($this->relationCategoryId !== null) $gen->writeInt('relationCategoryId', $this->relationCategoryId);
		if ($this->relationBankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationBankAccountNumber', null, $this->relationBankAccountNumber);
		if ($this->orderText !== null) $gen->out->writeElementNs(self::TNS, 'orderText', null, $this->orderText);
		if ($this->data !== null) $this->data->write($gen, 'data');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseDeliveryV2 extends SoapObject {
	public ?YearNumber $purchaseDeliveryNumber = null;
	public ?string $extPurchaseDeliveryId = null;
	public ?\DateTime $deliveryDate = null;
	public ?\DateTime $entryTimestamp = null;
	public ?int $relationNumber = null;
	public ?string $relationName = null;
	public ?int $relationCategoryId = null;
	public ?string $relationBankAccountNumber = null;
	public ?int $branchNumber = null;
	public ?string $extBranchId = null;
	public ?int $employeeNumber = null;
	public ?string $employeeName = null;
	public ?BigDecimal $totalInclAmount = null;
	public ?BigDecimal $totalExclAmount = null;
	public ?string $reference = null;
	public ?bool $isPrinted = null;
	/** @var VatGroup[] */
	public $vatGroupList = null;
	public ?int $syncMarker = null;
	public ?int $versionNumber = null;
	public ?int $lineListCount = null;
	/** @var PurchaseDeliveryV2Line[] */
	public $lineList = null;
	public ?YearNumber $purchaseOrderNumber = null;
	public ?Address $deliveryAddress = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->purchaseDeliveryNumber !== null) $this->purchaseDeliveryNumber->write($gen, 'purchaseDeliveryNumber');
		if ($this->extPurchaseDeliveryId !== null) $gen->out->writeElementNs(self::TNS, 'extPurchaseDeliveryId', null, $this->extPurchaseDeliveryId);
		if ($this->deliveryDate !== null) (SoapMplusDate::fromDateTime($this->deliveryDate))->write($gen, 'deliveryDate');
		if ($this->entryTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->relationName !== null) $gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
		if ($this->relationCategoryId !== null) $gen->writeInt('relationCategoryId', $this->relationCategoryId);
		if ($this->relationBankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationBankAccountNumber', null, $this->relationBankAccountNumber);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->employeeName !== null) $gen->out->writeElementNs(self::TNS, 'employeeName', null, $this->employeeName);
		if ($this->totalInclAmount !== null) $gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		if ($this->totalExclAmount !== null) $gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->isPrinted !== null) $gen->writeBool('isPrinted', $this->isPrinted);
		if ($this->vatGroupList !== null) {
$tmp_vatGroupList = new VatGroupList($this->vatGroupList);
$tmp_vatGroupList->write($gen, 'vatGroupList');
}
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->versionNumber !== null) $gen->writeInt('versionNumber', $this->versionNumber);
		if ($this->lineListCount !== null) $gen->writeInt('lineListCount', $this->lineListCount);
		if ($this->lineList !== null) {
$tmp_lineList = new PurchaseDeliveryV2LineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');
}
		if ($this->purchaseOrderNumber !== null) $this->purchaseOrderNumber->write($gen, 'purchaseOrderNumber');
		if ($this->deliveryAddress !== null) $this->deliveryAddress->write($gen, 'deliveryAddress');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPurchaseDeliveriesV2Request extends SoapObject {
	public ?YearNumber $purchaseDeliveryNumber = null;
	public ?string $extPurchaseDeliveryId = null;
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public ?\DateTime $fromDeliveryDate = null;
	public ?\DateTime $throughDeliveryDate = null;
	/** @var int[] */
	public $branchNumbers = array();
	/** @var int[] */
	public $employeeNumbers = array();
	/** @var int[] */
	public $relationNumbers = array();
	/** @var int[] */
	public $articleNumbers = array();
	/** @var int[] */
	public $articleTurnoverGroups = array();
	/** @var Text[] */
	public $articlePluNumbers = null;
	/** @var Text[] */
	public $articleBarcodes = null;
	public ?bool $includeLineList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->purchaseDeliveryNumber !== null) $this->purchaseDeliveryNumber->write($gen, 'purchaseDeliveryNumber');
		if ($this->extPurchaseDeliveryId !== null) $gen->out->writeElementNs(self::TNS, 'extPurchaseDeliveryId', null, $this->extPurchaseDeliveryId);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		if ($this->fromDeliveryDate !== null) (SoapMplusDate::fromDateTime($this->fromDeliveryDate))->write($gen, 'fromDeliveryDate');
		if ($this->throughDeliveryDate !== null) (SoapMplusDate::fromDateTime($this->throughDeliveryDate))->write($gen, 'throughDeliveryDate');
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		foreach ($this->employeeNumbers as $elem) $gen->writeInt('employeeNumbers', $elem);
		foreach ($this->relationNumbers as $elem) $gen->writeInt('relationNumbers', $elem);
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
		foreach ($this->articleTurnoverGroups as $elem) $gen->writeInt('articleTurnoverGroups', $elem);
		if ($this->articlePluNumbers !== null) {
$tmp_articlePluNumbers = new TextList($this->articlePluNumbers);
$tmp_articlePluNumbers->write($gen, 'articlePluNumbers');
}
		if ($this->articleBarcodes !== null) {
$tmp_articleBarcodes = new TextList($this->articleBarcodes);
$tmp_articleBarcodes->write($gen, 'articleBarcodes');
}
		if ($this->includeLineList !== null) $gen->writeBool('includeLineList', $this->includeLineList);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseDeliveryV2List extends SoapObject {
	/** @var PurchaseDeliveryV2[] */
	public $purchaseDelivery = array();
	public function __construct($list = array()) { $this->purchaseDelivery = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->purchaseDelivery as $elem) $elem->write($gen, 'purchaseDelivery');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseDeliveryV2LineList extends SoapObject {
	/** @var SavePurchaseDeliveryV2Line[] */
	public $line = array();
	public function __construct($list = array()) { $this->line = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->line as $elem) $elem->write($gen, 'line');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseDeliveryV2LineData extends SoapObject {
	public ?BigDecimal $deliveredQuantity = null;
	public ?string $purchasePrice = null;
	public ?int $turnoverGroup = null;
	public ?int $vatCode = null;
	public ?int $vatPercentage = null;
	public ?int $discountPercentage = null;
	public ?int $articleVariantId = null;
	public ?BigDecimal $quantityInPackaging = null;
	public ?string $packagingType = null;
	public ?BigDecimal $barcodeSalesPrice = null;
	public ?BigDecimal $quantityOfPackagesDelivered = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->deliveredQuantity !== null) $gen->writeValueAndScale('deliveredQuantity', 'deliveredDecimalPlaces', $this->deliveredQuantity, 2);
		if ($this->purchasePrice !== null) $gen->out->writeElementNs(self::TNS, 'purchasePrice', null, $this->purchasePrice);
		if ($this->turnoverGroup !== null) $gen->writeInt('turnoverGroup', $this->turnoverGroup);
		if ($this->vatCode !== null) $gen->writeInt('vatCode', $this->vatCode);
		if ($this->vatPercentage !== null) $gen->writeInt('vatPercentage', $this->vatPercentage);
		if ($this->discountPercentage !== null) $gen->writeInt('discountPercentage', $this->discountPercentage);
		if ($this->articleVariantId !== null) $gen->writeInt('articleVariantId', $this->articleVariantId);
		if ($this->quantityInPackaging !== null) $gen->writeBigDecimal('quantityInPackaging', $this->quantityInPackaging);
		if ($this->packagingType !== null) $gen->out->writeElementNs(self::TNS, 'packagingType', null, $this->packagingType);
		if ($this->barcodeSalesPrice !== null) $gen->writeBigDecimal('barcodeSalesPrice', $this->barcodeSalesPrice);
		if ($this->quantityOfPackagesDelivered !== null) $gen->writeBigDecimal('quantityOfPackagesDelivered', $this->quantityOfPackagesDelivered);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseDeliveryV2Line extends SoapObject {
	public ?int $lineNumber = null;
	public ?int $articleNumber = null;
	public ?string $pluNumber = null;
	public ?string $text = null;
	public ?int $branchNumber = null;
	public ?\DateTime $deliveryDate = null;
	public ?\DateTime $deliveryDateEnd = null;
	public ?int $relationNumber = null;
	public ?string $orderText = null;
	public ?SavePurchaseDeliveryV2LineData $data = null;
	public ?string $supplierArticleNumber = null;
	public ?string $barcode = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->lineNumber !== null) $gen->writeInt('lineNumber', $this->lineNumber);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->pluNumber !== null) $gen->out->writeElementNs(self::TNS, 'pluNumber', null, $this->pluNumber);
		if ($this->text !== null) $gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->deliveryDate !== null) (SoapMplusDate::fromDateTime($this->deliveryDate))->write($gen, 'deliveryDate');
		if ($this->deliveryDateEnd !== null) (SoapMplusDate::fromDateTime($this->deliveryDateEnd))->write($gen, 'deliveryDateEnd');
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->orderText !== null) $gen->out->writeElementNs(self::TNS, 'orderText', null, $this->orderText);
		if ($this->data !== null) $this->data->write($gen, 'data');
		if ($this->supplierArticleNumber !== null) $gen->out->writeElementNs(self::TNS, 'supplierArticleNumber', null, $this->supplierArticleNumber);
		if ($this->barcode !== null) $gen->out->writeElementNs(self::TNS, 'barcode', null, $this->barcode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseDeliveryV2 extends SoapObject {
	public ?YearNumber $purchaseDeliveryNumber = null;
	public ?string $extPurchaseDeliveryId = null;
	public ?\DateTime $deliveryDate = null;
	public ?int $relationNumber = null;
	public ?int $branchNumber = null;
	public ?int $employeeNumber = null;
	public ?string $reference = null;
	public ?string $deliveryAddressId = null;
	public ?string $vatMethod = null;
	public ?int $versionNumber = null;
	public ?Address $deliveryAddress = null;
	/** @var SavePurchaseDeliveryV2Line[] */
	public $lineList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->purchaseDeliveryNumber !== null) $this->purchaseDeliveryNumber->write($gen, 'purchaseDeliveryNumber');
		if ($this->extPurchaseDeliveryId !== null) $gen->out->writeElementNs(self::TNS, 'extPurchaseDeliveryId', null, $this->extPurchaseDeliveryId);
		if ($this->deliveryDate !== null) (SoapMplusDate::fromDateTime($this->deliveryDate))->write($gen, 'deliveryDate');
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->deliveryAddressId !== null) $gen->out->writeElementNs(self::TNS, 'deliveryAddressId', null, $this->deliveryAddressId);
		if ($this->vatMethod !== null) $gen->out->writeElementNs(self::TNS, 'vatMethod', null, $this->vatMethod);
		if ($this->versionNumber !== null) $gen->writeInt('versionNumber', $this->versionNumber);
		if ($this->deliveryAddress !== null) $this->deliveryAddress->write($gen, 'deliveryAddress');
		if ($this->lineList !== null) {
$tmp_lineList = new SavePurchaseDeliveryV2LineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseDeliveryV2Request extends SoapObject {
	public SavePurchaseDeliveryV2 $savePurchaseDelivery;
	public ?YearNumberVersion $fromPurchaseOrder = null;
	public function __construct() {
		$this->savePurchaseDelivery = new SavePurchaseDeliveryV2();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->savePurchaseDelivery->write($gen, 'savePurchaseDelivery');
		if ($this->fromPurchaseOrder !== null) $this->fromPurchaseOrder->write($gen, 'fromPurchaseOrder');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class EncryptStringRequest extends SoapObject {
	public string $plainString;
	public string $encryptionKey;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'plainString', null, $this->plainString);
		$gen->out->writeElementNs(self::TNS, 'encryptionKey', null, $this->encryptionKey);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CardLayoutField extends SoapObject {
	public ?int $cardLayoutFieldId = null;
	public ?string $label = null;
	public ?string $abbreviation = null;
	public ?string $description = null;
	public ?int $cardColumn = null;
	public ?int $cardRow = null;
	public ?int $fieldWidth = null;
	public ?int $fieldHeight = null;
	public ?int $maximumLineCharacters = null;
	public ?int $maximumLines = null;
	public ?int $minimumDecimals = null;
	public ?int $maximumDecimals = null;
	public ?string $cardLayoutFieldType = null;
	public ?string $dataType = null;
	public ?string $columnName = null;
	public ?string $apiName = null;
	public ?bool $active = null;
	public ?bool $readOnly = null;
	public ?bool $visible = null;
	public ?string $defaultValue = null;
	public ?bool $isRequired = null;
	public ?string $prefix = null;
	public ?string $postfix = null;
	public ?string $warning = null;
	public ?bool $infoPopup = null;
	public ?int $categoryId = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->cardLayoutFieldId !== null) $gen->writeInt('cardLayoutFieldId', $this->cardLayoutFieldId);
		if ($this->label !== null) $gen->out->writeElementNs(self::TNS, 'label', null, $this->label);
		if ($this->abbreviation !== null) $gen->out->writeElementNs(self::TNS, 'abbreviation', null, $this->abbreviation);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->cardColumn !== null) $gen->writeInt('cardColumn', $this->cardColumn);
		if ($this->cardRow !== null) $gen->writeInt('cardRow', $this->cardRow);
		if ($this->fieldWidth !== null) $gen->writeInt('fieldWidth', $this->fieldWidth);
		if ($this->fieldHeight !== null) $gen->writeInt('fieldHeight', $this->fieldHeight);
		if ($this->maximumLineCharacters !== null) $gen->writeInt('maximumLineCharacters', $this->maximumLineCharacters);
		if ($this->maximumLines !== null) $gen->writeInt('maximumLines', $this->maximumLines);
		if ($this->minimumDecimals !== null) $gen->writeInt('minimumDecimals', $this->minimumDecimals);
		if ($this->maximumDecimals !== null) $gen->writeInt('maximumDecimals', $this->maximumDecimals);
		if ($this->cardLayoutFieldType !== null) $gen->out->writeElementNs(self::TNS, 'cardLayoutFieldType', null, $this->cardLayoutFieldType);
		if ($this->dataType !== null) $gen->out->writeElementNs(self::TNS, 'dataType', null, $this->dataType);
		if ($this->columnName !== null) $gen->out->writeElementNs(self::TNS, 'columnName', null, $this->columnName);
		if ($this->apiName !== null) $gen->out->writeElementNs(self::TNS, 'apiName', null, $this->apiName);
		if ($this->active !== null) $gen->writeBool('active', $this->active);
		if ($this->readOnly !== null) $gen->writeBool('readOnly', $this->readOnly);
		if ($this->visible !== null) $gen->writeBool('visible', $this->visible);
		if ($this->defaultValue !== null) $gen->out->writeElementNs(self::TNS, 'defaultValue', null, $this->defaultValue);
		if ($this->isRequired !== null) $gen->writeBool('isRequired', $this->isRequired);
		if ($this->prefix !== null) $gen->out->writeElementNs(self::TNS, 'prefix', null, $this->prefix);
		if ($this->postfix !== null) $gen->out->writeElementNs(self::TNS, 'postfix', null, $this->postfix);
		if ($this->warning !== null) $gen->out->writeElementNs(self::TNS, 'warning', null, $this->warning);
		if ($this->infoPopup !== null) $gen->writeBool('infoPopup', $this->infoPopup);
		if ($this->categoryId !== null) $gen->writeInt('categoryId', $this->categoryId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CardLayoutFieldList extends SoapObject {
	/** @var CardLayoutField[] */
	public $cardLayoutField = array();
	public function __construct($list = array()) { $this->cardLayoutField = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->cardLayoutField as $elem) $elem->write($gen, 'cardLayoutField');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticleCardLayoutRequest extends SoapObject {
	public ?int $categoryId = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->categoryId !== null) $gen->writeInt('categoryId', $this->categoryId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateArticleCardLayoutRequest extends SoapObject {
	/** @var CardLayoutField[] */
	public $cardLayoutFieldList = array();
	public function __construct($list = array()) { $this->cardLayoutFieldList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_cardLayoutFieldList = new CardLayoutFieldList($this->cardLayoutFieldList);
$tmp_cardLayoutFieldList->write($gen, 'cardLayoutFieldList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RetailSpaceRental extends SoapObject {
	public int $retailSpaceRentalNumber;
	public ?string $retailSpaceRentalBarcode = null;
	public ?string $retailSpaceRentalBooth = null;
	public bool $retailSpaceRentalActive;
	public ?string $retailSpaceRentalName = null;
	public ?string $retailSpaceRentalAddress = null;
	public ?string $retailSpaceRentalZipCode = null;
	public ?string $retailSpaceRentalCity = null;
	public ?string $retailSpaceRentalBankAccountNumber = null;
	public ?string $retailSpaceRentalPhoneNumber = null;
	public ?string $retailSpaceRentalEmailAddress = null;
	public ?\DateTime $retailSpaceRentalStartDate = null;
	public ?\DateTime $retailSpaceRentalEndDate = null;
	public int $retailSpaceRentalTotalSales;
	public int $retailSpaceRentalTotalPaidOut;
	public int $retailSpaceRentalBalance;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('retailSpaceRentalNumber', $this->retailSpaceRentalNumber);
		if ($this->retailSpaceRentalBarcode !== null) $gen->out->writeElementNs(self::TNS, 'retailSpaceRentalBarcode', null, $this->retailSpaceRentalBarcode);
		if ($this->retailSpaceRentalBooth !== null) $gen->out->writeElementNs(self::TNS, 'retailSpaceRentalBooth', null, $this->retailSpaceRentalBooth);
		$gen->writeBool('retailSpaceRentalActive', $this->retailSpaceRentalActive);
		if ($this->retailSpaceRentalName !== null) $gen->out->writeElementNs(self::TNS, 'retailSpaceRentalName', null, $this->retailSpaceRentalName);
		if ($this->retailSpaceRentalAddress !== null) $gen->out->writeElementNs(self::TNS, 'retailSpaceRentalAddress', null, $this->retailSpaceRentalAddress);
		if ($this->retailSpaceRentalZipCode !== null) $gen->out->writeElementNs(self::TNS, 'retailSpaceRentalZipCode', null, $this->retailSpaceRentalZipCode);
		if ($this->retailSpaceRentalCity !== null) $gen->out->writeElementNs(self::TNS, 'retailSpaceRentalCity', null, $this->retailSpaceRentalCity);
		if ($this->retailSpaceRentalBankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'retailSpaceRentalBankAccountNumber', null, $this->retailSpaceRentalBankAccountNumber);
		if ($this->retailSpaceRentalPhoneNumber !== null) $gen->out->writeElementNs(self::TNS, 'retailSpaceRentalPhoneNumber', null, $this->retailSpaceRentalPhoneNumber);
		if ($this->retailSpaceRentalEmailAddress !== null) $gen->out->writeElementNs(self::TNS, 'retailSpaceRentalEmailAddress', null, $this->retailSpaceRentalEmailAddress);
		if ($this->retailSpaceRentalStartDate !== null) (SoapMplusDate::fromDateTime($this->retailSpaceRentalStartDate))->write($gen, 'retailSpaceRentalStartDate');
		if ($this->retailSpaceRentalEndDate !== null) (SoapMplusDate::fromDateTime($this->retailSpaceRentalEndDate))->write($gen, 'retailSpaceRentalEndDate');
		$gen->writeInt('retailSpaceRentalTotalSales', $this->retailSpaceRentalTotalSales);
		$gen->writeInt('retailSpaceRentalTotalPaidOut', $this->retailSpaceRentalTotalPaidOut);
		$gen->writeInt('retailSpaceRentalBalance', $this->retailSpaceRentalBalance);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RetailSpaceRentalList extends SoapObject {
	/** @var RetailSpaceRental[] */
	public $retailSpaceRental = array();
	public function __construct($list = array()) { $this->retailSpaceRental = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->retailSpaceRental as $elem) $elem->write($gen, 'retailSpaceRental');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRetailSpaceRentalRequest extends SoapObject {
	public ?int $retailSpaceRentalNumber = null;
	public ?string $retailSpaceRentalBarcode = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->retailSpaceRentalNumber !== null) $gen->writeInt('retailSpaceRentalNumber', $this->retailSpaceRentalNumber);
		if ($this->retailSpaceRentalBarcode !== null) $gen->out->writeElementNs(self::TNS, 'retailSpaceRentalBarcode', null, $this->retailSpaceRentalBarcode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRetailSpaceRentalsRequest extends SoapObject {
	public ?bool $onlyActive = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->onlyActive !== null) $gen->writeBool('onlyActive', $this->onlyActive);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class EntityTypeList extends SoapObject {
	/** @var string[] */
	public $entityType = array();
	public function __construct($list = array()) { $this->entityType = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->entityType as $elem) $gen->out->writeElementNs(self::TNS, 'entityType', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class EidSearchRequest extends SoapObject {
	/** @var string[] */
	public $filter = array();
	public string $eidType;
	public string $eidHexData;
	public function writeProps(SoapGenerator $gen): void {
		$tmp_filter = new EntityTypeList($this->filter);
$tmp_filter->write($gen, 'filter');

		$gen->out->writeElementNs(self::TNS, 'eidType', null, $this->eidType);
		$gen->out->writeElementNs(self::TNS, 'eidHexData', null, $this->eidHexData);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OverviewFilter extends SoapObject {
	public string $fieldName;
	public string $fieldValue;
	public ?string $filterOperator = null;
	public ?bool $caseSensitive = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'fieldName', null, $this->fieldName);
		$gen->out->writeElementNs(self::TNS, 'fieldValue', null, $this->fieldValue);
		if ($this->filterOperator !== null) $gen->out->writeElementNs(self::TNS, 'filterOperator', null, $this->filterOperator);
		if ($this->caseSensitive !== null) $gen->writeBool('caseSensitive', $this->caseSensitive);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OverviewFilterList extends SoapObject {
	/** @var OverviewFilter[] */
	public $filter = array();
	public function __construct($list = array()) { $this->filter = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->filter as $elem) $elem->write($gen, 'filter');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OverviewSearch extends SoapObject {
	public string $term;
	public bool $active;
	public bool $notActive;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'term', null, $this->term);
		$gen->writeBool('active', $this->active);
		$gen->writeBool('notActive', $this->notActive);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ScopeValues extends SoapObject {
	public ?int $branchNumber = null;
	public ?int $workplaceNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->workplaceNumber !== null) $gen->writeInt('workplaceNumber', $this->workplaceNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OverviewRequest extends SoapObject {
	public string $cardType;
	public ?int $categoryId = null;
	/** @var string[] */
	public $selectFieldNameList = array();
	public ?int $pageNumber = null;
	public ?int $maxPerPage = null;
	public ?string $orderField = null;
	public ?string $sortOrder = null;
	public ?OverviewSearch $search = null;
	/** @var OverviewFilter[] */
	public $filterList = array();
	public ?bool $retrieveImageList = null;
	public ?string $imageDetails = null;
	public ?ScopeValues $scopeValues = null;
	public ?bool $aggregateValues = null;
	public ?int $branchNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardType', null, $this->cardType);
		if ($this->categoryId !== null) $gen->writeInt('categoryId', $this->categoryId);
		foreach ($this->selectFieldNameList as $elem) $gen->out->writeElementNs(self::TNS, 'selectFieldNameList', null, $elem);
		if ($this->pageNumber !== null) $gen->writeInt('pageNumber', $this->pageNumber);
		if ($this->maxPerPage !== null) $gen->writeInt('maxPerPage', $this->maxPerPage);
		if ($this->orderField !== null) $gen->out->writeElementNs(self::TNS, 'orderField', null, $this->orderField);
		if ($this->sortOrder !== null) $gen->out->writeElementNs(self::TNS, 'sortOrder', null, $this->sortOrder);
		if ($this->search !== null) $this->search->write($gen, 'search');
		foreach ($this->filterList as $elem) $elem->write($gen, 'filterList');
		if ($this->retrieveImageList !== null) $gen->writeBool('retrieveImageList', $this->retrieveImageList);
		if ($this->imageDetails !== null) $gen->out->writeElementNs(self::TNS, 'imageDetails', null, $this->imageDetails);
		if ($this->scopeValues !== null) $this->scopeValues->write($gen, 'scopeValues');
		if ($this->aggregateValues !== null) $gen->writeBool('aggregateValues', $this->aggregateValues);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OverviewField extends SoapObject {
	public string $name;
	public string $value;
	public ?bool $scoped = null;
	public ?bool $aggregated = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->out->writeElementNs(self::TNS, 'value', null, $this->value);
		if ($this->scoped !== null) $gen->writeBool('scoped', $this->scoped);
		if ($this->aggregated !== null) $gen->writeBool('aggregated', $this->aggregated);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SimpleImage extends SoapObject {
	public string $hash;
	public string $url;
	public int $width;
	public int $height;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'hash', null, $this->hash);
		$gen->out->writeElementNs(self::TNS, 'url', null, $this->url);
		$gen->writeInt('width', $this->width);
		$gen->writeInt('height', $this->height);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SimpleImageList extends SoapObject {
	/** @var SimpleImage[] */
	public $image = array();
	public function __construct($list = array()) { $this->image = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->image as $elem) $elem->write($gen, 'image');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OverviewFieldList extends SoapObject {
	/** @var OverviewField[] */
	public $fieldList = array();
	/** @var Image[] */
	public $imageList = null;
	/** @var SimpleImage[] */
	public $images = null;
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->fieldList as $elem) $elem->write($gen, 'fieldList');
		if ($this->imageList !== null) {
$tmp_imageList = new ImageList($this->imageList);
$tmp_imageList->write($gen, 'imageList');
}
		if ($this->images !== null) {
$tmp_images = new SimpleImageList($this->images);
$tmp_images->write($gen, 'images');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OverviewList extends SoapObject {
	/** @var OverviewFieldList[] */
	public $overview = array();
	public function __construct($list = array()) { $this->overview = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->overview as $elem) $elem->write($gen, 'overview');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOverviewError extends SoapObject {
	public ?string $field = null;
	public string $errorCode;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->field !== null) $gen->out->writeElementNs(self::TNS, 'field', null, $this->field);
		$gen->out->writeElementNs(self::TNS, 'errorCode', null, $this->errorCode);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOverviewErrorList extends SoapObject {
	/** @var GetOverviewError[] */
	public $errors = array();
	public function __construct($list = array()) { $this->errors = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->errors as $elem) $elem->write($gen, 'errors');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOverviewFieldsRequest extends SoapObject {
	public string $cardType;
	public ?int $categoryId = null;
	public ?int $branchNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardType', null, $this->cardType);
		if ($this->categoryId !== null) $gen->writeInt('categoryId', $this->categoryId);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class FieldSelectValue extends SoapObject {
	public string $id;
	public string $value;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'value', null, $this->value);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OverviewFieldsField extends SoapObject {
	public string $name;
	public string $label;
	public string $description;
	public string $defaultValue;
	public string $type;
	/** @var FieldSelectValue[] */
	public $selectValueList = array();
	public bool $readOnly;
	public bool $valueVisible;
	public bool $required;
	public int $tabOrder;
	public int $maxCharsPerLine;
	public int $maxLines;
	public bool $active;
	public bool $onCard;
	public bool $isSelectionField;
	public bool $nullable;
	public string $formule;
	public int $charMaxLength;
	public int $numericPrecision;
	public int $numericRadix;
	public int $numericScale;
	public ?int $cardColumn = null;
	public ?int $cardRow = null;
	public bool $showInInfoPopup;
	public bool $containsPersonalData;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->out->writeElementNs(self::TNS, 'label', null, $this->label);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		$gen->out->writeElementNs(self::TNS, 'defaultValue', null, $this->defaultValue);
		$gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		foreach ($this->selectValueList as $elem) $elem->write($gen, 'selectValueList');
		$gen->writeBool('readOnly', $this->readOnly);
		$gen->writeBool('valueVisible', $this->valueVisible);
		$gen->writeBool('required', $this->required);
		$gen->writeInt('tabOrder', $this->tabOrder);
		$gen->writeInt('maxCharsPerLine', $this->maxCharsPerLine);
		$gen->writeInt('maxLines', $this->maxLines);
		$gen->writeBool('active', $this->active);
		$gen->writeBool('onCard', $this->onCard);
		$gen->writeBool('isSelectionField', $this->isSelectionField);
		$gen->writeBool('nullable', $this->nullable);
		$gen->out->writeElementNs(self::TNS, 'formule', null, $this->formule);
		$gen->writeInt('charMaxLength', $this->charMaxLength);
		$gen->writeInt('numericPrecision', $this->numericPrecision);
		$gen->writeInt('numericRadix', $this->numericRadix);
		$gen->writeInt('numericScale', $this->numericScale);
		if ($this->cardColumn !== null) $gen->writeInt('cardColumn', $this->cardColumn);
		if ($this->cardRow !== null) $gen->writeInt('cardRow', $this->cardRow);
		$gen->writeBool('showInInfoPopup', $this->showInInfoPopup);
		$gen->writeBool('containsPersonalData', $this->containsPersonalData);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OverviewFieldsList extends SoapObject {
	/** @var OverviewFieldsField[] */
	public $overviewFields = array();
	public function __construct($list = array()) { $this->overviewFields = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->overviewFields as $elem) $elem->write($gen, 'overviewFields');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOverviewFieldsError extends SoapObject {
	public string $errorCode;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'errorCode', null, $this->errorCode);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOverviewFieldsErrorList extends SoapObject {
	/** @var GetOverviewFieldsError[] */
	public $errors = array();
	public function __construct($list = array()) { $this->errors = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->errors as $elem) $elem->write($gen, 'errors');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateBatchField extends SoapObject {
	public string $name;
	public string $value;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->out->writeElementNs(self::TNS, 'value', null, $this->value);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateBatchFieldList extends SoapObject {
	/** @var UpdateBatchField[] */
	public $fieldList = array();
	public function __construct($list = array()) { $this->fieldList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->fieldList as $elem) $elem->write($gen, 'fieldList');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateBatchRequest extends SoapObject {
	public string $cardType;
	public ?int $categoryId = null;
	/** @var int[] */
	public $numbers = array();
	/** @var UpdateBatchField[] */
	public $fieldList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardType', null, $this->cardType);
		if ($this->categoryId !== null) $gen->writeInt('categoryId', $this->categoryId);
		foreach ($this->numbers as $elem) $gen->writeInt('numbers', $elem);
		$tmp_fieldList = new UpdateBatchFieldList($this->fieldList);
$tmp_fieldList->write($gen, 'fieldList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateBatchError extends SoapObject {
	public ?int $number = null;
	public ?string $field = null;
	public string $errorCode;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->number !== null) $gen->writeInt('number', $this->number);
		if ($this->field !== null) $gen->out->writeElementNs(self::TNS, 'field', null, $this->field);
		$gen->out->writeElementNs(self::TNS, 'errorCode', null, $this->errorCode);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateBatchErrorList extends SoapObject {
	/** @var UpdateBatchError[] */
	public $errors = array();
	public function __construct($list = array()) { $this->errors = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->errors as $elem) $elem->write($gen, 'errors');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintRequest extends SoapObject {
	public ?int $branchNumber = null;
	public ?int $workplaceNumber = null;
	public ?int $printerId = null;
	public string $text;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->workplaceNumber !== null) $gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->printerId !== null) $gen->writeInt('printerId', $this->printerId);
		$gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetKitchenTicketsRequest extends SoapObject {
	public ?int $branchNumber = null;
	public ?int $workplaceNumber = null;
	public ?string $orderId = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->workplaceNumber !== null) $gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->orderId !== null) $gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class KitchenTicketLine extends SoapObject {
	public string $kitchenTicketLineId;
	public ?int $locationId = null;
	public ?int $articleNumber = null;
	public ?BigDecimal $quantity = null;
	public bool $isStarted;
	public bool $isPreparationStarted;
	public bool $isReady;
	public bool $isServed;
	public bool $isDeleted;
	public string $text;
	public ?string $preparationText = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'kitchenTicketLineId', null, $this->kitchenTicketLineId);
		if ($this->locationId !== null) $gen->writeInt('locationId', $this->locationId);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->quantity !== null) $gen->writeValueAndScale('quantity', 'decimalPlaces', $this->quantity, 2);
		$gen->writeBool('isStarted', $this->isStarted);
		$gen->writeBool('isPreparationStarted', $this->isPreparationStarted);
		$gen->writeBool('isReady', $this->isReady);
		$gen->writeBool('isServed', $this->isServed);
		$gen->writeBool('isDeleted', $this->isDeleted);
		$gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->preparationText !== null) $gen->out->writeElementNs(self::TNS, 'preparationText', null, $this->preparationText);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class KitchenTicketLineList extends SoapObject {
	/** @var KitchenTicketLine[] */
	public $kitchenTicketLine = array();
	public function __construct($list = array()) { $this->kitchenTicketLine = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->kitchenTicketLine as $elem) $elem->write($gen, 'kitchenTicketLine');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class KitchenTicketCourse extends SoapObject {
	public int $courseNumber;
	public ?string $courseName = null;
	public ?string $courseAbbreviation = null;
	public ?int $maximumPreparationTime = null;
	public bool $isRequested;
	public bool $isStarted;
	public bool $isCompletelyReady;
	public bool $isCompletelyServed;
	public ?\DateTime $startTimestamp = null;
	public ?int $startVersionNumber = null;
	public ?bool $startedThroughLine = null;
	/** @var KitchenTicketLine[] */
	public $kitchenTicketLineList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('courseNumber', $this->courseNumber);
		if ($this->courseName !== null) $gen->out->writeElementNs(self::TNS, 'courseName', null, $this->courseName);
		if ($this->courseAbbreviation !== null) $gen->out->writeElementNs(self::TNS, 'courseAbbreviation', null, $this->courseAbbreviation);
		if ($this->maximumPreparationTime !== null) $gen->writeInt('maximumPreparationTime', $this->maximumPreparationTime);
		$gen->writeBool('isRequested', $this->isRequested);
		$gen->writeBool('isStarted', $this->isStarted);
		$gen->writeBool('isCompletelyReady', $this->isCompletelyReady);
		$gen->writeBool('isCompletelyServed', $this->isCompletelyServed);
		if ($this->startTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->startTimestamp))->write($gen, 'startTimestamp');
		if ($this->startVersionNumber !== null) $gen->writeInt('startVersionNumber', $this->startVersionNumber);
		if ($this->startedThroughLine !== null) $gen->writeBool('startedThroughLine', $this->startedThroughLine);
		$tmp_kitchenTicketLineList = new KitchenTicketLineList($this->kitchenTicketLineList);
$tmp_kitchenTicketLineList->write($gen, 'kitchenTicketLineList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class KitchenTicketCourseList extends SoapObject {
	/** @var KitchenTicketCourse[] */
	public $kitchenTicketCourse = array();
	public function __construct($list = array()) { $this->kitchenTicketCourse = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->kitchenTicketCourse as $elem) $elem->write($gen, 'kitchenTicketCourse');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class KitchenTicket extends SoapObject {
	public string $kitchenTicketId;
	public int $versionNumber;
	public \DateTime $entryTimestamp;
	public \DateTime $changeTimestamp;
	public string $state;
	public string $orderId;
	public int $branchNumber;
	public int $workplaceNumber;
	public int $tableNumber;
	public int $tableSubNumber;
	public int $orderYear;
	public int $orderNumber;
	public ?string $tableDescription = null;
	public ?string $tableZone = null;
	public int $employeeNumber;
	public ?int $relationNumber = null;
	public bool $isVip;
	public ?\DateTime $plannedDeliveryTimestamp = null;
	public ?\DateTime $snoozeTimestamp = null;
	public ?int $snoozeDuration = null;
	/** @var KitchenTicketCourse[] */
	public $kitchenTicketCourseList = array();
	public function __construct() {
		$this->entryTimestamp = new \DateTime();
		$this->changeTimestamp = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'kitchenTicketId', null, $this->kitchenTicketId);
		$gen->writeInt('versionNumber', $this->versionNumber);
		(SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		(SoapMplusDateTime::fromDateTime($this->changeTimestamp))->write($gen, 'changeTimestamp');
		$gen->out->writeElementNs(self::TNS, 'state', null, $this->state);
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
		$gen->writeInt('tableNumber', $this->tableNumber);
		$gen->writeInt('tableSubNumber', $this->tableSubNumber);
		$gen->writeInt('orderYear', $this->orderYear);
		$gen->writeInt('orderNumber', $this->orderNumber);
		if ($this->tableDescription !== null) $gen->out->writeElementNs(self::TNS, 'tableDescription', null, $this->tableDescription);
		if ($this->tableZone !== null) $gen->out->writeElementNs(self::TNS, 'tableZone', null, $this->tableZone);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		$gen->writeBool('isVip', $this->isVip);
		if ($this->plannedDeliveryTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->plannedDeliveryTimestamp))->write($gen, 'plannedDeliveryTimestamp');
		if ($this->snoozeTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->snoozeTimestamp))->write($gen, 'snoozeTimestamp');
		if ($this->snoozeDuration !== null) $gen->writeInt('snoozeDuration', $this->snoozeDuration);
		$tmp_kitchenTicketCourseList = new KitchenTicketCourseList($this->kitchenTicketCourseList);
$tmp_kitchenTicketCourseList->write($gen, 'kitchenTicketCourseList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class KitchenTicketList extends SoapObject {
	/** @var KitchenTicket[] */
	public $kitchenTicket = array();
	public function __construct($list = array()) { $this->kitchenTicket = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->kitchenTicket as $elem) $elem->write($gen, 'kitchenTicket');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class StockCorrection extends SoapObject {
	public int $articleNumber;
	public BigDecimal $amount;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeValueAndScale('amount', 'decimalPlaces', $this->amount, 2);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class StockCorrectionList extends SoapObject {
	/** @var StockCorrection[] */
	public $correction = array();
	public function __construct($list = array()) { $this->correction = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->correction as $elem) $elem->write($gen, 'correction');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveStockCorrectionsRequest extends SoapObject {
	public int $branchNumber;
	public int $employeeNumber;
	public string $reference;
	/** @var StockCorrection[] */
	public $stockCorrectionList = array();
	public ?string $correctionType = null;
	public ?string $correctionMode = null;
	public ?string $reason = null;
	public ?string $plannedCycleCountId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		$tmp_stockCorrectionList = new StockCorrectionList($this->stockCorrectionList);
$tmp_stockCorrectionList->write($gen, 'stockCorrectionList');

		if ($this->correctionType !== null) $gen->out->writeElementNs(self::TNS, 'correctionType', null, $this->correctionType);
		if ($this->correctionMode !== null) $gen->out->writeElementNs(self::TNS, 'correctionMode', null, $this->correctionMode);
		if ($this->reason !== null) $gen->out->writeElementNs(self::TNS, 'reason', null, $this->reason);
		if ($this->plannedCycleCountId !== null) $gen->out->writeElementNs(self::TNS, 'plannedCycleCountId', null, $this->plannedCycleCountId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseBookEntry extends SoapObject {
	public int $articleNumber;
	public BigDecimal $quantity;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeBigDecimal('quantity', $this->quantity);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PurchaseBook extends SoapObject {
	public int $branchNumber;
	/** @var PurchaseBookEntry[] */
	public $entries = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		foreach ($this->entries as $elem) $elem->write($gen, 'entries');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPurchaseBookRequest extends SoapObject {
	public int $branchNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class AddToPurchaseBookRequest extends SoapObject {
	public int $branchNumber;
	/** @var PurchaseBookEntry[] */
	public $entries = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		foreach ($this->entries as $elem) $elem->write($gen, 'entries');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetStockCorrectionsRequest extends SoapObject {
	/** @var int[] */
	public $employeeNumbers = array();
	/** @var int[] */
	public $branchNumbers = array();
	/** @var int[] */
	public $articleNumbers = array();
	public ?\DateTime $fromFinancialDate = null;
	public ?\DateTime $throughFinancialDate = null;
	public ?string $correctionType = null;
	public ?YearNumber $stockCorrectionNumber = null;
	public ?bool $includeStockCorrectionLineList = null;
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->employeeNumbers as $elem) $gen->writeInt('employeeNumbers', $elem);
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
		if ($this->fromFinancialDate !== null) $gen->writeDate('fromFinancialDate', $this->fromFinancialDate);
		if ($this->throughFinancialDate !== null) $gen->writeDate('throughFinancialDate', $this->throughFinancialDate);
		if ($this->correctionType !== null) $gen->out->writeElementNs(self::TNS, 'correctionType', null, $this->correctionType);
		if ($this->stockCorrectionNumber !== null) $this->stockCorrectionNumber->write($gen, 'stockCorrectionNumber');
		if ($this->includeStockCorrectionLineList !== null) $gen->writeBool('includeStockCorrectionLineList', $this->includeStockCorrectionLineList);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class StockCorrectionLineV2 extends SoapObject {
	public int $articleNumber;
	public BigDecimal $amountOld;
	public BigDecimal $amountNew;
	public int $stockId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeBigDecimal('amountOld', $this->amountOld);
		$gen->writeBigDecimal('amountNew', $this->amountNew);
		$gen->writeInt('stockId', $this->stockId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class StockCorrectionLineV2List extends SoapObject {
	/** @var StockCorrectionLineV2[] */
	public $stockCorrectionLine = array();
	public function __construct($list = array()) { $this->stockCorrectionLine = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->stockCorrectionLine as $elem) $elem->write($gen, 'stockCorrectionLine');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class StockCorrectionV2 extends SoapObject {
	public YearNumber $stockCorrectionNumber;
	public int $branchNumber;
	public ?int $branchCorrectionNumber = null;
	public \DateTime $entryTimestamp;
	public ?int $employeeNumber = null;
	public ?string $reference = null;
	public ?string $correctionType = null;
	public ?string $reason = null;
	public ?int $stockCorrectionLineListCount = null;
	/** @var StockCorrectionLineV2[] */
	public $stockCorrectionLineList = array();
	public function __construct() {
		$this->stockCorrectionNumber = new YearNumber();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->stockCorrectionNumber->write($gen, 'stockCorrectionNumber');
		$gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->branchCorrectionNumber !== null) $gen->writeInt('branchCorrectionNumber', $this->branchCorrectionNumber);
		$gen->writeDateTime('entryTimestamp', $this->entryTimestamp);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->correctionType !== null) $gen->out->writeElementNs(self::TNS, 'correctionType', null, $this->correctionType);
		if ($this->reason !== null) $gen->out->writeElementNs(self::TNS, 'reason', null, $this->reason);
		if ($this->stockCorrectionLineListCount !== null) $gen->writeInt('stockCorrectionLineListCount', $this->stockCorrectionLineListCount);
		$tmp_stockCorrectionLineList = new StockCorrectionLineV2List($this->stockCorrectionLineList);
$tmp_stockCorrectionLineList->write($gen, 'stockCorrectionLineList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class StockCorrectionV2List extends SoapObject {
	/** @var StockCorrectionV2[] */
	public $stockCorrection = array();
	public function __construct($list = array()) { $this->stockCorrection = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->stockCorrection as $elem) $elem->write($gen, 'stockCorrection');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticlesNutritionalCharacteristicsRequest extends SoapObject {
	/** @var int[] */
	public $articleNumbers = array();
	public function __construct($list = array()) { $this->articleNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_articleNumbers = new NumberList($this->articleNumbers);
$tmp_articleNumbers->write($gen, 'articleNumbers');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticlesNutritionalCharacteristicsResponseElem extends SoapObject {
	public int $articleNumber;
	public ?NutritionalCharacteristics $nutritionalCharacteristics = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->nutritionalCharacteristics !== null) $this->nutritionalCharacteristics->write($gen, 'nutritionalCharacteristics');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class NutritionalCharacteristicInput extends SoapObject {
	public int $id;
	public string $presence;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
		$gen->out->writeElementNs(self::TNS, 'presence', null, $this->presence);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class NutritionalCharacteristicsInput extends SoapObject {
	/** @var NutritionalCharacteristicInput[] */
	public $allergenList = array();
	/** @var NutritionalCharacteristicInput[] */
	public $dietRestrictionList = array();
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->allergenList as $elem) $elem->write($gen, 'allergenList');
		foreach ($this->dietRestrictionList as $elem) $elem->write($gen, 'dietRestrictionList');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateArticleNutritionalCharacteristicsRequest extends SoapObject {
	public int $articleNumber;
	public NutritionalCharacteristicsInput $nutritionalCharacteristics;
	public string $updateBehavior;
	public function __construct() {
		$this->nutritionalCharacteristics = new NutritionalCharacteristicsInput();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$this->nutritionalCharacteristics->write($gen, 'nutritionalCharacteristics');
		$gen->out->writeElementNs(self::TNS, 'updateBehavior', null, $this->updateBehavior);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPreparationMethodGroupsRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PreparationMethodItem extends SoapObject {
	public int $id;
	public int $sequenceNumber;
	public ?int $articleNumber = null;
	public ?BigDecimal $priceIncl = null;
	public ?BigDecimal $priceExcl = null;
	public string $subLineType;
	public string $remark;
	public ?BigDecimal $surcharge = null;
	public string $translation;
	public Colour $buttonColour;
	public function __construct() {
		$this->buttonColour = new Colour();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
		$gen->writeInt('sequenceNumber', $this->sequenceNumber);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->priceIncl !== null) $gen->writeBigDecimal('priceIncl', $this->priceIncl);
		if ($this->priceExcl !== null) $gen->writeBigDecimal('priceExcl', $this->priceExcl);
		$gen->out->writeElementNs(self::TNS, 'subLineType', null, $this->subLineType);
		$gen->out->writeElementNs(self::TNS, 'remark', null, $this->remark);
		if ($this->surcharge !== null) $gen->writeBigDecimal('surcharge', $this->surcharge);
		$gen->out->writeElementNs(self::TNS, 'translation', null, $this->translation);
		$this->buttonColour->write($gen, 'buttonColour');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PreparationMethodItemList extends SoapObject {
	/** @var PreparationMethodItem[] */
	public $preparationMethodItem = array();
	public function __construct($list = array()) { $this->preparationMethodItem = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->preparationMethodItem as $elem) $elem->write($gen, 'preparationMethodItem');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PreparationMethodGroup extends SoapObject {
	public int $groupNumber;
	public string $description;
	public bool $closeAfterSelection;
	public bool $selectionRequired;
	public bool $maxOneSelection;
	public int $maxCols;
	/** @var PreparationMethodItem[] */
	public $preparationMethods = array();
	public string $paletteJson;
	public ?\DateTime $deletedOn = null;
	public int $syncMarker;
	public bool $isPosGroup;
	public bool $isOnlineGroup;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('groupNumber', $this->groupNumber);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		$gen->writeBool('closeAfterSelection', $this->closeAfterSelection);
		$gen->writeBool('selectionRequired', $this->selectionRequired);
		$gen->writeBool('maxOneSelection', $this->maxOneSelection);
		$gen->writeInt('maxCols', $this->maxCols);
		$tmp_preparationMethods = new PreparationMethodItemList($this->preparationMethods);
$tmp_preparationMethods->write($gen, 'preparationMethods');

		$gen->out->writeElementNs(self::TNS, 'paletteJson', null, $this->paletteJson);
		if ($this->deletedOn !== null) $gen->writeDateTime('deletedOn', $this->deletedOn);
		$gen->writeInt('syncMarker', $this->syncMarker);
		$gen->writeBool('isPosGroup', $this->isPosGroup);
		$gen->writeBool('isOnlineGroup', $this->isOnlineGroup);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PreparationMethodGroupList extends SoapObject {
	/** @var PreparationMethodGroup[] */
	public $preparationMethodGroup = array();
	public function __construct($list = array()) { $this->preparationMethodGroup = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->preparationMethodGroup as $elem) $elem->write($gen, 'preparationMethodGroup');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeletePreparationMethodGroupRequest extends SoapObject {
	public int $groupNumber;
	public bool $deleteEvenWhenInUse;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('groupNumber', $this->groupNumber);
		$gen->writeBool('deleteEvenWhenInUse', $this->deleteEvenWhenInUse);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticlesPreparationMethodGroupsRequest extends SoapObject {
	/** @var int[] */
	public $articleNumbers = array();
	public function __construct($list = array()) { $this->articleNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_articleNumbers = new NumberList($this->articleNumbers);
$tmp_articleNumbers->write($gen, 'articleNumbers');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticlePreparationMethodGroups extends SoapObject {
	public int $articleNumber;
	/** @var int[] */
	public $preparationMethodGroupNumbers = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		foreach ($this->preparationMethodGroupNumbers as $elem) $gen->writeInt('preparationMethodGroupNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticlePreparationMethodGroupsList extends SoapObject {
	/** @var ArticlePreparationMethodGroups[] */
	public $articlePreparationMethodGroups = array();
	public function __construct($list = array()) { $this->articlePreparationMethodGroups = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->articlePreparationMethodGroups as $elem) $elem->write($gen, 'articlePreparationMethodGroups');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateArticlePreparationMethodGroupsRequest extends SoapObject {
	public int $articleNumber;
	/** @var int[] */
	public $preparationMethodGroupNumbers = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		foreach ($this->preparationMethodGroupNumbers as $elem) $gen->writeInt('preparationMethodGroupNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PlaceTableOrderLineDataElem extends SoapObject {
	public BigDecimal $quantity;
	public ?BigDecimal $priceIncl = null;
	public ?BigDecimal $discountPercentage = null;
	public ?BigDecimal $discountAmount = null;
	public ?string $bpeId = null;
	public ?string $menuId = null;
	public ?string $menuLinesId = null;
	public ?int $courseNumber = null;
	public ?int $bpeAccordationEmployeeNumber = null;
	public ?string $priceType = null;
	public ?string $redeemedVoucherIssuanceId = null;
	public ?\DateTime $pendingVoucherIssuanceStartTs = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeBigDecimal('quantity', $this->quantity);
		if ($this->priceIncl !== null) $gen->writeBigDecimal('priceIncl', $this->priceIncl);
		if ($this->discountPercentage !== null) $gen->writeBigDecimal('discountPercentage', $this->discountPercentage);
		if ($this->discountAmount !== null) $gen->writeBigDecimal('discountAmount', $this->discountAmount);
		if ($this->bpeId !== null) $gen->out->writeElementNs(self::TNS, 'bpeId', null, $this->bpeId);
		if ($this->menuId !== null) $gen->out->writeElementNs(self::TNS, 'menuId', null, $this->menuId);
		if ($this->menuLinesId !== null) $gen->out->writeElementNs(self::TNS, 'menuLinesId', null, $this->menuLinesId);
		if ($this->courseNumber !== null) $gen->writeInt('courseNumber', $this->courseNumber);
		if ($this->bpeAccordationEmployeeNumber !== null) $gen->writeInt('bpeAccordationEmployeeNumber', $this->bpeAccordationEmployeeNumber);
		if ($this->priceType !== null) $gen->out->writeElementNs(self::TNS, 'priceType', null, $this->priceType);
		if ($this->redeemedVoucherIssuanceId !== null) $gen->out->writeElementNs(self::TNS, 'redeemedVoucherIssuanceId', null, $this->redeemedVoucherIssuanceId);
		if ($this->pendingVoucherIssuanceStartTs !== null) $gen->writeDateTime('pendingVoucherIssuanceStartTs', $this->pendingVoucherIssuanceStartTs);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PlaceTableOrderLineElem extends SoapObject {
	public ?int $articleNumber = null;
	public ?string $text = null;
	public ?PlaceTableOrderLineDataElem $data = null;
	public ?WebhookLineData $webhookLineData = null;
	/** @var PlaceTableOrderLineElem[] */
	public $preparationList = array();
	public ?bool $suppressDisposableComponent = null;
	public ?string $lineType = null;
	public ?string $tempId = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->text !== null) $gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->data !== null) $this->data->write($gen, 'data');
		if ($this->webhookLineData !== null) $this->webhookLineData->write($gen, 'webhookLineData');
		foreach ($this->preparationList as $elem) $elem->write($gen, 'preparationList');
		if ($this->suppressDisposableComponent !== null) $gen->writeBool('suppressDisposableComponent', $this->suppressDisposableComponent);
		if ($this->lineType !== null) $gen->out->writeElementNs(self::TNS, 'lineType', null, $this->lineType);
		if ($this->tempId !== null) $gen->out->writeElementNs(self::TNS, 'tempId', null, $this->tempId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PlaceTableOrderPaymentElem extends SoapObject {
	public string $method;
	public BigDecimal $amount;
	public ?EftTransactionDetails $eftTransactionDetails = null;
	public ?string $externalPaymentId = null;
	public ?string $giftcardNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'method', null, $this->method);
		$gen->writeBigDecimal('amount', $this->amount);
		if ($this->eftTransactionDetails !== null) $this->eftTransactionDetails->write($gen, 'eftTransactionDetails');
		if ($this->externalPaymentId !== null) $gen->out->writeElementNs(self::TNS, 'externalPaymentId', null, $this->externalPaymentId);
		if ($this->giftcardNumber !== null) $gen->out->writeElementNs(self::TNS, 'giftcardNumber', null, $this->giftcardNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TableOrderIdentifierElem extends SoapObject {
	public int $branchNumber;
	public int $tableNumber;
	public ?int $tableSubNumber = null;
	public ?string $orderId = null;
	public ?string $extOrderId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('tableNumber', $this->tableNumber);
		if ($this->tableSubNumber !== null) $gen->writeInt('tableSubNumber', $this->tableSubNumber);
		if ($this->orderId !== null) $gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->extOrderId !== null) $gen->out->writeElementNs(self::TNS, 'extOrderId', null, $this->extOrderId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PlaceTableOrderReq extends IdempotentReq {
	public TableOrderIdentifierElem $tableOrderIdentifier;
	public int $employeeNumber;
	public int $workplaceNumber;
	public ?string $tableDescription = null;
	public ?int $numberOfGuests = null;
	public ?int $relationNumber = null;
	public ?string $vatChange = null;
	/** @var PlaceTableOrderLineElem[] */
	public $lines = array();
	/** @var PlaceTableOrderPaymentElem[] */
	public $payments = array();
	public ?WebhookSessionData $webhookSessionData = null;
	public ?bool $keepTableName = null;
	public ?string $activityId = null;
	public ?\DateTime $deliveryPeriodBegin = null;
	public ?bool $automaticNewMenus = null;
	/** @var string[] */
	public $scannedVoucherIssuanceCodes = array();
	public ?bool $releaseTable = null;
	public function __construct() {
		$this->tableOrderIdentifier = new TableOrderIdentifierElem();
	}
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$this->tableOrderIdentifier->write($gen, 'tableOrderIdentifier');
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->tableDescription !== null) $gen->out->writeElementNs(self::TNS, 'tableDescription', null, $this->tableDescription);
		if ($this->numberOfGuests !== null) $gen->writeInt('numberOfGuests', $this->numberOfGuests);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->vatChange !== null) $gen->out->writeElementNs(self::TNS, 'vatChange', null, $this->vatChange);
		foreach ($this->lines as $elem) $elem->write($gen, 'lines');
		foreach ($this->payments as $elem) $elem->write($gen, 'payments');
		if ($this->webhookSessionData !== null) $this->webhookSessionData->write($gen, 'webhookSessionData');
		if ($this->keepTableName !== null) $gen->writeBool('keepTableName', $this->keepTableName);
		if ($this->activityId !== null) $gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
		if ($this->deliveryPeriodBegin !== null) $gen->writeDateTime('deliveryPeriodBegin', $this->deliveryPeriodBegin);
		if ($this->automaticNewMenus !== null) $gen->writeBool('automaticNewMenus', $this->automaticNewMenus);
		foreach ($this->scannedVoucherIssuanceCodes as $elem) $gen->out->writeElementNs(self::TNS, 'scannedVoucherIssuanceCodes', null, $elem);
		if ($this->releaseTable !== null) $gen->writeBool('releaseTable', $this->releaseTable);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TapTickTotalsRequest extends SoapObject {
	/** @var int[] */
	public $branchNumbers = array();
	public function __construct($list = array()) { $this->branchNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TapTickTotal extends SoapObject {
	public int $articleNumber;
	public int $tapQuantity;
	public int $salesQuantity;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeInt('tapQuantity', $this->tapQuantity);
		$gen->writeInt('salesQuantity', $this->salesQuantity);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BranchTapTickTotals extends SoapObject {
	public int $branchNumber;
	/** @var TapTickTotal[] */
	public $totals = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		foreach ($this->totals as $elem) $elem->write($gen, 'totals');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TapTickHistoryRequest extends SoapObject {
	public \DateTime $fromTs;
	public \DateTime $untilTs;
	/** @var int[] */
	public $branchFilter = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDateTime('fromTs', $this->fromTs);
		$gen->writeDateTime('untilTs', $this->untilTs);
		foreach ($this->branchFilter as $elem) $gen->writeInt('branchFilter', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TapTickHistory extends SoapObject {
	public int $id;
	public string $tapIntegrationId;
	public string $tapIdentity;
	public \DateTime $recordedTs;
	public int $branchNumber;
	public int $articleNumber;
	public int $quantity;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
		$gen->out->writeElementNs(self::TNS, 'tapIntegrationId', null, $this->tapIntegrationId);
		$gen->out->writeElementNs(self::TNS, 'tapIdentity', null, $this->tapIdentity);
		$gen->writeDateTime('recordedTs', $this->recordedTs);
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeInt('quantity', $this->quantity);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class FindRelationV2Request extends SoapObject {
	public Relation $relation;
	public ?bool $exactMatch = null;
	public function __construct() {
		$this->relation = new Relation();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->relation->write($gen, 'relation');
		if ($this->exactMatch !== null) $gen->writeBool('exactMatch', $this->exactMatch);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TodoListEntry extends SoapObject {
	public int $articleNumber;
	public int $variantId;
	public BigDecimal $quantity;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeInt('variantId', $this->variantId);
		$gen->writeBigDecimal('quantity', $this->quantity);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetTodoListsRequest extends SoapObject {
	public ?int $branchNumber = null;
	public ?string $category = null;
	public ?bool $includeEntries = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->category !== null) $gen->out->writeElementNs(self::TNS, 'category', null, $this->category);
		if ($this->includeEntries !== null) $gen->writeBool('includeEntries', $this->includeEntries);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateTodoListRequest extends SoapObject {
	public int $branchNumber;
	public string $category;
	public string $name;
	/** @var TodoListEntry[] */
	public $entries = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->out->writeElementNs(self::TNS, 'category', null, $this->category);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		foreach ($this->entries as $elem) $elem->write($gen, 'entries');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveTodoListRequest extends SoapObject {
	public int $id;
	public ?int $branchNumber = null;
	public ?string $category = null;
	public ?string $name = null;
	/** @var TodoListEntry[] */
	public $entries = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->category !== null) $gen->out->writeElementNs(self::TNS, 'category', null, $this->category);
		if ($this->name !== null) $gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		foreach ($this->entries as $elem) $elem->write($gen, 'entries');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveTodoListV2Request extends IdempotentReq {
	public ?int $id = null;
	public ?int $branchNumber = null;
	public ?string $category = null;
	public ?string $name = null;
	/** @var TodoListEntry[] */
	public $entries = array();
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		if ($this->id !== null) $gen->writeInt('id', $this->id);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->category !== null) $gen->out->writeElementNs(self::TNS, 'category', null, $this->category);
		if ($this->name !== null) $gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		foreach ($this->entries as $elem) $elem->write($gen, 'entries');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class AddToTodoListRequest extends SoapObject {
	public int $id;
	/** @var TodoListEntry[] */
	public $entries = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
		foreach ($this->entries as $elem) $elem->write($gen, 'entries');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Struct_1 extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Struct_2 extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Struct_3 extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetFilterProfilesRequest extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class FilterProfile extends SoapObject {
	public int $id;
	public ?string $description = null;
	public bool $isDefault;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		$gen->writeBool('isDefault', $this->isDefault);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePreparationMethodItem extends SoapObject {
	public ?int $preparationMethodItemId = null;
	public int $sequenceNumber;
	public ?int $articleNumber = null;
	public string $remark;
	public ?string $translation = null;
	public ?Colour $buttonColour = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->preparationMethodItemId !== null) $gen->writeInt('preparationMethodItemId', $this->preparationMethodItemId);
		$gen->writeInt('sequenceNumber', $this->sequenceNumber);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		$gen->out->writeElementNs(self::TNS, 'remark', null, $this->remark);
		if ($this->translation !== null) $gen->out->writeElementNs(self::TNS, 'translation', null, $this->translation);
		if ($this->buttonColour !== null) $this->buttonColour->write($gen, 'buttonColour');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePreparationMethodGroupRequest extends SoapObject {
	public ?int $preparationMethodGroupNumber = null;
	public string $description;
	public bool $closeAfterSelection;
	public bool $selectionRequired;
	public bool $maxOneSelection;
	/** @var SavePreparationMethodItem[] */
	public $preparationMethodItems = array();
	public ?bool $isPosGroup = null;
	public ?bool $isOnlineGroup = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->preparationMethodGroupNumber !== null) $gen->writeInt('preparationMethodGroupNumber', $this->preparationMethodGroupNumber);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		$gen->writeBool('closeAfterSelection', $this->closeAfterSelection);
		$gen->writeBool('selectionRequired', $this->selectionRequired);
		$gen->writeBool('maxOneSelection', $this->maxOneSelection);
		foreach ($this->preparationMethodItems as $elem) $elem->write($gen, 'preparationMethodItems');
		if ($this->isPosGroup !== null) $gen->writeBool('isPosGroup', $this->isPosGroup);
		if ($this->isOnlineGroup !== null) $gen->writeBool('isOnlineGroup', $this->isOnlineGroup);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetNutritionalCharacteristicsRequest extends SoapObject {
	public string $nutritionalCharacteristicsType;
	/** @var int[] */
	public $numbers = null;
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'nutritionalCharacteristicsType', null, $this->nutritionalCharacteristicsType);
		if ($this->numbers !== null) {
$tmp_numbers = new NumberSet($this->numbers);
$tmp_numbers->write($gen, 'numbers');
}
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetNutritionalCharacteristicsResponseElem extends SoapObject {
	public int $numbers;
	public ?int $syncMarker = null;
	public ?NutritionalCharacteristics $nutritionalCharacteristics = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('numbers', $this->numbers);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->nutritionalCharacteristics !== null) $this->nutritionalCharacteristics->write($gen, 'nutritionalCharacteristics');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateNutritionalCharacteristicsRequest extends SoapObject {
	public string $nutritionalCharacteristicsType;
	public int $number;
	public NutritionalCharacteristicsInput $nutritionalCharacteristics;
	public string $updateBehavior;
	public function __construct() {
		$this->nutritionalCharacteristics = new NutritionalCharacteristicsInput();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'nutritionalCharacteristicsType', null, $this->nutritionalCharacteristicsType);
		$gen->writeInt('number', $this->number);
		$this->nutritionalCharacteristics->write($gen, 'nutritionalCharacteristics');
		$gen->out->writeElementNs(self::TNS, 'updateBehavior', null, $this->updateBehavior);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeterminePricingRequest extends SoapObject {
	public ?\DateTime $financialDate = null;
	public ?\DateTime $timestamp = null;
	public ?int $pricegroupOverride = null;
	public ?int $relationNumber = null;
	public ?string $activityId = null;
	public WorkplaceIdentifier $workplace;
	/** @var PlaceTableOrderLineElem[] */
	public $lines = array();
	public ?string $vatChange = null;
	public ?string $orderId = null;
	public ?TableNumber $table = null;
	/** @var string[] */
	public $scannedVoucherIssuanceCodes = array();
	public function __construct() {
		$this->workplace = new WorkplaceIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
		if ($this->financialDate !== null) $gen->writeDate('financialDate', $this->financialDate);
		if ($this->timestamp !== null) $gen->writeDateTime('timestamp', $this->timestamp);
		if ($this->pricegroupOverride !== null) $gen->writeInt('pricegroupOverride', $this->pricegroupOverride);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->activityId !== null) $gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
		$this->workplace->write($gen, 'workplace');
		foreach ($this->lines as $elem) $elem->write($gen, 'lines');
		if ($this->vatChange !== null) $gen->out->writeElementNs(self::TNS, 'vatChange', null, $this->vatChange);
		if ($this->orderId !== null) $gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->table !== null) $this->table->write($gen, 'table');
		foreach ($this->scannedVoucherIssuanceCodes as $elem) $gen->out->writeElementNs(self::TNS, 'scannedVoucherIssuanceCodes', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeterminePricingResponseLine extends SoapObject {
	public int $articleNumber;
	public ?string $description = null;
	public BigDecimal $quantity;
	public BigDecimal $price;
	public BigDecimal $discountPercentage;
	public BigDecimal $discountAmount;
	public BigDecimal $amount;
	public ?string $menuId = null;
	public ?string $menuLinesId = null;
	public ?SalePromotionLineData $salePromotionData = null;
	/** @var DeterminePricingResponseLine[] */
	public $subLines = array();
	public ?string $subLineType = null;
	public string $priceType;
	public ?string $tempId = null;
	public ?string $bpeId = null;
	public ?string $bpeDescription = null;
	public ?string $redeemedVoucherIssuanceId = null;
	public ?\DateTime $pendingVoucherIssuanceStartTs = null;
	public ?WebhookLineData $webhookData = null;
	public ?string $lineId = null;
	public ?string $tempLineId = null;
	public BigDecimal $priceExcl;
	public BigDecimal $discountAmountExcl;
	public BigDecimal $amountExcl;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		$gen->writeBigDecimal('quantity', $this->quantity);
		$gen->writeBigDecimal('price', $this->price);
		$gen->writeBigDecimal('discountPercentage', $this->discountPercentage);
		$gen->writeBigDecimal('discountAmount', $this->discountAmount);
		$gen->writeBigDecimal('amount', $this->amount);
		if ($this->menuId !== null) $gen->out->writeElementNs(self::TNS, 'menuId', null, $this->menuId);
		if ($this->menuLinesId !== null) $gen->out->writeElementNs(self::TNS, 'menuLinesId', null, $this->menuLinesId);
		if ($this->salePromotionData !== null) $this->salePromotionData->write($gen, 'salePromotionData');
		foreach ($this->subLines as $elem) $elem->write($gen, 'subLines');
		if ($this->subLineType !== null) $gen->out->writeElementNs(self::TNS, 'subLineType', null, $this->subLineType);
		$gen->out->writeElementNs(self::TNS, 'priceType', null, $this->priceType);
		if ($this->tempId !== null) $gen->out->writeElementNs(self::TNS, 'tempId', null, $this->tempId);
		if ($this->bpeId !== null) $gen->out->writeElementNs(self::TNS, 'bpeId', null, $this->bpeId);
		if ($this->bpeDescription !== null) $gen->out->writeElementNs(self::TNS, 'bpeDescription', null, $this->bpeDescription);
		if ($this->redeemedVoucherIssuanceId !== null) $gen->out->writeElementNs(self::TNS, 'redeemedVoucherIssuanceId', null, $this->redeemedVoucherIssuanceId);
		if ($this->pendingVoucherIssuanceStartTs !== null) $gen->writeDateTime('pendingVoucherIssuanceStartTs', $this->pendingVoucherIssuanceStartTs);
		if ($this->webhookData !== null) $this->webhookData->write($gen, 'webhookData');
		if ($this->lineId !== null) $gen->out->writeElementNs(self::TNS, 'lineId', null, $this->lineId);
		if ($this->tempLineId !== null) $gen->out->writeElementNs(self::TNS, 'tempLineId', null, $this->tempLineId);
		$gen->writeBigDecimal('priceExcl', $this->priceExcl);
		$gen->writeBigDecimal('discountAmountExcl', $this->discountAmountExcl);
		$gen->writeBigDecimal('amountExcl', $this->amountExcl);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RelationPresence extends SoapObject {
	public int $relationNumber;
	public int $branchNumber;
	public bool $present;
	public ?TableNumber $table = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('relationNumber', $this->relationNumber);
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeBool('present', $this->present);
		if ($this->table !== null) $this->table->write($gen, 'table');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SetRelationPresenceRequest extends SoapObject {
	public RelationPresence $relationPresence;
	public function __construct() {
		$this->relationPresence = new RelationPresence();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->relationPresence->write($gen, 'relationPresence');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRelationPresenceRequest extends SoapObject {
	public int $relationNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('relationNumber', $this->relationNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticleBranchDeviationsRequest extends SoapObject {
	/** @var int[] */
	public $articleNumbers = null;
	/** @var int[] */
	public $branchFilter = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->articleNumbers !== null) {
$tmp_articleNumbers = new ArticleNumberList($this->articleNumbers);
$tmp_articleNumbers->write($gen, 'articleNumbers');
}
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new BranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleBranchDeviationLine extends SoapObject {
	public int $articleNumber;
	public int $branchNumber;
	public ?string $description = null;
	public ?BigDecimal $salesPriceIncl = null;
	public ?BigDecimal $salesPriceExcl = null;
	public ?string $specialPrice = null;
	public ?\DateTime $oldestBestBeforeDate = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->salesPriceIncl !== null) $gen->writeBigDecimal('salesPriceIncl', $this->salesPriceIncl);
		if ($this->salesPriceExcl !== null) $gen->writeBigDecimal('salesPriceExcl', $this->salesPriceExcl);
		if ($this->specialPrice !== null) $gen->out->writeElementNs(self::TNS, 'specialPrice', null, $this->specialPrice);
		if ($this->oldestBestBeforeDate !== null) $gen->writeDate('oldestBestBeforeDate', $this->oldestBestBeforeDate);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveArticleBranchDeviationsRequest extends SoapObject {
	/** @var ArticleBranchDeviationLine[] */
	public $articleBranchDeviationLines = array();
	public function __construct($list = array()) { $this->articleBranchDeviationLines = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->articleBranchDeviationLines as $elem) $elem->write($gen, 'articleBranchDeviationLines');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleNutrient extends SoapObject {
	public int $nutrientId;
	public BigDecimal $value;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('nutrientId', $this->nutrientId);
		$gen->writeBigDecimal('value', $this->value);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateArticleNutrientsRequest extends SoapObject {
	public int $articleNumber;
	/** @var ArticleNutrient[] */
	public $nutrients = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		foreach ($this->nutrients as $elem) $elem->write($gen, 'nutrients');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleDynamicMinMaxStock extends SoapObject {
	public int $articleNumber;
	public int $branchNumber;
	public BigDecimal $min;
	public BigDecimal $max;
	public ?string $source = null;
	public ?\DateTime $createdTs = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeBigDecimal('min', $this->min);
		$gen->writeBigDecimal('max', $this->max);
		if ($this->source !== null) $gen->out->writeElementNs(self::TNS, 'source', null, $this->source);
		if ($this->createdTs !== null) $gen->writeDateTime('createdTs', $this->createdTs);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleDynamicMinMaxStockList extends SoapObject {
	/** @var ArticleDynamicMinMaxStock[] */
	public $articleDynamicMinMaxStock = array();
	public function __construct($list = array()) { $this->articleDynamicMinMaxStock = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->articleDynamicMinMaxStock as $elem) $elem->write($gen, 'articleDynamicMinMaxStock');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateArticleDynamicMinMaxStockRequest extends SoapObject {
	/** @var ArticleDynamicMinMaxStock[] */
	public $articleDynamicMinMaxStocks = array();
	public function __construct($list = array()) { $this->articleDynamicMinMaxStocks = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_articleDynamicMinMaxStocks = new ArticleDynamicMinMaxStockList($this->articleDynamicMinMaxStocks);
$tmp_articleDynamicMinMaxStocks->write($gen, 'articleDynamicMinMaxStocks');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticleDynamicMinMaxStockRequest extends SoapObject {
	public \DateTime $fromDateTime;
	public \DateTime $throughDateTime;
	/** @var int[] */
	public $articleNumberFilters = array();
	/** @var int[] */
	public $branchNumberFilters = array();
	/** @var string[] */
	public $sourceFilters = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDateTime('fromDateTime', $this->fromDateTime);
		$gen->writeDateTime('throughDateTime', $this->throughDateTime);
		foreach ($this->articleNumberFilters as $elem) $gen->writeInt('articleNumberFilters', $elem);
		foreach ($this->branchNumberFilters as $elem) $gen->writeInt('branchNumberFilters', $elem);
		foreach ($this->sourceFilters as $elem) $gen->out->writeElementNs(self::TNS, 'sourceFilters', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TableEmployee extends SoapObject {
	public int $employeeNumber;
	public string $employeeName;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->out->writeElementNs(self::TNS, 'employeeName', null, $this->employeeName);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CardFieldInfo extends SoapObject {
	public string $name;
	public string $optionType;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->out->writeElementNs(self::TNS, 'optionType', null, $this->optionType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CardFieldInfoList extends SoapObject {
	/** @var CardFieldInfo[] */
	public $field = array();
	public function __construct($list = array()) { $this->field = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->field as $elem) $elem->write($gen, 'field');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CardFieldInfoResponse extends CardFieldInfo {
	public ?string $optionsJson = null;
	public int $numOptions;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		if ($this->optionsJson !== null) $gen->out->writeElementNs(self::TNS, 'optionsJson', null, $this->optionsJson);
		$gen->writeInt('numOptions', $this->numOptions);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CardFieldInfoResponseList extends SoapObject {
	/** @var CardFieldInfoResponse[] */
	public $field = array();
	public function __construct($list = array()) { $this->field = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->field as $elem) $elem->write($gen, 'field');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCardFilterOptionsRequest extends SoapObject {
	public string $cardType;
	public ?int $categoryId = null;
	/** @var OverviewFilter[] */
	public $filters = null;
	/** @var CardFieldInfo[] */
	public $fields = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardType', null, $this->cardType);
		if ($this->categoryId !== null) $gen->writeInt('categoryId', $this->categoryId);
		if ($this->filters !== null) {
$tmp_filters = new OverviewFilterList($this->filters);
$tmp_filters->write($gen, 'filters');
}
		$tmp_fields = new CardFieldInfoList($this->fields);
$tmp_fields->write($gen, 'fields');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PlannedCycleCount extends SoapObject {
	public ?string $id = null;
	public int $todoListId;
	public string $todoListName;
	public int $branchNumber;
	public \DateTime $fromDate;
	public \DateTime $throughDate;
	public bool $isRecurring;
	public Colour $colour;
	public int $countedQuantity;
	public int $totalQuantity;
	public function __construct() {
		$this->colour = new Colour();
	}
	public function writeProps(SoapGenerator $gen): void {
		if ($this->id !== null) $gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->writeInt('todoListId', $this->todoListId);
		$gen->out->writeElementNs(self::TNS, 'todoListName', null, $this->todoListName);
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeDate('fromDate', $this->fromDate);
		$gen->writeDate('throughDate', $this->throughDate);
		$gen->writeBool('isRecurring', $this->isRecurring);
		$this->colour->write($gen, 'colour');
		$gen->writeInt('countedQuantity', $this->countedQuantity);
		$gen->writeInt('totalQuantity', $this->totalQuantity);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PlannedCycleCountList extends SoapObject {
	/** @var PlannedCycleCount[] */
	public $plannedCycleCount = array();
	public function __construct($list = array()) { $this->plannedCycleCount = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->plannedCycleCount as $elem) $elem->write($gen, 'plannedCycleCount');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPlannedCycleCountsRequest extends SoapObject {
	public \DateTime $fromDate;
	public \DateTime $throughDate;
	public int $branchNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDate('fromDate', $this->fromDate);
		$gen->writeDate('throughDate', $this->throughDate);
		$gen->writeInt('branchNumber', $this->branchNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ActiveCycleCountLine extends SoapObject {
	public int $articleNumber;
	public ?int $variantId = null;
	public ?BigDecimal $counted = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->variantId !== null) $gen->writeInt('variantId', $this->variantId);
		if ($this->counted !== null) $gen->writeBigDecimal('counted', $this->counted);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ActiveCycleCountLineList extends SoapObject {
	/** @var ActiveCycleCountLine[] */
	public $activeCycleCountLine = array();
	public function __construct($list = array()) { $this->activeCycleCountLine = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->activeCycleCountLine as $elem) $elem->write($gen, 'activeCycleCountLine');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ActiveCycleCount extends PlannedCycleCount {
	/** @var ActiveCycleCountLine[] */
	public $lines = array();
	public function __construct($list = array()) { $this->lines = $list; }
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$tmp_lines = new ActiveCycleCountLineList($this->lines);
$tmp_lines->write($gen, 'lines');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetActiveCycleCountRequest extends SoapObject {
	public ?string $plannedCycleCountId = null;
	public ?int $todoListId = null;
	public int $branchNumber;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->plannedCycleCountId !== null) $gen->out->writeElementNs(self::TNS, 'plannedCycleCountId', null, $this->plannedCycleCountId);
		if ($this->todoListId !== null) $gen->writeInt('todoListId', $this->todoListId);
		$gen->writeInt('branchNumber', $this->branchNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SetArticleRecalledRequest extends SoapObject {
	public int $articleNumber;
	public bool $recalled;
	public ?bool $includingRecipes = null;
	public ?string $reason = null;
	public int $employeeNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeBool('recalled', $this->recalled);
		if ($this->includingRecipes !== null) $gen->writeBool('includingRecipes', $this->includingRecipes);
		if ($this->reason !== null) $gen->out->writeElementNs(self::TNS, 'reason', null, $this->reason);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getSalesPriceListResponse extends SoapObject {
	/** @var SalesPrice[] */
	public $salesPrice = array();
	public function __construct($list = array()) { $this->salesPrice = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->salesPrice as $elem) $elem->write($gen, 'salesPrice');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPriceGroupListResponse extends SoapObject {
	/** @var PriceGroup[] */
	public $priceGroup = array();
	public function __construct($list = array()) { $this->priceGroup = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->priceGroup as $elem) $elem->write($gen, 'priceGroup');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LogMistakeResponse extends SoapObject {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateRelationResponse extends SoapObject {
	public string $result;
	public int $relationNumber;
	public ?\DateTime $changeTimestamp = null;
	public ?int $syncMarker = null;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->changeTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->changeTimestamp))->write($gen, 'changeTimestamp');
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateRelationResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public ?\DateTime $changeTimestamp = null;
	public ?int $syncMarker = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->changeTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->changeTimestamp))->write($gen, 'changeTimestamp');
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRelationResponse extends SoapObject {
	public string $result;
	public Relation $relation;
	public function __construct() {
		$this->relation = new Relation();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$this->relation->write($gen, 'relation');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class FindRelationResponse extends SoapObject {
	public string $result;
	public ?Relation $relation = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->relation !== null) $this->relation->write($gen, 'relation');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRelationsResponse extends SoapObject {
	/** @var Relation[] */
	public $relationList = array();
	public function __construct($list = array()) { $this->relationList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_relationList = new RelationList($this->relationList);
$tmp_relationList->write($gen, 'relationList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCustomFieldListsResponse extends SoapObject {
	/** @var CustomField[] */
	public $articleCustomFieldList = null;
	/** @var CustomField[] */
	public $employeeCustomFieldList = null;
	/** @var CustomField[] */
	public $relationCustomFieldList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->articleCustomFieldList !== null) {
$tmp_articleCustomFieldList = new CustomFieldList($this->articleCustomFieldList);
$tmp_articleCustomFieldList->write($gen, 'articleCustomFieldList');
}
		if ($this->employeeCustomFieldList !== null) {
$tmp_employeeCustomFieldList = new CustomFieldList($this->employeeCustomFieldList);
$tmp_employeeCustomFieldList->write($gen, 'employeeCustomFieldList');
}
		if ($this->relationCustomFieldList !== null) {
$tmp_relationCustomFieldList = new CustomFieldList($this->relationCustomFieldList);
$tmp_relationCustomFieldList->write($gen, 'relationCustomFieldList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCardCategoriesResponse extends SoapObject {
	/** @var CardCategory[] */
	public $articleCardCategoryList = null;
	/** @var CardCategory[] */
	public $employeeCardCategoryList = null;
	/** @var CardCategory[] */
	public $relationCardCategoryList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->articleCardCategoryList !== null) {
$tmp_articleCardCategoryList = new CardCategoryList($this->articleCardCategoryList);
$tmp_articleCardCategoryList->write($gen, 'articleCardCategoryList');
}
		if ($this->employeeCardCategoryList !== null) {
$tmp_employeeCardCategoryList = new CardCategoryList($this->employeeCardCategoryList);
$tmp_employeeCardCategoryList->write($gen, 'employeeCardCategoryList');
}
		if ($this->relationCardCategoryList !== null) {
$tmp_relationCardCategoryList = new CardCategoryList($this->relationCardCategoryList);
$tmp_relationCardCategoryList->write($gen, 'relationCardCategoryList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class AdjustPointsResponse extends SoapObject {
	public string $result;
	public ?Relation $relation = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->relation !== null) $this->relation->write($gen, 'relation');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRelationPointsResponse extends SoapObject {
	/** @var GetRelationPoints[] */
	public $relationPointsLst = array();
	public function __construct($list = array()) { $this->relationPointsLst = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->relationPointsLst as $elem) $elem->write($gen, 'relationPointsLst');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetEmployeesResponse extends SoapObject {
	/** @var Employee[] */
	public $employeeList = array();
	public function __construct($list = array()) { $this->employeeList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_employeeList = new EmployeeList($this->employeeList);
$tmp_employeeList->write($gen, 'employeeList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetEmployeeResponse extends SoapObject {
	public string $result;
	public ?Employee $employee = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->employee !== null) $this->employee->write($gen, 'employee');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class FindEmployeeResponse extends SoapObject {
	public string $result;
	public ?Employee $employee = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->employee !== null) $this->employee->write($gen, 'employee');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateEmployeeResponse extends SoapObject {
	public string $result;
	public int $employeeNumber;
	public ?\DateTime $changeTimestamp = null;
	public ?int $syncMarker = null;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->changeTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->changeTimestamp))->write($gen, 'changeTimestamp');
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateEmployeeResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public ?\DateTime $changeTimestamp = null;
	public ?int $syncMarker = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->changeTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->changeTimestamp))->write($gen, 'changeTimestamp');
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getEmployeeListResponse extends SoapObject {
	/** @var EmployeeName[] */
	public $return = array();
	public function __construct($list = array()) { $this->return = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->return as $elem) $elem->write($gen, 'return');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTableListResponse extends SoapObject {
	/** @var Table[] */
	public $table = array();
	public function __construct($list = array()) { $this->table = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->table as $elem) $elem->write($gen, 'table');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTableListV2Response extends SoapObject {
	/** @var WholeTable[] */
	public $wholeTable = array();
	public function __construct($list = array()) { $this->wholeTable = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->wholeTable as $elem) $elem->write($gen, 'wholeTable');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTableListV3Response extends SoapObject {
	/** @var WholeTable[] */
	public $wholeTable = array();
	public function __construct($list = array()) { $this->wholeTable = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->wholeTable as $elem) $elem->write($gen, 'wholeTable');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getMainTableListResponse extends SoapObject {
	/** @var MainTable[] */
	public $mainTable = array();
	public function __construct($list = array()) { $this->mainTable = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->mainTable as $elem) $elem->write($gen, 'mainTable');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getSubTableListResponse extends SoapObject {
	/** @var SubTableState[] */
	public $subTableState = array();
	public function __construct($list = array()) { $this->subTableState = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->subTableState as $elem) $elem->write($gen, 'subTableState');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getCourseListResponse extends SoapObject {
	/** @var Course[] */
	public $course = array();
	public function __construct($list = array()) { $this->course = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->course as $elem) $elem->write($gen, 'course');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCourseListV2Response extends SoapObject {
	/** @var CourseInfo[] */
	public $course = array();
	public function __construct($list = array()) { $this->course = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->course as $elem) $elem->write($gen, 'course');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getVatGroupListResponse extends SoapObject {
	/** @var VatGroup[] */
	public $vatGroup = array();
	public function __construct($list = array()) { $this->vatGroup = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->vatGroup as $elem) $elem->write($gen, 'vatGroup');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveTableOrderResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public ?string $orderId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->orderId !== null) $gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateAndPayTableOrderResponse extends SoapObject {
	public string $result;
	public ?string $orderId = null;
	public ?string $omzetId = null;
	public string $errorMessage;
	public bool $duplicate;
	/** @var VoucherIssuance[] */
	public $voucherIssuances = null;
	/** @var UnappliedVoucherIssuance[] */
	public $unappliedVoucherIssuances = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->orderId !== null) $gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->omzetId !== null) $gen->out->writeElementNs(self::TNS, 'omzetId', null, $this->omzetId);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		$gen->writeBool('duplicate', $this->duplicate);
		if ($this->voucherIssuances !== null) {
$tmp_voucherIssuances = new VoucherIssuanceList($this->voucherIssuances);
$tmp_voucherIssuances->write($gen, 'voucherIssuances');
}
		if ($this->unappliedVoucherIssuances !== null) {
$tmp_unappliedVoucherIssuances = new UnappliedVoucherIssuanceList($this->unappliedVoucherIssuances);
$tmp_unappliedVoucherIssuances->write($gen, 'unappliedVoucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class MoveTableOrderResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class MoveTableOrderV3Response extends IdempotentResp {
	public string $result;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetTableOrderResponse extends SoapObject {
	public string $result;
	public ?int $claimedByWorkplaceNumber = null;
	public ?Order $order = null;
	/** @var VoucherIssuanceCandidate[] */
	public $voucherIssuanceCandidates = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->claimedByWorkplaceNumber !== null) $gen->writeInt('claimedByWorkplaceNumber', $this->claimedByWorkplaceNumber);
		if ($this->order !== null) $this->order->write($gen, 'order');
		if ($this->voucherIssuanceCandidates !== null) {
$tmp_voucherIssuanceCandidates = new VoucherIssuanceCandidateList($this->voucherIssuanceCandidates);
$tmp_voucherIssuanceCandidates->write($gen, 'voucherIssuanceCandidates');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReleaseTableResponse extends SoapObject {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReleaseTableV2Response extends SoapObject {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SetSubtableCountResponse extends SoapObject {
	public bool $ok;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeBool('ok', $this->ok);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetTableOrderCourseListResponse extends SoapObject {
	public string $result;
	public ?string $orderId = null;
	public ?int $branchNumber = null;
	public ?int $tableNumber = null;
	public ?int $tableSubNumber = null;
	/** @var Course[] */
	public $courseList = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->orderId !== null) $gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->tableNumber !== null) $gen->writeInt('tableNumber', $this->tableNumber);
		if ($this->tableSubNumber !== null) $gen->writeInt('tableSubNumber', $this->tableSubNumber);
		if ($this->courseList !== null) {
$tmp_courseList = new CourseList($this->courseList);
$tmp_courseList->write($gen, 'courseList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RequestTableOrderCourseResponse extends SoapObject {
	public string $result;
	public ?string $orderId = null;
	public ?int $branchNumber = null;
	public ?int $tableNumber = null;
	public ?int $tableSubNumber = null;
	public ?int $courseNumber = null;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->orderId !== null) $gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->tableNumber !== null) $gen->writeInt('tableNumber', $this->tableNumber);
		if ($this->tableSubNumber !== null) $gen->writeInt('tableSubNumber', $this->tableSubNumber);
		if ($this->courseNumber !== null) $gen->writeInt('courseNumber', $this->courseNumber);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class StoreSinglyEftTransactionResponse extends SoapObject {
	public string $result;
	public string $eftTransactionId;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'eftTransactionId', null, $this->eftTransactionId);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class QueueBranchOrderResponse extends SoapObject {
	public string $result;
	public QueueBranchOrderInfo $info;
	public string $errorMessage;
	public function __construct() {
		$this->info = new QueueBranchOrderInfo();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$this->info->write($gen, 'info');
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class QueueBranchOrderPaymentResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public ?string $queuedPaymentId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->queuedPaymentId !== null) $gen->out->writeElementNs(self::TNS, 'queuedPaymentId', null, $this->queuedPaymentId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetQueueBranchOrderPaymentStatusResponse extends SoapObject {
	public string $queuedPaymentId;
	public string $state;
	public string $resultCode;
	public string $resultMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'queuedPaymentId', null, $this->queuedPaymentId);
		$gen->out->writeElementNs(self::TNS, 'state', null, $this->state);
		$gen->out->writeElementNs(self::TNS, 'resultCode', null, $this->resultCode);
		$gen->out->writeElementNs(self::TNS, 'resultMessage', null, $this->resultMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateOrderResponse extends SoapObject {
	public string $result;
	public UpdateOrderInfo $info;
	public string $errorMessage;
	public function __construct() {
		$this->info = new UpdateOrderInfo();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$this->info->write($gen, 'info');
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateOrderV2Response extends SoapObject {
	public string $result;
	public ?Order $order = null;
	public ?string $errorMessage = null;
	public UpdateOrderInfo $info;
	public function __construct() {
		$this->info = new UpdateOrderInfo();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->order !== null) $this->order->write($gen, 'order');
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		$this->info->write($gen, 'info');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveOrderResponse extends SoapObject {
	public string $result;
	public SaveOrderInfo $info;
	public string $errorMessage;
	public function __construct() {
		$this->info = new SaveOrderInfo();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$this->info->write($gen, 'info');
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOrderResponse extends SoapObject {
	public string $result;
	public ?Order $order = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->order !== null) $this->order->write($gen, 'order');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPackingSlipsResponse extends SoapObject {
	/** @var PackingSlip[] */
	public $packingSlipList = array();
	public function __construct($list = array()) { $this->packingSlipList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_packingSlipList = new PackingSlipList($this->packingSlipList);
$tmp_packingSlipList->write($gen, 'packingSlipList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPackingSlipsByOrderResponse extends SoapObject {
	/** @var PackingSlip[] */
	public $packingSlipList = array();
	public function __construct($list = array()) { $this->packingSlipList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_packingSlipList = new PackingSlipList($this->packingSlipList);
$tmp_packingSlipList->write($gen, 'packingSlipList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOrderChangesResponse extends SoapObject {
	/** @var OrderChange[] */
	public $orderChangeList = array();
	public function __construct($list = array()) { $this->orderChangeList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_orderChangeList = new OrderChangeList($this->orderChangeList);
$tmp_orderChangeList->write($gen, 'orderChangeList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOrderHistoryResponse extends SoapObject {
	public OrderHistoryOrderDetailsList $orderHistoryOrderDetailsList;
	public function __construct() {
		$this->orderHistoryOrderDetailsList = new OrderHistoryOrderDetailsList();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->orderHistoryOrderDetailsList->write($gen, 'orderHistoryOrderDetailsList');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CancelOrderResponse extends SoapObject {
	public string $result;
	public string $message;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'message', null, $this->message);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PayInvoiceResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeliverOrderResponse extends SoapObject {
	public string $result;
	public ?string $packingSlipId = null;
	public ?string $invoiceId = null;
	public string $errorMessage;
	/** @var VoucherIssuance[] */
	public $voucherIssuances = null;
	/** @var UnappliedVoucherIssuance[] */
	public $unappliedVoucherIssuances = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->packingSlipId !== null) $gen->out->writeElementNs(self::TNS, 'packingSlipId', null, $this->packingSlipId);
		if ($this->invoiceId !== null) $gen->out->writeElementNs(self::TNS, 'invoiceId', null, $this->invoiceId);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->voucherIssuances !== null) {
$tmp_voucherIssuances = new VoucherIssuanceList($this->voucherIssuances);
$tmp_voucherIssuances->write($gen, 'voucherIssuances');
}
		if ($this->unappliedVoucherIssuances !== null) {
$tmp_unappliedVoucherIssuances = new UnappliedVoucherIssuanceList($this->unappliedVoucherIssuances);
$tmp_unappliedVoucherIssuances->write($gen, 'unappliedVoucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeliverOrderV2Response extends SoapObject {
	public string $result;
	public ?string $packingSlipId = null;
	public ?string $invoiceId = null;
	public ?string $errorMessage = null;
	/** @var VoucherIssuance[] */
	public $voucherIssuances = null;
	/** @var UnappliedVoucherIssuance[] */
	public $unappliedVoucherIssuances = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->packingSlipId !== null) $gen->out->writeElementNs(self::TNS, 'packingSlipId', null, $this->packingSlipId);
		if ($this->invoiceId !== null) $gen->out->writeElementNs(self::TNS, 'invoiceId', null, $this->invoiceId);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->voucherIssuances !== null) {
$tmp_voucherIssuances = new VoucherIssuanceList($this->voucherIssuances);
$tmp_voucherIssuances->write($gen, 'voucherIssuances');
}
		if ($this->unappliedVoucherIssuances !== null) {
$tmp_unappliedVoucherIssuances = new UnappliedVoucherIssuanceList($this->unappliedVoucherIssuances);
$tmp_unappliedVoucherIssuances->write($gen, 'unappliedVoucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOrderCategoriesResponse extends SoapObject {
	/** @var OrderCategory[] */
	public $orderCategory = array();
	public function __construct($list = array()) { $this->orderCategory = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->orderCategory as $elem) $elem->write($gen, 'orderCategory');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetReceiptsResponse extends SoapObject {
	/** @var Receipt[] */
	public $receiptList = array();
	public function __construct($list = array()) { $this->receiptList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_receiptList = new ReceiptList($this->receiptList);
$tmp_receiptList->write($gen, 'receiptList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetReceiptResponse extends SoapObject {
	public string $result;
	public ?Receipt $receipt = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->receipt !== null) $this->receipt->write($gen, 'receipt');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetReceiptsByOrderResponse extends SoapObject {
	public string $result;
	/** @var Receipt[] */
	public $receiptList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$tmp_receiptList = new ReceiptList($this->receiptList);
$tmp_receiptList->write($gen, 'receiptList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetReceiptsByCashCountResponse extends SoapObject {
	public string $result;
	/** @var Receipt[] */
	public $receiptList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$tmp_receiptList = new ReceiptList($this->receiptList);
$tmp_receiptList->write($gen, 'receiptList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintReceiptResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintReceiptV2Response extends IdempotentResp {
	public string $result;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintTableReceiptResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintTableReceiptV3Response extends IdempotentResp {
	public string $result;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetInvoicesResponse extends SoapObject {
	/** @var Invoice[] */
	public $invoiceList = array();
	public function __construct($list = array()) { $this->invoiceList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_invoiceList = new InvoiceList($this->invoiceList);
$tmp_invoiceList->write($gen, 'invoiceList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveInvoiceResponse extends SoapObject {
	public string $result;
	public SaveInvoiceInfo $info;
	public string $errorMessage;
	/** @var VoucherIssuance[] */
	public $voucherIssuances = null;
	/** @var UnappliedVoucherIssuance[] */
	public $unappliedVoucherIssuances = null;
	public function __construct() {
		$this->info = new SaveInvoiceInfo();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$this->info->write($gen, 'info');
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->voucherIssuances !== null) {
$tmp_voucherIssuances = new VoucherIssuanceList($this->voucherIssuances);
$tmp_voucherIssuances->write($gen, 'voucherIssuances');
}
		if ($this->unappliedVoucherIssuances !== null) {
$tmp_unappliedVoucherIssuances = new UnappliedVoucherIssuanceList($this->unappliedVoucherIssuances);
$tmp_unappliedVoucherIssuances->write($gen, 'unappliedVoucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetInvoiceResponse extends SoapObject {
	public string $result;
	public ?Invoice $invoice = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->invoice !== null) $this->invoice->write($gen, 'invoice');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreditInvoiceResponse extends SoapObject {
	public string $result;
	public string $message;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'message', null, $this->message);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetJournalsResponse extends SoapObject {
	/** @var Journal[] */
	public $journalList = array();
	public function __construct($list = array()) { $this->journalList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_journalList = new JournalList($this->journalList);
$tmp_journalList->write($gen, 'journalList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetFinancialJournalResponse extends SoapObject {
	/** @var FinancialGroup[] */
	public $financialGroupList = array();
	public ?bool $financialPeriodClosed = null;
	public function writeProps(SoapGenerator $gen): void {
		$tmp_financialGroupList = new FinancialGroupList($this->financialGroupList);
$tmp_financialGroupList->write($gen, 'financialGroupList');

		if ($this->financialPeriodClosed !== null) $gen->writeBool('financialPeriodClosed', $this->financialPeriodClosed);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCashCountListResponse extends SoapObject {
	/** @var CashCount[] */
	public $cashCountList = array();
	public function __construct($list = array()) { $this->cashCountList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_cashCountList = new CashCountList($this->cashCountList);
$tmp_cashCountList->write($gen, 'cashCountList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCashDrawerBalancingListResponse extends SoapObject {
	/** @var CashDrawerBalancing[] */
	public $cashDrawerBalancingList = array();
	public function __construct($list = array()) { $this->cashDrawerBalancingList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_cashDrawerBalancingList = new CashDrawerBalancingList($this->cashDrawerBalancingList);
$tmp_cashDrawerBalancingList->write($gen, 'cashDrawerBalancingList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetTurnoverGroupsResponse extends SoapObject {
	/** @var TurnoverGroup[] */
	public $turnoverGroupList = array();
	public function __construct($list = array()) { $this->turnoverGroupList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_turnoverGroupList = new TurnoverGroupList($this->turnoverGroupList);
$tmp_turnoverGroupList->write($gen, 'turnoverGroupList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateTurnoverGroupsResponse extends SoapObject {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetProductsResponse extends SoapObject {
	/** @var Product[] */
	public $productList = array();
	public function __construct($list = array()) { $this->productList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_productList = new ProductList($this->productList);
$tmp_productList->write($gen, 'productList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateProductResponse extends SoapObject {
	public string $result;
	public int $productNumber;
	/** @var int[] */
	public $articleNumbers = array();
	public ?\DateTime $changeTimestamp = null;
	public ?int $syncMarker = null;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->writeInt('productNumber', $this->productNumber);
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
		if ($this->changeTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->changeTimestamp))->write($gen, 'changeTimestamp');
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateProductResponse extends SoapObject {
	public string $result;
	/** @var int[] */
	public $existingArticleNumbers = array();
	/** @var int[] */
	public $newArticleNumbers = array();
	public ?\DateTime $changeTimestamp = null;
	public ?int $syncMarker = null;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		foreach ($this->existingArticleNumbers as $elem) $gen->writeInt('existingArticleNumbers', $elem);
		foreach ($this->newArticleNumbers as $elem) $gen->writeInt('newArticleNumbers', $elem);
		if ($this->changeTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->changeTimestamp))->write($gen, 'changeTimestamp');
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticleVariantsResponse extends SoapObject {
	public string $result;
	/** @var ArticleVariant[] */
	public $articleVariants = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$tmp_articleVariants = new ArticleVariantList($this->articleVariants);
$tmp_articleVariants->write($gen, 'articleVariants');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticlesVariantsResponse extends SoapObject {
	public string $result;
	/** @var GetArticlesVariantsResponseElem[] */
	public $articleVariants = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		foreach ($this->articleVariants as $elem) $elem->write($gen, 'articleVariants');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class NewArticleVariantResponse extends SoapObject {
	public string $result;
	public ?int $articleVariantId = null;
	public ?string $message = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->articleVariantId !== null) $gen->writeInt('articleVariantId', $this->articleVariantId);
		if ($this->message !== null) $gen->out->writeElementNs(self::TNS, 'message', null, $this->message);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateArticleVariantResponse extends SoapObject {
	public string $result;
	public ?string $message = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->message !== null) $gen->out->writeElementNs(self::TNS, 'message', null, $this->message);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeleteArticleVariantsResponse extends SoapObject {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetStockResponse extends SoapObject {
	/** @var ArticleStock[] */
	public $articleStocks = array();
	public function __construct($list = array()) { $this->articleStocks = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->articleStocks as $elem) $elem->write($gen, 'articleStocks');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetStockHistoryResponse extends SoapObject {
	/** @var ArticleStockHistory[] */
	public $articleStockHistory = array();
	public function __construct($list = array()) { $this->articleStockHistory = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->articleStockHistory as $elem) $elem->write($gen, 'articleStockHistory');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateStockResponse extends SoapObject {
	public string $result;
	public ?int $stockId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->stockId !== null) $gen->writeInt('stockId', $this->stockId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SetStockResponse extends SoapObject {
	public string $result;
	public ?int $stockId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->stockId !== null) $gen->writeInt('stockId', $this->stockId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticleGroupsResponse extends SoapObject {
	/** @var ArticleGroup[] */
	public $articleGroupList = array();
	public function __construct($list = array()) { $this->articleGroupList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_articleGroupList = new ArticleGroupList($this->articleGroupList);
$tmp_articleGroupList->write($gen, 'articleGroupList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticleGroupChangesResponse extends SoapObject {
	/** @var ChangedArticleGroup[] */
	public $changedArticleGroupList = array();
	public function __construct($list = array()) { $this->changedArticleGroupList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_changedArticleGroupList = new ChangedArticleGroupList($this->changedArticleGroupList);
$tmp_changedArticleGroupList->write($gen, 'changedArticleGroupList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateArticleGroupResponse extends SoapObject {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class NewArticleGroupResponse extends SoapObject {
	public string $result;
	public int $groupNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->writeInt('groupNumber', $this->groupNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeleteArticleGroupResponse extends SoapObject {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class AddProductsToArticleGroupResponse extends SoapObject {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReplaceProductsOfArticleGroupResponse extends SoapObject {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeleteProductsFromArticleGroupResponse extends SoapObject {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetMessagesResponse extends SoapObject {
	/** @var Message[] */
	public $messageList = array();
	public function __construct($list = array()) { $this->messageList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_messageList = new MessageList($this->messageList);
$tmp_messageList->write($gen, 'messageList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetShiftsResponse extends SoapObject {
	/** @var Shift[] */
	public $shiftList = array();
	public function __construct($list = array()) { $this->shiftList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_shiftList = new ShiftList($this->shiftList);
$tmp_shiftList->write($gen, 'shiftList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPurchaseOrdersResponse extends SoapObject {
	/** @var PurchaseOrder[] */
	public $purchaseOrderList = array();
	public function __construct($list = array()) { $this->purchaseOrderList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_purchaseOrderList = new PurchaseOrderList($this->purchaseOrderList);
$tmp_purchaseOrderList->write($gen, 'purchaseOrderList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseOrderResponse extends SoapObject {
	public string $result;
	public ?SavePurchaseOrderInfo $info = null;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->info !== null) $this->info->write($gen, 'info');
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPurchaseOrdersV2Response extends SoapObject {
	/** @var PurchaseOrderV2[] */
	public $purchaseOrderList = array();
	public function __construct($list = array()) { $this->purchaseOrderList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_purchaseOrderList = new PurchaseOrderV2List($this->purchaseOrderList);
$tmp_purchaseOrderList->write($gen, 'purchaseOrderList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseOrderV2Response extends SoapObject {
	public string $result;
	public ?SavePurchaseOrderInfo $info = null;
	public ?string $errorMessage = null;
	public ?ErrorDetails $errorDetails = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->info !== null) $this->info->write($gen, 'info');
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->errorDetails !== null) $this->errorDetails->write($gen, 'errorDetails');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPurchaseDeliveriesResponse extends SoapObject {
	/** @var PurchaseDelivery[] */
	public $purchaseDeliveryList = array();
	public function __construct($list = array()) { $this->purchaseDeliveryList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_purchaseDeliveryList = new PurchaseDeliveryList($this->purchaseDeliveryList);
$tmp_purchaseDeliveryList->write($gen, 'purchaseDeliveryList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseDeliveryResponse extends SoapObject {
	public string $result;
	public ?SavePurchaseDeliveryInfo $info = null;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->info !== null) $this->info->write($gen, 'info');
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPurchaseDeliveriesV2Response extends SoapObject {
	/** @var PurchaseDeliveryV2[] */
	public $purchaseDeliveryList = array();
	public function __construct($list = array()) { $this->purchaseDeliveryList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_purchaseDeliveryList = new PurchaseDeliveryV2List($this->purchaseDeliveryList);
$tmp_purchaseDeliveryList->write($gen, 'purchaseDeliveryList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseDeliveryV2Response extends SoapObject {
	public string $result;
	public ?SavePurchaseDeliveryInfo $info = null;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->info !== null) $this->info->write($gen, 'info');
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class EncryptStringResponse extends SoapObject {
	public string $encryptedString;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'encryptedString', null, $this->encryptedString);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticleCardLayoutResponse extends SoapObject {
	/** @var CardLayoutField[] */
	public $cardLayoutFieldList = array();
	public function __construct($list = array()) { $this->cardLayoutFieldList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_cardLayoutFieldList = new CardLayoutFieldList($this->cardLayoutFieldList);
$tmp_cardLayoutFieldList->write($gen, 'cardLayoutFieldList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateArticleCardLayoutResponse extends SoapObject {
	public string $result;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRetailSpaceRentalResponse extends SoapObject {
	public string $result;
	public ?RetailSpaceRental $retailSpaceRental = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->retailSpaceRental !== null) $this->retailSpaceRental->write($gen, 'retailSpaceRental');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRetailSpaceRentalsResponse extends SoapObject {
	/** @var RetailSpaceRental[] */
	public $retailSpaceRentalList = array();
	public function __construct($list = array()) { $this->retailSpaceRentalList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_retailSpaceRentalList = new RetailSpaceRentalList($this->retailSpaceRentalList);
$tmp_retailSpaceRentalList->write($gen, 'retailSpaceRentalList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class EidSearchResponse extends SoapObject {
	public string $entityType;
	public ?int $number = null;
	public ?Relation $relation = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'entityType', null, $this->entityType);
		if ($this->number !== null) $gen->writeInt('number', $this->number);
		if ($this->relation !== null) $this->relation->write($gen, 'relation');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OverviewResponse extends SoapObject {
	public int $currentPageNumber;
	public int $lastPageNumber;
	public int $maxPerPage;
	public int $totalRecords;
	/** @var OverviewFieldList[] */
	public $overviewList = array();
	public string $result;
	/** @var GetOverviewError[] */
	public $errorList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('currentPageNumber', $this->currentPageNumber);
		$gen->writeInt('lastPageNumber', $this->lastPageNumber);
		$gen->writeInt('maxPerPage', $this->maxPerPage);
		$gen->writeInt('totalRecords', $this->totalRecords);
		$tmp_overviewList = new OverviewList($this->overviewList);
$tmp_overviewList->write($gen, 'overviewList');

		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$tmp_errorList = new GetOverviewErrorList($this->errorList);
$tmp_errorList->write($gen, 'errorList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOverviewFieldsResponse extends SoapObject {
	/** @var OverviewFieldsField[] */
	public $overviewFieldsList = array();
	public string $result;
	/** @var GetOverviewFieldsError[] */
	public $errorList = array();
	public function writeProps(SoapGenerator $gen): void {
		$tmp_overviewFieldsList = new OverviewFieldsList($this->overviewFieldsList);
$tmp_overviewFieldsList->write($gen, 'overviewFieldsList');

		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$tmp_errorList = new GetOverviewFieldsErrorList($this->errorList);
$tmp_errorList->write($gen, 'errorList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateBatchResponse extends SoapObject {
	public string $result;
	public int $updateCount;
	/** @var UpdateBatchError[] */
	public $errorList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->writeInt('updateCount', $this->updateCount);
		$tmp_errorList = new UpdateBatchErrorList($this->errorList);
$tmp_errorList->write($gen, 'errorList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetKitchenTicketsResponse extends SoapObject {
	/** @var KitchenTicket[] */
	public $kitchenTicketList = array();
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$tmp_kitchenTicketList = new KitchenTicketList($this->kitchenTicketList);
$tmp_kitchenTicketList->write($gen, 'kitchenTicketList');

		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveStockCorrectionsResponse extends SoapObject {
	public string $result;
	public ?int $stockId = null;
	public ?int $failedArticleNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->stockId !== null) $gen->writeInt('stockId', $this->stockId);
		if ($this->failedArticleNumber !== null) $gen->writeInt('failedArticleNumber', $this->failedArticleNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPurchaseBookResponse extends SoapObject {
	public string $result;
	public ?string $message = null;
	public ?PurchaseBook $purchaseBook = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->message !== null) $gen->out->writeElementNs(self::TNS, 'message', null, $this->message);
		if ($this->purchaseBook !== null) $this->purchaseBook->write($gen, 'purchaseBook');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePurchaseBookResponse extends SoapObject {
	public string $result;
	public ?string $message = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->message !== null) $gen->out->writeElementNs(self::TNS, 'message', null, $this->message);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class AddToPurchaseBookResponse extends SoapObject {
	public string $result;
	public ?string $message = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->message !== null) $gen->out->writeElementNs(self::TNS, 'message', null, $this->message);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetStockCorrectionsResponse extends SoapObject {
	/** @var StockCorrectionV2[] */
	public $stockCorrectionList = array();
	public function __construct($list = array()) { $this->stockCorrectionList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_stockCorrectionList = new StockCorrectionV2List($this->stockCorrectionList);
$tmp_stockCorrectionList->write($gen, 'stockCorrectionList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticlesNutritionalCharacteristicsResponse extends SoapObject {
	public string $result;
	public ?string $errorMessage = null;
	/** @var GetArticlesNutritionalCharacteristicsResponseElem[] */
	public $articleNutritionalCharacteristics = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		foreach ($this->articleNutritionalCharacteristics as $elem) $elem->write($gen, 'articleNutritionalCharacteristics');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateArticleNutritionalCharacteristicsResponse extends SoapObject {
	public string $result;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPreparationMethodGroupsResponse extends SoapObject {
	public string $result;
	/** @var PreparationMethodGroup[] */
	public $preparationMethodGroupList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$tmp_preparationMethodGroupList = new PreparationMethodGroupList($this->preparationMethodGroupList);
$tmp_preparationMethodGroupList->write($gen, 'preparationMethodGroupList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeletePreparationMethodGroupResponse extends SoapObject {
	public string $result;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticlesPreparationMethodGroupsResponse extends SoapObject {
	public string $result;
	public ?string $errorMessage = null;
	/** @var ArticlePreparationMethodGroups[] */
	public $articlePreparationMethodGroupsList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		$tmp_articlePreparationMethodGroupsList = new ArticlePreparationMethodGroupsList($this->articlePreparationMethodGroupsList);
$tmp_articlePreparationMethodGroupsList->write($gen, 'articlePreparationMethodGroupsList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateArticlePreparationMethodGroupsResponse extends SoapObject {
	public string $result;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PlaceTableOrderResp extends IdempotentResp {
	public string $result;
	public ?string $errorMessage = null;
	public ?string $linesResult = null;
	public ?string $orderId = null;
	public ?string $paymentsResult = null;
	public ?string $receiptId = null;
	/** @var VoucherIssuance[] */
	public $voucherIssuances = null;
	/** @var UnappliedVoucherIssuance[] */
	public $unappliedVoucherIssuances = null;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->linesResult !== null) $gen->out->writeElementNs(self::TNS, 'linesResult', null, $this->linesResult);
		if ($this->orderId !== null) $gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->paymentsResult !== null) $gen->out->writeElementNs(self::TNS, 'paymentsResult', null, $this->paymentsResult);
		if ($this->receiptId !== null) $gen->out->writeElementNs(self::TNS, 'receiptId', null, $this->receiptId);
		if ($this->voucherIssuances !== null) {
$tmp_voucherIssuances = new VoucherIssuanceList($this->voucherIssuances);
$tmp_voucherIssuances->write($gen, 'voucherIssuances');
}
		if ($this->unappliedVoucherIssuances !== null) {
$tmp_unappliedVoucherIssuances = new UnappliedVoucherIssuanceList($this->unappliedVoucherIssuances);
$tmp_unappliedVoucherIssuances->write($gen, 'unappliedVoucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TapTickTotalsResponse extends SoapObject {
	/** @var BranchTapTickTotals[] */
	public $branchTotals = array();
	public function __construct($list = array()) { $this->branchTotals = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->branchTotals as $elem) $elem->write($gen, 'branchTotals');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TapTickHistoryResponse extends SoapObject {
	/** @var TapTickHistory[] */
	public $records = array();
	public function __construct($list = array()) { $this->records = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->records as $elem) $elem->write($gen, 'records');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class FindRelationV2Response extends SoapObject {
	public string $result;
	public ?Relation $relation = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->relation !== null) $this->relation->write($gen, 'relation');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetTodoListsResponse extends SoapObject {
	/** @var TodoList[] */
	public $todoLists = array();
	public function __construct($list = array()) { $this->todoLists = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->todoLists as $elem) $elem->write($gen, 'todoLists');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TodoList extends SoapObject {
	public int $id;
	public int $branchNumber;
	public string $category;
	public string $name;
	public ?int $entriesCount = null;
	/** @var TodoListEntry[] */
	public $entries = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->out->writeElementNs(self::TNS, 'category', null, $this->category);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		if ($this->entriesCount !== null) $gen->writeInt('entriesCount', $this->entriesCount);
		foreach ($this->entries as $elem) $elem->write($gen, 'entries');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateTodoListResponse extends SoapObject {
	public int $id;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveTodoListV2Response extends IdempotentResp {
	public int $id;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->writeInt('id', $this->id);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetFilterProfilesResponse extends SoapObject {
	/** @var FilterProfile[] */
	public $filterProfiles = array();
	public function __construct($list = array()) { $this->filterProfiles = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->filterProfiles as $elem) $elem->write($gen, 'filterProfiles');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SavePreparationMethodGroupResponse extends SoapObject {
	public string $result;
	public ?int $preparationMethodGroupNumber = null;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->preparationMethodGroupNumber !== null) $gen->writeInt('preparationMethodGroupNumber', $this->preparationMethodGroupNumber);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetNutritionalCharacteristicsResponse extends SoapObject {
	public string $result;
	public ?string $errorMessage = null;
	/** @var GetNutritionalCharacteristicsResponseElem[] */
	public $nutritionalCharacteristics = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		foreach ($this->nutritionalCharacteristics as $elem) $elem->write($gen, 'nutritionalCharacteristics');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateNutritionalCharacteristicsResponse extends SoapObject {
	public string $result;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeterminePricingResponse extends SoapObject {
	/** @var DeterminePricingResponseLine[] */
	public $lines = array();
	/** @var VoucherIssuanceCandidate[] */
	public $voucherIssuanceCandidates = null;
	/** @var UnappliedVoucherIssuance[] */
	public $unappliedVoucherIssuances = null;
	/** @var VoucherIssuanceRedeemable[] */
	public $scannedVoucherIssuances = null;
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->lines as $elem) $elem->write($gen, 'lines');
		if ($this->voucherIssuanceCandidates !== null) {
$tmp_voucherIssuanceCandidates = new VoucherIssuanceCandidateList($this->voucherIssuanceCandidates);
$tmp_voucherIssuanceCandidates->write($gen, 'voucherIssuanceCandidates');
}
		if ($this->unappliedVoucherIssuances !== null) {
$tmp_unappliedVoucherIssuances = new UnappliedVoucherIssuanceList($this->unappliedVoucherIssuances);
$tmp_unappliedVoucherIssuances->write($gen, 'unappliedVoucherIssuances');
}
		if ($this->scannedVoucherIssuances !== null) {
$tmp_scannedVoucherIssuances = new VoucherIssuanceRedeemableList($this->scannedVoucherIssuances);
$tmp_scannedVoucherIssuances->write($gen, 'scannedVoucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SetRelationPresenceResponse extends SoapObject {
	public string $result;
	public TableNumber $table;
	public string $errorMessage;
	public function __construct() {
		$this->table = new TableNumber();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$this->table->write($gen, 'table');
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRelationPresenceResponse extends SoapObject {
	public string $result;
	public RelationPresence $lastKnownRelationPresence;
	public \DateTime $lastKnownTimestamp;
	public function __construct() {
		$this->lastKnownRelationPresence = new RelationPresence();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$this->lastKnownRelationPresence->write($gen, 'lastKnownRelationPresence');
		$gen->writeDateTime('lastKnownTimestamp', $this->lastKnownTimestamp);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticleBranchDeviationsResponse extends SoapObject {
	/** @var ArticleBranchDeviationLine[] */
	public $articleBranchDeviationLines = array();
	public function __construct($list = array()) { $this->articleBranchDeviationLines = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->articleBranchDeviationLines as $elem) $elem->write($gen, 'articleBranchDeviationLines');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveArticleBranchDeviationsResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateArticleNutrientsResponse extends SoapObject {
	public string $result;
	public ?string $error = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->error !== null) $gen->out->writeElementNs(self::TNS, 'error', null, $this->error);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateArticleDynamicMinMaxStockResponse extends SoapObject {
	/** @var ArticleDynamicMinMaxStock[] */
	public $articleDynamicMinMaxStocks = array();
	public function __construct($list = array()) { $this->articleDynamicMinMaxStocks = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_articleDynamicMinMaxStocks = new ArticleDynamicMinMaxStockList($this->articleDynamicMinMaxStocks);
$tmp_articleDynamicMinMaxStocks->write($gen, 'articleDynamicMinMaxStocks');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticleDynamicMinMaxStockResponse extends SoapObject {
	/** @var ArticleDynamicMinMaxStock[] */
	public $articleDynamicMinMaxStocks = array();
	public function __construct($list = array()) { $this->articleDynamicMinMaxStocks = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_articleDynamicMinMaxStocks = new ArticleDynamicMinMaxStockList($this->articleDynamicMinMaxStocks);
$tmp_articleDynamicMinMaxStocks->write($gen, 'articleDynamicMinMaxStocks');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCardFilterOptionsResponse extends SoapObject {
	/** @var CardFieldInfoResponse[] */
	public $fields = array();
	/** @var GetOverviewError[] */
	public $filterErrors = array();
	public function writeProps(SoapGenerator $gen): void {
		$tmp_fields = new CardFieldInfoResponseList($this->fields);
$tmp_fields->write($gen, 'fields');

		$tmp_filterErrors = new GetOverviewErrorList($this->filterErrors);
$tmp_filterErrors->write($gen, 'filterErrors');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPlannedCycleCountsResponse extends SoapObject {
	/** @var PlannedCycleCount[] */
	public $plannedCycleCounts = array();
	public function __construct($list = array()) { $this->plannedCycleCounts = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_plannedCycleCounts = new PlannedCycleCountList($this->plannedCycleCounts);
$tmp_plannedCycleCounts->write($gen, 'plannedCycleCounts');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetActiveCycleCountResponse extends SoapObject {
	public ?ActiveCycleCount $activeCycleCount = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->activeCycleCount !== null) $this->activeCycleCount->write($gen, 'activeCycleCount');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SetArticleRecalledResponse extends SoapObject {
	public string $result;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RequestDateFilter extends SoapObject {
	public \DateTime $fromFinancialDate;
	public \DateTime $throughFinancialDate;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDate('fromFinancialDate', $this->fromFinancialDate);
		$gen->writeDate('throughFinancialDate', $this->throughFinancialDate);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RequestBranchFilter extends SoapObject {
	/** @var int[] */
	public $branchNumbers = array();
	public function __construct($list = array()) { $this->branchNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RequestEmployeeFilter extends SoapObject {
	/** @var int[] */
	public $employeeNumbers = array();
	public function __construct($list = array()) { $this->employeeNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->employeeNumbers as $elem) $gen->writeInt('employeeNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RequestTurnoverGroupFilter extends SoapObject {
	/** @var int[] */
	public $turnoverGroups = array();
	public function __construct($list = array()) { $this->turnoverGroups = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->turnoverGroups as $elem) $gen->writeInt('turnoverGroups', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RequestTurnoverGroupTypeFilter extends SoapObject {
	/** @var string[] */
	public $turnoverGroupTypes = array();
	public function __construct($list = array()) { $this->turnoverGroupTypes = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->turnoverGroupTypes as $elem) $gen->out->writeElementNs(self::TNS, 'turnoverGroupTypes', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RequestArticleFilter extends SoapObject {
	/** @var int[] */
	public $articleNumbers = array();
	public function __construct($list = array()) { $this->articleNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RequestActivityFilter extends SoapObject {
	/** @var string[] */
	public $activityNumbers = array();
	public function __construct($list = array()) { $this->activityNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->activityNumbers as $elem) $gen->out->writeElementNs(self::TNS, 'activityNumbers', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RequestRelationFilter extends SoapObject {
	/** @var int[] */
	public $relationNumbers = array();
	public function __construct($list = array()) { $this->relationNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->relationNumbers as $elem) $gen->writeInt('relationNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RequestSyncMarkerFilter extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ConfigurationList extends SoapObject {
	/** @var Configuration[] */
	public $configuration = array();
	public function __construct($list = array()) { $this->configuration = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->configuration as $elem) $elem->write($gen, 'configuration');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Configuration extends SoapObject {
	public ?int $branchNumber = null;
	public ?int $workplaceNumber = null;
	public ?string $group = null;
	public ?string $groupName = null;
	public ?string $subgroup = null;
	public ?string $subgroupName = null;
	public ?string $key = null;
	public ?string $keyName = null;
	public ?string $explanation = null;
	public ?string $defaultValue = null;
	public ?string $value = null;
	public ?int $mediaFileId = null;
	public ?\DateTime $changedTimestamp = null;
	/** @var Configuration[] */
	public $configurationList = null;
	public string $per;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->workplaceNumber !== null) $gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->group !== null) $gen->out->writeElementNs(self::TNS, 'group', null, $this->group);
		if ($this->groupName !== null) $gen->out->writeElementNs(self::TNS, 'groupName', null, $this->groupName);
		if ($this->subgroup !== null) $gen->out->writeElementNs(self::TNS, 'subgroup', null, $this->subgroup);
		if ($this->subgroupName !== null) $gen->out->writeElementNs(self::TNS, 'subgroupName', null, $this->subgroupName);
		if ($this->key !== null) $gen->out->writeElementNs(self::TNS, 'key', null, $this->key);
		if ($this->keyName !== null) $gen->out->writeElementNs(self::TNS, 'keyName', null, $this->keyName);
		if ($this->explanation !== null) $gen->out->writeElementNs(self::TNS, 'explanation', null, $this->explanation);
		if ($this->defaultValue !== null) $gen->out->writeElementNs(self::TNS, 'defaultValue', null, $this->defaultValue);
		if ($this->value !== null) $gen->out->writeElementNs(self::TNS, 'value', null, $this->value);
		if ($this->mediaFileId !== null) $gen->writeInt('mediaFileId', $this->mediaFileId);
		if ($this->changedTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->changedTimestamp))->write($gen, 'changedTimestamp');
		if ($this->configurationList !== null) {
$tmp_configurationList = new ConfigurationList($this->configurationList);
$tmp_configurationList->write($gen, 'configurationList');
}
		$gen->out->writeElementNs(self::TNS, 'per', null, $this->per);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetConfigurationRequest extends SoapObject {
	public ?int $branchNumber = null;
	public ?int $workplaceNumber = null;
	public ?string $group = null;
	public ?string $subgroup = null;
	public ?string $key = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->workplaceNumber !== null) $gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->group !== null) $gen->out->writeElementNs(self::TNS, 'group', null, $this->group);
		if ($this->subgroup !== null) $gen->out->writeElementNs(self::TNS, 'subgroup', null, $this->subgroup);
		if ($this->key !== null) $gen->out->writeElementNs(self::TNS, 'key', null, $this->key);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateConfigurationRequest extends SoapObject {
	/** @var Configuration[] */
	public $configurationList = array();
	public function __construct($list = array()) { $this->configurationList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_configurationList = new ConfigurationList($this->configurationList);
$tmp_configurationList->write($gen, 'configurationList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ConfigurationOption extends SoapObject {
	public string $key;
	public string $value;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'key', null, $this->key);
		$gen->out->writeElementNs(self::TNS, 'value', null, $this->value);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ConfigurationItem extends SoapObject {
	public string $configurationKey;
	public string $description;
	public ?string $explanation = null;
	public string $type;
	public string $defaultValue;
	public ?int $maxTextLength = null;
	public ?int $minIntNumber = null;
	public ?int $maxIntNumber = null;
	public ?int $minBigIntNumber = null;
	public ?int $maxBigIntNumber = null;
	public ?BigDecimal $minFloatNumber = null;
	public ?BigDecimal $maxFloatNumber = null;
	public ?int $numOfDecimals = null;
	/** @var ConfigurationOption[] */
	public $options = array();
	public ?string $cardKind = null;
	public ?bool $cardUnique = null;
	public ?string $pathKind = null;
	public ?string $pathFilter = null;
	public ?int $pathFilterIndex = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'configurationKey', null, $this->configurationKey);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->explanation !== null) $gen->out->writeElementNs(self::TNS, 'explanation', null, $this->explanation);
		$gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		$gen->out->writeElementNs(self::TNS, 'defaultValue', null, $this->defaultValue);
		if ($this->maxTextLength !== null) $gen->writeInt('maxTextLength', $this->maxTextLength);
		if ($this->minIntNumber !== null) $gen->writeInt('minIntNumber', $this->minIntNumber);
		if ($this->maxIntNumber !== null) $gen->writeInt('maxIntNumber', $this->maxIntNumber);
		if ($this->minBigIntNumber !== null) $gen->writeInt('minBigIntNumber', $this->minBigIntNumber);
		if ($this->maxBigIntNumber !== null) $gen->writeInt('maxBigIntNumber', $this->maxBigIntNumber);
		if ($this->minFloatNumber !== null) $gen->writeBigDecimal('minFloatNumber', $this->minFloatNumber);
		if ($this->maxFloatNumber !== null) $gen->writeBigDecimal('maxFloatNumber', $this->maxFloatNumber);
		if ($this->numOfDecimals !== null) $gen->writeInt('numOfDecimals', $this->numOfDecimals);
		foreach ($this->options as $elem) $elem->write($gen, 'options');
		if ($this->cardKind !== null) $gen->out->writeElementNs(self::TNS, 'cardKind', null, $this->cardKind);
		if ($this->cardUnique !== null) $gen->writeBool('cardUnique', $this->cardUnique);
		if ($this->pathKind !== null) $gen->out->writeElementNs(self::TNS, 'pathKind', null, $this->pathKind);
		if ($this->pathFilter !== null) $gen->out->writeElementNs(self::TNS, 'pathFilter', null, $this->pathFilter);
		if ($this->pathFilterIndex !== null) $gen->writeInt('pathFilterIndex', $this->pathFilterIndex);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ConfigurationGroup extends SoapObject {
	public string $configurationGroupName;
	/** @var ConfigurationItem[] */
	public $configurationItems = array();
	/** @var ConfigurationGroup[] */
	public $configurationSubGroups = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'configurationGroupName', null, $this->configurationGroupName);
		foreach ($this->configurationItems as $elem) $elem->write($gen, 'configurationItems');
		foreach ($this->configurationSubGroups as $elem) $elem->write($gen, 'configurationSubGroups');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetConfigurationTreeRequest extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetConfigurationValuesRequest extends SoapObject {
	public ?int $branchNumber = null;
	public ?int $workplaceNumber = null;
	/** @var string[] */
	public $configurationKeys = array();
	public function writeProps(SoapGenerator $gen): void {
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->workplaceNumber !== null) $gen->writeInt('workplaceNumber', $this->workplaceNumber);
		foreach ($this->configurationKeys as $elem) $gen->out->writeElementNs(self::TNS, 'configurationKeys', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ConfigurationValue extends SoapObject {
	public string $value;
	public ?int $branchNumber = null;
	public ?int $workplaceNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'value', null, $this->value);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->workplaceNumber !== null) $gen->writeInt('workplaceNumber', $this->workplaceNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ConfigurationKeyValues extends SoapObject {
	public string $configurationKey;
	/** @var ConfigurationValue[] */
	public $configurationValues = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'configurationKey', null, $this->configurationKey);
		foreach ($this->configurationValues as $elem) $elem->write($gen, 'configurationValues');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateConfigurationValuesRequest extends SoapObject {
	/** @var ConfigurationKeyValues[] */
	public $configurationKeyValues = array();
	public function __construct($list = array()) { $this->configurationKeyValues = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->configurationKeyValues as $elem) $elem->write($gen, 'configurationKeyValues');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ButtonLayout_Button extends SoapObject {
	public string $name;
	public Colour $colour;
	public int $column;
	public int $row;
	public int $articleNumber;
	public bool $askForText;
	public bool $isPreparationMethod;
	public ?bool $isTableComment = null;
	public ?bool $showAvailableStock = null;
	public ?bool $isDayStockArticle = null;
	public function __construct() {
		$this->colour = new Colour();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$this->colour->write($gen, 'colour');
		$gen->writeInt('column', $this->column);
		$gen->writeInt('row', $this->row);
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeBool('askForText', $this->askForText);
		$gen->writeBool('isPreparationMethod', $this->isPreparationMethod);
		if ($this->isTableComment !== null) $gen->writeBool('isTableComment', $this->isTableComment);
		if ($this->showAvailableStock !== null) $gen->writeBool('showAvailableStock', $this->showAvailableStock);
		if ($this->isDayStockArticle !== null) $gen->writeBool('isDayStockArticle', $this->isDayStockArticle);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ButtonLayout_ButtonList extends SoapObject {
	/** @var ButtonLayout_Button[] */
	public $button = array();
	public function __construct($list = array()) { $this->button = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->button as $elem) $elem->write($gen, 'button');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ButtonLayout_SubGroup extends SoapObject {
	public string $name;
	public Colour $colour;
	public int $column;
	public int $row;
	/** @var ButtonLayout_Button[] */
	public $buttonList = array();
	public function __construct() {
		$this->colour = new Colour();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$this->colour->write($gen, 'colour');
		$gen->writeInt('column', $this->column);
		$gen->writeInt('row', $this->row);
		$tmp_buttonList = new ButtonLayout_ButtonList($this->buttonList);
$tmp_buttonList->write($gen, 'buttonList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ButtonLayout_SubGroupList extends SoapObject {
	/** @var ButtonLayout_SubGroup[] */
	public $subGroup = array();
	public function __construct($list = array()) { $this->subGroup = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->subGroup as $elem) $elem->write($gen, 'subGroup');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ButtonLayout_MainGroup extends SoapObject {
	public string $name;
	public Colour $colour;
	public int $column;
	public int $row;
	/** @var ButtonLayout_SubGroup[] */
	public $subGroupList = array();
	public function __construct() {
		$this->colour = new Colour();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$this->colour->write($gen, 'colour');
		$gen->writeInt('column', $this->column);
		$gen->writeInt('row', $this->row);
		$tmp_subGroupList = new ButtonLayout_SubGroupList($this->subGroupList);
$tmp_subGroupList->write($gen, 'subGroupList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ButtonLayout_MainGroupList extends SoapObject {
	/** @var ButtonLayout_MainGroup[] */
	public $mainGroup = array();
	public function __construct($list = array()) { $this->mainGroup = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->mainGroup as $elem) $elem->write($gen, 'mainGroup');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ButtonLayout extends SoapObject {
	public int $buttonColumnCount;
	public int $buttonRowCount;
	public int $mainGroupColumnCount;
	public int $mainGroupRowCount;
	public int $subGroupColumnCount;
	public int $subGroupRowCount;
	public int $buttonWidth;
	public int $buttonHeight;
	public int $subGroupWidth;
	public int $subGroupHeight;
	public int $mainGroupWidth;
	public int $mainGroupHeight;
	public string $subPosition;
	public string $mainPosition;
	public string $fontName;
	public int $fontSize;
	public bool $fontBold;
	public bool $fontItalic;
	public bool $fontUnderline;
	public bool $fontStrikeout;
	public bool $borderWidth;
	public ?int $defaultMainGroup = null;
	public ?int $defaultSubGroup = null;
	public string $name;
	/** @var ButtonLayout_MainGroup[] */
	public $mainGroupList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('buttonColumnCount', $this->buttonColumnCount);
		$gen->writeInt('buttonRowCount', $this->buttonRowCount);
		$gen->writeInt('mainGroupColumnCount', $this->mainGroupColumnCount);
		$gen->writeInt('mainGroupRowCount', $this->mainGroupRowCount);
		$gen->writeInt('subGroupColumnCount', $this->subGroupColumnCount);
		$gen->writeInt('subGroupRowCount', $this->subGroupRowCount);
		$gen->writeInt('buttonWidth', $this->buttonWidth);
		$gen->writeInt('buttonHeight', $this->buttonHeight);
		$gen->writeInt('subGroupWidth', $this->subGroupWidth);
		$gen->writeInt('subGroupHeight', $this->subGroupHeight);
		$gen->writeInt('mainGroupWidth', $this->mainGroupWidth);
		$gen->writeInt('mainGroupHeight', $this->mainGroupHeight);
		$gen->out->writeElementNs(self::TNS, 'subPosition', null, $this->subPosition);
		$gen->out->writeElementNs(self::TNS, 'mainPosition', null, $this->mainPosition);
		$gen->out->writeElementNs(self::TNS, 'fontName', null, $this->fontName);
		$gen->writeInt('fontSize', $this->fontSize);
		$gen->writeBool('fontBold', $this->fontBold);
		$gen->writeBool('fontItalic', $this->fontItalic);
		$gen->writeBool('fontUnderline', $this->fontUnderline);
		$gen->writeBool('fontStrikeout', $this->fontStrikeout);
		$gen->writeBool('borderWidth', $this->borderWidth);
		if ($this->defaultMainGroup !== null) $gen->writeInt('defaultMainGroup', $this->defaultMainGroup);
		if ($this->defaultSubGroup !== null) $gen->writeInt('defaultSubGroup', $this->defaultSubGroup);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$tmp_mainGroupList = new ButtonLayout_MainGroupList($this->mainGroupList);
$tmp_mainGroupList->write($gen, 'mainGroupList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ButtonLayoutTabBranchLayout extends SoapObject {
	public int $branchNumber;
	public int $layoutId;
	public ?ButtonLayout $effectiveLayout = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('layoutId', $this->layoutId);
		if ($this->effectiveLayout !== null) $this->effectiveLayout->write($gen, 'effectiveLayout');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ButtonLayoutTab extends SoapObject {
	public int $id;
	public string $kind;
	public ?int $layoutId = null;
	/** @var ButtonLayoutTabBranchLayout[] */
	public $branches = array();
	public ?ButtonLayout $effectiveLayout = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
		$gen->out->writeElementNs(self::TNS, 'kind', null, $this->kind);
		if ($this->layoutId !== null) $gen->writeInt('layoutId', $this->layoutId);
		foreach ($this->branches as $elem) $elem->write($gen, 'branches');
		if ($this->effectiveLayout !== null) $this->effectiveLayout->write($gen, 'effectiveLayout');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ButtonLayoutGroup extends SoapObject {
	public int $id;
	public string $name;
	/** @var ButtonLayoutTab[] */
	public $tabs = array();
	public ?string $ownerId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		foreach ($this->tabs as $elem) $elem->write($gen, 'tabs');
		if ($this->ownerId !== null) $gen->out->writeElementNs(self::TNS, 'ownerId', null, $this->ownerId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ButtonLayoutGroupForBranchRequest extends SoapObject {
	public TerminalId $terminal;
	public bool $fillEffectiveLayout;
	public bool $fillArticlesInLayouts;
	public ?bool $ignoreCurrentActivity = null;
	public function __construct() {
		$this->terminal = new TerminalId();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$gen->writeBool('fillEffectiveLayout', $this->fillEffectiveLayout);
		$gen->writeBool('fillArticlesInLayouts', $this->fillArticlesInLayouts);
		if ($this->ignoreCurrentActivity !== null) $gen->writeBool('ignoreCurrentActivity', $this->ignoreCurrentActivity);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetButtonLayoutGroupsWithAssignedWorkplacesRequest extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ButtonLayoutGroupsWithAssignedWorkplaces extends SoapObject {
	public int $id;
	public string $name;
	/** @var WorkplaceIdentifier[] */
	public $assignedWorkplaces = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		foreach ($this->assignedWorkplaces as $elem) $elem->write($gen, 'assignedWorkplaces');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetButtonLayoutGroupDetailsRequest extends SoapObject {
	public ?int $buttonLayoutGroupId = null;
	public int $branchNumber;
	public ?int $workplaceNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->buttonLayoutGroupId !== null) $gen->writeInt('buttonLayoutGroupId', $this->buttonLayoutGroupId);
		$gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->workplaceNumber !== null) $gen->writeInt('workplaceNumber', $this->workplaceNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveButtonLayoutGroupDetailsRequest extends SoapObject {
	public int $branchNumber;
	public ButtonLayoutGroup $buttonLayoutGroup;
	public function __construct() {
		$this->buttonLayoutGroup = new ButtonLayoutGroup();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$this->buttonLayoutGroup->write($gen, 'buttonLayoutGroup');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeleteButtonLayoutGroupRequest extends SoapObject {
	public int $buttonLayoutGroupId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('buttonLayoutGroupId', $this->buttonLayoutGroupId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class AssignButtonLayoutGroupToWorkplacesRequest extends SoapObject {
	public int $buttonLayoutGroupId;
	/** @var WorkplaceIdentifier[] */
	public $assignToWorkplaces = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('buttonLayoutGroupId', $this->buttonLayoutGroupId);
		foreach ($this->assignToWorkplaces as $elem) $elem->write($gen, 'assignToWorkplaces');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PreparationMethodSimple extends SoapObject {
	public ?int $number = null;
	public string $name;
	public ?string $buttonText = null;
	public BigDecimal $priceIncl;
	public ?bool $closeAfterSelection = null;
	public ?int $groupNumber = null;
	public ?string $groupName = null;
	public string $specialPrice;
	public int $turnoverGroup;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->number !== null) $gen->writeInt('number', $this->number);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		if ($this->buttonText !== null) $gen->out->writeElementNs(self::TNS, 'buttonText', null, $this->buttonText);
		$gen->writeValueAndScale('priceIncl', '', $this->priceIncl, 2);
		if ($this->closeAfterSelection !== null) $gen->writeBool('closeAfterSelection', $this->closeAfterSelection);
		if ($this->groupNumber !== null) $gen->writeInt('groupNumber', $this->groupNumber);
		if ($this->groupName !== null) $gen->out->writeElementNs(self::TNS, 'groupName', null, $this->groupName);
		$gen->out->writeElementNs(self::TNS, 'specialPrice', null, $this->specialPrice);
		$gen->writeInt('turnoverGroup', $this->turnoverGroup);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PreparationMethodSimpleList extends SoapObject {
	/** @var PreparationMethodSimple[] */
	public $preparationMethod = array();
	public function __construct($list = array()) { $this->preparationMethod = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->preparationMethod as $elem) $elem->write($gen, 'preparationMethod');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ComponentArticleSimple extends SoapObject {
	public int $number;
	public string $name;
	public BigDecimal $priceIncl;
	public BigDecimal $quantity;
	public int $turnoverGroup;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('number', $this->number);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->writeValueAndScale('priceIncl', '', $this->priceIncl, 2);
		$gen->writeValueAndScale('quantity', 'decimalPlaces', $this->quantity, 2);
		$gen->writeInt('turnoverGroup', $this->turnoverGroup);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ComponentArticleSimpleList extends SoapObject {
	/** @var ComponentArticleSimple[] */
	public $componentArticle = array();
	public function __construct($list = array()) { $this->componentArticle = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->componentArticle as $elem) $elem->write($gen, 'componentArticle');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleSimple extends SoapObject {
	public int $number;
	public string $pluNumber;
	public string $name;
	public int $course;
	public BigDecimal $priceIncl;
	public string $specialPrice;
	public bool $showPreparationMethodsDirectly;
	public ?bool $showPreparationMethodsPerGroup = null;
	/** @var PreparationMethodSimple[] */
	public $preparationMethods = array();
	/** @var ComponentArticleSimple[] */
	public $componentArticles = array();
	public int $turnoverGroup;
	public ?string $buttonText = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('number', $this->number);
		$gen->out->writeElementNs(self::TNS, 'pluNumber', null, $this->pluNumber);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->writeInt('course', $this->course);
		$gen->writeValueAndScale('priceIncl', '', $this->priceIncl, 2);
		$gen->out->writeElementNs(self::TNS, 'specialPrice', null, $this->specialPrice);
		$gen->writeBool('showPreparationMethodsDirectly', $this->showPreparationMethodsDirectly);
		if ($this->showPreparationMethodsPerGroup !== null) $gen->writeBool('showPreparationMethodsPerGroup', $this->showPreparationMethodsPerGroup);
		$tmp_preparationMethods = new PreparationMethodSimpleList($this->preparationMethods);
$tmp_preparationMethods->write($gen, 'preparationMethods');

		$tmp_componentArticles = new ComponentArticleSimpleList($this->componentArticles);
$tmp_componentArticles->write($gen, 'componentArticles');

		$gen->writeInt('turnoverGroup', $this->turnoverGroup);
		if ($this->buttonText !== null) $gen->out->writeElementNs(self::TNS, 'buttonText', null, $this->buttonText);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetDayStockConfigurationRequest extends SoapObject {
	/** @var int[] */
	public $branchFilter = null;
	public ?RequestSyncMarkerFilter $syncMarkerFilter = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new RequestBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
		if ($this->syncMarkerFilter !== null) $this->syncMarkerFilter->write($gen, 'syncMarkerFilter');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DayStockConfiguration extends SoapObject {
	public int $branchNumber;
	/** @var int[] */
	public $articleCategoryIds = array();
	public int $syncMarker;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$tmp_articleCategoryIds = new CategoryIdSet($this->articleCategoryIds);
$tmp_articleCategoryIds->write($gen, 'articleCategoryIds');

		$gen->writeInt('syncMarker', $this->syncMarker);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DayStockConfigurationList extends SoapObject {
	/** @var DayStockConfiguration[] */
	public $dayStockConfiguration = array();
	public function __construct($list = array()) { $this->dayStockConfiguration = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->dayStockConfiguration as $elem) $elem->write($gen, 'dayStockConfiguration');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveDayStockConfiguration extends SoapObject {
	public int $branchNumber;
	/** @var int[] */
	public $articleCategoryIds = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$tmp_articleCategoryIds = new CategoryIdSet($this->articleCategoryIds);
$tmp_articleCategoryIds->write($gen, 'articleCategoryIds');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveDayStockConfigurationList extends SoapObject {
	/** @var SaveDayStockConfiguration[] */
	public $saveDayStockConfiguration = array();
	public function __construct($list = array()) { $this->saveDayStockConfiguration = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->saveDayStockConfiguration as $elem) $elem->write($gen, 'saveDayStockConfiguration');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveDayStockConfigurationRequest extends SoapObject {
	/** @var SaveDayStockConfiguration[] */
	public $saveDayStockConfigurationList = array();
	public function __construct($list = array()) { $this->saveDayStockConfigurationList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_saveDayStockConfigurationList = new SaveDayStockConfigurationList($this->saveDayStockConfigurationList);
$tmp_saveDayStockConfigurationList->write($gen, 'saveDayStockConfigurationList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Activity extends SoapObject {
	public string $activityId;
	public int $syncMarker;
	public \DateTime $createTimestamp;
	public \DateTime $changeTimestamp;
	public ?string $activityNumber = null;
	public ?string $description = null;
	public ?int $interfaceLayoutId = null;
	public ?int $articleLayoutId = null;
	public ?string $location = null;
	public ?int $priceGroupNumber = null;
	public \DateTime $employeeStartTimestamp;
	public \DateTime $employeeEndTimestamp;
	public \DateTime $managerStartTimestamp;
	public \DateTime $managerEndTimestamp;
	public bool $isDeleted;
	public ?int $activityTypeId = null;
	public ?string $activityTypeDescription = null;
	public function __construct() {
		$this->createTimestamp = new \DateTime();
		$this->changeTimestamp = new \DateTime();
		$this->employeeStartTimestamp = new \DateTime();
		$this->employeeEndTimestamp = new \DateTime();
		$this->managerStartTimestamp = new \DateTime();
		$this->managerEndTimestamp = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
		$gen->writeInt('syncMarker', $this->syncMarker);
		(SoapMplusDateTime::fromDateTime($this->createTimestamp))->write($gen, 'createTimestamp');
		(SoapMplusDateTime::fromDateTime($this->changeTimestamp))->write($gen, 'changeTimestamp');
		if ($this->activityNumber !== null) $gen->out->writeElementNs(self::TNS, 'activityNumber', null, $this->activityNumber);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->interfaceLayoutId !== null) $gen->writeInt('interfaceLayoutId', $this->interfaceLayoutId);
		if ($this->articleLayoutId !== null) $gen->writeInt('articleLayoutId', $this->articleLayoutId);
		if ($this->location !== null) $gen->out->writeElementNs(self::TNS, 'location', null, $this->location);
		if ($this->priceGroupNumber !== null) $gen->writeInt('priceGroupNumber', $this->priceGroupNumber);
		(SoapMplusDateTime::fromDateTime($this->employeeStartTimestamp))->write($gen, 'employeeStartTimestamp');
		(SoapMplusDateTime::fromDateTime($this->employeeEndTimestamp))->write($gen, 'employeeEndTimestamp');
		(SoapMplusDateTime::fromDateTime($this->managerStartTimestamp))->write($gen, 'managerStartTimestamp');
		(SoapMplusDateTime::fromDateTime($this->managerEndTimestamp))->write($gen, 'managerEndTimestamp');
		$gen->writeBool('isDeleted', $this->isDeleted);
		if ($this->activityTypeId !== null) $gen->writeInt('activityTypeId', $this->activityTypeId);
		if ($this->activityTypeDescription !== null) $gen->out->writeElementNs(self::TNS, 'activityTypeDescription', null, $this->activityTypeDescription);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ActivityList extends SoapObject {
	/** @var Activity[] */
	public $activity = array();
	public function __construct($list = array()) { $this->activity = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->activity as $elem) $elem->write($gen, 'activity');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetActivitiesRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetActivityTypesRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ActivityType extends SoapObject {
	public int $id;
	public string $description;
	public int $syncMarker;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		$gen->writeInt('syncMarker', $this->syncMarker);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ActivityTypeList extends SoapObject {
	/** @var ActivityType[] */
	public $activityType = array();
	public function __construct($list = array()) { $this->activityType = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->activityType as $elem) $elem->write($gen, 'activityType');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveActivityType extends SoapObject {
	public int $id;
	public string $description;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveActivityTypeList extends SoapObject {
	/** @var SaveActivityType[] */
	public $activityType = array();
	public function __construct($list = array()) { $this->activityType = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->activityType as $elem) $elem->write($gen, 'activityType');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveActivityTypesRequest extends SoapObject {
	/** @var SaveActivityType[] */
	public $activityTypeList = array();
	public function __construct($list = array()) { $this->activityTypeList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_activityTypeList = new SaveActivityTypeList($this->activityTypeList);
$tmp_activityTypeList->write($gen, 'activityTypeList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateActivity extends SoapObject {
	public string $activityNumber;
	public string $description;
	public ?int $interfaceLayoutId = null;
	public ?int $articleLayoutId = null;
	public ?string $location = null;
	public ?int $priceGroupNumber = null;
	public \DateTime $employeeStartTimestamp;
	public \DateTime $employeeEndTimestamp;
	public \DateTime $managerStartTimestamp;
	public \DateTime $managerEndTimestamp;
	public ?int $activityTypeId = null;
	public function __construct() {
		$this->employeeStartTimestamp = new \DateTime();
		$this->employeeEndTimestamp = new \DateTime();
		$this->managerStartTimestamp = new \DateTime();
		$this->managerEndTimestamp = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'activityNumber', null, $this->activityNumber);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->interfaceLayoutId !== null) $gen->writeInt('interfaceLayoutId', $this->interfaceLayoutId);
		if ($this->articleLayoutId !== null) $gen->writeInt('articleLayoutId', $this->articleLayoutId);
		if ($this->location !== null) $gen->out->writeElementNs(self::TNS, 'location', null, $this->location);
		if ($this->priceGroupNumber !== null) $gen->writeInt('priceGroupNumber', $this->priceGroupNumber);
		(SoapMplusDateTime::fromDateTime($this->employeeStartTimestamp))->write($gen, 'employeeStartTimestamp');
		(SoapMplusDateTime::fromDateTime($this->employeeEndTimestamp))->write($gen, 'employeeEndTimestamp');
		(SoapMplusDateTime::fromDateTime($this->managerStartTimestamp))->write($gen, 'managerStartTimestamp');
		(SoapMplusDateTime::fromDateTime($this->managerEndTimestamp))->write($gen, 'managerEndTimestamp');
		if ($this->activityTypeId !== null) $gen->writeInt('activityTypeId', $this->activityTypeId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateActivityRequest extends SoapObject {
	public CreateActivity $createActivity;
	public function __construct() {
		$this->createActivity = new CreateActivity();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->createActivity->write($gen, 'createActivity');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateActivity extends SoapObject {
	public string $activityId;
	public ?string $activityNumber = null;
	public ?string $description = null;
	public ?int $interfaceLayoutId = null;
	public ?int $articleLayoutId = null;
	public ?string $location = null;
	public ?int $priceGroupNumber = null;
	public ?\DateTime $employeeStartTimestamp = null;
	public ?\DateTime $employeeEndTimestamp = null;
	public ?\DateTime $managerStartTimestamp = null;
	public ?\DateTime $managerEndTimestamp = null;
	public ?int $activityTypeId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
		if ($this->activityNumber !== null) $gen->out->writeElementNs(self::TNS, 'activityNumber', null, $this->activityNumber);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->interfaceLayoutId !== null) $gen->writeInt('interfaceLayoutId', $this->interfaceLayoutId);
		if ($this->articleLayoutId !== null) $gen->writeInt('articleLayoutId', $this->articleLayoutId);
		if ($this->location !== null) $gen->out->writeElementNs(self::TNS, 'location', null, $this->location);
		if ($this->priceGroupNumber !== null) $gen->writeInt('priceGroupNumber', $this->priceGroupNumber);
		if ($this->employeeStartTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->employeeStartTimestamp))->write($gen, 'employeeStartTimestamp');
		if ($this->employeeEndTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->employeeEndTimestamp))->write($gen, 'employeeEndTimestamp');
		if ($this->managerStartTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->managerStartTimestamp))->write($gen, 'managerStartTimestamp');
		if ($this->managerEndTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->managerEndTimestamp))->write($gen, 'managerEndTimestamp');
		if ($this->activityTypeId !== null) $gen->writeInt('activityTypeId', $this->activityTypeId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateActivityRequest extends SoapObject {
	public UpdateActivity $updateActivity;
	public function __construct() {
		$this->updateActivity = new UpdateActivity();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->updateActivity->write($gen, 'updateActivity');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveActivity extends SoapObject {
	public ?string $activityId = null;
	public ?string $activityNumber = null;
	public ?string $description = null;
	public ?int $interfaceLayoutId = null;
	public ?int $articleLayoutId = null;
	public ?string $location = null;
	public ?int $priceGroupNumber = null;
	public ?\DateTime $employeeStartTimestamp = null;
	public ?\DateTime $employeeEndTimestamp = null;
	public ?\DateTime $managerStartTimestamp = null;
	public ?\DateTime $managerEndTimestamp = null;
	public ?int $activityTypeId = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->activityId !== null) $gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
		if ($this->activityNumber !== null) $gen->out->writeElementNs(self::TNS, 'activityNumber', null, $this->activityNumber);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->interfaceLayoutId !== null) $gen->writeInt('interfaceLayoutId', $this->interfaceLayoutId);
		if ($this->articleLayoutId !== null) $gen->writeInt('articleLayoutId', $this->articleLayoutId);
		if ($this->location !== null) $gen->out->writeElementNs(self::TNS, 'location', null, $this->location);
		if ($this->priceGroupNumber !== null) $gen->writeInt('priceGroupNumber', $this->priceGroupNumber);
		if ($this->employeeStartTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->employeeStartTimestamp))->write($gen, 'employeeStartTimestamp');
		if ($this->employeeEndTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->employeeEndTimestamp))->write($gen, 'employeeEndTimestamp');
		if ($this->managerStartTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->managerStartTimestamp))->write($gen, 'managerStartTimestamp');
		if ($this->managerEndTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->managerEndTimestamp))->write($gen, 'managerEndTimestamp');
		if ($this->activityTypeId !== null) $gen->writeInt('activityTypeId', $this->activityTypeId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveActivityRequest extends SoapObject {
	public SaveActivity $saveActivity;
	public function __construct() {
		$this->saveActivity = new SaveActivity();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->saveActivity->write($gen, 'saveActivity');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeleteActivityRequest extends SoapObject {
	public string $activityId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetGksInformationRequest extends SoapObject {
	public WorkplaceIdentifier $workplace;
	public function __construct() {
		$this->workplace = new WorkplaceIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->workplace->write($gen, 'workplace');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetMealplanMomentsConfigurationRequest extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class MealmomentConfiguration extends SoapObject {
	public string $MealmomentId;
	public string $Description;
	public int $SortOrder;
	public bool $PrintOnMenu;
	public \DateTime $StartsAt;
	public \DateTime $EndsAt;
	public bool $Deleted;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'MealmomentId', null, $this->MealmomentId);
		$gen->out->writeElementNs(self::TNS, 'Description', null, $this->Description);
		$gen->writeInt('SortOrder', $this->SortOrder);
		$gen->writeBool('PrintOnMenu', $this->PrintOnMenu);
		$gen->writeDateTime('StartsAt', $this->StartsAt);
		$gen->writeDateTime('EndsAt', $this->EndsAt);
		$gen->writeBool('Deleted', $this->Deleted);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetScheduledMealPlansRequest extends SoapObject {
	public \DateTime $fromDate;
	public \DateTime $troughDate;
	public WorkplaceIdentifier $workplace;
	public function __construct() {
		$this->workplace = new WorkplaceIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDate('fromDate', $this->fromDate);
		$gen->writeDate('troughDate', $this->troughDate);
		$this->workplace->write($gen, 'workplace');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class MealPlanArticleGroup extends SoapObject {
	public string $groupDescription;
	public string $groupType;
	public int $minimalChoices;
	public int $maximumChoices;
	/** @var int[] */
	public $articleNumbers = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'groupDescription', null, $this->groupDescription);
		$gen->out->writeElementNs(self::TNS, 'groupType', null, $this->groupType);
		$gen->writeInt('minimalChoices', $this->minimalChoices);
		$gen->writeInt('maximumChoices', $this->maximumChoices);
		$tmp_articleNumbers = new NumberList($this->articleNumbers);
$tmp_articleNumbers->write($gen, 'articleNumbers');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Mealmoment extends SoapObject {
	public string $mealmomentId;
	/** @var MealPlanArticleGroup[] */
	public $articleGroups = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'mealmomentId', null, $this->mealmomentId);
		foreach ($this->articleGroups as $elem) $elem->write($gen, 'articleGroups');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class MealPlan extends SoapObject {
	public string $mealPlanDescription;
	public Colour $planColour;
	/** @var Mealmoment[] */
	public $mealMoments = array();
	public function __construct() {
		$this->planColour = new Colour();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'mealPlanDescription', null, $this->mealPlanDescription);
		$this->planColour->write($gen, 'planColour');
		foreach ($this->mealMoments as $elem) $elem->write($gen, 'mealMoments');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ScheduledMealPlan extends SoapObject {
	public \DateTime $scheduledDate;
	public WorkplaceIdentifier $workplace;
	public MealPlan $mealPlan;
	public function __construct() {
		$this->workplace = new WorkplaceIdentifier();
		$this->mealPlan = new MealPlan();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDateTime('scheduledDate', $this->scheduledDate);
		$this->workplace->write($gen, 'workplace');
		$this->mealPlan->write($gen, 'mealPlan');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticleAlterationsGroupsRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public ?string $groupType = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		if ($this->groupType !== null) $gen->out->writeElementNs(self::TNS, 'groupType', null, $this->groupType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleAlteration extends SoapObject {
	public int $id;
	public int $sequenceNumber;
	public ?int $articleNumber = null;
	public ?BigDecimal $priceIncl = null;
	public ?BigDecimal $priceExcl = null;
	public string $remark;
	public string $translation;
	public Colour $buttonColour;
	public function __construct() {
		$this->buttonColour = new Colour();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
		$gen->writeInt('sequenceNumber', $this->sequenceNumber);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->priceIncl !== null) $gen->writeBigDecimal('priceIncl', $this->priceIncl);
		if ($this->priceExcl !== null) $gen->writeBigDecimal('priceExcl', $this->priceExcl);
		$gen->out->writeElementNs(self::TNS, 'remark', null, $this->remark);
		$gen->out->writeElementNs(self::TNS, 'translation', null, $this->translation);
		$this->buttonColour->write($gen, 'buttonColour');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleAlterationList extends SoapObject {
	/** @var ArticleAlteration[] */
	public $articleAlteration = array();
	public function __construct($list = array()) { $this->articleAlteration = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->articleAlteration as $elem) $elem->write($gen, 'articleAlteration');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleAlterationsGroup extends SoapObject {
	public int $groupNumber;
	public string $description;
	public bool $closeAfterSelection;
	public bool $selectionRequired;
	public bool $maxOneSelection;
	public ?int $maxCols = null;
	/** @var ArticleAlteration[] */
	public $articleAlterations = array();
	public string $paletteJson;
	public ?\DateTime $deletedOn = null;
	public int $syncMarker;
	public bool $isPosGroup;
	public bool $isOnlineGroup;
	public string $groupType;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('groupNumber', $this->groupNumber);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		$gen->writeBool('closeAfterSelection', $this->closeAfterSelection);
		$gen->writeBool('selectionRequired', $this->selectionRequired);
		$gen->writeBool('maxOneSelection', $this->maxOneSelection);
		if ($this->maxCols !== null) $gen->writeInt('maxCols', $this->maxCols);
		$tmp_articleAlterations = new ArticleAlterationList($this->articleAlterations);
$tmp_articleAlterations->write($gen, 'articleAlterations');

		$gen->out->writeElementNs(self::TNS, 'paletteJson', null, $this->paletteJson);
		if ($this->deletedOn !== null) $gen->writeDateTime('deletedOn', $this->deletedOn);
		$gen->writeInt('syncMarker', $this->syncMarker);
		$gen->writeBool('isPosGroup', $this->isPosGroup);
		$gen->writeBool('isOnlineGroup', $this->isOnlineGroup);
		$gen->out->writeElementNs(self::TNS, 'groupType', null, $this->groupType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleAlterationsGroupList extends SoapObject {
	/** @var ArticleAlterationsGroup[] */
	public $articleAlterationsGroup = array();
	public function __construct($list = array()) { $this->articleAlterationsGroup = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->articleAlterationsGroup as $elem) $elem->write($gen, 'articleAlterationsGroup');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveArticleAlteration extends SoapObject {
	public ?int $id = null;
	public int $sequenceNumber;
	public ?int $articleNumber = null;
	public string $remark;
	public ?string $translation = null;
	public ?Colour $buttonColour = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->id !== null) $gen->writeInt('id', $this->id);
		$gen->writeInt('sequenceNumber', $this->sequenceNumber);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		$gen->out->writeElementNs(self::TNS, 'remark', null, $this->remark);
		if ($this->translation !== null) $gen->out->writeElementNs(self::TNS, 'translation', null, $this->translation);
		if ($this->buttonColour !== null) $this->buttonColour->write($gen, 'buttonColour');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveArticleAlterationList extends SoapObject {
	/** @var SaveArticleAlteration[] */
	public $saveArticleAlteration = array();
	public function __construct($list = array()) { $this->saveArticleAlteration = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->saveArticleAlteration as $elem) $elem->write($gen, 'saveArticleAlteration');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveArticleAlterationsGroupRequest extends SoapObject {
	public ?int $groupNumber = null;
	public string $description;
	public bool $closeAfterSelection;
	public bool $selectionRequired;
	public bool $maxOneSelection;
	public ?int $maxCols = null;
	/** @var SaveArticleAlteration[] */
	public $articleAlterations = null;
	public ?bool $isPosGroup = null;
	public ?bool $isOnlineGroup = null;
	public string $groupType;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->groupNumber !== null) $gen->writeInt('groupNumber', $this->groupNumber);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		$gen->writeBool('closeAfterSelection', $this->closeAfterSelection);
		$gen->writeBool('selectionRequired', $this->selectionRequired);
		$gen->writeBool('maxOneSelection', $this->maxOneSelection);
		if ($this->maxCols !== null) $gen->writeInt('maxCols', $this->maxCols);
		if ($this->articleAlterations !== null) {
$tmp_articleAlterations = new SaveArticleAlterationList($this->articleAlterations);
$tmp_articleAlterations->write($gen, 'articleAlterations');
}
		if ($this->isPosGroup !== null) $gen->writeBool('isPosGroup', $this->isPosGroup);
		if ($this->isOnlineGroup !== null) $gen->writeBool('isOnlineGroup', $this->isOnlineGroup);
		$gen->out->writeElementNs(self::TNS, 'groupType', null, $this->groupType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeleteArticleAlterationsGroupRequest extends SoapObject {
	public int $groupNumber;
	public bool $deleteEvenWhenInUse;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('groupNumber', $this->groupNumber);
		$gen->writeBool('deleteEvenWhenInUse', $this->deleteEvenWhenInUse);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateAttachedArticleAlterationsGroupsRequest extends SoapObject {
	public int $articleNumber;
	/** @var int[] */
	public $groupNumbers = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		foreach ($this->groupNumbers as $elem) $gen->writeInt('groupNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveArticleMenuArticleSettings extends SoapObject {
	public int $groupNumber;
	public int $articleNumber;
	public BigDecimal $addedFee;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('groupNumber', $this->groupNumber);
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeBigDecimal('addedFee', $this->addedFee);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveArticleMenuArticleSettingsList extends SoapObject {
	/** @var SaveArticleMenuArticleSettings[] */
	public $articleSettings = array();
	public function __construct($list = array()) { $this->articleSettings = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->articleSettings as $elem) $elem->write($gen, 'articleSettings');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateArticleMenuRequest extends SoapObject {
	public int $articleNumber;
	public string $description;
	public bool $isActive;
	public bool $isRequired;
	public bool $useMainArticle;
	public BigDecimal $priceIncl;
	public int $vatCode;
	public int $turnoverGroup;
	/** @var SaveArticleMenuArticleSettings[] */
	public $articlesSettings = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		$gen->writeBool('isActive', $this->isActive);
		$gen->writeBool('isRequired', $this->isRequired);
		$gen->writeBool('useMainArticle', $this->useMainArticle);
		$gen->writeBigDecimal('priceIncl', $this->priceIncl);
		$gen->writeInt('vatCode', $this->vatCode);
		$gen->writeInt('turnoverGroup', $this->turnoverGroup);
		if ($this->articlesSettings !== null) {
$tmp_articlesSettings = new SaveArticleMenuArticleSettingsList($this->articlesSettings);
$tmp_articlesSettings->write($gen, 'articlesSettings');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateOnlineAuthorizationTreeRequest extends SoapObject {
	/** @var Authorization[] */
	public $authorizationList = array();
	public string $onlineAuthorizationsVersion;
	public ?string $id = null;
	public function writeProps(SoapGenerator $gen): void {
		$tmp_authorizationList = new AuthorizationsList($this->authorizationList);
$tmp_authorizationList->write($gen, 'authorizationList');

		$gen->out->writeElementNs(self::TNS, 'onlineAuthorizationsVersion', null, $this->onlineAuthorizationsVersion);
		if ($this->id !== null) $gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOwnerLabelsRequest extends SoapObject {
	public bool $activeOnly;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeBool('activeOnly', $this->activeOnly);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class OwnerLabel extends SoapObject {
	public string $id;
	public int $multiSelectId;
	public string $description;
	public Colour $color;
	public bool $isActive;
	public function __construct() {
		$this->color = new Colour();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->writeInt('multiSelectId', $this->multiSelectId);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		$this->color->write($gen, 'color');
		$gen->writeBool('isActive', $this->isActive);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WordAlias extends SoapObject {
	public string $word;
	public string $alias;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'word', null, $this->word);
		$gen->out->writeElementNs(self::TNS, 'alias', null, $this->alias);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WordAliasList extends SoapObject {
	/** @var WordAlias[] */
	public $wordAlias = array();
	public function __construct($list = array()) { $this->wordAlias = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->wordAlias as $elem) $elem->write($gen, 'wordAlias');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetWordAliasesRequest extends SoapObject {
	public string $locale;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'locale', null, $this->locale);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LicensedModule extends SoapObject {
	public int $moduleGroup;
	public int $moduleNumber;
	public ?string $moduleDescription = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('moduleGroup', $this->moduleGroup);
		$gen->writeInt('moduleNumber', $this->moduleNumber);
		if ($this->moduleDescription !== null) $gen->out->writeElementNs(self::TNS, 'moduleDescription', null, $this->moduleDescription);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LicensedModuleList extends SoapObject {
	/** @var LicensedModule[] */
	public $licensedModule = array();
	public function __construct($list = array()) { $this->licensedModule = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->licensedModule as $elem) $elem->write($gen, 'licensedModule');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LicensedBranch extends SoapObject {
	public int $branchNumber;
	public ?string $branchName = null;
	public ?int $workplaceLimit = null;
	public ?bool $isGKS = null;
	/** @var LicensedModule[] */
	public $licensedModules = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->branchName !== null) $gen->out->writeElementNs(self::TNS, 'branchName', null, $this->branchName);
		if ($this->workplaceLimit !== null) $gen->writeInt('workplaceLimit', $this->workplaceLimit);
		if ($this->isGKS !== null) $gen->writeBool('isGKS', $this->isGKS);
		if ($this->licensedModules !== null) {
$tmp_licensedModules = new LicensedModuleList($this->licensedModules);
$tmp_licensedModules->write($gen, 'licensedModules');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LicensedBranchList extends SoapObject {
	/** @var LicensedBranch[] */
	public $licensedBranch = array();
	public function __construct($list = array()) { $this->licensedBranch = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->licensedBranch as $elem) $elem->write($gen, 'licensedBranch');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetBranchInformationRequest extends SoapObject {
	public int $branchNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeliveryAddressSupplier extends SoapObject {
	public ?int $supplierRelationNumber = null;
	public ?string $information = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->supplierRelationNumber !== null) $gen->writeInt('supplierRelationNumber', $this->supplierRelationNumber);
		if ($this->information !== null) $gen->out->writeElementNs(self::TNS, 'information', null, $this->information);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeliveryAddressSupplierList extends SoapObject {
	/** @var DeliveryAddressSupplier[] */
	public $deliveryAddressSupplier = array();
	public function __construct($list = array()) { $this->deliveryAddressSupplier = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->deliveryAddressSupplier as $elem) $elem->write($gen, 'deliveryAddressSupplier');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeliveryAddress extends SoapObject {
	public ?Address $address = null;
	public ?string $name = null;
	public ?int $branchNumber = null;
	public ?bool $isDefault = null;
	/** @var DeliveryAddressSupplier[] */
	public $suppliers = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->address !== null) $this->address->write($gen, 'address');
		if ($this->name !== null) $gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->isDefault !== null) $gen->writeBool('isDefault', $this->isDefault);
		if ($this->suppliers !== null) {
$tmp_suppliers = new DeliveryAddressSupplierList($this->suppliers);
$tmp_suppliers->write($gen, 'suppliers');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeliveryAddressList extends SoapObject {
	/** @var DeliveryAddress[] */
	public $deliveryAddress = array();
	public function __construct($list = array()) { $this->deliveryAddress = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->deliveryAddress as $elem) $elem->write($gen, 'deliveryAddress');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BranchInformation extends SoapObject {
	public int $branchNumber;
	public string $branchName;
	public string $companyName;
	public string $address;
	public string $zipcode;
	public string $city;
	public int $countryCode;
	public string $countryName;
	public string $telephone;
	public string $mobile;
	public string $fax;
	public string $email;
	public string $website;
	public string $commerceNumber;
	public string $bankAccountNumber;
	public string $vatNumber;
	public string $termsAndConditions;
	/** @var DeliveryAddress[] */
	public $deliveryAddresses = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->out->writeElementNs(self::TNS, 'branchName', null, $this->branchName);
		$gen->out->writeElementNs(self::TNS, 'companyName', null, $this->companyName);
		$gen->out->writeElementNs(self::TNS, 'address', null, $this->address);
		$gen->out->writeElementNs(self::TNS, 'zipcode', null, $this->zipcode);
		$gen->out->writeElementNs(self::TNS, 'city', null, $this->city);
		$gen->writeInt('countryCode', $this->countryCode);
		$gen->out->writeElementNs(self::TNS, 'countryName', null, $this->countryName);
		$gen->out->writeElementNs(self::TNS, 'telephone', null, $this->telephone);
		$gen->out->writeElementNs(self::TNS, 'mobile', null, $this->mobile);
		$gen->out->writeElementNs(self::TNS, 'fax', null, $this->fax);
		$gen->out->writeElementNs(self::TNS, 'email', null, $this->email);
		$gen->out->writeElementNs(self::TNS, 'website', null, $this->website);
		$gen->out->writeElementNs(self::TNS, 'commerceNumber', null, $this->commerceNumber);
		$gen->out->writeElementNs(self::TNS, 'bankAccountNumber', null, $this->bankAccountNumber);
		$gen->out->writeElementNs(self::TNS, 'vatNumber', null, $this->vatNumber);
		$gen->out->writeElementNs(self::TNS, 'termsAndConditions', null, $this->termsAndConditions);
		if ($this->deliveryAddresses !== null) {
$tmp_deliveryAddresses = new DeliveryAddressList($this->deliveryAddresses);
$tmp_deliveryAddresses->write($gen, 'deliveryAddresses');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetBranchGroupsRequest extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BranchGroup extends SoapObject {
	public string $groupName;
	public int $groupNumber;
	public int $groupSortNumber;
	/** @var int[] */
	public $branchNumbers = array();
	public ?int $parentGroupNumber = null;
	public ?string $ownerLabelId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'groupName', null, $this->groupName);
		$gen->writeInt('groupNumber', $this->groupNumber);
		$gen->writeInt('groupSortNumber', $this->groupSortNumber);
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		if ($this->parentGroupNumber !== null) $gen->writeInt('parentGroupNumber', $this->parentGroupNumber);
		if ($this->ownerLabelId !== null) $gen->out->writeElementNs(self::TNS, 'ownerLabelId', null, $this->ownerLabelId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BranchGroups extends SoapObject {
	public BranchGroup $branchGroup;
	/** @var BranchGroup[] */
	public $subGroups = array();
	public function __construct() {
		$this->branchGroup = new BranchGroup();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->branchGroup->write($gen, 'branchGroup');
		foreach ($this->subGroups as $elem) $elem->write($gen, 'subGroups');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BranchGroupsList extends SoapObject {
	/** @var BranchGroups[] */
	public $branchGroups = array();
	public function __construct($list = array()) { $this->branchGroups = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->branchGroups as $elem) $elem->write($gen, 'branchGroups');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeliveryMethod extends SoapObject {
	public string $deliveryMethod;
	public string $description;
	public string $buttonText;
	public ?bool $enabled = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'deliveryMethod', null, $this->deliveryMethod);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		$gen->out->writeElementNs(self::TNS, 'buttonText', null, $this->buttonText);
		if ($this->enabled !== null) $gen->writeBool('enabled', $this->enabled);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeliveryMethodList extends SoapObject {
	/** @var DeliveryMethod[] */
	public $deliveryMethod = array();
	public function __construct($list = array()) { $this->deliveryMethod = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->deliveryMethod as $elem) $elem->write($gen, 'deliveryMethod');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetDeliveryMethodsV2Request extends SoapObject {
	public ?bool $onlyEnabled = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->onlyEnabled !== null) $gen->writeBool('onlyEnabled', $this->onlyEnabled);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateDeliveryMethodRequest extends SoapObject {
	public DeliveryMethod $deliveryMethod;
	public function __construct() {
		$this->deliveryMethod = new DeliveryMethod();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->deliveryMethod->write($gen, 'deliveryMethod');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateDeliveryMethodRequest extends SoapObject {
	public DeliveryMethod $deliveryMethod;
	public function __construct() {
		$this->deliveryMethod = new DeliveryMethod();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->deliveryMethod->write($gen, 'deliveryMethod');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Workplace extends SoapObject {
	public int $workplaceNumber;
	public string $workplaceName;
	public bool $isMobile;
	public ?string $workplaceType = null;
	public ?bool $isSlave = null;
	public ?\DateTime $lastSlaveSync = null;
	public ?int $priceGroupNumber = null;
	public ?string $extWorkplaceId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
		$gen->out->writeElementNs(self::TNS, 'workplaceName', null, $this->workplaceName);
		$gen->writeBool('isMobile', $this->isMobile);
		if ($this->workplaceType !== null) $gen->out->writeElementNs(self::TNS, 'workplaceType', null, $this->workplaceType);
		if ($this->isSlave !== null) $gen->writeBool('isSlave', $this->isSlave);
		if ($this->lastSlaveSync !== null) (SoapMplusDateTime::fromDateTime($this->lastSlaveSync))->write($gen, 'lastSlaveSync');
		if ($this->priceGroupNumber !== null) $gen->writeInt('priceGroupNumber', $this->priceGroupNumber);
		if ($this->extWorkplaceId !== null) $gen->out->writeElementNs(self::TNS, 'extWorkplaceId', null, $this->extWorkplaceId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WorkplaceList extends SoapObject {
	/** @var Workplace[] */
	public $workplace = array();
	public function __construct($list = array()) { $this->workplace = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->workplace as $elem) $elem->write($gen, 'workplace');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Branch extends SoapObject {
	public int $branchNumber;
	public string $branchName;
	public ?int $relationNumber = null;
	public string $abbreviation;
	public ?string $extBranchId = null;
	public ?bool $isFullSlave = null;
	public ?int $priceGroupNumber = null;
	/** @var Workplace[] */
	public $workplaces = null;
	public int $countryCode;
	public string $countryIso3;
	public string $countryName;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->out->writeElementNs(self::TNS, 'branchName', null, $this->branchName);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		$gen->out->writeElementNs(self::TNS, 'abbreviation', null, $this->abbreviation);
		if ($this->extBranchId !== null) $gen->out->writeElementNs(self::TNS, 'extBranchId', null, $this->extBranchId);
		if ($this->isFullSlave !== null) $gen->writeBool('isFullSlave', $this->isFullSlave);
		if ($this->priceGroupNumber !== null) $gen->writeInt('priceGroupNumber', $this->priceGroupNumber);
		if ($this->workplaces !== null) {
$tmp_workplaces = new WorkplaceList($this->workplaces);
$tmp_workplaces->write($gen, 'workplaces');
}
		$gen->writeInt('countryCode', $this->countryCode);
		$gen->out->writeElementNs(self::TNS, 'countryIso3', null, $this->countryIso3);
		$gen->out->writeElementNs(self::TNS, 'countryName', null, $this->countryName);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BranchList extends SoapObject {
	/** @var Branch[] */
	public $branch = array();
	public function __construct($list = array()) { $this->branch = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->branch as $elem) $elem->write($gen, 'branch');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCurrentSyncMarkersV2Request extends SoapObject {
	public ?bool $includeArticleSyncMarker = null;
	public ?bool $includeArticleGroupSyncMarker = null;
	public ?bool $includeRelationSyncMarker = null;
	public ?bool $includeEmployeeSyncMarker = null;
	public ?bool $includeInvoiceSyncMarker = null;
	public ?bool $includeReceiptSyncMarker = null;
	public ?bool $includeOrderSyncMarker = null;
	public ?bool $includeProposalSyncMarker = null;
	public ?bool $includeStockId = null;
	public ?bool $includeTicketCounterSaleSyncMarker = null;
	public ?bool $includePurchaseOrderSyncMarker = null;
	public ?bool $includePurchaseDeliverySyncMarker = null;
	public ?bool $includeRelationPointsSyncMarker = null;
	public ?bool $includeCashDrawerBalancingSyncMarker = null;
	public ?bool $includeActivitySyncMarker = null;
	public ?bool $includePackingSlipSyncMarker = null;
	public ?bool $includeDayStockConfigurationSyncMarker = null;
	public ?bool $includePreparationMethodGroupSyncMarker = null;
	public ?bool $includeArticleAlterationsGroupsSyncMarker = null;
	public ?bool $includeArticleNutritionalCharacteristicsSyncMarker = null;
	public ?bool $includeRelationNutritionalCharacteristicsSyncMarker = null;
	public ?bool $includeBranchGroupSyncMarker = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->includeArticleSyncMarker !== null) $gen->writeBool('includeArticleSyncMarker', $this->includeArticleSyncMarker);
		if ($this->includeArticleGroupSyncMarker !== null) $gen->writeBool('includeArticleGroupSyncMarker', $this->includeArticleGroupSyncMarker);
		if ($this->includeRelationSyncMarker !== null) $gen->writeBool('includeRelationSyncMarker', $this->includeRelationSyncMarker);
		if ($this->includeEmployeeSyncMarker !== null) $gen->writeBool('includeEmployeeSyncMarker', $this->includeEmployeeSyncMarker);
		if ($this->includeInvoiceSyncMarker !== null) $gen->writeBool('includeInvoiceSyncMarker', $this->includeInvoiceSyncMarker);
		if ($this->includeReceiptSyncMarker !== null) $gen->writeBool('includeReceiptSyncMarker', $this->includeReceiptSyncMarker);
		if ($this->includeOrderSyncMarker !== null) $gen->writeBool('includeOrderSyncMarker', $this->includeOrderSyncMarker);
		if ($this->includeProposalSyncMarker !== null) $gen->writeBool('includeProposalSyncMarker', $this->includeProposalSyncMarker);
		if ($this->includeStockId !== null) $gen->writeBool('includeStockId', $this->includeStockId);
		if ($this->includeTicketCounterSaleSyncMarker !== null) $gen->writeBool('includeTicketCounterSaleSyncMarker', $this->includeTicketCounterSaleSyncMarker);
		if ($this->includePurchaseOrderSyncMarker !== null) $gen->writeBool('includePurchaseOrderSyncMarker', $this->includePurchaseOrderSyncMarker);
		if ($this->includePurchaseDeliverySyncMarker !== null) $gen->writeBool('includePurchaseDeliverySyncMarker', $this->includePurchaseDeliverySyncMarker);
		if ($this->includeRelationPointsSyncMarker !== null) $gen->writeBool('includeRelationPointsSyncMarker', $this->includeRelationPointsSyncMarker);
		if ($this->includeCashDrawerBalancingSyncMarker !== null) $gen->writeBool('includeCashDrawerBalancingSyncMarker', $this->includeCashDrawerBalancingSyncMarker);
		if ($this->includeActivitySyncMarker !== null) $gen->writeBool('includeActivitySyncMarker', $this->includeActivitySyncMarker);
		if ($this->includePackingSlipSyncMarker !== null) $gen->writeBool('includePackingSlipSyncMarker', $this->includePackingSlipSyncMarker);
		if ($this->includeDayStockConfigurationSyncMarker !== null) $gen->writeBool('includeDayStockConfigurationSyncMarker', $this->includeDayStockConfigurationSyncMarker);
		if ($this->includePreparationMethodGroupSyncMarker !== null) $gen->writeBool('includePreparationMethodGroupSyncMarker', $this->includePreparationMethodGroupSyncMarker);
		if ($this->includeArticleAlterationsGroupsSyncMarker !== null) $gen->writeBool('includeArticleAlterationsGroupsSyncMarker', $this->includeArticleAlterationsGroupsSyncMarker);
		if ($this->includeArticleNutritionalCharacteristicsSyncMarker !== null) $gen->writeBool('includeArticleNutritionalCharacteristicsSyncMarker', $this->includeArticleNutritionalCharacteristicsSyncMarker);
		if ($this->includeRelationNutritionalCharacteristicsSyncMarker !== null) $gen->writeBool('includeRelationNutritionalCharacteristicsSyncMarker', $this->includeRelationNutritionalCharacteristicsSyncMarker);
		if ($this->includeBranchGroupSyncMarker !== null) $gen->writeBool('includeBranchGroupSyncMarker', $this->includeBranchGroupSyncMarker);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ns_NutrientType extends SoapObject {
	public int $id;
	public int $parentId;
	public int $orderNumber;
	public string $description;
	public string $unit;
	public bool $required;
	/** @var ns_NutrientType[] */
	public $subNutrientTypes = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
		$gen->writeInt('parentId', $this->parentId);
		$gen->writeInt('orderNumber', $this->orderNumber);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		$gen->out->writeElementNs(self::TNS, 'unit', null, $this->unit);
		$gen->writeBool('required', $this->required);
		foreach ($this->subNutrientTypes as $elem) $elem->write($gen, 'subNutrientTypes');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetNutrientTypesRequest extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VerifyCredentialsRequest extends SoapObject {
	public string $username;
	public string $password;
	public ?string $cardType = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'username', null, $this->username);
		$gen->out->writeElementNs(self::TNS, 'password', null, $this->password);
		if ($this->cardType !== null) $gen->out->writeElementNs(self::TNS, 'cardType', null, $this->cardType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveCredentialsRequest extends SoapObject {
	public string $cardType;
	public ?int $cardNumber = null;
	public string $newPassword;
	public ?string $oldPassword = null;
	public ?int $employeeNumber = null;
	public ?string $employeePassword = null;
	public ?string $passwordResetKey = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardType', null, $this->cardType);
		if ($this->cardNumber !== null) $gen->writeInt('cardNumber', $this->cardNumber);
		$gen->out->writeElementNs(self::TNS, 'newPassword', null, $this->newPassword);
		if ($this->oldPassword !== null) $gen->out->writeElementNs(self::TNS, 'oldPassword', null, $this->oldPassword);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->employeePassword !== null) $gen->out->writeElementNs(self::TNS, 'employeePassword', null, $this->employeePassword);
		if ($this->passwordResetKey !== null) $gen->out->writeElementNs(self::TNS, 'passwordResetKey', null, $this->passwordResetKey);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PasswordRequirementsRequest extends SoapObject {
	public string $cardType;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardType', null, $this->cardType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PasswordResetRequest extends SoapObject {
	public string $cardType;
	public int $cardNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardType', null, $this->cardType);
		$gen->writeInt('cardNumber', $this->cardNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class FloorplanNeighbourhood extends SoapObject {
	public int $branchNumber;
	public int $floorplanNumber;
	public string $name;
	public string $tableNumbersRange;
	public Colour $colour;
	public function __construct() {
		$this->colour = new Colour();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('floorplanNumber', $this->floorplanNumber);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->out->writeElementNs(self::TNS, 'tableNumbersRange', null, $this->tableNumbersRange);
		$this->colour->write($gen, 'colour');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class FloorplanNeighbourhoodList extends SoapObject {
	/** @var FloorplanNeighbourhood[] */
	public $neighbourhood = array();
	public function __construct($list = array()) { $this->neighbourhood = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->neighbourhood as $elem) $elem->write($gen, 'neighbourhood');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Floorplan extends SoapObject {
	public int $branchNumber;
	public int $number;
	public string $name;
	public string $definition;
	public \DateTime $updatedTs;
	public bool $isActive;
	/** @var FloorplanNeighbourhood[] */
	public $neighbourhoods = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('number', $this->number);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->out->writeElementNs(self::TNS, 'definition', null, $this->definition);
		$gen->writeDateTime('updatedTs', $this->updatedTs);
		$gen->writeBool('isActive', $this->isActive);
		$tmp_neighbourhoods = new FloorplanNeighbourhoodList($this->neighbourhoods);
$tmp_neighbourhoods->write($gen, 'neighbourhoods');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class FloorplanList extends SoapObject {
	/** @var Floorplan[] */
	public $floorplan = array();
	public function __construct($list = array()) { $this->floorplan = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->floorplan as $elem) $elem->write($gen, 'floorplan');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetFloorplansRequest extends SoapObject {
	public int $branchNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TableProperties extends SoapObject {
	public ?bool $isVip = null;
	public ?int $subTableCount = null;
	public ?bool $updateLastTableActionTime = null;
	public ?int $snoozeKitchenTicketSeconds = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->isVip !== null) $gen->writeBool('isVip', $this->isVip);
		if ($this->subTableCount !== null) $gen->writeInt('subTableCount', $this->subTableCount);
		if ($this->updateLastTableActionTime !== null) $gen->writeBool('updateLastTableActionTime', $this->updateLastTableActionTime);
		if ($this->snoozeKitchenTicketSeconds !== null) $gen->writeInt('snoozeKitchenTicketSeconds', $this->snoozeKitchenTicketSeconds);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ChangeTablePropertyReq extends IdempotentReq {
	public WorkplaceIdentifier $workplaceIdentifier;
	public EmployeeIdentifier $employeeIdentifier;
	public TableIdentifier $tableIdentifier;
	public TableProperties $tableProperties;
	public function __construct() {
		$this->workplaceIdentifier = new WorkplaceIdentifier();
		$this->employeeIdentifier = new EmployeeIdentifier();
		$this->tableIdentifier = new TableIdentifier();
		$this->tableProperties = new TableProperties();
	}
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$this->workplaceIdentifier->write($gen, 'workplaceIdentifier');
		$this->employeeIdentifier->write($gen, 'employeeIdentifier');
		$this->tableIdentifier->write($gen, 'tableIdentifier');
		$this->tableProperties->write($gen, 'tableProperties');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class AuthorizationGroup extends SoapObject {
	public int $number;
	public string $name;
	public ?int $filterProfileId = null;
	public ?int $rankOrder = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('number', $this->number);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		if ($this->filterProfileId !== null) $gen->writeInt('filterProfileId', $this->filterProfileId);
		if ($this->rankOrder !== null) $gen->writeInt('rankOrder', $this->rankOrder);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GroupAuthorization extends SoapObject {
	public string $id;
	public bool $value;
	public string $level;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->writeBool('value', $this->value);
		$gen->out->writeElementNs(self::TNS, 'level', null, $this->level);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GroupAuthorizationsList extends SoapObject {
	/** @var GroupAuthorization[] */
	public $authorizations = array();
	public function __construct($list = array()) { $this->authorizations = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->authorizations as $elem) $elem->write($gen, 'authorizations');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetEmployeeAuthorizationsRequest extends SoapObject {
	public int $employeeNumber;
	public int $branchNumber;
	public ?bool $loadOnlyEmployeeSpecificAuthorizations = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->loadOnlyEmployeeSpecificAuthorizations !== null) $gen->writeBool('loadOnlyEmployeeSpecificAuthorizations', $this->loadOnlyEmployeeSpecificAuthorizations);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class EmployeeAuthorization extends SoapObject {
	public string $id;
	public bool $value;
	public string $level;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->writeBool('value', $this->value);
		$gen->out->writeElementNs(self::TNS, 'level', null, $this->level);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class EmployeeAuthorizationsList extends SoapObject {
	/** @var EmployeeAuthorization[] */
	public $authorizations = array();
	public function __construct($list = array()) { $this->authorizations = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->authorizations as $elem) $elem->write($gen, 'authorizations');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetGroupAuthorizationsRequest extends SoapObject {
	public int $groupNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('groupNumber', $this->groupNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GroupAuthorizationV2 extends SoapObject {
	public string $id;
	public string $level;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'level', null, $this->level);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GroupAuthorizationsV2List extends SoapObject {
	/** @var GroupAuthorizationV2[] */
	public $authorizations = array();
	public function __construct($list = array()) { $this->authorizations = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->authorizations as $elem) $elem->write($gen, 'authorizations');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateGroupAuthorizationsRequest extends SoapObject {
	public int $groupNumber;
	/** @var GroupAuthorizationV2[] */
	public $authorizationsList = array();
	public ?string $updateBehavior = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('groupNumber', $this->groupNumber);
		$tmp_authorizationsList = new GroupAuthorizationsV2List($this->authorizationsList);
$tmp_authorizationsList->write($gen, 'authorizationsList');

		if ($this->updateBehavior !== null) $gen->out->writeElementNs(self::TNS, 'updateBehavior', null, $this->updateBehavior);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetAuthorizationGroupsRequest extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class AuthorizationGroupList extends SoapObject {
	/** @var AuthorizationGroup[] */
	public $groups = array();
	public function __construct($list = array()) { $this->groups = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->groups as $elem) $elem->write($gen, 'groups');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetAuthorizationTreeRequest extends SoapObject {
	public ?int $branchNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetEmployeeBranchAuthorizationsRequest extends SoapObject {
	public int $employeeNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('employeeNumber', $this->employeeNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class EmployeeBranchAuthorization extends SoapObject {
	public int $branchNumber;
	/** @var EmployeeAuthorization[] */
	public $authorizationList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$tmp_authorizationList = new EmployeeAuthorizationsList($this->authorizationList);
$tmp_authorizationList->write($gen, 'authorizationList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class EmployeeBranchAuthorizationsList extends SoapObject {
	/** @var EmployeeBranchAuthorization[] */
	public $branchAuthorizations = array();
	public function __construct($list = array()) { $this->branchAuthorizations = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->branchAuthorizations as $elem) $elem->write($gen, 'branchAuthorizations');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveAuthorizationGroupRequest extends SoapObject {
	public ?int $groupNumber = null;
	public string $name;
	public ?int $filterProfileId = null;
	public ?int $rankOrder = null;
	public ?int $PreferredSupplier = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->groupNumber !== null) $gen->writeInt('groupNumber', $this->groupNumber);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		if ($this->filterProfileId !== null) $gen->writeInt('filterProfileId', $this->filterProfileId);
		if ($this->rankOrder !== null) $gen->writeInt('rankOrder', $this->rankOrder);
		if ($this->PreferredSupplier !== null) $gen->writeInt('PreferredSupplier', $this->PreferredSupplier);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeleteAuthorizationGroupRequest extends SoapObject {
	public int $groupNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('groupNumber', $this->groupNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetEmployeeAuthorizationGroupsRequest extends SoapObject {
	public int $employeeNumber;
	public ?bool $separateBranchesAndBranchGroups = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->separateBranchesAndBranchGroups !== null) $gen->writeBool('separateBranchesAndBranchGroups', $this->separateBranchesAndBranchGroups);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BranchAuthorizationGroup extends SoapObject {
	public int $branchNumber;
	public AuthorizationGroup $authorizationGroup;
	public function __construct() {
		$this->authorizationGroup = new AuthorizationGroup();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$this->authorizationGroup->write($gen, 'authorizationGroup');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BranchGroupAuthorizationGroup extends SoapObject {
	public int $branchGroupNumber;
	public AuthorizationGroup $authorizationGroup;
	public function __construct() {
		$this->authorizationGroup = new AuthorizationGroup();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchGroupNumber', $this->branchGroupNumber);
		$this->authorizationGroup->write($gen, 'authorizationGroup');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BranchAuthorizationGroupNumber extends SoapObject {
	public int $branchNumber;
	public int $groupNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('groupNumber', $this->groupNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BranchGroupAuthorizationGroupNumber extends SoapObject {
	public int $branchGroupNumber;
	public int $groupNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchGroupNumber', $this->branchGroupNumber);
		$gen->writeInt('groupNumber', $this->groupNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateEmployeeAuthorizationGroupsRequest extends SoapObject {
	public int $employeeNumber;
	/** @var BranchAuthorizationGroupNumber[] */
	public $branchAuthorizationGroupNumbers = array();
	/** @var BranchGroupAuthorizationGroupNumber[] */
	public $branchGroupAuthorizationGroupNumbers = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		foreach ($this->branchAuthorizationGroupNumbers as $elem) $elem->write($gen, 'branchAuthorizationGroupNumbers');
		foreach ($this->branchGroupAuthorizationGroupNumbers as $elem) $elem->write($gen, 'branchGroupAuthorizationGroupNumbers');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetEmployeeAuthorizationSyncMarkersRequest extends SoapObject {
	public int $employeeNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('employeeNumber', $this->employeeNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetSpecialBarcodePatternsRequest extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BarcodePattern extends SoapObject {
	public string $regex;
	public string $kind;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'regex', null, $this->regex);
		$gen->out->writeElementNs(self::TNS, 'kind', null, $this->kind);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ParseSpecialBarcodeRequest extends SoapObject {
	public string $barcode;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'barcode', null, $this->barcode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SpecialBarcodeArticleResult extends SoapObject {
	public int $articleNumber;
	public ?BigDecimal $price = null;
	public ?int $weight = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->price !== null) $gen->writeBigDecimal('price', $this->price);
		if ($this->weight !== null) $gen->writeInt('weight', $this->weight);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetConfigurationResponse extends SoapObject {
	/** @var Configuration[] */
	public $configurationList = array();
	public function __construct($list = array()) { $this->configurationList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_configurationList = new ConfigurationList($this->configurationList);
$tmp_configurationList->write($gen, 'configurationList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateConfigurationResponse extends SoapObject {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetConfigurationTreeResponse extends SoapObject {
	/** @var ConfigurationGroup[] */
	public $configurations = array();
	public function __construct($list = array()) { $this->configurations = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->configurations as $elem) $elem->write($gen, 'configurations');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetConfigurationValuesResponse extends SoapObject {
	/** @var ConfigurationKeyValues[] */
	public $configurationKeyValues = array();
	public function __construct($list = array()) { $this->configurationKeyValues = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->configurationKeyValues as $elem) $elem->write($gen, 'configurationKeyValues');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateConfigurationValuesResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getButtonLayoutResponse extends SoapObject {
	public ButtonLayout $return;
	public function __construct() {
		$this->return = new ButtonLayout();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->return->write($gen, 'return');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ButtonLayoutGroupForBranchResponse extends SoapObject {
	public ?ButtonLayoutGroup $buttonLayoutGroup = null;
	/** @var ArticleSimple[] */
	public $articlesInLayouts = array();
	public function writeProps(SoapGenerator $gen): void {
		if ($this->buttonLayoutGroup !== null) $this->buttonLayoutGroup->write($gen, 'buttonLayoutGroup');
		foreach ($this->articlesInLayouts as $elem) $elem->write($gen, 'articlesInLayouts');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetButtonLayoutGroupsWithAssignedWorkplacesResponse extends SoapObject {
	/** @var ButtonLayoutGroupsWithAssignedWorkplaces[] */
	public $buttonLayoutGroups = array();
	public function __construct($list = array()) { $this->buttonLayoutGroups = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->buttonLayoutGroups as $elem) $elem->write($gen, 'buttonLayoutGroups');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetButtonLayoutGroupDetailsResponse extends SoapObject {
	public string $result;
	public ?ButtonLayoutGroup $buttonLayoutGroup = null;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->buttonLayoutGroup !== null) $this->buttonLayoutGroup->write($gen, 'buttonLayoutGroup');
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveButtonLayoutGroupDetailsResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public int $buttonLayoutGroupId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		$gen->writeInt('buttonLayoutGroupId', $this->buttonLayoutGroupId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeleteButtonLayoutGroupResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class AssignButtonLayoutGroupToWorkplacesResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getArticlesInLayoutResponse extends SoapObject {
	/** @var ArticleSimple[] */
	public $return = array();
	public function __construct($list = array()) { $this->return = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->return as $elem) $elem->write($gen, 'return');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetDayStockConfigurationResponse extends SoapObject {
	/** @var DayStockConfiguration[] */
	public $dayStockConfigurationList = null;
	public function __construct($list = array()) { $this->dayStockConfigurationList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		if ($this->dayStockConfigurationList !== null) {
$tmp_dayStockConfigurationList = new DayStockConfigurationList($this->dayStockConfigurationList);
$tmp_dayStockConfigurationList->write($gen, 'dayStockConfigurationList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveDayStockConfigurationResponse extends SoapObject {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetActivitiesResponse extends SoapObject {
	/** @var Activity[] */
	public $activityList = array();
	public function __construct($list = array()) { $this->activityList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_activityList = new ActivityList($this->activityList);
$tmp_activityList->write($gen, 'activityList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetActivityTypesResponse extends SoapObject {
	/** @var ActivityType[] */
	public $activityTypeList = array();
	public function __construct($list = array()) { $this->activityTypeList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_activityTypeList = new ActivityTypeList($this->activityTypeList);
$tmp_activityTypeList->write($gen, 'activityTypeList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveActivityTypesResponse extends SoapObject {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateActivityResponse extends SoapObject {
	public string $result;
	public ?Activity $activity = null;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->activity !== null) $this->activity->write($gen, 'activity');
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateActivityResponse extends SoapObject {
	public string $result;
	public ?Activity $activity = null;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->activity !== null) $this->activity->write($gen, 'activity');
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveActivityResponse extends SoapObject {
	public string $result;
	public ?Activity $activity = null;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->activity !== null) $this->activity->write($gen, 'activity');
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeleteActivityResponse extends SoapObject {
	public string $result;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetGksInformationResponse extends SoapObject {
	public string $gksProductionNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'gksProductionNumber', null, $this->gksProductionNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetMealplanMomentsConfigurationResponse extends SoapObject {
	/** @var MealmomentConfiguration[] */
	public $mealMomentConfigurationList = array();
	public function __construct($list = array()) { $this->mealMomentConfigurationList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->mealMomentConfigurationList as $elem) $elem->write($gen, 'mealMomentConfigurationList');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetScheduledMealPlansResponse extends SoapObject {
	public string $result;
	/** @var ScheduledMealPlan[] */
	public $scheduledMealPlans = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		foreach ($this->scheduledMealPlans as $elem) $elem->write($gen, 'scheduledMealPlans');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetArticleAlterationsGroupsResponse extends SoapObject {
	/** @var ArticleAlterationsGroup[] */
	public $articleAlterationsGroupList = array();
	public function __construct($list = array()) { $this->articleAlterationsGroupList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_articleAlterationsGroupList = new ArticleAlterationsGroupList($this->articleAlterationsGroupList);
$tmp_articleAlterationsGroupList->write($gen, 'articleAlterationsGroupList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveArticleAlterationsGroupResponse extends SoapObject {
	public string $result;
	public ?int $groupNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->groupNumber !== null) $gen->writeInt('groupNumber', $this->groupNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeleteArticleAlterationsGroupResponse extends SoapObject {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateAttachedArticleAlterationsGroupsResponse extends SoapObject {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateArticleMenuResponse extends SoapObject {
	public string $result;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateOnlineAuthorizationTreeResponse extends SoapObject {
	public string $result;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOwnerLabelsResponse extends SoapObject {
	/** @var OwnerLabel[] */
	public $ownerLabels = array();
	public function __construct($list = array()) { $this->ownerLabels = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->ownerLabels as $elem) $elem->write($gen, 'ownerLabels');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetWordAliasesResponse extends SoapObject {
	/** @var WordAlias[] */
	public $wordAliasList = array();
	public function __construct($list = array()) { $this->wordAliasList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_wordAliasList = new WordAliasList($this->wordAliasList);
$tmp_wordAliasList->write($gen, 'wordAliasList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getApiVersionResponse extends SoapObject {
	public int $majorNumber;
	public int $minorNumber;
	public int $revisionNumber;
	public ?int $databaseMajorNumber = null;
	public ?int $databaseMinorNumber = null;
	public ?int $databaseRevisionNumber = null;
	public ?int $serviceMajorNumber = null;
	public ?int $serviceMinorNumber = null;
	public ?int $serviceRevisionNumber = null;
	public ?int $serviceBuildNumber = null;
	public ?\DateTime $serviceDate = null;
	public ?\DateTime $serviceDateTime = null;
	public ?int $serviceProcessId = null;
	public ?string $serviceHostname = null;
	/** @var string[] */
	public $serviceIpAddresses = array();
	public ?int $serviceMinWorkerThreads = null;
	public ?int $serviceMaxWorkerThreads = null;
	public ?int $serverMajorNumber = null;
	public ?int $serverMinorNumber = null;
	public ?int $serverRevisionNumber = null;
	public ?\DateTime $serverDate = null;
	public ?\DateTime $serverDateTime = null;
	public bool $inDebugMode;
	public ?bool $isSlaveApi = null;
	public ?string $slaveApiType = null;
	public ?int $slaveBranchNumber = null;
	public ?int $slaveWorkplaceNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('majorNumber', $this->majorNumber);
		$gen->writeInt('minorNumber', $this->minorNumber);
		$gen->writeInt('revisionNumber', $this->revisionNumber);
		if ($this->databaseMajorNumber !== null) $gen->writeInt('databaseMajorNumber', $this->databaseMajorNumber);
		if ($this->databaseMinorNumber !== null) $gen->writeInt('databaseMinorNumber', $this->databaseMinorNumber);
		if ($this->databaseRevisionNumber !== null) $gen->writeInt('databaseRevisionNumber', $this->databaseRevisionNumber);
		if ($this->serviceMajorNumber !== null) $gen->writeInt('serviceMajorNumber', $this->serviceMajorNumber);
		if ($this->serviceMinorNumber !== null) $gen->writeInt('serviceMinorNumber', $this->serviceMinorNumber);
		if ($this->serviceRevisionNumber !== null) $gen->writeInt('serviceRevisionNumber', $this->serviceRevisionNumber);
		if ($this->serviceBuildNumber !== null) $gen->writeInt('serviceBuildNumber', $this->serviceBuildNumber);
		if ($this->serviceDate !== null) (SoapMplusDate::fromDateTime($this->serviceDate))->write($gen, 'serviceDate');
		if ($this->serviceDateTime !== null) (SoapMplusDateTime::fromDateTime($this->serviceDateTime))->write($gen, 'serviceDateTime');
		if ($this->serviceProcessId !== null) $gen->writeInt('serviceProcessId', $this->serviceProcessId);
		if ($this->serviceHostname !== null) $gen->out->writeElementNs(self::TNS, 'serviceHostname', null, $this->serviceHostname);
		foreach ($this->serviceIpAddresses as $elem) $gen->out->writeElementNs(self::TNS, 'serviceIpAddresses', null, $elem);
		if ($this->serviceMinWorkerThreads !== null) $gen->writeInt('serviceMinWorkerThreads', $this->serviceMinWorkerThreads);
		if ($this->serviceMaxWorkerThreads !== null) $gen->writeInt('serviceMaxWorkerThreads', $this->serviceMaxWorkerThreads);
		if ($this->serverMajorNumber !== null) $gen->writeInt('serverMajorNumber', $this->serverMajorNumber);
		if ($this->serverMinorNumber !== null) $gen->writeInt('serverMinorNumber', $this->serverMinorNumber);
		if ($this->serverRevisionNumber !== null) $gen->writeInt('serverRevisionNumber', $this->serverRevisionNumber);
		if ($this->serverDate !== null) (SoapMplusDate::fromDateTime($this->serverDate))->write($gen, 'serverDate');
		if ($this->serverDateTime !== null) (SoapMplusDateTime::fromDateTime($this->serverDateTime))->write($gen, 'serverDateTime');
		$gen->writeBool('inDebugMode', $this->inDebugMode);
		if ($this->isSlaveApi !== null) $gen->writeBool('isSlaveApi', $this->isSlaveApi);
		if ($this->slaveApiType !== null) $gen->out->writeElementNs(self::TNS, 'slaveApiType', null, $this->slaveApiType);
		if ($this->slaveBranchNumber !== null) $gen->writeInt('slaveBranchNumber', $this->slaveBranchNumber);
		if ($this->slaveWorkplaceNumber !== null) $gen->writeInt('slaveWorkplaceNumber', $this->slaveWorkplaceNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getDatabaseVersionResponse extends SoapObject {
	public int $majorNumber;
	public int $minorNumber;
	public int $revisionNumber;
	public ?int $serverMajorNumber = null;
	public ?int $serverMinorNumber = null;
	public ?int $serverRevisionNumber = null;
	public ?\DateTime $serverDate = null;
	public ?\DateTime $serverDateTime = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('majorNumber', $this->majorNumber);
		$gen->writeInt('minorNumber', $this->minorNumber);
		$gen->writeInt('revisionNumber', $this->revisionNumber);
		if ($this->serverMajorNumber !== null) $gen->writeInt('serverMajorNumber', $this->serverMajorNumber);
		if ($this->serverMinorNumber !== null) $gen->writeInt('serverMinorNumber', $this->serverMinorNumber);
		if ($this->serverRevisionNumber !== null) $gen->writeInt('serverRevisionNumber', $this->serverRevisionNumber);
		if ($this->serverDate !== null) (SoapMplusDate::fromDateTime($this->serverDate))->write($gen, 'serverDate');
		if ($this->serverDateTime !== null) (SoapMplusDateTime::fromDateTime($this->serverDateTime))->write($gen, 'serverDateTime');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetLicenseInformationResponse extends SoapObject {
	public ?string $obscuredLicenseKey = null;
	public ?string $companyName = null;
	public ?string $city = null;
	/** @var LicensedBranch[] */
	public $licensedBranches = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->obscuredLicenseKey !== null) $gen->out->writeElementNs(self::TNS, 'obscuredLicenseKey', null, $this->obscuredLicenseKey);
		if ($this->companyName !== null) $gen->out->writeElementNs(self::TNS, 'companyName', null, $this->companyName);
		if ($this->city !== null) $gen->out->writeElementNs(self::TNS, 'city', null, $this->city);
		if ($this->licensedBranches !== null) {
$tmp_licensedBranches = new LicensedBranchList($this->licensedBranches);
$tmp_licensedBranches->write($gen, 'licensedBranches');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getAvailableTerminalListResponse extends SoapObject {
	/** @var Terminal[] */
	public $return = array();
	public function __construct($list = array()) { $this->return = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->return as $elem) $elem->write($gen, 'return');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RegisterTerminalResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetTerminalSettingsResponse extends SoapObject {
	public ?string $condenseLines = null;
	public ?bool $alwaysCreateCounterLine = null;
	public ?bool $addSubarticlePricesToCombinedArticles = null;
	public ?bool $allowPrepay = null;
	public ?bool $askForNumberOfGuests = null;
	public ?bool $requireNumberOfGuests = null;
	public ?string $unknownTableAction = null;
	public ?bool $askToKeepTableName = null;
	public ?bool $showTotalAmountOnTable = null;
	public ?bool $showPrepaidAmountOnTable = null;
	public bool $splitLineOnAddPreparationMethod;
	public bool $directPaymentMode;
	public int $directPaymentModeTableNumber;
	public bool $branchHasKitchenScreen;
	public bool $directPaymentModeAllowTableSelection;
	public bool $onlyQuantityButtons;
	public ?string $dayStockBehaviour = null;
	public ?bool $dayStockShowAvailableStock = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->condenseLines !== null) $gen->out->writeElementNs(self::TNS, 'condenseLines', null, $this->condenseLines);
		if ($this->alwaysCreateCounterLine !== null) $gen->writeBool('alwaysCreateCounterLine', $this->alwaysCreateCounterLine);
		if ($this->addSubarticlePricesToCombinedArticles !== null) $gen->writeBool('addSubarticlePricesToCombinedArticles', $this->addSubarticlePricesToCombinedArticles);
		if ($this->allowPrepay !== null) $gen->writeBool('allowPrepay', $this->allowPrepay);
		if ($this->askForNumberOfGuests !== null) $gen->writeBool('askForNumberOfGuests', $this->askForNumberOfGuests);
		if ($this->requireNumberOfGuests !== null) $gen->writeBool('requireNumberOfGuests', $this->requireNumberOfGuests);
		if ($this->unknownTableAction !== null) $gen->out->writeElementNs(self::TNS, 'unknownTableAction', null, $this->unknownTableAction);
		if ($this->askToKeepTableName !== null) $gen->writeBool('askToKeepTableName', $this->askToKeepTableName);
		if ($this->showTotalAmountOnTable !== null) $gen->writeBool('showTotalAmountOnTable', $this->showTotalAmountOnTable);
		if ($this->showPrepaidAmountOnTable !== null) $gen->writeBool('showPrepaidAmountOnTable', $this->showPrepaidAmountOnTable);
		$gen->writeBool('splitLineOnAddPreparationMethod', $this->splitLineOnAddPreparationMethod);
		$gen->writeBool('directPaymentMode', $this->directPaymentMode);
		$gen->writeInt('directPaymentModeTableNumber', $this->directPaymentModeTableNumber);
		$gen->writeBool('branchHasKitchenScreen', $this->branchHasKitchenScreen);
		$gen->writeBool('directPaymentModeAllowTableSelection', $this->directPaymentModeAllowTableSelection);
		$gen->writeBool('onlyQuantityButtons', $this->onlyQuantityButtons);
		if ($this->dayStockBehaviour !== null) $gen->out->writeElementNs(self::TNS, 'dayStockBehaviour', null, $this->dayStockBehaviour);
		if ($this->dayStockShowAvailableStock !== null) $gen->writeBool('dayStockShowAvailableStock', $this->dayStockShowAvailableStock);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetBranchInformationResponse extends SoapObject {
	public string $result;
	public ?BranchInformation $branchInformation = null;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->branchInformation !== null) $this->branchInformation->write($gen, 'branchInformation');
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetBranchGroupsResponse extends SoapObject {
	/** @var BranchGroups[] */
	public $branchGroupsList = array();
	public function __construct($list = array()) { $this->branchGroupsList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_branchGroupsList = new BranchGroupsList($this->branchGroupsList);
$tmp_branchGroupsList->write($gen, 'branchGroupsList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetDeliveryMethodsResponse extends SoapObject {
	/** @var DeliveryMethod[] */
	public $deliveryMethodList = array();
	public function __construct($list = array()) { $this->deliveryMethodList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_deliveryMethodList = new DeliveryMethodList($this->deliveryMethodList);
$tmp_deliveryMethodList->write($gen, 'deliveryMethodList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetDeliveryMethodsV2Response extends SoapObject {
	/** @var DeliveryMethod[] */
	public $deliveryMethodList = array();
	public function __construct($list = array()) { $this->deliveryMethodList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_deliveryMethodList = new DeliveryMethodList($this->deliveryMethodList);
$tmp_deliveryMethodList->write($gen, 'deliveryMethodList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateDeliveryMethodResponse extends SoapObject {
	public string $result;
	public ?DeliveryMethod $deliveryMethod = null;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->deliveryMethod !== null) $this->deliveryMethod->write($gen, 'deliveryMethod');
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateDeliveryMethodResponse extends SoapObject {
	public string $result;
	public ?DeliveryMethod $deliveryMethod = null;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->deliveryMethod !== null) $this->deliveryMethod->write($gen, 'deliveryMethod');
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getBranchesResponse extends SoapObject {
	/** @var Branch[] */
	public $branches = array();
	public function __construct($list = array()) { $this->branches = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_branches = new BranchList($this->branches);
$tmp_branches->write($gen, 'branches');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getCurrentSyncMarkersResponse extends SoapObject {
	public int $articleSyncMarker;
	public ?int $articleGroupSyncMarker = null;
	public int $relationSyncMarker;
	public int $employeeSyncMarker;
	public int $invoiceSyncMarker;
	public int $receiptSyncMarker;
	public int $orderSyncMarker;
	public ?int $proposalSyncMarker = null;
	public ?int $stockId = null;
	public ?int $ticketCounterSaleSyncMarker = null;
	public ?int $purchaseOrderSyncMarker = null;
	public ?int $purchaseDeliverySyncMarker = null;
	public ?int $relationPointsSyncMarker = null;
	public ?int $cashDrawerBalancingSyncMarker = null;
	public ?int $activitySyncMarker = null;
	public ?int $packingSlipSyncMarker = null;
	public ?int $dayStockConfigurationSyncMarker = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleSyncMarker', $this->articleSyncMarker);
		if ($this->articleGroupSyncMarker !== null) $gen->writeInt('articleGroupSyncMarker', $this->articleGroupSyncMarker);
		$gen->writeInt('relationSyncMarker', $this->relationSyncMarker);
		$gen->writeInt('employeeSyncMarker', $this->employeeSyncMarker);
		$gen->writeInt('invoiceSyncMarker', $this->invoiceSyncMarker);
		$gen->writeInt('receiptSyncMarker', $this->receiptSyncMarker);
		$gen->writeInt('orderSyncMarker', $this->orderSyncMarker);
		if ($this->proposalSyncMarker !== null) $gen->writeInt('proposalSyncMarker', $this->proposalSyncMarker);
		if ($this->stockId !== null) $gen->writeInt('stockId', $this->stockId);
		if ($this->ticketCounterSaleSyncMarker !== null) $gen->writeInt('ticketCounterSaleSyncMarker', $this->ticketCounterSaleSyncMarker);
		if ($this->purchaseOrderSyncMarker !== null) $gen->writeInt('purchaseOrderSyncMarker', $this->purchaseOrderSyncMarker);
		if ($this->purchaseDeliverySyncMarker !== null) $gen->writeInt('purchaseDeliverySyncMarker', $this->purchaseDeliverySyncMarker);
		if ($this->relationPointsSyncMarker !== null) $gen->writeInt('relationPointsSyncMarker', $this->relationPointsSyncMarker);
		if ($this->cashDrawerBalancingSyncMarker !== null) $gen->writeInt('cashDrawerBalancingSyncMarker', $this->cashDrawerBalancingSyncMarker);
		if ($this->activitySyncMarker !== null) $gen->writeInt('activitySyncMarker', $this->activitySyncMarker);
		if ($this->packingSlipSyncMarker !== null) $gen->writeInt('packingSlipSyncMarker', $this->packingSlipSyncMarker);
		if ($this->dayStockConfigurationSyncMarker !== null) $gen->writeInt('dayStockConfigurationSyncMarker', $this->dayStockConfigurationSyncMarker);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCurrentSyncMarkersV2Response extends SoapObject {
	public ?int $articleSyncMarker = null;
	public ?int $articleGroupSyncMarker = null;
	public ?int $relationSyncMarker = null;
	public ?int $employeeSyncMarker = null;
	public ?int $invoiceSyncMarker = null;
	public ?int $receiptSyncMarker = null;
	public ?int $orderSyncMarker = null;
	public ?int $proposalSyncMarker = null;
	public ?int $stockId = null;
	public ?int $ticketCounterSaleSyncMarker = null;
	public ?int $purchaseOrderSyncMarker = null;
	public ?int $purchaseDeliverySyncMarker = null;
	public ?int $relationPointsSyncMarker = null;
	public ?int $cashDrawerBalancingSyncMarker = null;
	public ?int $activitySyncMarker = null;
	public ?int $packingSlipSyncMarker = null;
	public ?int $dayStockConfigurationSyncMarker = null;
	public ?int $preparationMethodGroupSyncMarker = null;
	public ?int $articleAlterationsGroupsSyncMarker = null;
	public ?int $articleNutritionalCharacteristicsSyncMarker = null;
	public ?int $relationNutritionalCharacteristicsSyncMarker = null;
	public ?int $branchGroupSyncMarker = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->articleSyncMarker !== null) $gen->writeInt('articleSyncMarker', $this->articleSyncMarker);
		if ($this->articleGroupSyncMarker !== null) $gen->writeInt('articleGroupSyncMarker', $this->articleGroupSyncMarker);
		if ($this->relationSyncMarker !== null) $gen->writeInt('relationSyncMarker', $this->relationSyncMarker);
		if ($this->employeeSyncMarker !== null) $gen->writeInt('employeeSyncMarker', $this->employeeSyncMarker);
		if ($this->invoiceSyncMarker !== null) $gen->writeInt('invoiceSyncMarker', $this->invoiceSyncMarker);
		if ($this->receiptSyncMarker !== null) $gen->writeInt('receiptSyncMarker', $this->receiptSyncMarker);
		if ($this->orderSyncMarker !== null) $gen->writeInt('orderSyncMarker', $this->orderSyncMarker);
		if ($this->proposalSyncMarker !== null) $gen->writeInt('proposalSyncMarker', $this->proposalSyncMarker);
		if ($this->stockId !== null) $gen->writeInt('stockId', $this->stockId);
		if ($this->ticketCounterSaleSyncMarker !== null) $gen->writeInt('ticketCounterSaleSyncMarker', $this->ticketCounterSaleSyncMarker);
		if ($this->purchaseOrderSyncMarker !== null) $gen->writeInt('purchaseOrderSyncMarker', $this->purchaseOrderSyncMarker);
		if ($this->purchaseDeliverySyncMarker !== null) $gen->writeInt('purchaseDeliverySyncMarker', $this->purchaseDeliverySyncMarker);
		if ($this->relationPointsSyncMarker !== null) $gen->writeInt('relationPointsSyncMarker', $this->relationPointsSyncMarker);
		if ($this->cashDrawerBalancingSyncMarker !== null) $gen->writeInt('cashDrawerBalancingSyncMarker', $this->cashDrawerBalancingSyncMarker);
		if ($this->activitySyncMarker !== null) $gen->writeInt('activitySyncMarker', $this->activitySyncMarker);
		if ($this->packingSlipSyncMarker !== null) $gen->writeInt('packingSlipSyncMarker', $this->packingSlipSyncMarker);
		if ($this->dayStockConfigurationSyncMarker !== null) $gen->writeInt('dayStockConfigurationSyncMarker', $this->dayStockConfigurationSyncMarker);
		if ($this->preparationMethodGroupSyncMarker !== null) $gen->writeInt('preparationMethodGroupSyncMarker', $this->preparationMethodGroupSyncMarker);
		if ($this->articleAlterationsGroupsSyncMarker !== null) $gen->writeInt('articleAlterationsGroupsSyncMarker', $this->articleAlterationsGroupsSyncMarker);
		if ($this->articleNutritionalCharacteristicsSyncMarker !== null) $gen->writeInt('articleNutritionalCharacteristicsSyncMarker', $this->articleNutritionalCharacteristicsSyncMarker);
		if ($this->relationNutritionalCharacteristicsSyncMarker !== null) $gen->writeInt('relationNutritionalCharacteristicsSyncMarker', $this->relationNutritionalCharacteristicsSyncMarker);
		if ($this->branchGroupSyncMarker !== null) $gen->writeInt('branchGroupSyncMarker', $this->branchGroupSyncMarker);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetNutrientTypesResponse extends SoapObject {
	/** @var ns_NutrientType[] */
	public $nutrientTypes = array();
	public function __construct($list = array()) { $this->nutrientTypes = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->nutrientTypes as $elem) $elem->write($gen, 'nutrientTypes');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VerifyCredentialsResponse extends SoapObject {
	public bool $verified;
	public ?Employee $employee = null;
	public ?Relation $relation = null;
	public string $result;
	public ?\DateTime $expiresOn = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeBool('verified', $this->verified);
		if ($this->employee !== null) $this->employee->write($gen, 'employee');
		if ($this->relation !== null) $this->relation->write($gen, 'relation');
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->expiresOn !== null) $gen->writeDate('expiresOn', $this->expiresOn);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveCredentialsResponse extends SoapObject {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PasswordRequirementsResponse extends SoapObject {
	public int $minPasswordLength;
	public int $minNumberLowerCase;
	public int $minNumberUpperCase;
	public int $minNumberDigits;
	public int $minNumberSpecial;
	public int $reuseDetection;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('minPasswordLength', $this->minPasswordLength);
		$gen->writeInt('minNumberLowerCase', $this->minNumberLowerCase);
		$gen->writeInt('minNumberUpperCase', $this->minNumberUpperCase);
		$gen->writeInt('minNumberDigits', $this->minNumberDigits);
		$gen->writeInt('minNumberSpecial', $this->minNumberSpecial);
		$gen->writeInt('reuseDetection', $this->reuseDetection);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PasswordResetResponse extends SoapObject {
	public string $passwordResetKey;
	public \DateTime $expiresAt;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'passwordResetKey', null, $this->passwordResetKey);
		$gen->writeDateTime('expiresAt', $this->expiresAt);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetFloorplansResponse extends SoapObject {
	/** @var Floorplan[] */
	public $floorplans = array();
	public function __construct($list = array()) { $this->floorplans = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_floorplans = new FloorplanList($this->floorplans);
$tmp_floorplans->write($gen, 'floorplans');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ChangeTablePropertyResp extends IdempotentResp {
	public string $result;
	public ?string $errorMessage = null;
	public TableIdentifier $tableIdentifier;
	public TableProperties $tableProperties;
	public function __construct() {
		$this->tableIdentifier = new TableIdentifier();
		$this->tableProperties = new TableProperties();
	}
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		$this->tableIdentifier->write($gen, 'tableIdentifier');
		$this->tableProperties->write($gen, 'tableProperties');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetEmployeeAuthorizationsResponse extends SoapObject {
	/** @var EmployeeAuthorization[] */
	public $authorizationsList = array();
	public function __construct($list = array()) { $this->authorizationsList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_authorizationsList = new EmployeeAuthorizationsList($this->authorizationsList);
$tmp_authorizationsList->write($gen, 'authorizationsList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetGroupAuthorizationsResponse extends SoapObject {
	/** @var GroupAuthorization[] */
	public $authorizationsList = array();
	public function __construct($list = array()) { $this->authorizationsList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_authorizationsList = new GroupAuthorizationsList($this->authorizationsList);
$tmp_authorizationsList->write($gen, 'authorizationsList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateGroupAuthorizationsResponse extends SoapObject {
	/** @var GroupAuthorization[] */
	public $authorizationsList = array();
	public function __construct($list = array()) { $this->authorizationsList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_authorizationsList = new GroupAuthorizationsList($this->authorizationsList);
$tmp_authorizationsList->write($gen, 'authorizationsList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetAuthorizationGroupsResponse extends SoapObject {
	/** @var AuthorizationGroup[] */
	public $groupList = array();
	public function __construct($list = array()) { $this->groupList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_groupList = new AuthorizationGroupList($this->groupList);
$tmp_groupList->write($gen, 'groupList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetAuthorizationTreeResponse extends SoapObject {
	/** @var Authorization[] */
	public $backOfficeAuthorizationsList = null;
	/** @var Authorization[] */
	public $articleAuthorizationsList = null;
	/** @var Authorization[] */
	public $relationAuthorizationsList = null;
	/** @var Authorization[] */
	public $employeeAuthorizationsList = null;
	/** @var Authorization[] */
	public $onlineAuthorizationsList = null;
	/** @var Authorization[] */
	public $kmsAuthorizationsList = null;
	public string $onlineAuthorizationsVersion;
	public string $kmsAuthorizationsVersion;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->backOfficeAuthorizationsList !== null) {
$tmp_backOfficeAuthorizationsList = new AuthorizationsList($this->backOfficeAuthorizationsList);
$tmp_backOfficeAuthorizationsList->write($gen, 'backOfficeAuthorizationsList');
}
		if ($this->articleAuthorizationsList !== null) {
$tmp_articleAuthorizationsList = new AuthorizationsList($this->articleAuthorizationsList);
$tmp_articleAuthorizationsList->write($gen, 'articleAuthorizationsList');
}
		if ($this->relationAuthorizationsList !== null) {
$tmp_relationAuthorizationsList = new AuthorizationsList($this->relationAuthorizationsList);
$tmp_relationAuthorizationsList->write($gen, 'relationAuthorizationsList');
}
		if ($this->employeeAuthorizationsList !== null) {
$tmp_employeeAuthorizationsList = new AuthorizationsList($this->employeeAuthorizationsList);
$tmp_employeeAuthorizationsList->write($gen, 'employeeAuthorizationsList');
}
		if ($this->onlineAuthorizationsList !== null) {
$tmp_onlineAuthorizationsList = new AuthorizationsList($this->onlineAuthorizationsList);
$tmp_onlineAuthorizationsList->write($gen, 'onlineAuthorizationsList');
}
		if ($this->kmsAuthorizationsList !== null) {
$tmp_kmsAuthorizationsList = new AuthorizationsList($this->kmsAuthorizationsList);
$tmp_kmsAuthorizationsList->write($gen, 'kmsAuthorizationsList');
}
		$gen->out->writeElementNs(self::TNS, 'onlineAuthorizationsVersion', null, $this->onlineAuthorizationsVersion);
		$gen->out->writeElementNs(self::TNS, 'kmsAuthorizationsVersion', null, $this->kmsAuthorizationsVersion);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetEmployeeBranchAuthorizationsResponse extends SoapObject {
	/** @var EmployeeBranchAuthorization[] */
	public $branchAuthorizationsList = array();
	public function __construct($list = array()) { $this->branchAuthorizationsList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_branchAuthorizationsList = new EmployeeBranchAuthorizationsList($this->branchAuthorizationsList);
$tmp_branchAuthorizationsList->write($gen, 'branchAuthorizationsList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveAuthorizationGroupResponse extends SoapObject {
	public string $result;
	public ?int $groupNumber = null;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->groupNumber !== null) $gen->writeInt('groupNumber', $this->groupNumber);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeleteAuthorizationGroupResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetEmployeeAuthorizationGroupsResponse extends SoapObject {
	/** @var BranchAuthorizationGroup[] */
	public $branchAuthorizationGroups = array();
	/** @var BranchGroupAuthorizationGroup[] */
	public $branchGroupAuthorizationGroups = array();
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->branchAuthorizationGroups as $elem) $elem->write($gen, 'branchAuthorizationGroups');
		foreach ($this->branchGroupAuthorizationGroups as $elem) $elem->write($gen, 'branchGroupAuthorizationGroups');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateEmployeeAuthorizationGroupsResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetEmployeeAuthorizationSyncMarkersResponse extends SoapObject {
	public int $authGroepSyncMarker;
	public int $authGroepRechtenSyncMarker;
	public int $authMedewGroepSyncMarker;
	public int $authMedewRechtenSyncMarker;
	public ?int $employeeBranchGroupSyncMarker = null;
	public ?int $employeeSyncMarker = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('authGroepSyncMarker', $this->authGroepSyncMarker);
		$gen->writeInt('authGroepRechtenSyncMarker', $this->authGroepRechtenSyncMarker);
		$gen->writeInt('authMedewGroepSyncMarker', $this->authMedewGroepSyncMarker);
		$gen->writeInt('authMedewRechtenSyncMarker', $this->authMedewRechtenSyncMarker);
		if ($this->employeeBranchGroupSyncMarker !== null) $gen->writeInt('employeeBranchGroupSyncMarker', $this->employeeBranchGroupSyncMarker);
		if ($this->employeeSyncMarker !== null) $gen->writeInt('employeeSyncMarker', $this->employeeSyncMarker);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetSpecialBarcodePatternsResponse extends SoapObject {
	/** @var BarcodePattern[] */
	public $patterns = array();
	public function __construct($list = array()) { $this->patterns = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->patterns as $elem) $elem->write($gen, 'patterns');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ParseSpecialBarcodeResponse extends SoapObject {
	public string $result;
	public string $kind;
	public ?SpecialBarcodeArticleResult $articleResult = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'kind', null, $this->kind);
		if ($this->articleResult !== null) $this->articleResult->write($gen, 'articleResult');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ImageLabel extends SoapObject {
	public int $id;
	public string $label;
	public bool $singleSelection;
	public bool $defaultSelection;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
		$gen->out->writeElementNs(self::TNS, 'label', null, $this->label);
		$gen->writeBool('singleSelection', $this->singleSelection);
		$gen->writeBool('defaultSelection', $this->defaultSelection);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ImageCardLabelIds extends SoapObject {
	/** @var int[] */
	public $labelId = array();
	public function __construct($list = array()) { $this->labelId = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->labelId as $elem) $gen->writeInt('labelId', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ImageData extends SoapObject {
	public int $imageId;
	public string $imageHash;
	public string $imageUrl;
	public string $originalName;
	public int $imageWidth;
	public int $imageHeight;
	/** @var int[] */
	public $labels = array();
	public \DateTime $created;
	public \DateTime $modified;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('imageId', $this->imageId);
		$gen->out->writeElementNs(self::TNS, 'imageHash', null, $this->imageHash);
		$gen->out->writeElementNs(self::TNS, 'imageUrl', null, $this->imageUrl);
		$gen->out->writeElementNs(self::TNS, 'originalName', null, $this->originalName);
		$gen->writeInt('imageWidth', $this->imageWidth);
		$gen->writeInt('imageHeight', $this->imageHeight);
		$tmp_labels = new ImageCardLabelIds($this->labels);
$tmp_labels->write($gen, 'labels');

		$gen->writeDateTime('created', $this->created);
		$gen->writeDateTime('modified', $this->modified);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CardImageData extends SoapObject {
	public int $cardNumber;
	/** @var ImageData[] */
	public $images = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('cardNumber', $this->cardNumber);
		foreach ($this->images as $elem) $elem->write($gen, 'images');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateImageCardLink extends SoapObject {
	public string $cardType;
	/** @var int[] */
	public $cardNumbers = array();
	/** @var int[] */
	public $labels = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardType', null, $this->cardType);
		foreach ($this->cardNumbers as $elem) $gen->writeInt('cardNumbers', $elem);
		if ($this->labels !== null) {
$tmp_labels = new ImageCardLabelIds($this->labels);
$tmp_labels->write($gen, 'labels');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateImageRequest extends SoapObject {
	public string $imageName;
	public string $mimeType;
	public string $imageData;
	public ?CreateImageCardLink $cardLink = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'imageName', null, $this->imageName);
		$gen->out->writeElementNs(self::TNS, 'mimeType', null, $this->mimeType);
		$gen->out->writeElementNs(self::TNS, 'imageData', null, $this->imageData);
		if ($this->cardLink !== null) $this->cardLink->write($gen, 'cardLink');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateImageFromUrlRequest extends SoapObject {
	public string $imageName;
	public string $mimeType;
	public string $imageUrl;
	public ?CreateImageCardLink $cardLink = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'imageName', null, $this->imageName);
		$gen->out->writeElementNs(self::TNS, 'mimeType', null, $this->mimeType);
		$gen->out->writeElementNs(self::TNS, 'imageUrl', null, $this->imageUrl);
		if ($this->cardLink !== null) $this->cardLink->write($gen, 'cardLink');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCardImageLabelsRequest extends SoapObject {
	public string $cardType;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardType', null, $this->cardType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCardImagesRequest extends SoapObject {
	public string $cardType;
	/** @var int[] */
	public $cardNumbers = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardType', null, $this->cardType);
		foreach ($this->cardNumbers as $elem) $gen->writeInt('cardNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveImageData extends SoapObject {
	public int $imageId;
	/** @var int[] */
	public $labels = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('imageId', $this->imageId);
		$tmp_labels = new ImageCardLabelIds($this->labels);
$tmp_labels->write($gen, 'labels');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveCardImageData extends SoapObject {
	public int $cardNumber;
	/** @var SaveImageData[] */
	public $images = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('cardNumber', $this->cardNumber);
		foreach ($this->images as $elem) $elem->write($gen, 'images');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveCardImagesRequest extends SoapObject {
	public string $cardType;
	/** @var SaveCardImageData[] */
	public $cards = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardType', null, $this->cardType);
		foreach ($this->cards as $elem) $elem->write($gen, 'cards');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetImagesRequest extends SoapObject {
	/** @var int[] */
	public $imageIds = array();
	public bool $includeImageData;
	public bool $includeThumbData;
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->imageIds as $elem) $gen->writeInt('imageIds', $elem);
		$gen->writeBool('includeImageData', $this->includeImageData);
		$gen->writeBool('includeThumbData', $this->includeThumbData);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateImageResponse extends SoapObject {
	public string $result;
	public int $imageId;
	public string $imageHash;
	public string $imageUrl;
	public ?string $errorMsg = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->writeInt('imageId', $this->imageId);
		$gen->out->writeElementNs(self::TNS, 'imageHash', null, $this->imageHash);
		$gen->out->writeElementNs(self::TNS, 'imageUrl', null, $this->imageUrl);
		if ($this->errorMsg !== null) $gen->out->writeElementNs(self::TNS, 'errorMsg', null, $this->errorMsg);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCardImageLabelsResponse extends SoapObject {
	/** @var ImageLabel[] */
	public $labels = array();
	public function __construct($list = array()) { $this->labels = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->labels as $elem) $elem->write($gen, 'labels');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCardImagesResponse extends SoapObject {
	/** @var CardImageData[] */
	public $items = array();
	public function __construct($list = array()) { $this->items = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->items as $elem) $elem->write($gen, 'items');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveCardImagesResponse extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetImagesResponse extends SoapObject {
	/** @var Image[] */
	public $imageList = array();
	public function __construct($list = array()) { $this->imageList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_imageList = new ImageList($this->imageList);
$tmp_imageList->write($gen, 'imageList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPrintLayoutsRequest extends SoapObject {
	public ?string $type = null;
	public ?string $kind = null;
	public ?string $fieldType = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->type !== null) $gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		if ($this->kind !== null) $gen->out->writeElementNs(self::TNS, 'kind', null, $this->kind);
		if ($this->fieldType !== null) $gen->out->writeElementNs(self::TNS, 'fieldType', null, $this->fieldType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintLayoutView extends SoapObject {
	public string $id;
	public string $name;
	public string $type;
	public string $kind;
	public \DateTime $createdTimestamp;
	public \DateTime $updatedTimestamp;
	public bool $hasDigitalSignatureField;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		$gen->out->writeElementNs(self::TNS, 'kind', null, $this->kind);
		$gen->writeDateTime('createdTimestamp', $this->createdTimestamp);
		$gen->writeDateTime('updatedTimestamp', $this->updatedTimestamp);
		$gen->writeBool('hasDigitalSignatureField', $this->hasDigitalSignatureField);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPrintLayoutAssignmentsRequest extends SoapObject {
	public ?string $type = null;
	public ?string $kind = null;
	public ?int $branchNumber = null;
	public ?int $workplaceNumber = null;
	public ?bool $useOnlinePrinter = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->type !== null) $gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		if ($this->kind !== null) $gen->out->writeElementNs(self::TNS, 'kind', null, $this->kind);
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->workplaceNumber !== null) $gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->useOnlinePrinter !== null) $gen->writeBool('useOnlinePrinter', $this->useOnlinePrinter);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintLayoutAssignmentPrintLayoutView extends SoapObject {
	public string $id;
	public string $name;
	public string $type;
	public string $kind;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		$gen->out->writeElementNs(self::TNS, 'kind', null, $this->kind);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintLayoutAssignment extends SoapObject {
	public WorkplaceIdentifier $workplace;
	public PrintLayoutAssignmentPrintLayoutView $printLayout;
	public bool $useOnlinePrinter;
	public function __construct() {
		$this->workplace = new WorkplaceIdentifier();
		$this->printLayout = new PrintLayoutAssignmentPrintLayoutView();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->workplace->write($gen, 'workplace');
		$this->printLayout->write($gen, 'printLayout');
		$gen->writeBool('useOnlinePrinter', $this->useOnlinePrinter);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintParam extends SoapObject {
	public string $key;
	public string $value;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'key', null, $this->key);
		$gen->out->writeElementNs(self::TNS, 'value', null, $this->value);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintParams extends SoapObject {
	public ?string $uuid = null;
	public ?YearNumber $yearNumber = null;
	/** @var PrintParam[] */
	public $params = array();
	public function writeProps(SoapGenerator $gen): void {
		if ($this->uuid !== null) $gen->out->writeElementNs(self::TNS, 'uuid', null, $this->uuid);
		if ($this->yearNumber !== null) $this->yearNumber->write($gen, 'yearNumber');
		foreach ($this->params as $elem) $elem->write($gen, 'params');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintInfo extends SoapObject {
	/** @var PrintParams[] */
	public $paramsList = array();
	public ?PrintParams $globalParams = null;
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->paramsList as $elem) $elem->write($gen, 'paramsList');
		if ($this->globalParams !== null) $this->globalParams->write($gen, 'globalParams');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRenderedPrintLayoutRequest extends SoapObject {
	public string $printLayoutUuid;
	public string $renderType;
	public ?PrintInfo $printInfo = null;
	public ?int $dpi = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'printLayoutUuid', null, $this->printLayoutUuid);
		$gen->out->writeElementNs(self::TNS, 'renderType', null, $this->renderType);
		if ($this->printInfo !== null) $this->printInfo->write($gen, 'printInfo');
		if ($this->dpi !== null) $gen->writeInt('dpi', $this->dpi);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPrintLayoutMarkupRequest extends SoapObject {
	public string $printLayoutUuid;
	public string $markupType;
	public ?PrintInfo $printInfo = null;
	public ?bool $responseAsBase64 = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'printLayoutUuid', null, $this->printLayoutUuid);
		$gen->out->writeElementNs(self::TNS, 'markupType', null, $this->markupType);
		if ($this->printInfo !== null) $this->printInfo->write($gen, 'printInfo');
		if ($this->responseAsBase64 !== null) $gen->writeBool('responseAsBase64', $this->responseAsBase64);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintPrintLayoutRequest extends SoapObject {
	public ?string $type = null;
	public string $kind;
	public PrintInfo $printInfo;
	public WorkplaceIdentifier $workplaceIdentifier;
	public function __construct() {
		$this->printInfo = new PrintInfo();
		$this->workplaceIdentifier = new WorkplaceIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
		if ($this->type !== null) $gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		$gen->out->writeElementNs(self::TNS, 'kind', null, $this->kind);
		$this->printInfo->write($gen, 'printInfo');
		$this->workplaceIdentifier->write($gen, 'workplaceIdentifier');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPrintLayoutsResponse extends SoapObject {
	public string $result;
	/** @var PrintLayoutView[] */
	public $printLayouts = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		foreach ($this->printLayouts as $elem) $elem->write($gen, 'printLayouts');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPrintLayoutAssignmentsResponse extends SoapObject {
	/** @var PrintLayoutAssignment[] */
	public $printLayoutAssignments = array();
	public function __construct($list = array()) { $this->printLayoutAssignments = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->printLayoutAssignments as $elem) $elem->write($gen, 'printLayoutAssignments');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRenderedPrintLayoutResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	/** @var string[] */
	public $renderedPrintLayouts = array();
	public bool $hasDigitalSignatureField;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		foreach ($this->renderedPrintLayouts as $elem) $gen->out->writeElementNs(self::TNS, 'renderedPrintLayouts', null, $elem);
		$gen->writeBool('hasDigitalSignatureField', $this->hasDigitalSignatureField);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPrintLayoutMarkupResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	public string $printLayoutMarkup;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		$gen->out->writeElementNs(self::TNS, 'printLayoutMarkup', null, $this->printLayoutMarkup);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrintPrintLayoutResponse extends SoapObject {
	public string $result;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherView extends SoapObject {
	public VoucherId $id;
	public ?int $categoryId = null;
	public ?string $description = null;
	public ?string $ownerId = null;
	public \DateTime $createdTs;
	public \DateTime $updatedTs;
	public ?\DateTime $deletedTs = null;
	public ?int $bookArticleNumber = null;
	public string $type;
	public ?string $apiIdent = null;
	public function __construct() {
		$this->id = new VoucherId();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->id->write($gen, 'id');
		if ($this->categoryId !== null) $gen->writeInt('categoryId', $this->categoryId);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->ownerId !== null) $gen->out->writeElementNs(self::TNS, 'ownerId', null, $this->ownerId);
		$gen->writeDateTime('createdTs', $this->createdTs);
		$gen->writeDateTime('updatedTs', $this->updatedTs);
		if ($this->deletedTs !== null) $gen->writeDateTime('deletedTs', $this->deletedTs);
		if ($this->bookArticleNumber !== null) $gen->writeInt('bookArticleNumber', $this->bookArticleNumber);
		$gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		if ($this->apiIdent !== null) $gen->out->writeElementNs(self::TNS, 'apiIdent', null, $this->apiIdent);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherViewList extends SoapObject {
	/** @var VoucherView[] */
	public $voucherView = array();
	public function __construct($list = array()) { $this->voucherView = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->voucherView as $elem) $elem->write($gen, 'voucherView');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherSettingsV1 extends SoapObject {
	public ?VoucherId $requestedVoucherId = null;
	public VoucherId $voucherId;
	public string $activationMoment;
	public int $activationDuration;
	public string $activationDurationPeriod;
	public int $maxRedeemCount;
	public string $useRelationIssue;
	public string $useRelationRedeem;
	public bool $hasArticleChoice;
	public bool $redeemOnNewArticle;
	public function __construct() {
		$this->voucherId = new VoucherId();
	}
	public function writeProps(SoapGenerator $gen): void {
		if ($this->requestedVoucherId !== null) $this->requestedVoucherId->write($gen, 'requestedVoucherId');
		$this->voucherId->write($gen, 'voucherId');
		$gen->out->writeElementNs(self::TNS, 'activationMoment', null, $this->activationMoment);
		$gen->writeInt('activationDuration', $this->activationDuration);
		$gen->out->writeElementNs(self::TNS, 'activationDurationPeriod', null, $this->activationDurationPeriod);
		$gen->writeInt('maxRedeemCount', $this->maxRedeemCount);
		$gen->out->writeElementNs(self::TNS, 'useRelationIssue', null, $this->useRelationIssue);
		$gen->out->writeElementNs(self::TNS, 'useRelationRedeem', null, $this->useRelationRedeem);
		$gen->writeBool('hasArticleChoice', $this->hasArticleChoice);
		$gen->writeBool('redeemOnNewArticle', $this->redeemOnNewArticle);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherSettingsV1List extends SoapObject {
	/** @var VoucherSettingsV1[] */
	public $voucherSettingsV1 = array();
	public function __construct($list = array()) { $this->voucherSettingsV1 = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->voucherSettingsV1 as $elem) $elem->write($gen, 'voucherSettingsV1');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherRedeemLocations extends SoapObject {
	/** @var int[] */
	public $branchGroupIds = array();
	/** @var int[] */
	public $branchIds = array();
	/** @var WorkplaceIdentifier[] */
	public $workplaceIds = array();
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->branchGroupIds as $elem) $gen->writeInt('branchGroupIds', $elem);
		foreach ($this->branchIds as $elem) $gen->writeInt('branchIds', $elem);
		foreach ($this->workplaceIds as $elem) $elem->write($gen, 'workplaceIds');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherLine extends SoapObject {
	public string $id;
	public string $bpeId;
	public BigDecimal $quantity;
	public BigDecimal $discountPercentage;
	public string $type;
	public ?int $articleNumber = null;
	public ?int $turnoverGroupId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'bpeId', null, $this->bpeId);
		$gen->writeBigDecimal('quantity', $this->quantity);
		$gen->writeBigDecimal('discountPercentage', $this->discountPercentage);
		$gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->turnoverGroupId !== null) $gen->writeInt('turnoverGroupId', $this->turnoverGroupId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherLineList extends SoapObject {
	/** @var VoucherLine[] */
	public $voucherLine = array();
	public function __construct($list = array()) { $this->voucherLine = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->voucherLine as $elem) $elem->write($gen, 'voucherLine');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Voucher extends SoapObject {
	public VoucherView $view;
	public VoucherSettingsV1 $settings;
	public ?VoucherRedeemLocations $redeemLocations = null;
	/** @var VoucherRedeemCount[] */
	public $redeemCount = null;
	/** @var VoucherLine[] */
	public $lines = null;
	public function __construct() {
		$this->view = new VoucherView();
		$this->settings = new VoucherSettingsV1();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->view->write($gen, 'view');
		$this->settings->write($gen, 'settings');
		if ($this->redeemLocations !== null) $this->redeemLocations->write($gen, 'redeemLocations');
		if ($this->redeemCount !== null) {
$tmp_redeemCount = new VoucherRedeemCountList($this->redeemCount);
$tmp_redeemCount->write($gen, 'redeemCount');
}
		if ($this->lines !== null) {
$tmp_lines = new VoucherLineList($this->lines);
$tmp_lines->write($gen, 'lines');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherCategory extends SoapObject {
	public int $id;
	public ?string $description = null;
	public \DateTime $createdTs;
	public ?\DateTime $deletedTs = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
		if ($this->description !== null) $gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		$gen->writeDateTime('createdTs', $this->createdTs);
		if ($this->deletedTs !== null) $gen->writeDateTime('deletedTs', $this->deletedTs);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherCategoryList extends SoapObject {
	/** @var VoucherCategory[] */
	public $voucherCategory = array();
	public function __construct($list = array()) { $this->voucherCategory = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->voucherCategory as $elem) $elem->write($gen, 'voucherCategory');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherExternalScanCode extends SoapObject {
	public string $scanCode;
	public string $voucherId;
	public string $apiIdent;
	public ?\DateTime $createdTs = null;
	public ?\DateTime $usedTs = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'scanCode', null, $this->scanCode);
		$gen->out->writeElementNs(self::TNS, 'voucherId', null, $this->voucherId);
		$gen->out->writeElementNs(self::TNS, 'apiIdent', null, $this->apiIdent);
		if ($this->createdTs !== null) $gen->writeDateTime('createdTs', $this->createdTs);
		if ($this->usedTs !== null) $gen->writeDateTime('usedTs', $this->usedTs);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherExternalScanCodeList extends SoapObject {
	/** @var VoucherExternalScanCode[] */
	public $voucherScanCode = array();
	public function __construct($list = array()) { $this->voucherScanCode = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->voucherScanCode as $elem) $elem->write($gen, 'voucherScanCode');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class IssueVoucher extends SoapObject {
	public VoucherId $voucherId;
	public string $bookBpeId;
	public ?string $scanCode = null;
	public string $groupScanCode;
	public ?int $relationNumber = null;
	public ?\DateTime $startTs = null;
	public function __construct() {
		$this->voucherId = new VoucherId();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->voucherId->write($gen, 'voucherId');
		$gen->out->writeElementNs(self::TNS, 'bookBpeId', null, $this->bookBpeId);
		if ($this->scanCode !== null) $gen->out->writeElementNs(self::TNS, 'scanCode', null, $this->scanCode);
		$gen->out->writeElementNs(self::TNS, 'groupScanCode', null, $this->groupScanCode);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->startTs !== null) $gen->writeDateTime('startTs', $this->startTs);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class IssueVoucherList extends SoapObject {
	/** @var IssueVoucher[] */
	public $issueVoucher = array();
	public function __construct($list = array()) { $this->issueVoucher = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->issueVoucher as $elem) $elem->write($gen, 'issueVoucher');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RedeemableVoucherIssuance extends SoapObject {
	public VoucherIssuance $voucherIssuance;
	public int $remainingRedeemCount;
	public function __construct() {
		$this->voucherIssuance = new VoucherIssuance();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->voucherIssuance->write($gen, 'voucherIssuance');
		$gen->writeInt('remainingRedeemCount', $this->remainingRedeemCount);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RedeemableVoucherIssuanceList extends SoapObject {
	/** @var RedeemableVoucherIssuance[] */
	public $redeemableVoucherIssuance = array();
	public function __construct($list = array()) { $this->redeemableVoucherIssuance = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->redeemableVoucherIssuance as $elem) $elem->write($gen, 'redeemableVoucherIssuance');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CheckGiftcardPaymentRequest extends SoapObject {
	public string $cardNumber;
	public int $branchNumber;
	public ?BigDecimal $amount = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardNumber', null, $this->cardNumber);
		$gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->amount !== null) $gen->writeValueAndScale('amount', '', $this->amount, 2);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GiftcardInfo extends SoapObject {
	public string $id;
	public string $name;
	public int $sequenceNumber;
	public bool $isManualValue;
	public bool $isIssuable;
	public bool $isReloadable;
	public bool $isRedeemable;
	public bool $isRestitutable;
	public bool $isPersonalizable;
	public int $turnoverGroupNumber;
	public string $PaymentMethodId;
	public ?int $validity = null;
	/** @var int[] */
	public $values = array();
	/** @var int[] */
	public $branchNumbers = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->writeInt('sequenceNumber', $this->sequenceNumber);
		$gen->writeBool('isManualValue', $this->isManualValue);
		$gen->writeBool('isIssuable', $this->isIssuable);
		$gen->writeBool('isReloadable', $this->isReloadable);
		$gen->writeBool('isRedeemable', $this->isRedeemable);
		$gen->writeBool('isRestitutable', $this->isRestitutable);
		$gen->writeBool('isPersonalizable', $this->isPersonalizable);
		$gen->writeInt('turnoverGroupNumber', $this->turnoverGroupNumber);
		$gen->out->writeElementNs(self::TNS, 'PaymentMethodId', null, $this->PaymentMethodId);
		if ($this->validity !== null) $gen->writeInt('validity', $this->validity);
		foreach ($this->values as $elem) $gen->writeInt('values', $elem);
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Giftcard extends SoapObject {
	public string $id;
	public string $cardNumber;
	public bool $active;
	public int $initialValue;
	public bool $isManualValue;
	public int $currentBalance;
	public ?int $relationNumber = null;
	public ?\DateTime $validUntil = null;
	public int $TurnoverGroup;
	public GiftcardInfo $giftcardInfo;
	public function __construct() {
		$this->giftcardInfo = new GiftcardInfo();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'cardNumber', null, $this->cardNumber);
		$gen->writeBool('active', $this->active);
		$gen->writeInt('initialValue', $this->initialValue);
		$gen->writeBool('isManualValue', $this->isManualValue);
		$gen->writeInt('currentBalance', $this->currentBalance);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->validUntil !== null) $gen->writeDate('validUntil', $this->validUntil);
		$gen->writeInt('TurnoverGroup', $this->TurnoverGroup);
		$this->giftcardInfo->write($gen, 'giftcardInfo');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GiftcardPaymentLine extends SoapObject {
	public ?string $text = null;
	public ?int $articleNumber = null;
	public BigDecimal $quantity;
	public BigDecimal $priceIncl;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->text !== null) $gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeBigDecimal('quantity', $this->quantity);
		$gen->writeBigDecimal('priceIncl', $this->priceIncl);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GiftcardPaymentLineList extends SoapObject {
	/** @var GiftcardPaymentLine[] */
	public $line = array();
	public function __construct($list = array()) { $this->line = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->line as $elem) $elem->write($gen, 'line');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RegisterGiftcardPaymentRequest extends SoapObject {
	public string $cardNumber;
	public int $branchNumber;
	public int $employeeNumber;
	public string $externalReference;
	/** @var GiftcardPaymentLine[] */
	public $lineList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardNumber', null, $this->cardNumber);
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->out->writeElementNs(self::TNS, 'externalReference', null, $this->externalReference);
		$tmp_lineList = new GiftcardPaymentLineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RegisterGiftcardPaymentV2Request extends IdempotentReq {
	public string $cardNumber;
	public int $branchNumber;
	public int $employeeNumber;
	public string $externalReference;
	/** @var GiftcardPaymentLine[] */
	public $lineList = array();
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'cardNumber', null, $this->cardNumber);
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->out->writeElementNs(self::TNS, 'externalReference', null, $this->externalReference);
		$tmp_lineList = new GiftcardPaymentLineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateGiftcardRequest extends SoapObject {
	public string $cardNumber;
	public string $cardTypeId;
	public int $branchNumber;
	public int $employeeNumber;
	public BigDecimal $amount;
	public string $externalReference;
	public ?int $relationNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardNumber', null, $this->cardNumber);
		$gen->out->writeElementNs(self::TNS, 'cardTypeId', null, $this->cardTypeId);
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->writeValueAndScale('amount', '', $this->amount, 2);
		$gen->out->writeElementNs(self::TNS, 'externalReference', null, $this->externalReference);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReloadGiftcardRequest extends SoapObject {
	public string $cardNumber;
	public int $branchNumber;
	public int $employeeNumber;
	public BigDecimal $amount;
	public string $externalReference;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardNumber', null, $this->cardNumber);
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->writeValueAndScale('amount', '', $this->amount, 2);
		$gen->out->writeElementNs(self::TNS, 'externalReference', null, $this->externalReference);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetGiftcardTypesRequest extends SoapObject {
	public int $branchNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GiftcardTypesList extends SoapObject {
	/** @var GiftcardType[] */
	public $giftcardTypes = array();
	public function __construct($list = array()) { $this->giftcardTypes = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->giftcardTypes as $elem) $elem->write($gen, 'giftcardTypes');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRelationGiftcardsRequest extends SoapObject {
	public int $relationNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('relationNumber', $this->relationNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RelationGiftcard extends SoapObject {
	public string $cardId;
	public string $cardNumber;
	public bool $active;
	public string $cardTypeId;
	public int $initialValue;
	public bool $isManualValue;
	public int $currentBalance;
	public ?\DateTime $validUntil = null;
	public int $turnoverGroupNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardId', null, $this->cardId);
		$gen->out->writeElementNs(self::TNS, 'cardNumber', null, $this->cardNumber);
		$gen->writeBool('active', $this->active);
		$gen->out->writeElementNs(self::TNS, 'cardTypeId', null, $this->cardTypeId);
		$gen->writeInt('initialValue', $this->initialValue);
		$gen->writeBool('isManualValue', $this->isManualValue);
		$gen->writeInt('currentBalance', $this->currentBalance);
		if ($this->validUntil !== null) $gen->writeDate('validUntil', $this->validUntil);
		$gen->writeInt('turnoverGroupNumber', $this->turnoverGroupNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RelationGiftcardList extends SoapObject {
	/** @var RelationGiftcard[] */
	public $relationGiftcards = array();
	public function __construct($list = array()) { $this->relationGiftcards = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->relationGiftcards as $elem) $elem->write($gen, 'relationGiftcards');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetGiftcardRequest extends SoapObject {
	public ?string $cardNumber = null;
	public ?string $cardId = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->cardNumber !== null) $gen->out->writeElementNs(self::TNS, 'cardNumber', null, $this->cardNumber);
		if ($this->cardId !== null) $gen->out->writeElementNs(self::TNS, 'cardId', null, $this->cardId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetGiftcard extends SoapObject {
	public string $cardId;
	public string $cardNumber;
	public int $syncMarker;
	public bool $active;
	public string $cardTypeId;
	public int $initialValue;
	public bool $isManualValue;
	public int $currentBalance;
	public ?\DateTime $validUntil = null;
	public int $turnoverGroupNumber;
	public string $reference;
	public ?int $relationNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardId', null, $this->cardId);
		$gen->out->writeElementNs(self::TNS, 'cardNumber', null, $this->cardNumber);
		$gen->writeInt('syncMarker', $this->syncMarker);
		$gen->writeBool('active', $this->active);
		$gen->out->writeElementNs(self::TNS, 'cardTypeId', null, $this->cardTypeId);
		$gen->writeInt('initialValue', $this->initialValue);
		$gen->writeBool('isManualValue', $this->isManualValue);
		$gen->writeInt('currentBalance', $this->currentBalance);
		if ($this->validUntil !== null) $gen->writeDate('validUntil', $this->validUntil);
		$gen->writeInt('turnoverGroupNumber', $this->turnoverGroupNumber);
		$gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetGiftcardHistoryRequest extends SoapObject {
	public ?string $cardNumber = null;
	public ?string $cardId = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->cardNumber !== null) $gen->out->writeElementNs(self::TNS, 'cardNumber', null, $this->cardNumber);
		if ($this->cardId !== null) $gen->out->writeElementNs(self::TNS, 'cardId', null, $this->cardId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GiftcardHistory extends SoapObject {
	public int $employeeNumber;
	public int $branchNumber;
	public int $workplaceNumber;
	public BigDecimal $bookingAmount;
	public int $balanceAfterBooking;
	public string $result;
	public \DateTime $dateTime;
	public \DateTime $bookDate;
	public string $externalReference;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
		$gen->writeValueAndScale('bookingAmount', '', $this->bookingAmount, 2);
		$gen->writeInt('balanceAfterBooking', $this->balanceAfterBooking);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->writeDateTime('dateTime', $this->dateTime);
		$gen->writeDate('bookDate', $this->bookDate);
		$gen->out->writeElementNs(self::TNS, 'externalReference', null, $this->externalReference);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GiftcardHistoryList extends SoapObject {
	/** @var GiftcardHistory[] */
	public $giftcardHistory = array();
	public function __construct($list = array()) { $this->giftcardHistory = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->giftcardHistory as $elem) $elem->write($gen, 'giftcardHistory');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetGiftcardsRequest extends SoapObject {
	public ?string $cardTypeId = null;
	public ?bool $onlyActive = null;
	/** @var int[] */
	public $relationFilter = null;
	public ?RequestSyncMarkerFilter $syncMarkerFilter = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->cardTypeId !== null) $gen->out->writeElementNs(self::TNS, 'cardTypeId', null, $this->cardTypeId);
		if ($this->onlyActive !== null) $gen->writeBool('onlyActive', $this->onlyActive);
		if ($this->relationFilter !== null) {
$tmp_relationFilter = new RequestRelationFilter($this->relationFilter);
$tmp_relationFilter->write($gen, 'relationFilter');
}
		if ($this->syncMarkerFilter !== null) $this->syncMarkerFilter->write($gen, 'syncMarkerFilter');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GiftcardList extends SoapObject {
	/** @var GetGiftcard[] */
	public $giftcard = array();
	public function __construct($list = array()) { $this->giftcard = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->giftcard as $elem) $elem->write($gen, 'giftcard');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveGiftcard extends SoapObject {
	public string $cardId;
	public ?string $reference = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'cardId', null, $this->cardId);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveGiftcardList extends SoapObject {
	/** @var SaveGiftcard[] */
	public $giftcard = array();
	public function __construct($list = array()) { $this->giftcard = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->giftcard as $elem) $elem->write($gen, 'giftcard');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveGiftcardsRequest extends IdempotentReq {
	/** @var SaveGiftcard[] */
	public $giftcardList = array();
	public function __construct($list = array()) { $this->giftcardList = $list; }
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$tmp_giftcardList = new SaveGiftcardList($this->giftcardList);
$tmp_giftcardList->write($gen, 'giftcardList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RestituteGiftcardsRequest extends IdempotentReq {
	/** @var string[] */
	public $cardIds = array();
	public WorkplaceIdentifier $workplaceIdentifier;
	public EmployeeIdentifier $employeeIdentifier;
	public RelationIdentifier $relationIdentifier;
	public function __construct() {
		$this->workplaceIdentifier = new WorkplaceIdentifier();
		$this->employeeIdentifier = new EmployeeIdentifier();
		$this->relationIdentifier = new RelationIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		foreach ($this->cardIds as $elem) $gen->out->writeElementNs(self::TNS, 'cardIds', null, $elem);
		$this->workplaceIdentifier->write($gen, 'workplaceIdentifier');
		$this->employeeIdentifier->write($gen, 'employeeIdentifier');
		$this->relationIdentifier->write($gen, 'relationIdentifier');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LinkGiftcardsToRelationRequest extends IdempotentReq {
	/** @var string[] */
	public $cardIds = array();
	public WorkplaceIdentifier $workplaceIdentifier;
	public RelationIdentifier $relationIdentifier;
	public EmployeeIdentifier $employeeIdentifier;
	public function __construct() {
		$this->workplaceIdentifier = new WorkplaceIdentifier();
		$this->relationIdentifier = new RelationIdentifier();
		$this->employeeIdentifier = new EmployeeIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		foreach ($this->cardIds as $elem) $gen->out->writeElementNs(self::TNS, 'cardIds', null, $elem);
		$this->workplaceIdentifier->write($gen, 'workplaceIdentifier');
		$this->relationIdentifier->write($gen, 'relationIdentifier');
		$this->employeeIdentifier->write($gen, 'employeeIdentifier');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetVouchersRequest extends SoapObject {
	/** @var VoucherId[] */
	public $voucherIdFilter = array();
	public ?string $type = null;
	public ?string $apiIdent = null;
	public ?bool $withBookArticleNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$tmp_voucherIdFilter = new VoucherIdList($this->voucherIdFilter);
$tmp_voucherIdFilter->write($gen, 'voucherIdFilter');

		if ($this->type !== null) $gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		if ($this->apiIdent !== null) $gen->out->writeElementNs(self::TNS, 'apiIdent', null, $this->apiIdent);
		if ($this->withBookArticleNumber !== null) $gen->writeBool('withBookArticleNumber', $this->withBookArticleNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetVoucherRequest extends SoapObject {
	public VoucherId $voucherId;
	public function __construct() {
		$this->voucherId = new VoucherId();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->voucherId->write($gen, 'voucherId');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class VoucherCategoryIdList extends SoapObject {
	/** @var int[] */
	public $voucherCategoryId = array();
	public function __construct($list = array()) { $this->voucherCategoryId = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->voucherCategoryId as $elem) $gen->writeInt('voucherCategoryId', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetVoucherCategoriesRequest extends SoapObject {
	/** @var int[] */
	public $voucherCategoryIdFilter = array();
	public function __construct($list = array()) { $this->voucherCategoryIdFilter = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_voucherCategoryIdFilter = new VoucherCategoryIdList($this->voucherCategoryIdFilter);
$tmp_voucherCategoryIdFilter->write($gen, 'voucherCategoryIdFilter');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetVoucherIssuancesRequest extends SoapObject {
	public int $relationNumber;
	public ?\DateTime $fromDate = null;
	public ?\DateTime $throughDate = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->fromDate !== null) $gen->writeDate('fromDate', $this->fromDate);
		if ($this->throughDate !== null) $gen->writeDate('throughDate', $this->throughDate);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetVoucherSettingsRequest extends SoapObject {
	/** @var VoucherId[] */
	public $voucherIds = array();
	public function __construct($list = array()) { $this->voucherIds = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_voucherIds = new VoucherIdList($this->voucherIds);
$tmp_voucherIds->write($gen, 'voucherIds');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class IssueVouchersRequest extends IdempotentReq {
	/** @var IssueVoucher[] */
	public $issueVouchers = array();
	public WorkplaceIdentifier $financialWorkplaceIdentifier;
	public function __construct() {
		$this->financialWorkplaceIdentifier = new WorkplaceIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$tmp_issueVouchers = new IssueVoucherList($this->issueVouchers);
$tmp_issueVouchers->write($gen, 'issueVouchers');

		$this->financialWorkplaceIdentifier->write($gen, 'financialWorkplaceIdentifier');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class IssueVoucherExternalScanCodeSet extends SoapObject {
	/** @var string[] */
	public $scanCode = array();
	public function __construct($list = array()) { $this->scanCode = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->scanCode as $elem) $gen->out->writeElementNs(self::TNS, 'scanCode', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class IssueVoucherExternalScanCodesRequest extends IdempotentReq {
	public string $voucherId;
	/** @var string[] */
	public $scanCodes = array();
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'voucherId', null, $this->voucherId);
		$tmp_scanCodes = new IssueVoucherExternalScanCodeSet($this->scanCodes);
$tmp_scanCodes->write($gen, 'scanCodes');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetVoucherExternalScanCodesRequest extends SoapObject {
	public string $voucherId;
	public ?\DateTime $fromCreatedTs = null;
	public ?\DateTime $throughCreatedTs = null;
	public ?\DateTime $fromUsedTs = null;
	public ?\DateTime $throughUsedTs = null;
	public ?bool $used = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'voucherId', null, $this->voucherId);
		if ($this->fromCreatedTs !== null) $gen->writeDateTime('fromCreatedTs', $this->fromCreatedTs);
		if ($this->throughCreatedTs !== null) $gen->writeDateTime('throughCreatedTs', $this->throughCreatedTs);
		if ($this->fromUsedTs !== null) $gen->writeDateTime('fromUsedTs', $this->fromUsedTs);
		if ($this->throughUsedTs !== null) $gen->writeDateTime('throughUsedTs', $this->throughUsedTs);
		if ($this->used !== null) $gen->writeBool('used', $this->used);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRedeemableVoucherIssuancesRequest extends SoapObject {
	public string $voucherType;
	public \DateTime $redeemDate;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'voucherType', null, $this->voucherType);
		$gen->writeDate('redeemDate', $this->redeemDate);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RedeemVoucherIssuanceRequest extends SoapObject {
	public ?string $voucherScanCode = null;
	public ?string $voucherIssuanceId = null;
	public ?int $redeemCount = null;
	public WorkplaceIdentifier $workplaceIdentifier;
	public ?bool $dryRun = null;
	public function __construct() {
		$this->workplaceIdentifier = new WorkplaceIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
		if ($this->voucherScanCode !== null) $gen->out->writeElementNs(self::TNS, 'voucherScanCode', null, $this->voucherScanCode);
		if ($this->voucherIssuanceId !== null) $gen->out->writeElementNs(self::TNS, 'voucherIssuanceId', null, $this->voucherIssuanceId);
		if ($this->redeemCount !== null) $gen->writeInt('redeemCount', $this->redeemCount);
		$this->workplaceIdentifier->write($gen, 'workplaceIdentifier');
		if ($this->dryRun !== null) $gen->writeBool('dryRun', $this->dryRun);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CheckGiftcardPaymentResponse extends SoapObject {
	public string $result;
	public Giftcard $giftcard;
	public function __construct() {
		$this->giftcard = new Giftcard();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$this->giftcard->write($gen, 'giftcard');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RegisterGiftcardPaymentResponse extends SoapObject {
	public string $result;
	public ?int $newBalance = null;
	public ?string $receiptId = null;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->newBalance !== null) $gen->writeInt('newBalance', $this->newBalance);
		if ($this->receiptId !== null) $gen->out->writeElementNs(self::TNS, 'receiptId', null, $this->receiptId);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RegisterGiftcardPaymentV2Response extends IdempotentResp {
	public string $result;
	public ?BigDecimal $newBalance = null;
	public ?string $receiptId = null;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->newBalance !== null) $gen->writeBigDecimal('newBalance', $this->newBalance);
		if ($this->receiptId !== null) $gen->out->writeElementNs(self::TNS, 'receiptId', null, $this->receiptId);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateGiftcardResponse extends SoapObject {
	public string $result;
	public ?string $cardId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->cardId !== null) $gen->out->writeElementNs(self::TNS, 'cardId', null, $this->cardId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReloadGiftcardResponse extends SoapObject {
	public string $result;
	public ?string $cardId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->cardId !== null) $gen->out->writeElementNs(self::TNS, 'cardId', null, $this->cardId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetGiftcardTypesResponse extends SoapObject {
	/** @var GiftcardType[] */
	public $giftcardTypesList = array();
	public function __construct($list = array()) { $this->giftcardTypesList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_giftcardTypesList = new GiftcardTypesList($this->giftcardTypesList);
$tmp_giftcardTypesList->write($gen, 'giftcardTypesList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRelationGiftcardsResponse extends SoapObject {
	/** @var RelationGiftcard[] */
	public $relationGiftcardList = array();
	public function __construct($list = array()) { $this->relationGiftcardList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_relationGiftcardList = new RelationGiftcardList($this->relationGiftcardList);
$tmp_relationGiftcardList->write($gen, 'relationGiftcardList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetGiftcardResponse extends SoapObject {
	public ?GetGiftcard $giftcard = null;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->giftcard !== null) $this->giftcard->write($gen, 'giftcard');
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetGiftcardHistoryResponse extends SoapObject {
	/** @var GiftcardHistory[] */
	public $giftcardHistoryList = array();
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$tmp_giftcardHistoryList = new GiftcardHistoryList($this->giftcardHistoryList);
$tmp_giftcardHistoryList->write($gen, 'giftcardHistoryList');

		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetGiftcardsResponse extends SoapObject {
	/** @var GetGiftcard[] */
	public $giftcardList = array();
	public function __construct($list = array()) { $this->giftcardList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_giftcardList = new GiftcardList($this->giftcardList);
$tmp_giftcardList->write($gen, 'giftcardList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveGiftcardsResponse extends IdempotentResp {
	public string $result;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RestituteGiftcardsResponse extends IdempotentResp {
	public string $result;
	public ?string $errorMessage = null;
	public ?string $packingSlipId = null;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->packingSlipId !== null) $gen->out->writeElementNs(self::TNS, 'packingSlipId', null, $this->packingSlipId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class LinkGiftcardsToRelationResponse extends IdempotentResp {
	public string $result;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetVouchersResponse extends SoapObject {
	/** @var VoucherView[] */
	public $voucherViews = null;
	public function __construct($list = array()) { $this->voucherViews = $list; }
	public function writeProps(SoapGenerator $gen): void {
		if ($this->voucherViews !== null) {
$tmp_voucherViews = new VoucherViewList($this->voucherViews);
$tmp_voucherViews->write($gen, 'voucherViews');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetVoucherResponse extends SoapObject {
	public ?Voucher $voucher = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->voucher !== null) $this->voucher->write($gen, 'voucher');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetVoucherCategoriesResponse extends SoapObject {
	/** @var VoucherCategory[] */
	public $voucherCategories = null;
	public function __construct($list = array()) { $this->voucherCategories = $list; }
	public function writeProps(SoapGenerator $gen): void {
		if ($this->voucherCategories !== null) {
$tmp_voucherCategories = new VoucherCategoryList($this->voucherCategories);
$tmp_voucherCategories->write($gen, 'voucherCategories');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetVoucherIssuancesResponse extends SoapObject {
	/** @var VoucherIssuance[] */
	public $voucherIssuances = null;
	public function __construct($list = array()) { $this->voucherIssuances = $list; }
	public function writeProps(SoapGenerator $gen): void {
		if ($this->voucherIssuances !== null) {
$tmp_voucherIssuances = new VoucherIssuanceList($this->voucherIssuances);
$tmp_voucherIssuances->write($gen, 'voucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetVoucherSettingsResponse extends SoapObject {
	/** @var VoucherSettingsV1[] */
	public $voucherSettingsV1 = null;
	public function __construct($list = array()) { $this->voucherSettingsV1 = $list; }
	public function writeProps(SoapGenerator $gen): void {
		if ($this->voucherSettingsV1 !== null) {
$tmp_voucherSettingsV1 = new VoucherSettingsV1List($this->voucherSettingsV1);
$tmp_voucherSettingsV1->write($gen, 'voucherSettingsV1');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class IssueVouchersResponse extends IdempotentResp {
	public string $result;
	/** @var VoucherIssuance[] */
	public $voucherIssuances = null;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->voucherIssuances !== null) {
$tmp_voucherIssuances = new VoucherIssuanceList($this->voucherIssuances);
$tmp_voucherIssuances->write($gen, 'voucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class IssueVoucherExternalScanCodesResponse extends IdempotentResp {
	public string $result;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetVoucherExternalScanCodesResponse extends SoapObject {
	/** @var VoucherExternalScanCode[] */
	public $scanCodes = null;
	public function __construct($list = array()) { $this->scanCodes = $list; }
	public function writeProps(SoapGenerator $gen): void {
		if ($this->scanCodes !== null) {
$tmp_scanCodes = new VoucherExternalScanCodeList($this->scanCodes);
$tmp_scanCodes->write($gen, 'scanCodes');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetRedeemableVoucherIssuancesResponse extends SoapObject {
	/** @var RedeemableVoucherIssuance[] */
	public $redeemableVoucherIssuances = null;
	public function __construct($list = array()) { $this->redeemableVoucherIssuances = $list; }
	public function writeProps(SoapGenerator $gen): void {
		if ($this->redeemableVoucherIssuances !== null) {
$tmp_redeemableVoucherIssuances = new RedeemableVoucherIssuanceList($this->redeemableVoucherIssuances);
$tmp_redeemableVoucherIssuances->write($gen, 'redeemableVoucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RedeemVoucherIssuanceResponse extends SoapObject {
	/** @var VoucherIssuanceRedeem[] */
	public $voucherIssuanceRedeems = null;
	public ?VoucherCanApplyResult $voucherCanApplyResult = null;
	public string $result;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->voucherIssuanceRedeems !== null) {
$tmp_voucherIssuanceRedeems = new VoucherIssuanceRedeemList($this->voucherIssuanceRedeems);
$tmp_voucherIssuanceRedeems->write($gen, 'voucherIssuanceRedeems');
}
		if ($this->voucherCanApplyResult !== null) $this->voucherCanApplyResult->write($gen, 'voucherCanApplyResult');
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportDateFilter extends SoapObject {
	public \DateTime $fromFinancialDate;
	public \DateTime $throughFinancialDate;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDate('fromFinancialDate', $this->fromFinancialDate);
		$gen->writeDate('throughFinancialDate', $this->throughFinancialDate);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportBranchFilter extends SoapObject {
	/** @var int[] */
	public $branchNumbers = array();
	public function __construct($list = array()) { $this->branchNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportWorkplaceFilter extends SoapObject {
	/** @var int[] */
	public $workplaceNumbers = array();
	public function __construct($list = array()) { $this->workplaceNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->workplaceNumbers as $elem) $gen->writeInt('workplaceNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportEmployeeFilter extends SoapObject {
	/** @var int[] */
	public $employeeNumbers = array();
	public function __construct($list = array()) { $this->employeeNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->employeeNumbers as $elem) $gen->writeInt('employeeNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverGroupFilter extends SoapObject {
	/** @var int[] */
	public $turnoverGroups = array();
	public function __construct($list = array()) { $this->turnoverGroups = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->turnoverGroups as $elem) $gen->writeInt('turnoverGroups', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverGroupTypeFilter extends SoapObject {
	/** @var string[] */
	public $turnoverGroupTypes = array();
	public function __construct($list = array()) { $this->turnoverGroupTypes = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->turnoverGroupTypes as $elem) $gen->out->writeElementNs(self::TNS, 'turnoverGroupTypes', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportArticleFilter extends SoapObject {
	/** @var int[] */
	public $articleNumbers = array();
	public function __construct($list = array()) { $this->articleNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportActivityFilter extends SoapObject {
	/** @var string[] */
	public $activityNumbers = array();
	public function __construct($list = array()) { $this->activityNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->activityNumbers as $elem) $gen->out->writeElementNs(self::TNS, 'activityNumbers', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportRelationFilter extends SoapObject {
	/** @var int[] */
	public $relationNumbers = array();
	public function __construct($list = array()) { $this->relationNumbers = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->relationNumbers as $elem) $gen->writeInt('relationNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByBranchRequest extends SoapObject {
	public ReportDateFilter $dateFilter;
	/** @var int[] */
	public $branchFilter = null;
	public ?bool $perHour = null;
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public function __construct() {
		$this->dateFilter = new ReportDateFilter();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->dateFilter->write($gen, 'dateFilter');
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new ReportBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
		if ($this->perHour !== null) $gen->writeBool('perHour', $this->perHour);
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByBranch extends SoapObject {
	public \DateTime $financialDate;
	public ?\DateTime $dateTime = null;
	public BigDecimal $totalInclAmount;
	public BigDecimal $totalExclAmount;
	public string $count;
	public int $branchNumber;
	public string $branchName;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDate('financialDate', $this->financialDate);
		if ($this->dateTime !== null) $gen->writeDateTime('dateTime', $this->dateTime);
		$gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		$gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		$gen->out->writeElementNs(self::TNS, 'count', null, $this->count);
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->out->writeElementNs(self::TNS, 'branchName', null, $this->branchName);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByBranchList extends SoapObject {
	/** @var ReportTurnoverByBranch[] */
	public $turnover = array();
	public function __construct($list = array()) { $this->turnover = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->turnover as $elem) $elem->write($gen, 'turnover');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByEmployeeRequest extends SoapObject {
	public ReportDateFilter $dateFilter;
	/** @var int[] */
	public $branchFilter = null;
	/** @var int[] */
	public $employeeFilter = null;
	public ?bool $perHour = null;
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public function __construct() {
		$this->dateFilter = new ReportDateFilter();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->dateFilter->write($gen, 'dateFilter');
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new ReportBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
		if ($this->employeeFilter !== null) {
$tmp_employeeFilter = new ReportEmployeeFilter($this->employeeFilter);
$tmp_employeeFilter->write($gen, 'employeeFilter');
}
		if ($this->perHour !== null) $gen->writeBool('perHour', $this->perHour);
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByEmployee extends SoapObject {
	public \DateTime $financialDate;
	public ?\DateTime $dateTime = null;
	public BigDecimal $totalInclAmount;
	public BigDecimal $totalExclAmount;
	public string $count;
	public int $employeeNumber;
	public string $employeeUsername;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDate('financialDate', $this->financialDate);
		if ($this->dateTime !== null) $gen->writeDateTime('dateTime', $this->dateTime);
		$gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		$gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		$gen->out->writeElementNs(self::TNS, 'count', null, $this->count);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->out->writeElementNs(self::TNS, 'employeeUsername', null, $this->employeeUsername);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByEmployeeList extends SoapObject {
	/** @var ReportTurnoverByEmployee[] */
	public $turnover = array();
	public function __construct($list = array()) { $this->turnover = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->turnover as $elem) $elem->write($gen, 'turnover');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByActivityRequest extends SoapObject {
	public ReportDateFilter $dateFilter;
	/** @var int[] */
	public $branchFilter = null;
	/** @var string[] */
	public $activityFilter = null;
	public ?bool $perHour = null;
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public function __construct() {
		$this->dateFilter = new ReportDateFilter();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->dateFilter->write($gen, 'dateFilter');
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new ReportBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
		if ($this->activityFilter !== null) {
$tmp_activityFilter = new ReportActivityFilter($this->activityFilter);
$tmp_activityFilter->write($gen, 'activityFilter');
}
		if ($this->perHour !== null) $gen->writeBool('perHour', $this->perHour);
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByActivity extends SoapObject {
	public \DateTime $financialDate;
	public ?\DateTime $dateTime = null;
	public BigDecimal $totalInclAmount;
	public BigDecimal $totalExclAmount;
	public string $count;
	public string $activityNumber;
	public string $activityDescription;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDate('financialDate', $this->financialDate);
		if ($this->dateTime !== null) $gen->writeDateTime('dateTime', $this->dateTime);
		$gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		$gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		$gen->out->writeElementNs(self::TNS, 'count', null, $this->count);
		$gen->out->writeElementNs(self::TNS, 'activityNumber', null, $this->activityNumber);
		$gen->out->writeElementNs(self::TNS, 'activityDescription', null, $this->activityDescription);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByActivityList extends SoapObject {
	/** @var ReportTurnoverByActivity[] */
	public $turnover = array();
	public function __construct($list = array()) { $this->turnover = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->turnover as $elem) $elem->write($gen, 'turnover');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByTurnoverGroupRequest extends SoapObject {
	public ReportDateFilter $dateFilter;
	/** @var int[] */
	public $branchFilter = null;
	/** @var int[] */
	public $turnoverGroupFilter = null;
	public ?bool $perHour = null;
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public function __construct() {
		$this->dateFilter = new ReportDateFilter();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->dateFilter->write($gen, 'dateFilter');
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new ReportBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
		if ($this->turnoverGroupFilter !== null) {
$tmp_turnoverGroupFilter = new ReportTurnoverGroupFilter($this->turnoverGroupFilter);
$tmp_turnoverGroupFilter->write($gen, 'turnoverGroupFilter');
}
		if ($this->perHour !== null) $gen->writeBool('perHour', $this->perHour);
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByTurnoverGroup extends SoapObject {
	public \DateTime $financialDate;
	public ?\DateTime $dateTime = null;
	public BigDecimal $totalInclAmount;
	public BigDecimal $totalExclAmount;
	public string $count;
	public int $turnoverGroupNumber;
	public string $turnoverGroupName;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDate('financialDate', $this->financialDate);
		if ($this->dateTime !== null) $gen->writeDateTime('dateTime', $this->dateTime);
		$gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		$gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		$gen->out->writeElementNs(self::TNS, 'count', null, $this->count);
		$gen->writeInt('turnoverGroupNumber', $this->turnoverGroupNumber);
		$gen->out->writeElementNs(self::TNS, 'turnoverGroupName', null, $this->turnoverGroupName);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByTurnoverGroupList extends SoapObject {
	/** @var ReportTurnoverByTurnoverGroup[] */
	public $turnover = array();
	public function __construct($list = array()) { $this->turnover = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->turnover as $elem) $elem->write($gen, 'turnover');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByArticleRequest extends SoapObject {
	public ReportDateFilter $dateFilter;
	/** @var int[] */
	public $branchFilter = null;
	/** @var int[] */
	public $turnoverGroupFilter = null;
	/** @var int[] */
	public $articleFilter = null;
	public ?bool $perHour = null;
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public function __construct() {
		$this->dateFilter = new ReportDateFilter();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->dateFilter->write($gen, 'dateFilter');
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new ReportBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
		if ($this->turnoverGroupFilter !== null) {
$tmp_turnoverGroupFilter = new ReportTurnoverGroupFilter($this->turnoverGroupFilter);
$tmp_turnoverGroupFilter->write($gen, 'turnoverGroupFilter');
}
		if ($this->articleFilter !== null) {
$tmp_articleFilter = new ReportArticleFilter($this->articleFilter);
$tmp_articleFilter->write($gen, 'articleFilter');
}
		if ($this->perHour !== null) $gen->writeBool('perHour', $this->perHour);
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByArticle extends SoapObject {
	public \DateTime $financialDate;
	public ?\DateTime $dateTime = null;
	public BigDecimal $totalInclAmount;
	public BigDecimal $totalExclAmount;
	public string $count;
	public int $articleNumber;
	public string $bpeCount;
	public string $articleDescription;
	public BigDecimal $articlePurchasePrice;
	public int $turnoverGroupNumber;
	public string $turnoverGroupName;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDate('financialDate', $this->financialDate);
		if ($this->dateTime !== null) $gen->writeDateTime('dateTime', $this->dateTime);
		$gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		$gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		$gen->out->writeElementNs(self::TNS, 'count', null, $this->count);
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->out->writeElementNs(self::TNS, 'bpeCount', null, $this->bpeCount);
		$gen->out->writeElementNs(self::TNS, 'articleDescription', null, $this->articleDescription);
		$gen->writeValueAndScale('articlePurchasePrice', '', $this->articlePurchasePrice, 2);
		$gen->writeInt('turnoverGroupNumber', $this->turnoverGroupNumber);
		$gen->out->writeElementNs(self::TNS, 'turnoverGroupName', null, $this->turnoverGroupName);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByArticleList extends SoapObject {
	/** @var ReportTurnoverByArticle[] */
	public $turnover = array();
	public function __construct($list = array()) { $this->turnover = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->turnover as $elem) $elem->write($gen, 'turnover');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportHoursByEmployeeRequest extends SoapObject {
	public ReportDateFilter $dateFilter;
	/** @var int[] */
	public $branchFilter = null;
	/** @var int[] */
	public $employeeFilter = null;
	public function __construct() {
		$this->dateFilter = new ReportDateFilter();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->dateFilter->write($gen, 'dateFilter');
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new ReportBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
		if ($this->employeeFilter !== null) {
$tmp_employeeFilter = new ReportEmployeeFilter($this->employeeFilter);
$tmp_employeeFilter->write($gen, 'employeeFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportHoursByEmployee extends SoapObject {
	public \DateTime $financialDate;
	public int $totalMinutes;
	public int $pauzeMinutes;
	public ?BigDecimal $hourlyRate = null;
	public int $employeeNumber;
	/** @var int[] */
	public $branchNumbers = array();
	/** @var string[] */
	public $references = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDate('financialDate', $this->financialDate);
		$gen->writeInt('totalMinutes', $this->totalMinutes);
		$gen->writeInt('pauzeMinutes', $this->pauzeMinutes);
		if ($this->hourlyRate !== null) $gen->writeValueAndScale('hourlyRate', '', $this->hourlyRate, 2);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		foreach ($this->references as $elem) $gen->out->writeElementNs(self::TNS, 'references', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportHoursByEmployeeList extends SoapObject {
	/** @var ReportHoursByEmployee[] */
	public $hours = array();
	public function __construct($list = array()) { $this->hours = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->hours as $elem) $elem->write($gen, 'hours');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportPaymentMethodsRequest extends SoapObject {
	public ReportDateFilter $dateFilter;
	/** @var int[] */
	public $branchFilter = null;
	public ?bool $perHour = null;
	public ?bool $excludePayments = null;
	public ?bool $excludePrepayments = null;
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public function __construct() {
		$this->dateFilter = new ReportDateFilter();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->dateFilter->write($gen, 'dateFilter');
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new ReportBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
		if ($this->perHour !== null) $gen->writeBool('perHour', $this->perHour);
		if ($this->excludePayments !== null) $gen->writeBool('excludePayments', $this->excludePayments);
		if ($this->excludePrepayments !== null) $gen->writeBool('excludePrepayments', $this->excludePrepayments);
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportPaymentMethods extends SoapObject {
	public \DateTime $financialDate;
	public ?\DateTime $dateTime = null;
	public BigDecimal $totalAmount;
	public string $count;
	public string $paymentMethod;
	public ?bool $isPrepayment = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDate('financialDate', $this->financialDate);
		if ($this->dateTime !== null) $gen->writeDateTime('dateTime', $this->dateTime);
		$gen->writeValueAndScale('totalAmount', '', $this->totalAmount, 2);
		$gen->out->writeElementNs(self::TNS, 'count', null, $this->count);
		$gen->out->writeElementNs(self::TNS, 'paymentMethod', null, $this->paymentMethod);
		if ($this->isPrepayment !== null) $gen->writeBool('isPrepayment', $this->isPrepayment);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportPaymentMethodsList extends SoapObject {
	/** @var ReportPaymentMethods[] */
	public $paymentMethods = array();
	public function __construct($list = array()) { $this->paymentMethods = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->paymentMethods as $elem) $elem->write($gen, 'paymentMethods');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTablesRequest extends SoapObject {
	/** @var int[] */
	public $branchFilter = null;
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new ReportBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTables extends SoapObject {
	public int $branchNumber;
	public int $tableNumber;
	public int $tableSubNumber;
	public string $relationName;
	public string $tableName;
	public BigDecimal $openInclAmount;
	public BigDecimal $totalInclAmount;
	public BigDecimal $totalExclAmount;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('tableNumber', $this->tableNumber);
		$gen->writeInt('tableSubNumber', $this->tableSubNumber);
		$gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
		$gen->out->writeElementNs(self::TNS, 'tableName', null, $this->tableName);
		$gen->writeValueAndScale('openInclAmount', '', $this->openInclAmount, 2);
		$gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		$gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTablesList extends SoapObject {
	/** @var ReportTables[] */
	public $tables = array();
	public function __construct($list = array()) { $this->tables = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->tables as $elem) $elem->write($gen, 'tables');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportCancellationsRequest extends SoapObject {
	public ReportDateFilter $dateFilter;
	/** @var int[] */
	public $branchFilter = null;
	/** @var int[] */
	public $employeeFilter = null;
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public function __construct() {
		$this->dateFilter = new ReportDateFilter();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->dateFilter->write($gen, 'dateFilter');
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new ReportBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
		if ($this->employeeFilter !== null) {
$tmp_employeeFilter = new ReportEmployeeFilter($this->employeeFilter);
$tmp_employeeFilter->write($gen, 'employeeFilter');
}
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportCancellations extends SoapObject {
	public \DateTime $financialDate;
	public BigDecimal $totalInclAmount;
	public BigDecimal $totalExclAmount;
	public int $cancellationCount;
	public string $articleCount;
	public int $branchNumber;
	public string $branchName;
	public int $employeeNumber;
	public string $employeeUsername;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDate('financialDate', $this->financialDate);
		$gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		$gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		$gen->writeInt('cancellationCount', $this->cancellationCount);
		$gen->out->writeElementNs(self::TNS, 'articleCount', null, $this->articleCount);
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->out->writeElementNs(self::TNS, 'branchName', null, $this->branchName);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->out->writeElementNs(self::TNS, 'employeeUsername', null, $this->employeeUsername);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportCancellationsList extends SoapObject {
	/** @var ReportCancellations[] */
	public $cancellations = array();
	public function __construct($list = array()) { $this->cancellations = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->cancellations as $elem) $elem->write($gen, 'cancellations');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportBPERequest extends SoapObject {
	public ReportDateFilter $dateFilter;
	/** @var int[] */
	public $branchFilter = null;
	/** @var int[] */
	public $articleFilter = null;
	/** @var int[] */
	public $turnoverGroupFilter = null;
	public ?bool $perHour = null;
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public function __construct() {
		$this->dateFilter = new ReportDateFilter();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->dateFilter->write($gen, 'dateFilter');
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new ReportBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
		if ($this->articleFilter !== null) {
$tmp_articleFilter = new ReportArticleFilter($this->articleFilter);
$tmp_articleFilter->write($gen, 'articleFilter');
}
		if ($this->turnoverGroupFilter !== null) {
$tmp_turnoverGroupFilter = new ReportTurnoverGroupFilter($this->turnoverGroupFilter);
$tmp_turnoverGroupFilter->write($gen, 'turnoverGroupFilter');
}
		if ($this->perHour !== null) $gen->writeBool('perHour', $this->perHour);
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportBPE extends SoapObject {
	public \DateTime $financialDate;
	public ?\DateTime $dateTime = null;
	public string $bpeType;
	public string $bpeCount;
	public int $articleNumber;
	public string $articleDescription;
	public BigDecimal $articlePurchasePrice;
	public BigDecimal $totalPurchasePrice;
	public BigDecimal $totalExclAmount;
	public BigDecimal $totalInclAmount;
	public int $taxPercentage;
	public int $branchNumber;
	public string $branchName;
	public int $employeeNumber;
	public string $employeeUsername;
	public int $turnoverGroupNumber;
	public string $turnoverGroupName;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDate('financialDate', $this->financialDate);
		if ($this->dateTime !== null) $gen->writeDateTime('dateTime', $this->dateTime);
		$gen->out->writeElementNs(self::TNS, 'bpeType', null, $this->bpeType);
		$gen->out->writeElementNs(self::TNS, 'bpeCount', null, $this->bpeCount);
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->out->writeElementNs(self::TNS, 'articleDescription', null, $this->articleDescription);
		$gen->writeValueAndScale('articlePurchasePrice', '', $this->articlePurchasePrice, 2);
		$gen->writeValueAndScale('totalPurchasePrice', '', $this->totalPurchasePrice, 2);
		$gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		$gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		$gen->writeInt('taxPercentage', $this->taxPercentage);
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->out->writeElementNs(self::TNS, 'branchName', null, $this->branchName);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->out->writeElementNs(self::TNS, 'employeeUsername', null, $this->employeeUsername);
		$gen->writeInt('turnoverGroupNumber', $this->turnoverGroupNumber);
		$gen->out->writeElementNs(self::TNS, 'turnoverGroupName', null, $this->turnoverGroupName);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportBPEList extends SoapObject {
	/** @var ReportBPE[] */
	public $bpes = array();
	public function __construct($list = array()) { $this->bpes = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->bpes as $elem) $elem->write($gen, 'bpes');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportBranchPerformanceRequest extends SoapObject {
	public ReportDateFilter $dateFilter;
	/** @var int[] */
	public $branchFilter = null;
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public function __construct() {
		$this->dateFilter = new ReportDateFilter();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->dateFilter->write($gen, 'dateFilter');
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new ReportBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportBranchPerformance extends SoapObject {
	public int $branchNumber;
	public string $branchName;
	public string $count;
	public BigDecimal $totalPurchasePrice;
	public BigDecimal $totalExclAmount;
	public BigDecimal $totalInclAmount;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->out->writeElementNs(self::TNS, 'branchName', null, $this->branchName);
		$gen->out->writeElementNs(self::TNS, 'count', null, $this->count);
		$gen->writeValueAndScale('totalPurchasePrice', '', $this->totalPurchasePrice, 2);
		$gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		$gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportBranchPerformanceList extends SoapObject {
	/** @var ReportBranchPerformance[] */
	public $branchPerformance = array();
	public function __construct($list = array()) { $this->branchPerformance = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->branchPerformance as $elem) $elem->write($gen, 'branchPerformance');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportAverageSpendingRequest extends SoapObject {
	public ReportDateFilter $dateFilter;
	/** @var int[] */
	public $branchFilter = null;
	/** @var int[] */
	public $employeeFilter = null;
	public string $source;
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public function __construct() {
		$this->dateFilter = new ReportDateFilter();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->dateFilter->write($gen, 'dateFilter');
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new ReportBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
		if ($this->employeeFilter !== null) {
$tmp_employeeFilter = new ReportEmployeeFilter($this->employeeFilter);
$tmp_employeeFilter->write($gen, 'employeeFilter');
}
		$gen->out->writeElementNs(self::TNS, 'source', null, $this->source);
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportAverageSpending extends SoapObject {
	public BigDecimal $totalInclAmount;
	public BigDecimal $totalExclAmount;
	public int $numberOfReceipts;
	public int $numberOfGuests;
	public int $averageInclSpendingPerReceipt;
	public int $averageExclSpendingPerReceipt;
	public int $averageInclSpendingPerGuest;
	public int $averageExclSpendingPerGuest;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		$gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		$gen->writeInt('numberOfReceipts', $this->numberOfReceipts);
		$gen->writeInt('numberOfGuests', $this->numberOfGuests);
		$gen->writeInt('averageInclSpendingPerReceipt', $this->averageInclSpendingPerReceipt);
		$gen->writeInt('averageExclSpendingPerReceipt', $this->averageExclSpendingPerReceipt);
		$gen->writeInt('averageInclSpendingPerGuest', $this->averageInclSpendingPerGuest);
		$gen->writeInt('averageExclSpendingPerGuest', $this->averageExclSpendingPerGuest);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportAverageSpendingList extends SoapObject {
	/** @var ReportAverageSpending[] */
	public $averageSpending = array();
	public function __construct($list = array()) { $this->averageSpending = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->averageSpending as $elem) $elem->write($gen, 'averageSpending');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverRequest extends SoapObject {
	public ReportDateFilter $dateFilter;
	/** @var int[] */
	public $branchFilter = null;
	/** @var int[] */
	public $turnoverGroupFilter = null;
	public ?bool $perHour = null;
	/** @var string[] */
	public $turnoverGroupTypeFilter = null;
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public function __construct() {
		$this->dateFilter = new ReportDateFilter();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->dateFilter->write($gen, 'dateFilter');
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new ReportBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
		if ($this->turnoverGroupFilter !== null) {
$tmp_turnoverGroupFilter = new ReportTurnoverGroupFilter($this->turnoverGroupFilter);
$tmp_turnoverGroupFilter->write($gen, 'turnoverGroupFilter');
}
		if ($this->perHour !== null) $gen->writeBool('perHour', $this->perHour);
		if ($this->turnoverGroupTypeFilter !== null) {
$tmp_turnoverGroupTypeFilter = new ReportTurnoverGroupTypeFilter($this->turnoverGroupTypeFilter);
$tmp_turnoverGroupTypeFilter->write($gen, 'turnoverGroupTypeFilter');
}
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnover extends SoapObject {
	public \DateTime $financialDate;
	public ?\DateTime $dateTime = null;
	public string $source;
	public string $count;
	public BigDecimal $totalInclAmount;
	public BigDecimal $totalExclAmount;
	public BigDecimal $creditedInclAmount;
	public BigDecimal $creditedExclAmount;
	public string $creditedCount;
	public ?string $turnoverGroupType = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeDate('financialDate', $this->financialDate);
		if ($this->dateTime !== null) $gen->writeDateTime('dateTime', $this->dateTime);
		$gen->out->writeElementNs(self::TNS, 'source', null, $this->source);
		$gen->out->writeElementNs(self::TNS, 'count', null, $this->count);
		$gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		$gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		$gen->writeValueAndScale('creditedInclAmount', '', $this->creditedInclAmount, 2);
		$gen->writeValueAndScale('creditedExclAmount', '', $this->creditedExclAmount, 2);
		$gen->out->writeElementNs(self::TNS, 'creditedCount', null, $this->creditedCount);
		if ($this->turnoverGroupType !== null) $gen->out->writeElementNs(self::TNS, 'turnoverGroupType', null, $this->turnoverGroupType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverList extends SoapObject {
	/** @var ReportTurnover[] */
	public $turnover = array();
	public function __construct($list = array()) { $this->turnover = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->turnover as $elem) $elem->write($gen, 'turnover');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportPaymentMethodDetailsRequest extends SoapObject {
	public ReportDateFilter $dateFilter;
	public string $paymentMethod;
	/** @var int[] */
	public $branchFilter = null;
	public function __construct() {
		$this->dateFilter = new ReportDateFilter();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->dateFilter->write($gen, 'dateFilter');
		$gen->out->writeElementNs(self::TNS, 'paymentMethod', null, $this->paymentMethod);
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new ReportBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportPaymentSourceDetails extends SoapObject {
	public string $id;
	public string $paymentSourceType;
	public \DateTime $financialDate;
	public \DateTime $entryTimestamp;
	public BigDecimal $totalInclAmount;
	public BigDecimal $totalExclAmount;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'paymentSourceType', null, $this->paymentSourceType);
		$gen->writeDate('financialDate', $this->financialDate);
		$gen->writeDateTime('entryTimestamp', $this->entryTimestamp);
		$gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		$gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportPaymentSource extends SoapObject {
	public Payment $payment;
	public ReportPaymentSourceDetails $paymentSourceDetails;
	public function __construct() {
		$this->payment = new Payment();
		$this->paymentSourceDetails = new ReportPaymentSourceDetails();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->payment->write($gen, 'payment');
		$this->paymentSourceDetails->write($gen, 'paymentSourceDetails');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportPrintableFinancialTotalsRequest extends SoapObject {
	public ReportDateFilter $dateFilter;
	/** @var int[] */
	public $branchFilter = null;
	/** @var int[] */
	public $workplaceFilter = null;
	/** @var int[] */
	public $employeeFilter = null;
	/** @var string[] */
	public $activityFilter = null;
	/** @var string[] */
	public $options = array();
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public function __construct() {
		$this->dateFilter = new ReportDateFilter();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->dateFilter->write($gen, 'dateFilter');
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new ReportBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
		if ($this->workplaceFilter !== null) {
$tmp_workplaceFilter = new ReportWorkplaceFilter($this->workplaceFilter);
$tmp_workplaceFilter->write($gen, 'workplaceFilter');
}
		if ($this->employeeFilter !== null) {
$tmp_employeeFilter = new ReportEmployeeFilter($this->employeeFilter);
$tmp_employeeFilter->write($gen, 'employeeFilter');
}
		if ($this->activityFilter !== null) {
$tmp_activityFilter = new ReportActivityFilter($this->activityFilter);
$tmp_activityFilter->write($gen, 'activityFilter');
}
		foreach ($this->options as $elem) $gen->out->writeElementNs(self::TNS, 'options', null, $elem);
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportPrintableFinancialTotalsLine extends SoapObject {
	public bool $isHeader;
	public bool $isDivider;
	public bool $printBold;
	public string $column1;
	public string $column2;
	public string $column3;
	public string $column4;
	public string $column5;
	public string $column6;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeBool('isHeader', $this->isHeader);
		$gen->writeBool('isDivider', $this->isDivider);
		$gen->writeBool('printBold', $this->printBold);
		$gen->out->writeElementNs(self::TNS, 'column1', null, $this->column1);
		$gen->out->writeElementNs(self::TNS, 'column2', null, $this->column2);
		$gen->out->writeElementNs(self::TNS, 'column3', null, $this->column3);
		$gen->out->writeElementNs(self::TNS, 'column4', null, $this->column4);
		$gen->out->writeElementNs(self::TNS, 'column5', null, $this->column5);
		$gen->out->writeElementNs(self::TNS, 'column6', null, $this->column6);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportPrintableFinancialTotalsList extends SoapObject {
	/** @var ReportPrintableFinancialTotalsLine[] */
	public $printableFinancialTotals = array();
	public function __construct($list = array()) { $this->printableFinancialTotals = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->printableFinancialTotals as $elem) $elem->write($gen, 'printableFinancialTotals');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportArticlePerformanceRequest extends SoapObject {
	public ReportDateFilter $dateFilter;
	/** @var int[] */
	public $branchFilter = null;
	/** @var int[] */
	public $workplaceFilter = null;
	/** @var int[] */
	public $employeeFilter = null;
	/** @var int[] */
	public $relationFilter = null;
	/** @var int[] */
	public $articleFilter = null;
	/** @var string[] */
	public $activityFilter = null;
	/** @var string[] */
	public $turnoverGroupTypeFilter = null;
	public bool $separateSubArticles;
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public function __construct() {
		$this->dateFilter = new ReportDateFilter();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->dateFilter->write($gen, 'dateFilter');
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new ReportBranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
		if ($this->workplaceFilter !== null) {
$tmp_workplaceFilter = new ReportWorkplaceFilter($this->workplaceFilter);
$tmp_workplaceFilter->write($gen, 'workplaceFilter');
}
		if ($this->employeeFilter !== null) {
$tmp_employeeFilter = new ReportEmployeeFilter($this->employeeFilter);
$tmp_employeeFilter->write($gen, 'employeeFilter');
}
		if ($this->relationFilter !== null) {
$tmp_relationFilter = new ReportRelationFilter($this->relationFilter);
$tmp_relationFilter->write($gen, 'relationFilter');
}
		if ($this->articleFilter !== null) {
$tmp_articleFilter = new ReportArticleFilter($this->articleFilter);
$tmp_articleFilter->write($gen, 'articleFilter');
}
		if ($this->activityFilter !== null) {
$tmp_activityFilter = new ReportActivityFilter($this->activityFilter);
$tmp_activityFilter->write($gen, 'activityFilter');
}
		if ($this->turnoverGroupTypeFilter !== null) {
$tmp_turnoverGroupTypeFilter = new ReportTurnoverGroupTypeFilter($this->turnoverGroupTypeFilter);
$tmp_turnoverGroupTypeFilter->write($gen, 'turnoverGroupTypeFilter');
}
		$gen->writeBool('separateSubArticles', $this->separateSubArticles);
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportArticlePerformanceBranch extends SoapObject {
	public int $branchNumber;
	public string $branchName;
	public BigDecimal $count;
	public BigDecimal $bpeCount;
	public ?BigDecimal $profit = null;
	public ?BigDecimal $margin = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->out->writeElementNs(self::TNS, 'branchName', null, $this->branchName);
		$gen->writeBigDecimal('count', $this->count);
		$gen->writeBigDecimal('bpeCount', $this->bpeCount);
		if ($this->profit !== null) $gen->writeBigDecimal('profit', $this->profit);
		if ($this->margin !== null) $gen->writeBigDecimal('margin', $this->margin);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportArticlePerformanceBranchList extends SoapObject {
	/** @var ReportArticlePerformanceBranch[] */
	public $branch = array();
	public function __construct($list = array()) { $this->branch = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->branch as $elem) $elem->write($gen, 'branch');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportArticlePerformance extends SoapObject {
	public int $articleNumber;
	public BigDecimal $vatPercentage;
	public BigDecimal $averagePurchasePrice;
	public BigDecimal $contentQuantity;
	public string $articleDescription;
	public BigDecimal $count;
	public BigDecimal $bpeCount;
	public BigDecimal $averagePrice;
	public BigDecimal $totalInclAmount;
	public BigDecimal $totalExclAmount;
	public BigDecimal $totalPurchasePrice;
	public BigDecimal $bpeTotalPurchasePrice;
	public ?BigDecimal $profit = null;
	public ?BigDecimal $margin = null;
	public ?BigDecimal $packingSlipCount = null;
	public ?BigDecimal $packingSlipTotalInclAmount = null;
	/** @var ReportArticlePerformanceBranch[] */
	public $branchList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeBigDecimal('vatPercentage', $this->vatPercentage);
		$gen->writeBigDecimal('averagePurchasePrice', $this->averagePurchasePrice);
		$gen->writeBigDecimal('contentQuantity', $this->contentQuantity);
		$gen->out->writeElementNs(self::TNS, 'articleDescription', null, $this->articleDescription);
		$gen->writeBigDecimal('count', $this->count);
		$gen->writeBigDecimal('bpeCount', $this->bpeCount);
		$gen->writeBigDecimal('averagePrice', $this->averagePrice);
		$gen->writeBigDecimal('totalInclAmount', $this->totalInclAmount);
		$gen->writeBigDecimal('totalExclAmount', $this->totalExclAmount);
		$gen->writeBigDecimal('totalPurchasePrice', $this->totalPurchasePrice);
		$gen->writeBigDecimal('bpeTotalPurchasePrice', $this->bpeTotalPurchasePrice);
		if ($this->profit !== null) $gen->writeBigDecimal('profit', $this->profit);
		if ($this->margin !== null) $gen->writeBigDecimal('margin', $this->margin);
		if ($this->packingSlipCount !== null) $gen->writeBigDecimal('packingSlipCount', $this->packingSlipCount);
		if ($this->packingSlipTotalInclAmount !== null) $gen->writeBigDecimal('packingSlipTotalInclAmount', $this->packingSlipTotalInclAmount);
		$tmp_branchList = new ReportArticlePerformanceBranchList($this->branchList);
$tmp_branchList->write($gen, 'branchList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportArticlePerformanceList extends SoapObject {
	/** @var ReportArticlePerformance[] */
	public $articlePerformance = array();
	public function __construct($list = array()) { $this->articlePerformance = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->articlePerformance as $elem) $elem->write($gen, 'articlePerformance');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByBranchResponse extends SoapObject {
	/** @var ReportTurnoverByBranch[] */
	public $turnoverList = array();
	public function __construct($list = array()) { $this->turnoverList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_turnoverList = new ReportTurnoverByBranchList($this->turnoverList);
$tmp_turnoverList->write($gen, 'turnoverList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByEmployeeResponse extends SoapObject {
	/** @var ReportTurnoverByEmployee[] */
	public $turnoverList = array();
	public function __construct($list = array()) { $this->turnoverList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_turnoverList = new ReportTurnoverByEmployeeList($this->turnoverList);
$tmp_turnoverList->write($gen, 'turnoverList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByActivityResponse extends SoapObject {
	/** @var ReportTurnoverByActivity[] */
	public $turnoverList = array();
	public function __construct($list = array()) { $this->turnoverList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_turnoverList = new ReportTurnoverByActivityList($this->turnoverList);
$tmp_turnoverList->write($gen, 'turnoverList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByTurnoverGroupResponse extends SoapObject {
	/** @var ReportTurnoverByTurnoverGroup[] */
	public $turnoverList = array();
	public function __construct($list = array()) { $this->turnoverList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_turnoverList = new ReportTurnoverByTurnoverGroupList($this->turnoverList);
$tmp_turnoverList->write($gen, 'turnoverList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverByArticleResponse extends SoapObject {
	/** @var ReportTurnoverByArticle[] */
	public $turnoverList = array();
	public function __construct($list = array()) { $this->turnoverList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_turnoverList = new ReportTurnoverByArticleList($this->turnoverList);
$tmp_turnoverList->write($gen, 'turnoverList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportHoursByEmployeeResponse extends SoapObject {
	/** @var ReportHoursByEmployee[] */
	public $hoursList = array();
	public function __construct($list = array()) { $this->hoursList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_hoursList = new ReportHoursByEmployeeList($this->hoursList);
$tmp_hoursList->write($gen, 'hoursList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportPaymentMethodsResponse extends SoapObject {
	/** @var ReportPaymentMethods[] */
	public $paymentMethodsList = array();
	public function __construct($list = array()) { $this->paymentMethodsList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_paymentMethodsList = new ReportPaymentMethodsList($this->paymentMethodsList);
$tmp_paymentMethodsList->write($gen, 'paymentMethodsList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTablesResponse extends SoapObject {
	/** @var ReportTables[] */
	public $tablesList = array();
	public function __construct($list = array()) { $this->tablesList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_tablesList = new ReportTablesList($this->tablesList);
$tmp_tablesList->write($gen, 'tablesList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportCancellationsResponse extends SoapObject {
	/** @var ReportCancellations[] */
	public $cancellationsList = array();
	public function __construct($list = array()) { $this->cancellationsList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_cancellationsList = new ReportCancellationsList($this->cancellationsList);
$tmp_cancellationsList->write($gen, 'cancellationsList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportBPEResponse extends SoapObject {
	/** @var ReportBPE[] */
	public $bpeList = array();
	public function __construct($list = array()) { $this->bpeList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_bpeList = new ReportBPEList($this->bpeList);
$tmp_bpeList->write($gen, 'bpeList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportBranchPerformanceResponse extends SoapObject {
	/** @var ReportBranchPerformance[] */
	public $branchPerformanceList = array();
	public function __construct($list = array()) { $this->branchPerformanceList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_branchPerformanceList = new ReportBranchPerformanceList($this->branchPerformanceList);
$tmp_branchPerformanceList->write($gen, 'branchPerformanceList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportAverageSpendingResponse extends SoapObject {
	/** @var ReportAverageSpending[] */
	public $averageSpendingList = array();
	public function __construct($list = array()) { $this->averageSpendingList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_averageSpendingList = new ReportAverageSpendingList($this->averageSpendingList);
$tmp_averageSpendingList->write($gen, 'averageSpendingList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportTurnoverResponse extends SoapObject {
	/** @var ReportTurnover[] */
	public $turnoverList = array();
	public function __construct($list = array()) { $this->turnoverList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_turnoverList = new ReportTurnoverList($this->turnoverList);
$tmp_turnoverList->write($gen, 'turnoverList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportPaymentMethodDetailsResponse extends SoapObject {
	/** @var ReportPaymentSource[] */
	public $paymentSourceList = array();
	public function __construct($list = array()) { $this->paymentSourceList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->paymentSourceList as $elem) $elem->write($gen, 'paymentSourceList');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportPrintableFinancialTotalsResponse extends SoapObject {
	/** @var ReportPrintableFinancialTotalsLine[] */
	public $printableFinancialTotalsList = array();
	public function __construct($list = array()) { $this->printableFinancialTotalsList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_printableFinancialTotalsList = new ReportPrintableFinancialTotalsList($this->printableFinancialTotalsList);
$tmp_printableFinancialTotalsList->write($gen, 'printableFinancialTotalsList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReportArticlePerformanceResponse extends SoapObject {
	/** @var ReportArticlePerformance[] */
	public $articlePerformanceList = array();
	public function __construct($list = array()) { $this->articlePerformanceList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_articlePerformanceList = new ReportArticlePerformanceList($this->articlePerformanceList);
$tmp_articlePerformanceList->write($gen, 'articlePerformanceList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetSalesRepeatTemplatesRequest extends SoapObject {
	public ?RequestDateFilter $dateFilter = null;
	/** @var int[] */
	public $relationFilter = null;
	public ?RequestSyncMarkerFilter $syncMarkerFilter = null;
	/** @var string[] */
	public $contractFrequencyFilter = array();
	/** @var string[] */
	public $salesRepeatTemplateTypeFilter = null;
	public ?RequestSalesRepeatTemplateIdsFilter $salesRepeatTemplateIdsFilter = null;
	/** @var int[] */
	public $branchNumbers = array();
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public ?bool $includeLineList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->dateFilter !== null) $this->dateFilter->write($gen, 'dateFilter');
		if ($this->relationFilter !== null) {
$tmp_relationFilter = new RequestRelationFilter($this->relationFilter);
$tmp_relationFilter->write($gen, 'relationFilter');
}
		if ($this->syncMarkerFilter !== null) $this->syncMarkerFilter->write($gen, 'syncMarkerFilter');
		$tmp_contractFrequencyFilter = new ContractFrequencyList($this->contractFrequencyFilter);
$tmp_contractFrequencyFilter->write($gen, 'contractFrequencyFilter');

		if ($this->salesRepeatTemplateTypeFilter !== null) {
$tmp_salesRepeatTemplateTypeFilter = new RequestSalesRepeatTemplateTypeFilter($this->salesRepeatTemplateTypeFilter);
$tmp_salesRepeatTemplateTypeFilter->write($gen, 'salesRepeatTemplateTypeFilter');
}
		if ($this->salesRepeatTemplateIdsFilter !== null) $this->salesRepeatTemplateIdsFilter->write($gen, 'salesRepeatTemplateIdsFilter');
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
		if ($this->includeLineList !== null) $gen->writeBool('includeLineList', $this->includeLineList);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalesRepeatTemplateLine extends SoapObject {
	public string $salesRepeatTemplateLineId;
	public string $text;
	public ?int $articleNumber = null;
	public ?BigDecimal $quantity = null;
	public ?BigDecimal $priceIncl = null;
	public ?BigDecimal $priceExcl = null;
	public ?int $vatCode = null;
	public ?BigDecimal $vatPercentage = null;
	public ?int $turnoverGroup = null;
	public ?BigDecimal $discountPercentage = null;
	public ?BigDecimal $totalInclAmount = null;
	public ?BigDecimal $totalExclAmount = null;
	public ?SalePromotionLineData $salePromotionData = null;
	/** @var SalesRepeatTemplateLine[] */
	public $componentList = null;
	/** @var SalesRepeatTemplateLine[] */
	public $preparationList = null;
	public ?string $sourceSalesTurnoverLineId = null;
	public ?\DateTime $startDate = null;
	public ?BigDecimal $discountAmountIncl = null;
	public ?BigDecimal $discountAmountExcl = null;
	public ?string $discountType = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'salesRepeatTemplateLineId', null, $this->salesRepeatTemplateLineId);
		$gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->quantity !== null) $gen->writeBigDecimal('quantity', $this->quantity);
		if ($this->priceIncl !== null) $gen->writeBigDecimal('priceIncl', $this->priceIncl);
		if ($this->priceExcl !== null) $gen->writeBigDecimal('priceExcl', $this->priceExcl);
		if ($this->vatCode !== null) $gen->writeInt('vatCode', $this->vatCode);
		if ($this->vatPercentage !== null) $gen->writeBigDecimal('vatPercentage', $this->vatPercentage);
		if ($this->turnoverGroup !== null) $gen->writeInt('turnoverGroup', $this->turnoverGroup);
		if ($this->discountPercentage !== null) $gen->writeBigDecimal('discountPercentage', $this->discountPercentage);
		if ($this->totalInclAmount !== null) $gen->writeBigDecimal('totalInclAmount', $this->totalInclAmount);
		if ($this->totalExclAmount !== null) $gen->writeBigDecimal('totalExclAmount', $this->totalExclAmount);
		if ($this->salePromotionData !== null) $this->salePromotionData->write($gen, 'salePromotionData');
		if ($this->componentList !== null) {
$tmp_componentList = new SalesRepeatTemplateLineList($this->componentList);
$tmp_componentList->write($gen, 'componentList');
}
		if ($this->preparationList !== null) {
$tmp_preparationList = new SalesRepeatTemplateLineList($this->preparationList);
$tmp_preparationList->write($gen, 'preparationList');
}
		if ($this->sourceSalesTurnoverLineId !== null) $gen->out->writeElementNs(self::TNS, 'sourceSalesTurnoverLineId', null, $this->sourceSalesTurnoverLineId);
		if ($this->startDate !== null) $gen->writeDate('startDate', $this->startDate);
		if ($this->discountAmountIncl !== null) $gen->writeBigDecimal('discountAmountIncl', $this->discountAmountIncl);
		if ($this->discountAmountExcl !== null) $gen->writeBigDecimal('discountAmountExcl', $this->discountAmountExcl);
		if ($this->discountType !== null) $gen->out->writeElementNs(self::TNS, 'discountType', null, $this->discountType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalesRepeatTemplateLineList extends SoapObject {
	/** @var SalesRepeatTemplateLine[] */
	public $line = array();
	public function __construct($list = array()) { $this->line = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->line as $elem) $elem->write($gen, 'line');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalesRepeatTemplateWeeklySchedule extends SoapObject {
	public string $whichWeeks;
	public ?bool $firstWeek = null;
	public ?bool $secondWeek = null;
	public ?bool $thirdWeek = null;
	public ?bool $fourthWeek = null;
	public ?bool $lastWeek = null;
	public ?bool $monday = null;
	public ?bool $tuesday = null;
	public ?bool $wednesday = null;
	public ?bool $thursday = null;
	public ?bool $friday = null;
	public ?bool $saturday = null;
	public ?bool $sunday = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'whichWeeks', null, $this->whichWeeks);
		if ($this->firstWeek !== null) $gen->writeBool('firstWeek', $this->firstWeek);
		if ($this->secondWeek !== null) $gen->writeBool('secondWeek', $this->secondWeek);
		if ($this->thirdWeek !== null) $gen->writeBool('thirdWeek', $this->thirdWeek);
		if ($this->fourthWeek !== null) $gen->writeBool('fourthWeek', $this->fourthWeek);
		if ($this->lastWeek !== null) $gen->writeBool('lastWeek', $this->lastWeek);
		if ($this->monday !== null) $gen->writeBool('monday', $this->monday);
		if ($this->tuesday !== null) $gen->writeBool('tuesday', $this->tuesday);
		if ($this->wednesday !== null) $gen->writeBool('wednesday', $this->wednesday);
		if ($this->thursday !== null) $gen->writeBool('thursday', $this->thursday);
		if ($this->friday !== null) $gen->writeBool('friday', $this->friday);
		if ($this->saturday !== null) $gen->writeBool('saturday', $this->saturday);
		if ($this->sunday !== null) $gen->writeBool('sunday', $this->sunday);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalesRepeatTemplateSchedule extends SoapObject {
	/** @var \DateTime[] */
	public $specificDates = array();
	public string $repeatInterval;
	public ?SalesRepeatTemplateWeeklySchedule $weeklySchedule = null;
	public ?int $yearlyDateMonth = null;
	public ?int $yearlyDateDay = null;
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->specificDates as $elem) $gen->writeDate('specificDates', $elem);
		$gen->out->writeElementNs(self::TNS, 'repeatInterval', null, $this->repeatInterval);
		if ($this->weeklySchedule !== null) $this->weeklySchedule->write($gen, 'weeklySchedule');
		if ($this->yearlyDateMonth !== null) $gen->writeInt('yearlyDateMonth', $this->yearlyDateMonth);
		if ($this->yearlyDateDay !== null) $gen->writeInt('yearlyDateDay', $this->yearlyDateDay);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalesRepeatTemplate extends SoapObject {
	public string $salesRepeatTemplateId;
	public int $changeCounter;
	public string $name;
	public string $reference;
	public int $syncMarker;
	public string $salesRepeatTemplateType;
	public string $state;
	public \DateTime $entryTimestamp;
	public \DateTime $startDate;
	public \DateTime $generateDate;
	public ?\DateTime $endDate = null;
	public SalesRepeatTemplateSchedule $schedule;
	public int $employeeNumber;
	public string $employeeName;
	public int $relationNumber;
	public string $relationName;
	/** @var int[] */
	public $relationCategoryIds = array();
	public ?string $relationBankAccountNumber = null;
	public ?string $relationCommerceNumber = null;
	public ?string $relationVatNumber = null;
	public BigDecimal $totalInclAmount;
	public BigDecimal $totalExclAmount;
	public string $vatMethod;
	public ?int $vatCountryCode = null;
	public ?string $vatCountryIso3 = null;
	/** @var SalesRepeatTemplateLine[] */
	public $lineList = array();
	public ?string $contractFrequency = null;
	public function __construct() {
		$this->schedule = new SalesRepeatTemplateSchedule();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'salesRepeatTemplateId', null, $this->salesRepeatTemplateId);
		$gen->writeInt('changeCounter', $this->changeCounter);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		$gen->writeInt('syncMarker', $this->syncMarker);
		$gen->out->writeElementNs(self::TNS, 'salesRepeatTemplateType', null, $this->salesRepeatTemplateType);
		$gen->out->writeElementNs(self::TNS, 'state', null, $this->state);
		$gen->writeDateTime('entryTimestamp', $this->entryTimestamp);
		$gen->writeDate('startDate', $this->startDate);
		$gen->writeDate('generateDate', $this->generateDate);
		if ($this->endDate !== null) $gen->writeDate('endDate', $this->endDate);
		$this->schedule->write($gen, 'schedule');
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->out->writeElementNs(self::TNS, 'employeeName', null, $this->employeeName);
		$gen->writeInt('relationNumber', $this->relationNumber);
		$gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
		foreach ($this->relationCategoryIds as $elem) $gen->writeInt('relationCategoryIds', $elem);
		if ($this->relationBankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationBankAccountNumber', null, $this->relationBankAccountNumber);
		if ($this->relationCommerceNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationCommerceNumber', null, $this->relationCommerceNumber);
		if ($this->relationVatNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationVatNumber', null, $this->relationVatNumber);
		$gen->writeBigDecimal('totalInclAmount', $this->totalInclAmount);
		$gen->writeBigDecimal('totalExclAmount', $this->totalExclAmount);
		$gen->out->writeElementNs(self::TNS, 'vatMethod', null, $this->vatMethod);
		if ($this->vatCountryCode !== null) $gen->writeInt('vatCountryCode', $this->vatCountryCode);
		if ($this->vatCountryIso3 !== null) $gen->out->writeElementNs(self::TNS, 'vatCountryIso3', null, $this->vatCountryIso3);
		$tmp_lineList = new SalesRepeatTemplateLineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');

		if ($this->contractFrequency !== null) $gen->out->writeElementNs(self::TNS, 'contractFrequency', null, $this->contractFrequency);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalesRepeatTemplateList extends SoapObject {
	/** @var SalesRepeatTemplate[] */
	public $salesRepeatTemplate = array();
	public function __construct($list = array()) { $this->salesRepeatTemplate = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->salesRepeatTemplate as $elem) $elem->write($gen, 'salesRepeatTemplate');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveSalesRepeatTemplateLine extends SoapObject {
	public ?string $text = null;
	public ?int $articleNumber = null;
	public ?BigDecimal $quantity = null;
	public ?BigDecimal $priceIncl = null;
	public ?BigDecimal $priceExcl = null;
	public ?int $vatCode = null;
	public ?BigDecimal $vatPercentage = null;
	public ?int $turnoverGroup = null;
	public ?BigDecimal $discountPercentage = null;
	public ?SalePromotionLineData $salePromotionData = null;
	/** @var SaveSalesRepeatTemplateLine[] */
	public $componentList = null;
	/** @var SaveSalesRepeatTemplateLine[] */
	public $preparationList = null;
	public ?BigDecimal $discountAmountIncl = null;
	public ?BigDecimal $discountAmountExcl = null;
	public ?string $discountType = null;
	public ?string $salesRepeatTemplateLineId = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->text !== null) $gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->quantity !== null) $gen->writeBigDecimal('quantity', $this->quantity);
		if ($this->priceIncl !== null) $gen->writeBigDecimal('priceIncl', $this->priceIncl);
		if ($this->priceExcl !== null) $gen->writeBigDecimal('priceExcl', $this->priceExcl);
		if ($this->vatCode !== null) $gen->writeInt('vatCode', $this->vatCode);
		if ($this->vatPercentage !== null) $gen->writeBigDecimal('vatPercentage', $this->vatPercentage);
		if ($this->turnoverGroup !== null) $gen->writeInt('turnoverGroup', $this->turnoverGroup);
		if ($this->discountPercentage !== null) $gen->writeBigDecimal('discountPercentage', $this->discountPercentage);
		if ($this->salePromotionData !== null) $this->salePromotionData->write($gen, 'salePromotionData');
		if ($this->componentList !== null) {
$tmp_componentList = new SaveSalesRepeatTemplateLineList($this->componentList);
$tmp_componentList->write($gen, 'componentList');
}
		if ($this->preparationList !== null) {
$tmp_preparationList = new SaveSalesRepeatTemplateLineList($this->preparationList);
$tmp_preparationList->write($gen, 'preparationList');
}
		if ($this->discountAmountIncl !== null) $gen->writeBigDecimal('discountAmountIncl', $this->discountAmountIncl);
		if ($this->discountAmountExcl !== null) $gen->writeBigDecimal('discountAmountExcl', $this->discountAmountExcl);
		if ($this->discountType !== null) $gen->out->writeElementNs(self::TNS, 'discountType', null, $this->discountType);
		if ($this->salesRepeatTemplateLineId !== null) $gen->out->writeElementNs(self::TNS, 'salesRepeatTemplateLineId', null, $this->salesRepeatTemplateLineId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveSalesRepeatTemplateLineList extends SoapObject {
	/** @var SaveSalesRepeatTemplateLine[] */
	public $line = array();
	public function __construct($list = array()) { $this->line = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->line as $elem) $elem->write($gen, 'line');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveSalesRepeatTemplate extends SoapObject {
	public ?string $salesRepeatTemplateId = null;
	public int $changeCounter;
	public string $name;
	public string $reference;
	public string $salesRepeatTemplateType;
	public \DateTime $startDate;
	public ?\DateTime $endDate = null;
	public SalesRepeatTemplateSchedule $schedule;
	public int $employeeNumber;
	public int $relationNumber;
	public string $vatMethod;
	public ?int $vatCountryCode = null;
	public ?string $vatCountryIso3 = null;
	/** @var SaveSalesRepeatTemplateLine[] */
	public $lineList = array();
	public function __construct() {
		$this->schedule = new SalesRepeatTemplateSchedule();
	}
	public function writeProps(SoapGenerator $gen): void {
		if ($this->salesRepeatTemplateId !== null) $gen->out->writeElementNs(self::TNS, 'salesRepeatTemplateId', null, $this->salesRepeatTemplateId);
		$gen->writeInt('changeCounter', $this->changeCounter);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		$gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		$gen->out->writeElementNs(self::TNS, 'salesRepeatTemplateType', null, $this->salesRepeatTemplateType);
		$gen->writeDate('startDate', $this->startDate);
		if ($this->endDate !== null) $gen->writeDate('endDate', $this->endDate);
		$this->schedule->write($gen, 'schedule');
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->writeInt('relationNumber', $this->relationNumber);
		$gen->out->writeElementNs(self::TNS, 'vatMethod', null, $this->vatMethod);
		if ($this->vatCountryCode !== null) $gen->writeInt('vatCountryCode', $this->vatCountryCode);
		if ($this->vatCountryIso3 !== null) $gen->out->writeElementNs(self::TNS, 'vatCountryIso3', null, $this->vatCountryIso3);
		$tmp_lineList = new SaveSalesRepeatTemplateLineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveSalesRepeatTemplateRequest extends IdempotentReq {
	public WorkplaceIdentifier $workplaceIdentifier;
	public SaveSalesRepeatTemplate $salesRepeatTemplate;
	public function __construct() {
		$this->workplaceIdentifier = new WorkplaceIdentifier();
		$this->salesRepeatTemplate = new SaveSalesRepeatTemplate();
	}
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$this->workplaceIdentifier->write($gen, 'workplaceIdentifier');
		$this->salesRepeatTemplate->write($gen, 'salesRepeatTemplate');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BpeBudgetCheck extends SoapObject {
	public string $bpeId;
	public BigDecimal $bpeAmount;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'bpeId', null, $this->bpeId);
		$gen->writeBigDecimal('bpeAmount', $this->bpeAmount);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BpeBudgetCheckList extends SoapObject {
	/** @var BpeBudgetCheck[] */
	public $item = array();
	public function __construct($list = array()) { $this->item = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->item as $elem) $elem->write($gen, 'item');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PerformBpeBudgetChecksRequest extends SoapObject {
	public int $employeeNumber;
	public \DateTime $financialDate;
	/** @var BpeBudgetCheck[] */
	public $bpeList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->writeDate('financialDate', $this->financialDate);
		$tmp_bpeList = new BpeBudgetCheckList($this->bpeList);
$tmp_bpeList->write($gen, 'bpeList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BpeBudgetCheckResponse extends SoapObject {
	public string $bpeId;
	public string $result;
	public BigDecimal $amountOverBudget;
	public ?BigDecimal $amountLimit = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'bpeId', null, $this->bpeId);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->writeBigDecimal('amountOverBudget', $this->amountOverBudget);
		if ($this->amountLimit !== null) $gen->writeBigDecimal('amountLimit', $this->amountLimit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class BpeBudgetCheckResponseList extends SoapObject {
	/** @var BpeBudgetCheckResponse[] */
	public $result = array();
	public function __construct($list = array()) { $this->result = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->result as $elem) $elem->write($gen, 'result');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TicketCounterSale extends SoapObject {
	public int $syncMarker;
	public int $branchNumber;
	public int $workplaceNumber;
	public string $ticketId;
	public string $ticketCode;
	public ?string $orderId = null;
	public ?string $invoiceId = null;
	public ?string $receiptId = null;
	public ?\DateTime $entryTimestamp = null;
	public ?\DateTime $financialDate = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('syncMarker', $this->syncMarker);
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
		$gen->out->writeElementNs(self::TNS, 'ticketId', null, $this->ticketId);
		$gen->out->writeElementNs(self::TNS, 'ticketCode', null, $this->ticketCode);
		if ($this->orderId !== null) $gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->invoiceId !== null) $gen->out->writeElementNs(self::TNS, 'invoiceId', null, $this->invoiceId);
		if ($this->receiptId !== null) $gen->out->writeElementNs(self::TNS, 'receiptId', null, $this->receiptId);
		if ($this->entryTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		if ($this->financialDate !== null) (SoapMplusDate::fromDateTime($this->financialDate))->write($gen, 'financialDate');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class TicketCounterSaleList extends SoapObject {
	/** @var TicketCounterSale[] */
	public $ticketCounterSale = array();
	public function __construct($list = array()) { $this->ticketCounterSale = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->ticketCounterSale as $elem) $elem->write($gen, 'ticketCounterSale');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetTicketCounterSalesRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetSalePromotionsRequest extends SoapObject {
	/** @var int[] */
	public $branchFilter = null;
	public function __construct($list = array()) { $this->branchFilter = $list; }
	public function writeProps(SoapGenerator $gen): void {
		if ($this->branchFilter !== null) {
$tmp_branchFilter = new BranchFilter($this->branchFilter);
$tmp_branchFilter->write($gen, 'branchFilter');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalePromotionLineDiscount extends SoapObject {
	public ?int $articleNumber = null;
	public int $quantity;
	public ?int $discountPercentage = null;
	public ?BigDecimal $discountAmount = null;
	public ?BigDecimal $salePriceIncl = null;
	public ?BigDecimal $salePriceExcl = null;
	public ?BigDecimal $discountPrice = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeInt('quantity', $this->quantity);
		if ($this->discountPercentage !== null) $gen->writeInt('discountPercentage', $this->discountPercentage);
		if ($this->discountAmount !== null) $gen->writeValueAndScale('discountAmount', '', $this->discountAmount, 2);
		if ($this->salePriceIncl !== null) $gen->writeValueAndScale('salePriceIncl', '', $this->salePriceIncl, 2);
		if ($this->salePriceExcl !== null) $gen->writeValueAndScale('salePriceExcl', '', $this->salePriceExcl, 2);
		if ($this->discountPrice !== null) $gen->writeValueAndScale('discountPrice', '', $this->discountPrice, 2);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalePromotionLineDiscountList extends SoapObject {
	/** @var SalePromotionLineDiscount[] */
	public $salePromotionLineDiscountList = array();
	public function __construct($list = array()) { $this->salePromotionLineDiscountList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->salePromotionLineDiscountList as $elem) $elem->write($gen, 'salePromotionLineDiscountList');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalePromotionLine extends SoapObject {
	public string $id;
	public string $saleType;
	/** @var int[] */
	public $articleNumbers = array();
	/** @var int[] */
	public $relationNumbers = array();
	/** @var int[] */
	public $turnoverGroupNumbers = array();
	/** @var int[] */
	public $seasonCodeNumbers = array();
	/** @var int[] */
	public $discountGroupNumbers = array();
	public ?int $discountPercentage = null;
	public ?BigDecimal $discountPrice = null;
	public ?BigDecimal $salePriceIncl = null;
	public ?BigDecimal $salePriceExcl = null;
	public ?int $quantitySource = null;
	public ?int $quantityDestination = null;
	public ?int $quantity = null;
	public ?BigDecimal $discountAmount = null;
	public ?BigDecimal $totalPriceIncl = null;
	public ?BigDecimal $totalPriceExcl = null;
	public ?string $discountPercentageType = null;
	public ?BigDecimal $totalAmountMinimum = null;
	public ?int $arrangementArticleNumber = null;
	public ?int $hoursValid = null;
	/** @var SalePromotionLineDiscount[] */
	public $salePromotionLineDiscountList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'saleType', null, $this->saleType);
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
		foreach ($this->relationNumbers as $elem) $gen->writeInt('relationNumbers', $elem);
		foreach ($this->turnoverGroupNumbers as $elem) $gen->writeInt('turnoverGroupNumbers', $elem);
		foreach ($this->seasonCodeNumbers as $elem) $gen->writeInt('seasonCodeNumbers', $elem);
		foreach ($this->discountGroupNumbers as $elem) $gen->writeInt('discountGroupNumbers', $elem);
		if ($this->discountPercentage !== null) $gen->writeInt('discountPercentage', $this->discountPercentage);
		if ($this->discountPrice !== null) $gen->writeValueAndScale('discountPrice', '', $this->discountPrice, 2);
		if ($this->salePriceIncl !== null) $gen->writeValueAndScale('salePriceIncl', '', $this->salePriceIncl, 2);
		if ($this->salePriceExcl !== null) $gen->writeValueAndScale('salePriceExcl', '', $this->salePriceExcl, 2);
		if ($this->quantitySource !== null) $gen->writeInt('quantitySource', $this->quantitySource);
		if ($this->quantityDestination !== null) $gen->writeInt('quantityDestination', $this->quantityDestination);
		if ($this->quantity !== null) $gen->writeInt('quantity', $this->quantity);
		if ($this->discountAmount !== null) $gen->writeValueAndScale('discountAmount', '', $this->discountAmount, 2);
		if ($this->totalPriceIncl !== null) $gen->writeValueAndScale('totalPriceIncl', '', $this->totalPriceIncl, 2);
		if ($this->totalPriceExcl !== null) $gen->writeValueAndScale('totalPriceExcl', '', $this->totalPriceExcl, 2);
		if ($this->discountPercentageType !== null) $gen->out->writeElementNs(self::TNS, 'discountPercentageType', null, $this->discountPercentageType);
		if ($this->totalAmountMinimum !== null) $gen->writeValueAndScale('totalAmountMinimum', '', $this->totalAmountMinimum, 2);
		if ($this->arrangementArticleNumber !== null) $gen->writeInt('arrangementArticleNumber', $this->arrangementArticleNumber);
		if ($this->hoursValid !== null) $gen->writeInt('hoursValid', $this->hoursValid);
		$tmp_salePromotionLineDiscountList = new SalePromotionLineDiscountList($this->salePromotionLineDiscountList);
$tmp_salePromotionLineDiscountList->write($gen, 'salePromotionLineDiscountList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalePromotionLineList extends SoapObject {
	/** @var SalePromotionLine[] */
	public $salePromotionLineList = array();
	public function __construct($list = array()) { $this->salePromotionLineList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->salePromotionLineList as $elem) $elem->write($gen, 'salePromotionLineList');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalePromotions extends SoapObject {
	public int $branchNumber;
	public string $id;
	public string $description;
	public ?\DateTime $startDate = null;
	public ?\DateTime $endDate = null;
	/** @var SalePromotionLine[] */
	public $salePromotionLineList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		if ($this->startDate !== null) $gen->writeDate('startDate', $this->startDate);
		if ($this->endDate !== null) $gen->writeDate('endDate', $this->endDate);
		$tmp_salePromotionLineList = new SalePromotionLineList($this->salePromotionLineList);
$tmp_salePromotionLineList->write($gen, 'salePromotionLineList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SalePromotionsList extends SoapObject {
	/** @var SalePromotions[] */
	public $salePromotions = array();
	public function __construct($list = array()) { $this->salePromotions = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->salePromotions as $elem) $elem->write($gen, 'salePromotions');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPaymentMethodsRequest extends SoapObject {
	public ?int $accountNumber = null;
	/** @var string[] */
	public $paymentMethodTypes = array();
	public ?bool $includeBpeConfiguration = null;
	public ?bool $includeGiftcardType = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->accountNumber !== null) $gen->writeInt('accountNumber', $this->accountNumber);
		foreach ($this->paymentMethodTypes as $elem) $gen->out->writeElementNs(self::TNS, 'paymentMethodTypes', null, $elem);
		if ($this->includeBpeConfiguration !== null) $gen->writeBool('includeBpeConfiguration', $this->includeBpeConfiguration);
		if ($this->includeGiftcardType !== null) $gen->writeBool('includeGiftcardType', $this->includeGiftcardType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetAvailablePaymentMethodsV2Request extends SoapObject {
	public WorkplaceIdentifier $workplace;
	public ?string $activityId = null;
	public ?bool $includeGiftcardType = null;
	public function __construct() {
		$this->workplace = new WorkplaceIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->workplace->write($gen, 'workplace');
		if ($this->activityId !== null) $gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
		if ($this->includeGiftcardType !== null) $gen->writeBool('includeGiftcardType', $this->includeGiftcardType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateOrderInfo extends SoapObject {
	public string $orderId;
	public string $orderString;
	public ?bool $orderQueued = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		$gen->out->writeElementNs(self::TNS, 'orderString', null, $this->orderString);
		if ($this->orderQueued !== null) $gen->writeBool('orderQueued', $this->orderQueued);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateOrderV2Request extends SoapObject {
	public Order $order;
	public ?bool $applySalesAndActions = null;
	public ?bool $applySalesPrices = null;
	public ?bool $applyPriceGroups = null;
	/** @var string[] */
	public $scannedVoucherIssuanceCodes = array();
	public function __construct() {
		$this->order = new Order();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->order->write($gen, 'order');
		if ($this->applySalesAndActions !== null) $gen->writeBool('applySalesAndActions', $this->applySalesAndActions);
		if ($this->applySalesPrices !== null) $gen->writeBool('applySalesPrices', $this->applySalesPrices);
		if ($this->applyPriceGroups !== null) $gen->writeBool('applyPriceGroups', $this->applyPriceGroups);
		foreach ($this->scannedVoucherIssuanceCodes as $elem) $gen->out->writeElementNs(self::TNS, 'scannedVoucherIssuanceCodes', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateOrderV3Request extends IdempotentReq {
	public Order $order;
	public ?bool $applySalesAndActions = null;
	public ?bool $applySalesPrices = null;
	public ?bool $applyPriceGroups = null;
	/** @var string[] */
	public $scannedVoucherIssuanceCodes = array();
	public ?bool $prepay = null;
	/** @var Payment[] */
	public $paymentList = null;
	public function __construct() {
		$this->order = new Order();
	}
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$this->order->write($gen, 'order');
		if ($this->applySalesAndActions !== null) $gen->writeBool('applySalesAndActions', $this->applySalesAndActions);
		if ($this->applySalesPrices !== null) $gen->writeBool('applySalesPrices', $this->applySalesPrices);
		if ($this->applyPriceGroups !== null) $gen->writeBool('applyPriceGroups', $this->applyPriceGroups);
		foreach ($this->scannedVoucherIssuanceCodes as $elem) $gen->out->writeElementNs(self::TNS, 'scannedVoucherIssuanceCodes', null, $elem);
		if ($this->prepay !== null) $gen->writeBool('prepay', $this->prepay);
		if ($this->paymentList !== null) {
$tmp_paymentList = new PaymentList($this->paymentList);
$tmp_paymentList->write($gen, 'paymentList');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PayOrderRequest extends SoapObject {
	public string $orderId;
	public bool $prepay;
	/** @var Payment[] */
	public $paymentList = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		$gen->writeBool('prepay', $this->prepay);
		$tmp_paymentList = new PaymentList($this->paymentList);
$tmp_paymentList->write($gen, 'paymentList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PayOrderV2Request extends IdempotentReq {
	public string $orderId;
	public bool $prepay;
	/** @var Payment[] */
	public $paymentList = array();
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		$gen->writeBool('prepay', $this->prepay);
		$tmp_paymentList = new PaymentList($this->paymentList);
$tmp_paymentList->write($gen, 'paymentList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PayTableOrderRequest extends SoapObject {
	public ?Order $order = null;
	/** @var Payment[] */
	public $paymentList = array();
	public ?bool $keepTableName = null;
	public ?bool $releaseTable = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->order !== null) $this->order->write($gen, 'order');
		$tmp_paymentList = new PaymentList($this->paymentList);
$tmp_paymentList->write($gen, 'paymentList');

		if ($this->keepTableName !== null) $gen->writeBool('keepTableName', $this->keepTableName);
		if ($this->releaseTable !== null) $gen->writeBool('releaseTable', $this->releaseTable);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrepayTableOrderRequest extends SoapObject {
	public ?Order $order = null;
	/** @var Payment[] */
	public $paymentList = array();
	public BigDecimal $prepayAmount;
	public ?bool $releaseTable = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->order !== null) $this->order->write($gen, 'order');
		$tmp_paymentList = new PaymentList($this->paymentList);
$tmp_paymentList->write($gen, 'paymentList');

		$gen->writeValueAndScale('prepayAmount', '', $this->prepayAmount, 2);
		if ($this->releaseTable !== null) $gen->writeBool('releaseTable', $this->releaseTable);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOrdersByExtOrderIdsRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	/** @var string[] */
	public $extOrderIds = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		if ($this->extOrderIds !== null) {
$tmp_extOrderIds = new IdList($this->extOrderIds);
$tmp_extOrderIds->write($gen, 'extOrderIds');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class Proposal extends SoapObject {
	public ?string $proposalId = null;
	public ?string $extProposalId = null;
	public ?string $orderId = null;
	public ?string $extOrderId = null;
	public ?string $invoiceId = null;
	public ?string $extInvoiceId = null;
	public ?string $transactionString = null;
	public ?int $syncMarker = null;
	public ?YearNumber $proposalNumber = null;
	public ?string $proposalType = null;
	public ?int $employeeNumber = null;
	public ?string $employeeName = null;
	public ?\DateTime $entryTimestamp = null;
	public ?int $relationNumber = null;
	public ?string $relationName = null;
	public ?int $relationCategoryId = null;
	public ?string $relationBankAccountNumber = null;
	public ?Address $deliveryAddress = null;
	public ?Address $invoiceAddress = null;
	public ?\DateTime $financialDate = null;
	public ?int $financialBranchNumber = null;
	public ?string $financialExtBranchId = null;
	public ?int $workplaceNumber = null;
	public ?int $entryBranchNumber = null;
	public ?string $entryExtBranchId = null;
	public ?string $reference = null;
	public ?string $activityId = null;
	public ?BigDecimal $totalInclAmount = null;
	public ?BigDecimal $totalExclAmount = null;
	public ?string $vatMethod = null;
	/** @var VatGroup[] */
	public $vatGroupList = null;
	public ?int $changeCounter = null;
	public ?string $state = null;
	/** @var Line[] */
	public $lineList = null;
	public ?string $vatChange = null;
	public ?int $orderCategoryNumber = null;
	public ?YearNumber $orderNumber = null;
	/** @var string[] */
	public $packingSlipIds = null;
	/** @var YearNumber[] */
	public $packingSlipNumbers = null;
	/** @var string[] */
	public $invoiceIds = null;
	/** @var string[] */
	public $extInvoiceIds = null;
	/** @var YearNumber[] */
	public $invoiceNumbers = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->proposalId !== null) $gen->out->writeElementNs(self::TNS, 'proposalId', null, $this->proposalId);
		if ($this->extProposalId !== null) $gen->out->writeElementNs(self::TNS, 'extProposalId', null, $this->extProposalId);
		if ($this->orderId !== null) $gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->extOrderId !== null) $gen->out->writeElementNs(self::TNS, 'extOrderId', null, $this->extOrderId);
		if ($this->invoiceId !== null) $gen->out->writeElementNs(self::TNS, 'invoiceId', null, $this->invoiceId);
		if ($this->extInvoiceId !== null) $gen->out->writeElementNs(self::TNS, 'extInvoiceId', null, $this->extInvoiceId);
		if ($this->transactionString !== null) $gen->out->writeElementNs(self::TNS, 'transactionString', null, $this->transactionString);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->proposalNumber !== null) $this->proposalNumber->write($gen, 'proposalNumber');
		if ($this->proposalType !== null) $gen->out->writeElementNs(self::TNS, 'proposalType', null, $this->proposalType);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->employeeName !== null) $gen->out->writeElementNs(self::TNS, 'employeeName', null, $this->employeeName);
		if ($this->entryTimestamp !== null) (SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
		if ($this->relationName !== null) $gen->out->writeElementNs(self::TNS, 'relationName', null, $this->relationName);
		if ($this->relationCategoryId !== null) $gen->writeInt('relationCategoryId', $this->relationCategoryId);
		if ($this->relationBankAccountNumber !== null) $gen->out->writeElementNs(self::TNS, 'relationBankAccountNumber', null, $this->relationBankAccountNumber);
		if ($this->deliveryAddress !== null) $this->deliveryAddress->write($gen, 'deliveryAddress');
		if ($this->invoiceAddress !== null) $this->invoiceAddress->write($gen, 'invoiceAddress');
		if ($this->financialDate !== null) (SoapMplusDate::fromDateTime($this->financialDate))->write($gen, 'financialDate');
		if ($this->financialBranchNumber !== null) $gen->writeInt('financialBranchNumber', $this->financialBranchNumber);
		if ($this->financialExtBranchId !== null) $gen->out->writeElementNs(self::TNS, 'financialExtBranchId', null, $this->financialExtBranchId);
		if ($this->workplaceNumber !== null) $gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->entryBranchNumber !== null) $gen->writeInt('entryBranchNumber', $this->entryBranchNumber);
		if ($this->entryExtBranchId !== null) $gen->out->writeElementNs(self::TNS, 'entryExtBranchId', null, $this->entryExtBranchId);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->activityId !== null) $gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
		if ($this->totalInclAmount !== null) $gen->writeValueAndScale('totalInclAmount', '', $this->totalInclAmount, 2);
		if ($this->totalExclAmount !== null) $gen->writeValueAndScale('totalExclAmount', '', $this->totalExclAmount, 2);
		if ($this->vatMethod !== null) $gen->out->writeElementNs(self::TNS, 'vatMethod', null, $this->vatMethod);
		if ($this->vatGroupList !== null) {
$tmp_vatGroupList = new VatGroupList($this->vatGroupList);
$tmp_vatGroupList->write($gen, 'vatGroupList');
}
		if ($this->changeCounter !== null) $gen->writeInt('changeCounter', $this->changeCounter);
		if ($this->state !== null) $gen->out->writeElementNs(self::TNS, 'state', null, $this->state);
		if ($this->lineList !== null) {
$tmp_lineList = new LineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');
}
		if ($this->vatChange !== null) $gen->out->writeElementNs(self::TNS, 'vatChange', null, $this->vatChange);
		if ($this->orderCategoryNumber !== null) $gen->writeInt('orderCategoryNumber', $this->orderCategoryNumber);
		if ($this->orderNumber !== null) $this->orderNumber->write($gen, 'orderNumber');
		if ($this->packingSlipIds !== null) {
$tmp_packingSlipIds = new IdList($this->packingSlipIds);
$tmp_packingSlipIds->write($gen, 'packingSlipIds');
}
		if ($this->packingSlipNumbers !== null) {
$tmp_packingSlipNumbers = new YearNumberList($this->packingSlipNumbers);
$tmp_packingSlipNumbers->write($gen, 'packingSlipNumbers');
}
		if ($this->invoiceIds !== null) {
$tmp_invoiceIds = new IdList($this->invoiceIds);
$tmp_invoiceIds->write($gen, 'invoiceIds');
}
		if ($this->extInvoiceIds !== null) {
$tmp_extInvoiceIds = new IdList($this->extInvoiceIds);
$tmp_extInvoiceIds->write($gen, 'extInvoiceIds');
}
		if ($this->invoiceNumbers !== null) {
$tmp_invoiceNumbers = new YearNumberList($this->invoiceNumbers);
$tmp_invoiceNumbers->write($gen, 'invoiceNumbers');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ProposalList extends SoapObject {
	/** @var Proposal[] */
	public $proposal = array();
	public function __construct($list = array()) { $this->proposal = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->proposal as $elem) $elem->write($gen, 'proposal');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetProposalsRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public ?\DateTime $fromFinancialDate = null;
	public ?\DateTime $throughFinancialDate = null;
	/** @var int[] */
	public $branchNumbers = array();
	/** @var int[] */
	public $employeeNumbers = array();
	/** @var int[] */
	public $relationNumbers = array();
	/** @var int[] */
	public $supplierRelationNumbers = array();
	/** @var int[] */
	public $articleNumbers = array();
	/** @var int[] */
	public $articleTurnoverGroups = array();
	/** @var Text[] */
	public $articlePluNumbers = null;
	/** @var Text[] */
	public $articleBarcodes = null;
	public ?string $activityId = null;
	/** @var string[] */
	public $proposalIds = array();
	/** @var YearNumber[] */
	public $proposalNumbers = array();
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public ?bool $includeLineList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		if ($this->fromFinancialDate !== null) (SoapMplusDate::fromDateTime($this->fromFinancialDate))->write($gen, 'fromFinancialDate');
		if ($this->throughFinancialDate !== null) (SoapMplusDate::fromDateTime($this->throughFinancialDate))->write($gen, 'throughFinancialDate');
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		foreach ($this->employeeNumbers as $elem) $gen->writeInt('employeeNumbers', $elem);
		foreach ($this->relationNumbers as $elem) $gen->writeInt('relationNumbers', $elem);
		foreach ($this->supplierRelationNumbers as $elem) $gen->writeInt('supplierRelationNumbers', $elem);
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
		foreach ($this->articleTurnoverGroups as $elem) $gen->writeInt('articleTurnoverGroups', $elem);
		if ($this->articlePluNumbers !== null) {
$tmp_articlePluNumbers = new TextList($this->articlePluNumbers);
$tmp_articlePluNumbers->write($gen, 'articlePluNumbers');
}
		if ($this->articleBarcodes !== null) {
$tmp_articleBarcodes = new TextList($this->articleBarcodes);
$tmp_articleBarcodes->write($gen, 'articleBarcodes');
}
		if ($this->activityId !== null) $gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
		foreach ($this->proposalIds as $elem) $gen->out->writeElementNs(self::TNS, 'proposalIds', null, $elem);
		foreach ($this->proposalNumbers as $elem) $elem->write($gen, 'proposalNumbers');
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
		if ($this->includeLineList !== null) $gen->writeBool('includeLineList', $this->includeLineList);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveProposalInfo extends SoapObject {
	public string $proposalId;
	public string $proposalString;
	public ?YearNumber $proposalNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'proposalId', null, $this->proposalId);
		$gen->out->writeElementNs(self::TNS, 'proposalString', null, $this->proposalString);
		if ($this->proposalNumber !== null) $this->proposalNumber->write($gen, 'proposalNumber');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateOrderFromProposalInfo extends SoapObject {
	public string $orderId;
	public string $orderString;
	public ?YearNumber $orderNumber = null;
	public ?string $orderBarcode = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		$gen->out->writeElementNs(self::TNS, 'orderString', null, $this->orderString);
		if ($this->orderNumber !== null) $this->orderNumber->write($gen, 'orderNumber');
		if ($this->orderBarcode !== null) $gen->out->writeElementNs(self::TNS, 'orderBarcode', null, $this->orderBarcode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateInvoiceFromProposalInfo extends SoapObject {
	public string $invoiceId;
	public string $invoiceString;
	public ?YearNumber $invoiceNumber = null;
	public ?string $invoiceBarcode = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'invoiceId', null, $this->invoiceId);
		$gen->out->writeElementNs(self::TNS, 'invoiceString', null, $this->invoiceString);
		if ($this->invoiceNumber !== null) $this->invoiceNumber->write($gen, 'invoiceNumber');
		if ($this->invoiceBarcode !== null) $gen->out->writeElementNs(self::TNS, 'invoiceBarcode', null, $this->invoiceBarcode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOrdersByReceiptsRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	/** @var string[] */
	public $receiptIds = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		if ($this->receiptIds !== null) {
$tmp_receiptIds = new IdList($this->receiptIds);
$tmp_receiptIds->write($gen, 'receiptIds');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCurrentTableOrdersRequest extends SoapObject {
	public ?int $branchNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->branchNumber !== null) $gen->writeInt('branchNumber', $this->branchNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOrdersRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public ?\DateTime $fromFinancialDate = null;
	public ?\DateTime $throughFinancialDate = null;
	/** @var int[] */
	public $branchNumbers = array();
	/** @var int[] */
	public $employeeNumbers = array();
	/** @var int[] */
	public $relationNumbers = array();
	/** @var int[] */
	public $supplierRelationNumbers = array();
	/** @var int[] */
	public $articleNumbers = array();
	/** @var int[] */
	public $articleTurnoverGroups = array();
	/** @var Text[] */
	public $articlePluNumbers = array();
	/** @var Text[] */
	public $articleBarcodes = array();
	public ?string $activityId = null;
	/** @var string[] */
	public $orderTypeList = null;
	/** @var string[] */
	public $orderIds = array();
	/** @var YearNumber[] */
	public $orderNumbers = array();
	/** @var string[] */
	public $ownerFilter = null;
	/** @var int[] */
	public $branchGroupFilter = null;
	public ?bool $includeLineList = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		if ($this->fromFinancialDate !== null) (SoapMplusDate::fromDateTime($this->fromFinancialDate))->write($gen, 'fromFinancialDate');
		if ($this->throughFinancialDate !== null) (SoapMplusDate::fromDateTime($this->throughFinancialDate))->write($gen, 'throughFinancialDate');
		foreach ($this->branchNumbers as $elem) $gen->writeInt('branchNumbers', $elem);
		foreach ($this->employeeNumbers as $elem) $gen->writeInt('employeeNumbers', $elem);
		foreach ($this->relationNumbers as $elem) $gen->writeInt('relationNumbers', $elem);
		foreach ($this->supplierRelationNumbers as $elem) $gen->writeInt('supplierRelationNumbers', $elem);
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
		foreach ($this->articleTurnoverGroups as $elem) $gen->writeInt('articleTurnoverGroups', $elem);
		$tmp_articlePluNumbers = new TextList($this->articlePluNumbers);
$tmp_articlePluNumbers->write($gen, 'articlePluNumbers');

		$tmp_articleBarcodes = new TextList($this->articleBarcodes);
$tmp_articleBarcodes->write($gen, 'articleBarcodes');

		if ($this->activityId !== null) $gen->out->writeElementNs(self::TNS, 'activityId', null, $this->activityId);
		if ($this->orderTypeList !== null) {
$tmp_orderTypeList = new OrderTypeList($this->orderTypeList);
$tmp_orderTypeList->write($gen, 'orderTypeList');
}
		foreach ($this->orderIds as $elem) $gen->out->writeElementNs(self::TNS, 'orderIds', null, $elem);
		foreach ($this->orderNumbers as $elem) $elem->write($gen, 'orderNumbers');
		if ($this->ownerFilter !== null) {
$tmp_ownerFilter = new OwnerLabelFilter($this->ownerFilter);
$tmp_ownerFilter->write($gen, 'ownerFilter');
}
		if ($this->branchGroupFilter !== null) {
$tmp_branchGroupFilter = new BranchGroupFilter($this->branchGroupFilter);
$tmp_branchGroupFilter->write($gen, 'branchGroupFilter');
}
		if ($this->includeLineList !== null) $gen->writeBool('includeLineList', $this->includeLineList);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DetermineContractLinesRequest extends SoapObject {
	/** @var Line[] */
	public $lineList = array();
	public WorkplaceIdentifier $workplaceIdentifier;
	public int $financialBranchNumber;
	public int $employeeNumber;
	public \DateTime $financialDate;
	public string $vatMethod;
	public int $relationNumber;
	public function __construct() {
		$this->workplaceIdentifier = new WorkplaceIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
		$tmp_lineList = new LineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');

		$this->workplaceIdentifier->write($gen, 'workplaceIdentifier');
		$gen->writeInt('financialBranchNumber', $this->financialBranchNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->writeDate('financialDate', $this->financialDate);
		$gen->out->writeElementNs(self::TNS, 'vatMethod', null, $this->vatMethod);
		$gen->writeInt('relationNumber', $this->relationNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateInvoiceFromPackingSlipsRequest extends IdempotentReq {
	/** @var string[] */
	public $packingSlipIds = array();
	public \DateTime $financialDate;
	public int $branchNumber;
	public ?string $forcedActivityId = null;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		foreach ($this->packingSlipIds as $elem) $gen->out->writeElementNs(self::TNS, 'packingSlipIds', null, $elem);
		$gen->writeDate('financialDate', $this->financialDate);
		$gen->writeInt('branchNumber', $this->branchNumber);
		if ($this->forcedActivityId !== null) $gen->out->writeElementNs(self::TNS, 'forcedActivityId', null, $this->forcedActivityId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashCountInfoWorkplaceData extends SoapObject {
	public int $workplaceNumber;
	public ?string $shiftBeginId = null;
	public ?YearNumber $shiftBeginNumber = null;
	public ?\DateTime $shiftBeginTs = null;
	public ?string $shiftEndId = null;
	public ?YearNumber $shiftEndNumber = null;
	public ?\DateTime $shiftEndTs = null;
	public ?\DateTime $shiftEndBookingDate = null;
	public ?string $previousCashCountId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->shiftBeginId !== null) $gen->out->writeElementNs(self::TNS, 'shiftBeginId', null, $this->shiftBeginId);
		if ($this->shiftBeginNumber !== null) $this->shiftBeginNumber->write($gen, 'shiftBeginNumber');
		if ($this->shiftBeginTs !== null) $gen->writeDateTime('shiftBeginTs', $this->shiftBeginTs);
		if ($this->shiftEndId !== null) $gen->out->writeElementNs(self::TNS, 'shiftEndId', null, $this->shiftEndId);
		if ($this->shiftEndNumber !== null) $this->shiftEndNumber->write($gen, 'shiftEndNumber');
		if ($this->shiftEndTs !== null) $gen->writeDateTime('shiftEndTs', $this->shiftEndTs);
		if ($this->shiftEndBookingDate !== null) $gen->writeDate('shiftEndBookingDate', $this->shiftEndBookingDate);
		if ($this->previousCashCountId !== null) $gen->out->writeElementNs(self::TNS, 'previousCashCountId', null, $this->previousCashCountId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashCountInfoWorkplaceDataList extends SoapObject {
	/** @var CashCountInfoWorkplaceData[] */
	public $workplaceData = array();
	public function __construct($list = array()) { $this->workplaceData = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->workplaceData as $elem) $elem->write($gen, 'workplaceData');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashCountInfoPaymentMethodAmount extends SoapObject {
	public string $id;
	public string $description;
	public bool $isAutomaticDeposit;
	public ?BigDecimal $openingBalance = null;
	public ?BigDecimal $booked = null;
	public ?BigDecimal $counted = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'description', null, $this->description);
		$gen->writeBool('isAutomaticDeposit', $this->isAutomaticDeposit);
		if ($this->openingBalance !== null) $gen->writeBigDecimal('openingBalance', $this->openingBalance);
		if ($this->booked !== null) $gen->writeBigDecimal('booked', $this->booked);
		if ($this->counted !== null) $gen->writeBigDecimal('counted', $this->counted);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashCountInfoPaymentMethodAmountList extends SoapObject {
	/** @var CashCountInfoPaymentMethodAmount[] */
	public $paymentMethodAmount = array();
	public function __construct($list = array()) { $this->paymentMethodAmount = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->paymentMethodAmount as $elem) $elem->write($gen, 'paymentMethodAmount');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashCountInfoWorkplace extends SoapObject {
	public int $number;
	public string $name;
	public ?CashCountInfoWorkplaceData $data = null;
	public ?\DateTime $previousCashCountTs = null;
	/** @var CashCountInfoPaymentMethodAmount[] */
	public $paymentMethodAmounts = null;
	/** @var CashCountInfoWorkplace[] */
	public $extraWorkplaces = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('number', $this->number);
		$gen->out->writeElementNs(self::TNS, 'name', null, $this->name);
		if ($this->data !== null) $this->data->write($gen, 'data');
		if ($this->previousCashCountTs !== null) $gen->writeDateTime('previousCashCountTs', $this->previousCashCountTs);
		if ($this->paymentMethodAmounts !== null) {
$tmp_paymentMethodAmounts = new CashCountInfoPaymentMethodAmountList($this->paymentMethodAmounts);
$tmp_paymentMethodAmounts->write($gen, 'paymentMethodAmounts');
}
		if ($this->extraWorkplaces !== null) {
$tmp_extraWorkplaces = new CashCountInfoWorkplaceList($this->extraWorkplaces);
$tmp_extraWorkplaces->write($gen, 'extraWorkplaces');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashCountInfoWorkplaceList extends SoapObject {
	/** @var CashCountInfoWorkplace[] */
	public $workplace = array();
	public function __construct($list = array()) { $this->workplace = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->workplace as $elem) $elem->write($gen, 'workplace');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashCountInfo extends SoapObject {
	public string $state;
	public int $countEmployeeNumber;
	/** @var CashCountInfoWorkplace[] */
	public $workplaces = null;
	public ?int $fromWorkplaceCountWorkplaceNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'state', null, $this->state);
		$gen->writeInt('countEmployeeNumber', $this->countEmployeeNumber);
		if ($this->workplaces !== null) {
$tmp_workplaces = new CashCountInfoWorkplaceList($this->workplaces);
$tmp_workplaces->write($gen, 'workplaces');
}
		if ($this->fromWorkplaceCountWorkplaceNumber !== null) $gen->writeInt('fromWorkplaceCountWorkplaceNumber', $this->fromWorkplaceCountWorkplaceNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCashCountInfoRequest extends SoapObject {
	public WorkplaceIdentifier $fromWorkplace;
	public int $countEmployeeNumber;
	public function __construct() {
		$this->fromWorkplace = new WorkplaceIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->fromWorkplace->write($gen, 'fromWorkplace');
		$gen->writeInt('countEmployeeNumber', $this->countEmployeeNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashCountInfoCountedPaymentMethodAmount extends CashCountInfoPaymentMethodAmount {
	public ?BigDecimal $deposited = null;
	public ?string $depositPaymentMethodId = null;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		if ($this->deposited !== null) $gen->writeBigDecimal('deposited', $this->deposited);
		if ($this->depositPaymentMethodId !== null) $gen->out->writeElementNs(self::TNS, 'depositPaymentMethodId', null, $this->depositPaymentMethodId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CashCountInfoCountedPaymentMethodAmountList extends SoapObject {
	/** @var CashCountInfoCountedPaymentMethodAmount[] */
	public $countedPaymentMethodAmount = array();
	public function __construct($list = array()) { $this->countedPaymentMethodAmount = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->countedPaymentMethodAmount as $elem) $elem->write($gen, 'countedPaymentMethodAmount');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveCashCountRequest extends IdempotentReq {
	public int $employeeNumber;
	public WorkplaceIdentifier $fromWorkplace;
	public int $countEmployeeNumber;
	public CashCountInfoWorkplaceData $workplaceData;
	/** @var CashCountInfoWorkplaceData[] */
	public $extraWorkplacesData = array();
	/** @var CashCountInfoCountedPaymentMethodAmount[] */
	public $countedPaymentMethodAmounts = array();
	public function __construct() {
		$this->fromWorkplace = new WorkplaceIdentifier();
		$this->workplaceData = new CashCountInfoWorkplaceData();
	}
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$this->fromWorkplace->write($gen, 'fromWorkplace');
		$gen->writeInt('countEmployeeNumber', $this->countEmployeeNumber);
		$this->workplaceData->write($gen, 'workplaceData');
		$tmp_extraWorkplacesData = new CashCountInfoWorkplaceDataList($this->extraWorkplacesData);
$tmp_extraWorkplacesData->write($gen, 'extraWorkplacesData');

		$tmp_countedPaymentMethodAmounts = new CashCountInfoCountedPaymentMethodAmountList($this->countedPaymentMethodAmounts);
$tmp_countedPaymentMethodAmounts->write($gen, 'countedPaymentMethodAmounts');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetSalesRepeatTemplatesResponse extends SoapObject {
	/** @var SalesRepeatTemplate[] */
	public $salesRepeatTemplateList = array();
	public function __construct($list = array()) { $this->salesRepeatTemplateList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_salesRepeatTemplateList = new SalesRepeatTemplateList($this->salesRepeatTemplateList);
$tmp_salesRepeatTemplateList->write($gen, 'salesRepeatTemplateList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveSalesRepeatTemplateResponse extends IdempotentResp {
	public string $result;
	public ?string $errorMessage = null;
	public ?string $salesRepeatTemplateId = null;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->salesRepeatTemplateId !== null) $gen->out->writeElementNs(self::TNS, 'salesRepeatTemplateId', null, $this->salesRepeatTemplateId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PerformBpeBudgetChecksResponse extends SoapObject {
	public string $result;
	/** @var BpeBudgetCheckResponse[] */
	public $bpeResults = null;
	public ?string $errorMessage = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->bpeResults !== null) {
$tmp_bpeResults = new BpeBudgetCheckResponseList($this->bpeResults);
$tmp_bpeResults->write($gen, 'bpeResults');
}
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetTicketCounterSalesResponse extends SoapObject {
	/** @var TicketCounterSale[] */
	public $ticketCounterSaleList = array();
	public function __construct($list = array()) { $this->ticketCounterSaleList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_ticketCounterSaleList = new TicketCounterSaleList($this->ticketCounterSaleList);
$tmp_ticketCounterSaleList->write($gen, 'ticketCounterSaleList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetSalePromotionsResponse extends SoapObject {
	/** @var SalePromotions[] */
	public $salePromotionsList = array();
	public function __construct($list = array()) { $this->salePromotionsList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_salePromotionsList = new SalePromotionsList($this->salePromotionsList);
$tmp_salePromotionsList->write($gen, 'salePromotionsList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetPaymentMethodsResponse extends SoapObject {
	/** @var PaymentMethod[] */
	public $paymentMethodList = array();
	public function __construct($list = array()) { $this->paymentMethodList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_paymentMethodList = new PaymentMethodList($this->paymentMethodList);
$tmp_paymentMethodList->write($gen, 'paymentMethodList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetAvailablePaymentMethodsResponse extends SoapObject {
	/** @var PaymentMethod[] */
	public $paymentMethodList = array();
	public function __construct($list = array()) { $this->paymentMethodList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_paymentMethodList = new PaymentMethodList($this->paymentMethodList);
$tmp_paymentMethodList->write($gen, 'paymentMethodList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateOrderResponse extends SoapObject {
	public string $result;
	public CreateOrderInfo $info;
	public string $errorMessage;
	public function __construct() {
		$this->info = new CreateOrderInfo();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$this->info->write($gen, 'info');
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateOrderV2Response extends SoapObject {
	public string $result;
	public ?Order $order = null;
	public ?string $errorMessage = null;
	public CreateOrderInfo $info;
	public function __construct() {
		$this->info = new CreateOrderInfo();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->order !== null) $this->order->write($gen, 'order');
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		$this->info->write($gen, 'info');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateOrderV3Response extends IdempotentResp {
	public string $result;
	public ?Order $order = null;
	public ?string $errorMessage = null;
	public CreateOrderInfo $info;
	public ?string $payResult = null;
	public ?string $invoiceId = null;
	/** @var VoucherIssuance[] */
	public $voucherIssuances = null;
	/** @var UnappliedVoucherIssuance[] */
	public $unappliedVoucherIssuances = null;
	public function __construct() {
		$this->info = new CreateOrderInfo();
	}
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->order !== null) $this->order->write($gen, 'order');
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		$this->info->write($gen, 'info');
		if ($this->payResult !== null) $gen->out->writeElementNs(self::TNS, 'payResult', null, $this->payResult);
		if ($this->invoiceId !== null) $gen->out->writeElementNs(self::TNS, 'invoiceId', null, $this->invoiceId);
		if ($this->voucherIssuances !== null) {
$tmp_voucherIssuances = new VoucherIssuanceList($this->voucherIssuances);
$tmp_voucherIssuances->write($gen, 'voucherIssuances');
}
		if ($this->unappliedVoucherIssuances !== null) {
$tmp_unappliedVoucherIssuances = new UnappliedVoucherIssuanceList($this->unappliedVoucherIssuances);
$tmp_unappliedVoucherIssuances->write($gen, 'unappliedVoucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PayOrderResponse extends SoapObject {
	public string $result;
	public ?string $invoiceId = null;
	public string $errorMessage;
	/** @var VoucherIssuance[] */
	public $voucherIssuances = null;
	/** @var UnappliedVoucherIssuance[] */
	public $unappliedVoucherIssuances = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->invoiceId !== null) $gen->out->writeElementNs(self::TNS, 'invoiceId', null, $this->invoiceId);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->voucherIssuances !== null) {
$tmp_voucherIssuances = new VoucherIssuanceList($this->voucherIssuances);
$tmp_voucherIssuances->write($gen, 'voucherIssuances');
}
		if ($this->unappliedVoucherIssuances !== null) {
$tmp_unappliedVoucherIssuances = new UnappliedVoucherIssuanceList($this->unappliedVoucherIssuances);
$tmp_unappliedVoucherIssuances->write($gen, 'unappliedVoucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PayOrderV2Response extends IdempotentResp {
	public string $result;
	public ?string $invoiceId = null;
	public string $errorMessage;
	/** @var VoucherIssuance[] */
	public $voucherIssuances = null;
	/** @var UnappliedVoucherIssuance[] */
	public $unappliedVoucherIssuances = null;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->invoiceId !== null) $gen->out->writeElementNs(self::TNS, 'invoiceId', null, $this->invoiceId);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->voucherIssuances !== null) {
$tmp_voucherIssuances = new VoucherIssuanceList($this->voucherIssuances);
$tmp_voucherIssuances->write($gen, 'voucherIssuances');
}
		if ($this->unappliedVoucherIssuances !== null) {
$tmp_unappliedVoucherIssuances = new UnappliedVoucherIssuanceList($this->unappliedVoucherIssuances);
$tmp_unappliedVoucherIssuances->write($gen, 'unappliedVoucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PayTableOrderResponse extends SoapObject {
	public string $result;
	public ?string $receiptId = null;
	public string $errorMessage;
	/** @var VoucherIssuance[] */
	public $voucherIssuances = null;
	/** @var UnappliedVoucherIssuance[] */
	public $unappliedVoucherIssuances = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->receiptId !== null) $gen->out->writeElementNs(self::TNS, 'receiptId', null, $this->receiptId);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->voucherIssuances !== null) {
$tmp_voucherIssuances = new VoucherIssuanceList($this->voucherIssuances);
$tmp_voucherIssuances->write($gen, 'voucherIssuances');
}
		if ($this->unappliedVoucherIssuances !== null) {
$tmp_unappliedVoucherIssuances = new UnappliedVoucherIssuanceList($this->unappliedVoucherIssuances);
$tmp_unappliedVoucherIssuances->write($gen, 'unappliedVoucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PrepayTableOrderResponse extends SoapObject {
	public string $result;
	public string $errorMessage;
	/** @var VoucherIssuance[] */
	public $voucherIssuances = null;
	/** @var UnappliedVoucherIssuance[] */
	public $unappliedVoucherIssuances = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->voucherIssuances !== null) {
$tmp_voucherIssuances = new VoucherIssuanceList($this->voucherIssuances);
$tmp_voucherIssuances->write($gen, 'voucherIssuances');
}
		if ($this->unappliedVoucherIssuances !== null) {
$tmp_unappliedVoucherIssuances = new UnappliedVoucherIssuanceList($this->unappliedVoucherIssuances);
$tmp_unappliedVoucherIssuances->write($gen, 'unappliedVoucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOrdersByExtOrderIdsResponse extends SoapObject {
	/** @var Order[] */
	public $orderList = array();
	public function __construct($list = array()) { $this->orderList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_orderList = new OrderList($this->orderList);
$tmp_orderList->write($gen, 'orderList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetProposalsResponse extends SoapObject {
	/** @var Proposal[] */
	public $proposalList = array();
	public function __construct($list = array()) { $this->proposalList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_proposalList = new ProposalList($this->proposalList);
$tmp_proposalList->write($gen, 'proposalList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetProposalResponse extends SoapObject {
	public string $result;
	public ?Proposal $proposal = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->proposal !== null) $this->proposal->write($gen, 'proposal');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveProposalResponse extends SoapObject {
	public string $result;
	public SaveProposalInfo $info;
	public string $errorMessage;
	public function __construct() {
		$this->info = new SaveProposalInfo();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		$this->info->write($gen, 'info');
		$gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CancelProposalResponse extends SoapObject {
	public string $result;
	public ?string $message = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->message !== null) $gen->out->writeElementNs(self::TNS, 'message', null, $this->message);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateOrderFromProposalResponse extends SoapObject {
	public string $result;
	public ?CreateOrderFromProposalInfo $info = null;
	public ?string $errorMessage = null;
	/** @var UnappliedVoucherIssuance[] */
	public $unappliedVoucherIssuances = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->info !== null) $this->info->write($gen, 'info');
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->unappliedVoucherIssuances !== null) {
$tmp_unappliedVoucherIssuances = new UnappliedVoucherIssuanceList($this->unappliedVoucherIssuances);
$tmp_unappliedVoucherIssuances->write($gen, 'unappliedVoucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateInvoiceFromProposalResponse extends SoapObject {
	public string $result;
	public ?CreateInvoiceFromProposalInfo $info = null;
	public ?string $errorMessage = null;
	/** @var VoucherIssuance[] */
	public $voucherIssuances = null;
	/** @var UnappliedVoucherIssuance[] */
	public $unappliedVoucherIssuances = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->info !== null) $this->info->write($gen, 'info');
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->voucherIssuances !== null) {
$tmp_voucherIssuances = new VoucherIssuanceList($this->voucherIssuances);
$tmp_voucherIssuances->write($gen, 'voucherIssuances');
}
		if ($this->unappliedVoucherIssuances !== null) {
$tmp_unappliedVoucherIssuances = new UnappliedVoucherIssuanceList($this->unappliedVoucherIssuances);
$tmp_unappliedVoucherIssuances->write($gen, 'unappliedVoucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOrdersByReceiptsResponse extends SoapObject {
	/** @var Order[] */
	public $orderList = array();
	public function __construct($list = array()) { $this->orderList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_orderList = new OrderList($this->orderList);
$tmp_orderList->write($gen, 'orderList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCurrentTableOrdersResponse extends SoapObject {
	/** @var Order[] */
	public $orderList = array();
	public function __construct($list = array()) { $this->orderList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_orderList = new OrderList($this->orderList);
$tmp_orderList->write($gen, 'orderList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetOrdersResponse extends SoapObject {
	/** @var Order[] */
	public $orderList = array();
	public function __construct($list = array()) { $this->orderList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_orderList = new OrderList($this->orderList);
$tmp_orderList->write($gen, 'orderList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DetermineContractLinesResponse extends SoapObject {
	/** @var Line[] */
	public $lineList = array();
	public function __construct($list = array()) { $this->lineList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_lineList = new LineList($this->lineList);
$tmp_lineList->write($gen, 'lineList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateInvoiceFromPackingSlipsResponse extends IdempotentResp {
	public string $result;
	public ?string $invoiceId = null;
	/** @var VoucherIssuance[] */
	public $voucherIssuances = null;
	/** @var UnappliedVoucherIssuance[] */
	public $unappliedVoucherIssuances = null;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->invoiceId !== null) $gen->out->writeElementNs(self::TNS, 'invoiceId', null, $this->invoiceId);
		if ($this->voucherIssuances !== null) {
$tmp_voucherIssuances = new VoucherIssuanceList($this->voucherIssuances);
$tmp_voucherIssuances->write($gen, 'voucherIssuances');
}
		if ($this->unappliedVoucherIssuances !== null) {
$tmp_unappliedVoucherIssuances = new UnappliedVoucherIssuanceList($this->unappliedVoucherIssuances);
$tmp_unappliedVoucherIssuances->write($gen, 'unappliedVoucherIssuances');
}
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetCashCountInfoResponse extends SoapObject {
	public CashCountInfo $cashCountInfo;
	public function __construct() {
		$this->cashCountInfo = new CashCountInfo();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->cashCountInfo->write($gen, 'cashCountInfo');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SaveCashCountResponse extends IdempotentResp {
	public string $result;
	public ?string $errorMessage = null;
	public ?string $cashCountInfoState = null;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		if ($this->cashCountInfoState !== null) $gen->out->writeElementNs(self::TNS, 'cashCountInfoState', null, $this->cashCountInfoState);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookConsumerEvent extends SoapObject {
	public string $eventName;
	public bool $blocking;
	public bool $enabled;
	public ?bool $polling = null;
	public ?bool $cancelRequiresAuth = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'eventName', null, $this->eventName);
		$gen->writeBool('blocking', $this->blocking);
		$gen->writeBool('enabled', $this->enabled);
		if ($this->polling !== null) $gen->writeBool('polling', $this->polling);
		if ($this->cancelRequiresAuth !== null) $gen->writeBool('cancelRequiresAuth', $this->cancelRequiresAuth);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookConsumerEventList extends SoapObject {
	/** @var WebhookConsumerEvent[] */
	public $webhookConsumerEvent = array();
	public function __construct($list = array()) { $this->webhookConsumerEvent = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->webhookConsumerEvent as $elem) $elem->write($gen, 'webhookConsumerEvent');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookConsumerTriggerPattern extends SoapObject {
	public string $codeType;
	public string $pattern;
	public ?bool $reject = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'codeType', null, $this->codeType);
		$gen->out->writeElementNs(self::TNS, 'pattern', null, $this->pattern);
		if ($this->reject !== null) $gen->writeBool('reject', $this->reject);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookConsumerTriggerPatternList extends SoapObject {
	/** @var WebhookConsumerTriggerPattern[] */
	public $webhookConsumerTriggerPattern = array();
	public function __construct($list = array()) { $this->webhookConsumerTriggerPattern = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->webhookConsumerTriggerPattern as $elem) $elem->write($gen, 'webhookConsumerTriggerPattern');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookConsumerWorkplace extends SoapObject {
	public int $branchNumber;
	/** @var int[] */
	public $workplaceNumbers = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('branchNumber', $this->branchNumber);
		foreach ($this->workplaceNumbers as $elem) $gen->writeInt('workplaceNumbers', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookConsumerWorkplaceList extends SoapObject {
	/** @var WebhookConsumerWorkplace[] */
	public $webhookConsumerWorkplace = array();
	public function __construct($list = array()) { $this->webhookConsumerWorkplace = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->webhookConsumerWorkplace as $elem) $elem->write($gen, 'webhookConsumerWorkplace');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookConsumer extends SoapObject {
	public string $webhookConsumerId;
	public string $applicationName;
	public string $subscriptionId;
	public string $endpointUrl;
	public string $authenticationType;
	public string $authenticationScope;
	/** @var WebhookConsumerEvent[] */
	public $webhookConsumerEventList = array();
	/** @var WebhookConsumerTriggerPattern[] */
	public $webhookConsumerTriggerPatternList = array();
	/** @var WebhookConsumerWorkplace[] */
	public $webhookConsumerWorkplaceList = array();
	/** @var PaymentMethod[] */
	public $webhookConsumerPaymentMethodList = array();
	/** @var int[] */
	public $articleFilter = array();
	public ?string $companyName = null;
	public ?int $priority = null;
	public ?int $syncMarker = null;
	public bool $enabled;
	public WorkplaceIdentifier $workplaceKey;
	public function __construct() {
		$this->workplaceKey = new WorkplaceIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'webhookConsumerId', null, $this->webhookConsumerId);
		$gen->out->writeElementNs(self::TNS, 'applicationName', null, $this->applicationName);
		$gen->out->writeElementNs(self::TNS, 'subscriptionId', null, $this->subscriptionId);
		$gen->out->writeElementNs(self::TNS, 'endpointUrl', null, $this->endpointUrl);
		$gen->out->writeElementNs(self::TNS, 'authenticationType', null, $this->authenticationType);
		$gen->out->writeElementNs(self::TNS, 'authenticationScope', null, $this->authenticationScope);
		$tmp_webhookConsumerEventList = new WebhookConsumerEventList($this->webhookConsumerEventList);
$tmp_webhookConsumerEventList->write($gen, 'webhookConsumerEventList');

		$tmp_webhookConsumerTriggerPatternList = new WebhookConsumerTriggerPatternList($this->webhookConsumerTriggerPatternList);
$tmp_webhookConsumerTriggerPatternList->write($gen, 'webhookConsumerTriggerPatternList');

		$tmp_webhookConsumerWorkplaceList = new WebhookConsumerWorkplaceList($this->webhookConsumerWorkplaceList);
$tmp_webhookConsumerWorkplaceList->write($gen, 'webhookConsumerWorkplaceList');

		$tmp_webhookConsumerPaymentMethodList = new PaymentMethodList($this->webhookConsumerPaymentMethodList);
$tmp_webhookConsumerPaymentMethodList->write($gen, 'webhookConsumerPaymentMethodList');

		foreach ($this->articleFilter as $elem) $gen->writeInt('articleFilter', $elem);
		if ($this->companyName !== null) $gen->out->writeElementNs(self::TNS, 'companyName', null, $this->companyName);
		if ($this->priority !== null) $gen->writeInt('priority', $this->priority);
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		$gen->writeBool('enabled', $this->enabled);
		$this->workplaceKey->write($gen, 'workplaceKey');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookConsumerList extends SoapObject {
	/** @var WebhookConsumer[] */
	public $webhookConsumer = array();
	public function __construct($list = array()) { $this->webhookConsumer = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->webhookConsumer as $elem) $elem->write($gen, 'webhookConsumer');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetWebhookConsumersRequest extends SoapObject {
	public ?int $syncMarker = null;
	public WorkplaceIdentifier $workplace;
	public function __construct() {
		$this->workplace = new WorkplaceIdentifier();
	}
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		$this->workplace->write($gen, 'workplace');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ExternalPaymentMessage extends SoapObject {
	public ?string $message = null;
	public ?string $customerMessage = null;
	public ?bool $hideTimestamp = null;
	public ?bool $monospacedFont = null;
	public ?bool $clearScreen = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->message !== null) $gen->out->writeElementNs(self::TNS, 'message', null, $this->message);
		if ($this->customerMessage !== null) $gen->out->writeElementNs(self::TNS, 'customerMessage', null, $this->customerMessage);
		if ($this->hideTimestamp !== null) $gen->writeBool('hideTimestamp', $this->hideTimestamp);
		if ($this->monospacedFont !== null) $gen->writeBool('monospacedFont', $this->monospacedFont);
		if ($this->clearScreen !== null) $gen->writeBool('clearScreen', $this->clearScreen);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ExternalPaymentMessageList extends SoapObject {
	/** @var ExternalPaymentMessage[] */
	public $message = array();
	public function __construct($list = array()) { $this->message = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->message as $elem) $elem->write($gen, 'message');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ExternalPaymentCode extends SoapObject {
	public string $codeType;
	public string $code;
	public ?string $text = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'codeType', null, $this->codeType);
		$gen->out->writeElementNs(self::TNS, 'code', null, $this->code);
		if ($this->text !== null) $gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class StartExternalPaymentRequest extends SoapObject {
	public string $externalPaymentId;
	public string $method;
	public BigDecimal $amount;
	public ?string $callbackUrl = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'externalPaymentId', null, $this->externalPaymentId);
		$gen->out->writeElementNs(self::TNS, 'method', null, $this->method);
		$gen->writeValueAndScale('amount', '', $this->amount, 2);
		if ($this->callbackUrl !== null) $gen->out->writeElementNs(self::TNS, 'callbackUrl', null, $this->callbackUrl);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PollExternalPaymentRequest extends SoapObject {
	public string $externalPaymentId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'externalPaymentId', null, $this->externalPaymentId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RequestCancelExternalPaymentRequest extends SoapObject {
	public string $externalPaymentId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'externalPaymentId', null, $this->externalPaymentId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CancelExternalPaymentRequest extends SoapObject {
	public string $externalPaymentId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'externalPaymentId', null, $this->externalPaymentId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookBrowserInput extends SoapObject {
	public ?string $deviceType = null;
	public ?string $platformFamily = null;
	public ?string $platformVersion = null;
	public ?string $browserFamily = null;
	public ?string $browserVersion = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->deviceType !== null) $gen->out->writeElementNs(self::TNS, 'deviceType', null, $this->deviceType);
		if ($this->platformFamily !== null) $gen->out->writeElementNs(self::TNS, 'platformFamily', null, $this->platformFamily);
		if ($this->platformVersion !== null) $gen->out->writeElementNs(self::TNS, 'platformVersion', null, $this->platformVersion);
		if ($this->browserFamily !== null) $gen->out->writeElementNs(self::TNS, 'browserFamily', null, $this->browserFamily);
		if ($this->browserVersion !== null) $gen->out->writeElementNs(self::TNS, 'browserVersion', null, $this->browserVersion);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookDialogInput extends SoapObject {
	public ?int $dialogId = null;
	/** @var int[] */
	public $selectedDialogOptionIds = array();
	public ?string $dialogIdAsString = null;
	/** @var string[] */
	public $selectedDialogOptionIdsAsString = array();
	public function writeProps(SoapGenerator $gen): void {
		if ($this->dialogId !== null) $gen->writeInt('dialogId', $this->dialogId);
		foreach ($this->selectedDialogOptionIds as $elem) $gen->writeInt('selectedDialogOptionIds', $elem);
		if ($this->dialogIdAsString !== null) $gen->out->writeElementNs(self::TNS, 'dialogIdAsString', null, $this->dialogIdAsString);
		foreach ($this->selectedDialogOptionIdsAsString as $elem) $gen->out->writeElementNs(self::TNS, 'selectedDialogOptionIdsAsString', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookFormFieldInput extends SoapObject {
	public string $id;
	public string $type;
	public ?string $value = null;
	/** @var string[] */
	public $selected = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		if ($this->value !== null) $gen->out->writeElementNs(self::TNS, 'value', null, $this->value);
		foreach ($this->selected as $elem) $gen->out->writeElementNs(self::TNS, 'selected', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookFormInput extends SoapObject {
	public string $id;
	/** @var WebhookFormFieldInput[] */
	public $fields = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		foreach ($this->fields as $elem) $elem->write($gen, 'fields');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookScanCodeInput extends SoapObject {
	public string $scannedCode;
	public string $codeType;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'scannedCode', null, $this->scannedCode);
		$gen->out->writeElementNs(self::TNS, 'codeType', null, $this->codeType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookOpenUrlInput extends SoapObject {
	public ?string $redirectUrl = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->redirectUrl !== null) $gen->out->writeElementNs(self::TNS, 'redirectUrl', null, $this->redirectUrl);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ApplyWebhookExternalDiscount extends SoapObject {
	public string $discountId;
	public string $discountDescription;
	public ?string $webhookConsumerId = null;
	public ?BigDecimal $discountPercentage = null;
	public ?BigDecimal $discountAmount = null;
	public ?BigDecimal $applyToQuantity = null;
	public ?string $discountType = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'discountId', null, $this->discountId);
		$gen->out->writeElementNs(self::TNS, 'discountDescription', null, $this->discountDescription);
		if ($this->webhookConsumerId !== null) $gen->out->writeElementNs(self::TNS, 'webhookConsumerId', null, $this->webhookConsumerId);
		if ($this->discountPercentage !== null) $gen->writeBigDecimal('discountPercentage', $this->discountPercentage);
		if ($this->discountAmount !== null) $gen->writeBigDecimal('discountAmount', $this->discountAmount);
		if ($this->applyToQuantity !== null) $gen->writeBigDecimal('applyToQuantity', $this->applyToQuantity);
		if ($this->discountType !== null) $gen->out->writeElementNs(self::TNS, 'discountType', null, $this->discountType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookTableInput extends SoapObject {
	public int $number;
	public int $subNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('number', $this->number);
		$gen->writeInt('subNumber', $this->subNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookRelationInput extends SoapObject {
	public int $relationNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('relationNumber', $this->relationNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookExternalDiscountInput extends SoapObject {
	public string $discountId;
	public string $discountDescription;
	public ?string $webhookConsumerId = null;
	public ?BigDecimal $discountPercentage = null;
	public ?BigDecimal $discountAmount = null;
	public ?string $discountType = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'discountId', null, $this->discountId);
		$gen->out->writeElementNs(self::TNS, 'discountDescription', null, $this->discountDescription);
		if ($this->webhookConsumerId !== null) $gen->out->writeElementNs(self::TNS, 'webhookConsumerId', null, $this->webhookConsumerId);
		if ($this->discountPercentage !== null) $gen->writeBigDecimal('discountPercentage', $this->discountPercentage);
		if ($this->discountAmount !== null) $gen->writeBigDecimal('discountAmount', $this->discountAmount);
		if ($this->discountType !== null) $gen->out->writeElementNs(self::TNS, 'discountType', null, $this->discountType);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookSessionBaseLineInput extends SoapObject {
	public string $lineId;
	public ?int $articleNumber = null;
	public ?BigDecimal $priceIncl = null;
	public ?BigDecimal $quantity = null;
	public string $text;
	public ?BigDecimal $discountPercentage = null;
	public ?BigDecimal $discountAmount = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'lineId', null, $this->lineId);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->priceIncl !== null) $gen->writeBigDecimal('priceIncl', $this->priceIncl);
		if ($this->quantity !== null) $gen->writeBigDecimal('quantity', $this->quantity);
		$gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->discountPercentage !== null) $gen->writeBigDecimal('discountPercentage', $this->discountPercentage);
		if ($this->discountAmount !== null) $gen->writeBigDecimal('discountAmount', $this->discountAmount);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookSessionLineInput extends WebhookSessionBaseLineInput {
	public ?WebhookExternalDiscountInput $externalDiscount = null;
	/** @var WebhookSessionBaseLineInput[] */
	public $preparationMethods = array();
	/** @var WebhookSessionBaseLineInput[] */
	public $componentArticles = array();
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		if ($this->externalDiscount !== null) $this->externalDiscount->write($gen, 'externalDiscount');
		foreach ($this->preparationMethods as $elem) $elem->write($gen, 'preparationMethods');
		foreach ($this->componentArticles as $elem) $elem->write($gen, 'componentArticles');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookSessionInput extends SoapObject {
	public string $sessionId;
	public ?WebhookTableInput $table = null;
	public ?WebhookRelationInput $relation = null;
	/** @var WebhookSessionLineInput[] */
	public $lines = array();
	public ?BigDecimal $openAmount = null;
	public ?BigDecimal $totalInclAmount = null;
	public ?BigDecimal $totalExclAmount = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'sessionId', null, $this->sessionId);
		if ($this->table !== null) $this->table->write($gen, 'table');
		if ($this->relation !== null) $this->relation->write($gen, 'relation');
		foreach ($this->lines as $elem) $elem->write($gen, 'lines');
		if ($this->openAmount !== null) $gen->writeBigDecimal('openAmount', $this->openAmount);
		if ($this->totalInclAmount !== null) $gen->writeBigDecimal('totalInclAmount', $this->totalInclAmount);
		if ($this->totalExclAmount !== null) $gen->writeBigDecimal('totalExclAmount', $this->totalExclAmount);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookSelectRelationInput extends SoapObject {
	public int $relationNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('relationNumber', $this->relationNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookCustomActionInput extends SoapObject {
	public string $customActionId;
	public string $buttonCaption;
	public ?bool $onStartup = null;
	public ?bool $longClick = null;
	public ?BigDecimal $numpadValue = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'customActionId', null, $this->customActionId);
		$gen->out->writeElementNs(self::TNS, 'buttonCaption', null, $this->buttonCaption);
		if ($this->onStartup !== null) $gen->writeBool('onStartup', $this->onStartup);
		if ($this->longClick !== null) $gen->writeBool('longClick', $this->longClick);
		if ($this->numpadValue !== null) $gen->writeBigDecimal('numpadValue', $this->numpadValue);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookMessage extends SoapObject {
	public ?string $message = null;
	public ?string $customerMessage = null;
	public ?int $messageDisplayTime = null;
	public ?int $customerMessageDisplayTime = null;
	public ?bool $hideTimestamp = null;
	public ?bool $clearScreen = null;
	public ?bool $clearCustomerScreen = null;
	public ?bool $monospacedFont = null;
	public ?string $backgroundColor = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->message !== null) $gen->out->writeElementNs(self::TNS, 'message', null, $this->message);
		if ($this->customerMessage !== null) $gen->out->writeElementNs(self::TNS, 'customerMessage', null, $this->customerMessage);
		if ($this->messageDisplayTime !== null) $gen->writeInt('messageDisplayTime', $this->messageDisplayTime);
		if ($this->customerMessageDisplayTime !== null) $gen->writeInt('customerMessageDisplayTime', $this->customerMessageDisplayTime);
		if ($this->hideTimestamp !== null) $gen->writeBool('hideTimestamp', $this->hideTimestamp);
		if ($this->clearScreen !== null) $gen->writeBool('clearScreen', $this->clearScreen);
		if ($this->clearCustomerScreen !== null) $gen->writeBool('clearCustomerScreen', $this->clearCustomerScreen);
		if ($this->monospacedFont !== null) $gen->writeBool('monospacedFont', $this->monospacedFont);
		if ($this->backgroundColor !== null) $gen->out->writeElementNs(self::TNS, 'backgroundColor', null, $this->backgroundColor);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookDialogOption extends SoapObject {
	public int $optionId;
	public string $optionName;
	public ?string $optionColor = null;
	public ?string $optionIdAsString = null;
	public ?string $image = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('optionId', $this->optionId);
		$gen->out->writeElementNs(self::TNS, 'optionName', null, $this->optionName);
		if ($this->optionColor !== null) $gen->out->writeElementNs(self::TNS, 'optionColor', null, $this->optionColor);
		if ($this->optionIdAsString !== null) $gen->out->writeElementNs(self::TNS, 'optionIdAsString', null, $this->optionIdAsString);
		if ($this->image !== null) $gen->out->writeElementNs(self::TNS, 'image', null, $this->image);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookDialog extends SoapObject {
	public ?bool $required = null;
	public ?bool $allowMultipleOptions = null;
	public ?bool $requireConfirmation = null;
	public ?int $columns = null;
	public ?int $dialogId = null;
	public ?string $dialogTitle = null;
	/** @var WebhookDialogOption[] */
	public $dialogOptions = array();
	public ?string $dialogIdAsString = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->required !== null) $gen->writeBool('required', $this->required);
		if ($this->allowMultipleOptions !== null) $gen->writeBool('allowMultipleOptions', $this->allowMultipleOptions);
		if ($this->requireConfirmation !== null) $gen->writeBool('requireConfirmation', $this->requireConfirmation);
		if ($this->columns !== null) $gen->writeInt('columns', $this->columns);
		if ($this->dialogId !== null) $gen->writeInt('dialogId', $this->dialogId);
		if ($this->dialogTitle !== null) $gen->out->writeElementNs(self::TNS, 'dialogTitle', null, $this->dialogTitle);
		foreach ($this->dialogOptions as $elem) $elem->write($gen, 'dialogOptions');
		if ($this->dialogIdAsString !== null) $gen->out->writeElementNs(self::TNS, 'dialogIdAsString', null, $this->dialogIdAsString);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookFormNumber extends SoapObject {
	public ?int $decimals = null;
	public ?BigDecimal $minimumValue = null;
	public ?BigDecimal $maximumValue = null;
	public ?bool $allowNegative = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->decimals !== null) $gen->writeInt('decimals', $this->decimals);
		if ($this->minimumValue !== null) $gen->writeBigDecimal('minimumValue', $this->minimumValue);
		if ($this->maximumValue !== null) $gen->writeBigDecimal('maximumValue', $this->maximumValue);
		if ($this->allowNegative !== null) $gen->writeBool('allowNegative', $this->allowNegative);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookFormDaySchedule extends SoapObject {
	public bool $available;
	public ?int $fromHour = null;
	public ?int $fromMinute = null;
	public ?int $throughHour = null;
	public ?int $throughMinute = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeBool('available', $this->available);
		if ($this->fromHour !== null) $gen->writeInt('fromHour', $this->fromHour);
		if ($this->fromMinute !== null) $gen->writeInt('fromMinute', $this->fromMinute);
		if ($this->throughHour !== null) $gen->writeInt('throughHour', $this->throughHour);
		if ($this->throughMinute !== null) $gen->writeInt('throughMinute', $this->throughMinute);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookFormCalendar extends SoapObject {
	public ?bool $futureOnly = null;
	public ?bool $pastOnly = null;
	public ?\DateTime $earliestDate = null;
	public ?\DateTime $latestDate = null;
	public WebhookFormDaySchedule $sunday;
	public WebhookFormDaySchedule $monday;
	public WebhookFormDaySchedule $tuesday;
	public WebhookFormDaySchedule $wednesday;
	public WebhookFormDaySchedule $thursday;
	public WebhookFormDaySchedule $friday;
	public WebhookFormDaySchedule $saturday;
	public function __construct() {
		$this->sunday = new WebhookFormDaySchedule();
		$this->monday = new WebhookFormDaySchedule();
		$this->tuesday = new WebhookFormDaySchedule();
		$this->wednesday = new WebhookFormDaySchedule();
		$this->thursday = new WebhookFormDaySchedule();
		$this->friday = new WebhookFormDaySchedule();
		$this->saturday = new WebhookFormDaySchedule();
	}
	public function writeProps(SoapGenerator $gen): void {
		if ($this->futureOnly !== null) $gen->writeBool('futureOnly', $this->futureOnly);
		if ($this->pastOnly !== null) $gen->writeBool('pastOnly', $this->pastOnly);
		if ($this->earliestDate !== null) $gen->writeDate('earliestDate', $this->earliestDate);
		if ($this->latestDate !== null) $gen->writeDate('latestDate', $this->latestDate);
		$this->sunday->write($gen, 'sunday');
		$this->monday->write($gen, 'monday');
		$this->tuesday->write($gen, 'tuesday');
		$this->wednesday->write($gen, 'wednesday');
		$this->thursday->write($gen, 'thursday');
		$this->friday->write($gen, 'friday');
		$this->saturday->write($gen, 'saturday');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookFormOption extends SoapObject {
	public string $id;
	public string $label;
	public ?bool $selected = null;
	public ?int $articleNumber = null;
	public ?string $barcode = null;
	public ?string $supplierArticleNumber = null;
	public ?string $pluNumber = null;
	public ?string $extArticleId = null;
	public ?string $color = null;
	public ?string $image = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'label', null, $this->label);
		if ($this->selected !== null) $gen->writeBool('selected', $this->selected);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->barcode !== null) $gen->out->writeElementNs(self::TNS, 'barcode', null, $this->barcode);
		if ($this->supplierArticleNumber !== null) $gen->out->writeElementNs(self::TNS, 'supplierArticleNumber', null, $this->supplierArticleNumber);
		if ($this->pluNumber !== null) $gen->out->writeElementNs(self::TNS, 'pluNumber', null, $this->pluNumber);
		if ($this->extArticleId !== null) $gen->out->writeElementNs(self::TNS, 'extArticleId', null, $this->extArticleId);
		if ($this->color !== null) $gen->out->writeElementNs(self::TNS, 'color', null, $this->color);
		if ($this->image !== null) $gen->out->writeElementNs(self::TNS, 'image', null, $this->image);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookFormSelect extends SoapObject {
	public bool $multiple;
	public int $columns;
	/** @var WebhookFormOption[] */
	public $options = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeBool('multiple', $this->multiple);
		$gen->writeInt('columns', $this->columns);
		foreach ($this->options as $elem) $elem->write($gen, 'options');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookFormField extends SoapObject {
	public string $id;
	public string $type;
	public bool $required;
	public string $label;
	public ?string $hint = null;
	public ?string $value = null;
	public ?int $minimumLength = null;
	public ?int $maximumLength = null;
	public ?string $regex = null;
	public ?string $prefix = null;
	public ?string $suffix = null;
	public ?WebhookFormNumber $number = null;
	public ?WebhookFormCalendar $calendar = null;
	public ?WebhookFormSelect $select = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		$gen->writeBool('required', $this->required);
		$gen->out->writeElementNs(self::TNS, 'label', null, $this->label);
		if ($this->hint !== null) $gen->out->writeElementNs(self::TNS, 'hint', null, $this->hint);
		if ($this->value !== null) $gen->out->writeElementNs(self::TNS, 'value', null, $this->value);
		if ($this->minimumLength !== null) $gen->writeInt('minimumLength', $this->minimumLength);
		if ($this->maximumLength !== null) $gen->writeInt('maximumLength', $this->maximumLength);
		if ($this->regex !== null) $gen->out->writeElementNs(self::TNS, 'regex', null, $this->regex);
		if ($this->prefix !== null) $gen->out->writeElementNs(self::TNS, 'prefix', null, $this->prefix);
		if ($this->suffix !== null) $gen->out->writeElementNs(self::TNS, 'suffix', null, $this->suffix);
		if ($this->number !== null) $this->number->write($gen, 'number');
		if ($this->calendar !== null) $this->calendar->write($gen, 'calendar');
		if ($this->select !== null) $this->select->write($gen, 'select');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookForm extends SoapObject {
	public string $id;
	public string $title;
	public bool $enableReset;
	public string $submitText;
	public string $cancelText;
	/** @var WebhookFormField[] */
	public $fields = array();
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'id', null, $this->id);
		$gen->out->writeElementNs(self::TNS, 'title', null, $this->title);
		$gen->writeBool('enableReset', $this->enableReset);
		$gen->out->writeElementNs(self::TNS, 'submitText', null, $this->submitText);
		$gen->out->writeElementNs(self::TNS, 'cancelText', null, $this->cancelText);
		foreach ($this->fields as $elem) $elem->write($gen, 'fields');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookDisplayBarcode extends SoapObject {
	public string $codeType;
	public string $code;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'codeType', null, $this->codeType);
		$gen->out->writeElementNs(self::TNS, 'code', null, $this->code);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookOpenUrl extends SoapObject {
	public string $url;
	public ?bool $autoOpen = null;
	public ?string $urlTitle = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'url', null, $this->url);
		if ($this->autoOpen !== null) $gen->writeBool('autoOpen', $this->autoOpen);
		if ($this->urlTitle !== null) $gen->out->writeElementNs(self::TNS, 'urlTitle', null, $this->urlTitle);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookError extends SoapObject {
	public string $type;
	public string $code;
	public string $message;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		$gen->out->writeElementNs(self::TNS, 'code', null, $this->code);
		$gen->out->writeElementNs(self::TNS, 'message', null, $this->message);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookRequestScanCode extends SoapObject {
	public bool $required;
	public string $requestTitle;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeBool('required', $this->required);
		$gen->out->writeElementNs(self::TNS, 'requestTitle', null, $this->requestTitle);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookScanCode extends SoapObject {
	public bool $recognized;
	public ?int $relationNumber = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeBool('recognized', $this->recognized);
		if ($this->relationNumber !== null) $gen->writeInt('relationNumber', $this->relationNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookLineChange extends SoapObject {
	public string $lineId;
	public ?ApplyWebhookExternalDiscount $externalDiscount = null;
	public ?string $webhookConsumerId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'lineId', null, $this->lineId);
		if ($this->externalDiscount !== null) $this->externalDiscount->write($gen, 'externalDiscount');
		if ($this->webhookConsumerId !== null) $gen->out->writeElementNs(self::TNS, 'webhookConsumerId', null, $this->webhookConsumerId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookLineAddition extends SoapObject {
	public ?string $lineId = null;
	public ?int $articleNumber = null;
	public ?string $barcode = null;
	public ?string $pluNumber = null;
	public ?string $supplierArticleNumber = null;
	public ?string $extArticleId = null;
	public ?BigDecimal $priceIncl = null;
	public ?BigDecimal $quantity = null;
	public ?string $text = null;
	public ?ApplyWebhookExternalDiscount $externalDiscount = null;
	public ?string $webhookConsumerId = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->lineId !== null) $gen->out->writeElementNs(self::TNS, 'lineId', null, $this->lineId);
		if ($this->articleNumber !== null) $gen->writeInt('articleNumber', $this->articleNumber);
		if ($this->barcode !== null) $gen->out->writeElementNs(self::TNS, 'barcode', null, $this->barcode);
		if ($this->pluNumber !== null) $gen->out->writeElementNs(self::TNS, 'pluNumber', null, $this->pluNumber);
		if ($this->supplierArticleNumber !== null) $gen->out->writeElementNs(self::TNS, 'supplierArticleNumber', null, $this->supplierArticleNumber);
		if ($this->extArticleId !== null) $gen->out->writeElementNs(self::TNS, 'extArticleId', null, $this->extArticleId);
		if ($this->priceIncl !== null) $gen->writeBigDecimal('priceIncl', $this->priceIncl);
		if ($this->quantity !== null) $gen->writeBigDecimal('quantity', $this->quantity);
		if ($this->text !== null) $gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
		if ($this->externalDiscount !== null) $this->externalDiscount->write($gen, 'externalDiscount');
		if ($this->webhookConsumerId !== null) $gen->out->writeElementNs(self::TNS, 'webhookConsumerId', null, $this->webhookConsumerId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookLineDeletion extends SoapObject {
	public string $lineId;
	public ?string $webhookConsumerId = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'lineId', null, $this->lineId);
		if ($this->webhookConsumerId !== null) $gen->out->writeElementNs(self::TNS, 'webhookConsumerId', null, $this->webhookConsumerId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookReq extends IdempotentReq {
	public ?WebhookBrowserInput $browser = null;
	public ?WebhookDialogInput $dialog = null;
	public ?WebhookScanCodeInput $scanCode = null;
	public ?WebhookOpenUrlInput $openUrl = null;
	public ?WebhookSessionInput $session = null;
	public ?WebhookSessionLineInput $addSessionLine = null;
	public ?WebhookSessionLineInput $updateSessionLine = null;
	public ?WebhookSessionLineInput $removeSessionLine = null;
	public ?WebhookSelectRelationInput $selectRelation = null;
	public ?WebhookCustomActionInput $customAction = null;
	public ?WebhookFormInput $form = null;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		if ($this->browser !== null) $this->browser->write($gen, 'browser');
		if ($this->dialog !== null) $this->dialog->write($gen, 'dialog');
		if ($this->scanCode !== null) $this->scanCode->write($gen, 'scanCode');
		if ($this->openUrl !== null) $this->openUrl->write($gen, 'openUrl');
		if ($this->session !== null) $this->session->write($gen, 'session');
		if ($this->addSessionLine !== null) $this->addSessionLine->write($gen, 'addSessionLine');
		if ($this->updateSessionLine !== null) $this->updateSessionLine->write($gen, 'updateSessionLine');
		if ($this->removeSessionLine !== null) $this->removeSessionLine->write($gen, 'removeSessionLine');
		if ($this->selectRelation !== null) $this->selectRelation->write($gen, 'selectRelation');
		if ($this->customAction !== null) $this->customAction->write($gen, 'customAction');
		if ($this->form !== null) $this->form->write($gen, 'form');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ExternalPaymentReq extends SoapObject {
	public string $externalPaymentId;
	public ?string $method = null;
	public ?BigDecimal $amount = null;
	public ?string $callbackUrl = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'externalPaymentId', null, $this->externalPaymentId);
		if ($this->method !== null) $gen->out->writeElementNs(self::TNS, 'method', null, $this->method);
		if ($this->amount !== null) $gen->writeValueAndScale('amount', '', $this->amount, 2);
		if ($this->callbackUrl !== null) $gen->out->writeElementNs(self::TNS, 'callbackUrl', null, $this->callbackUrl);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ExternalPaymentResp extends SoapObject {
	public string $externalPaymentId;
	public ?bool $started = null;
	public ?bool $confirmed = null;
	public ?bool $cancelled = null;
	public ?BigDecimal $finalAmount = null;
	public ?string $externalTransactionReference = null;
	/** @var ExternalPaymentReceiptText[] */
	public $receiptTexts = array();
	public ?string $cardType = null;
	public ?string $terminalId = null;
	public ?string $externalMethod = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'externalPaymentId', null, $this->externalPaymentId);
		if ($this->started !== null) $gen->writeBool('started', $this->started);
		if ($this->confirmed !== null) $gen->writeBool('confirmed', $this->confirmed);
		if ($this->cancelled !== null) $gen->writeBool('cancelled', $this->cancelled);
		if ($this->finalAmount !== null) $gen->writeValueAndScale('finalAmount', '', $this->finalAmount, 2);
		if ($this->externalTransactionReference !== null) $gen->out->writeElementNs(self::TNS, 'externalTransactionReference', null, $this->externalTransactionReference);
		foreach ($this->receiptTexts as $elem) $elem->write($gen, 'receiptTexts');
		if ($this->cardType !== null) $gen->out->writeElementNs(self::TNS, 'cardType', null, $this->cardType);
		if ($this->terminalId !== null) $gen->out->writeElementNs(self::TNS, 'terminalId', null, $this->terminalId);
		if ($this->externalMethod !== null) $gen->out->writeElementNs(self::TNS, 'externalMethod', null, $this->externalMethod);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ExternalPaymentWebhookRequest extends WebhookReq {
	public ExternalPaymentReq $externalPayment;
	public function __construct() {
		$this->externalPayment = new ExternalPaymentReq();
	}
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$this->externalPayment->write($gen, 'externalPayment');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class SendWebhookRequest extends WebhookReq {
	public string $webhookEvent;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'webhookEvent', null, $this->webhookEvent);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetWebhookConsumersResponse extends SoapObject {
	/** @var WebhookConsumer[] */
	public $webhookConsumerList = array();
	public function __construct($list = array()) { $this->webhookConsumerList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_webhookConsumerList = new WebhookConsumerList($this->webhookConsumerList);
$tmp_webhookConsumerList->write($gen, 'webhookConsumerList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class StartExternalPaymentResponse extends SoapObject {
	public bool $isStarted;
	public bool $isConfirmed;
	public bool $isCancelled;
	public ?BigDecimal $finalAmount = null;
	/** @var ExternalPaymentMessage[] */
	public $messages = null;
	public ?ExternalPaymentCode $code = null;
	public ?string $url = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeBool('isStarted', $this->isStarted);
		$gen->writeBool('isConfirmed', $this->isConfirmed);
		$gen->writeBool('isCancelled', $this->isCancelled);
		if ($this->finalAmount !== null) $gen->writeValueAndScale('finalAmount', '', $this->finalAmount, 2);
		if ($this->messages !== null) {
$tmp_messages = new ExternalPaymentMessageList($this->messages);
$tmp_messages->write($gen, 'messages');
}
		if ($this->code !== null) $this->code->write($gen, 'code');
		if ($this->url !== null) $gen->out->writeElementNs(self::TNS, 'url', null, $this->url);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class PollExternalPaymentResponse extends SoapObject {
	public bool $isConfirmed;
	public bool $isCancelled;
	public ?BigDecimal $finalAmount = null;
	/** @var ExternalPaymentMessage[] */
	public $messages = null;
	public ?ExternalPaymentCode $code = null;
	public ?string $url = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeBool('isConfirmed', $this->isConfirmed);
		$gen->writeBool('isCancelled', $this->isCancelled);
		if ($this->finalAmount !== null) $gen->writeValueAndScale('finalAmount', '', $this->finalAmount, 2);
		if ($this->messages !== null) {
$tmp_messages = new ExternalPaymentMessageList($this->messages);
$tmp_messages->write($gen, 'messages');
}
		if ($this->code !== null) $this->code->write($gen, 'code');
		if ($this->url !== null) $gen->out->writeElementNs(self::TNS, 'url', null, $this->url);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RequestCancelExternalPaymentResponse extends SoapObject {
	public bool $isConfirmed;
	public bool $isCancelled;
	public ?BigDecimal $finalAmount = null;
	/** @var ExternalPaymentMessage[] */
	public $messages = null;
	public ?ExternalPaymentCode $code = null;
	public ?string $url = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeBool('isConfirmed', $this->isConfirmed);
		$gen->writeBool('isCancelled', $this->isCancelled);
		if ($this->finalAmount !== null) $gen->writeValueAndScale('finalAmount', '', $this->finalAmount, 2);
		if ($this->messages !== null) {
$tmp_messages = new ExternalPaymentMessageList($this->messages);
$tmp_messages->write($gen, 'messages');
}
		if ($this->code !== null) $this->code->write($gen, 'code');
		if ($this->url !== null) $gen->out->writeElementNs(self::TNS, 'url', null, $this->url);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CancelExternalPaymentResponse extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ExternalPaymentWebhookResponse extends WebhookResp {
	public ?ExternalPaymentResp $externalPayment = null;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		if ($this->externalPayment !== null) $this->externalPayment->write($gen, 'externalPayment');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class WebhookResp extends IdempotentResp {
	/** @var WebhookMessage[] */
	public $messages = array();
	public ?WebhookDialog $dialog = null;
	public ?WebhookDisplayBarcode $displayBarcode = null;
	public ?WebhookOpenUrl $openUrl = null;
	public ?WebhookError $error = null;
	public ?WebhookRequestScanCode $requestScanCode = null;
	public ?WebhookScanCode $scanCode = null;
	/** @var WebhookLineChange[] */
	public $lineChanges = array();
	/** @var WebhookLineAddition[] */
	public $lineAdditions = array();
	/** @var WebhookLineDeletion[] */
	public $lineDeletions = array();
	public ?bool $keepPolling = null;
	public ?WebhookForm $form = null;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		foreach ($this->messages as $elem) $elem->write($gen, 'messages');
		if ($this->dialog !== null) $this->dialog->write($gen, 'dialog');
		if ($this->displayBarcode !== null) $this->displayBarcode->write($gen, 'displayBarcode');
		if ($this->openUrl !== null) $this->openUrl->write($gen, 'openUrl');
		if ($this->error !== null) $this->error->write($gen, 'error');
		if ($this->requestScanCode !== null) $this->requestScanCode->write($gen, 'requestScanCode');
		if ($this->scanCode !== null) $this->scanCode->write($gen, 'scanCode');
		foreach ($this->lineChanges as $elem) $elem->write($gen, 'lineChanges');
		foreach ($this->lineAdditions as $elem) $elem->write($gen, 'lineAdditions');
		foreach ($this->lineDeletions as $elem) $elem->write($gen, 'lineDeletions');
		if ($this->keepPolling !== null) $gen->writeBool('keepPolling', $this->keepPolling);
		if ($this->form !== null) $this->form->write($gen, 'form');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InterbranchOrderLine extends SoapObject {
	public int $articleNumber;
	public BigDecimal $quantity;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeValueAndScale('quantity', 'decimalPlaces', $this->quantity, 2);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InterbranchOrderLineList extends SoapObject {
	/** @var InterbranchOrderLine[] */
	public $interbranchOrderLine = array();
	public function __construct($list = array()) { $this->interbranchOrderLine = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->interbranchOrderLine as $elem) $elem->write($gen, 'interbranchOrderLine');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InterbranchOrder extends SoapObject {
	public YearNumber $interbranchOrderNumber;
	public \DateTime $entryTimestamp;
	public int $syncMarker;
	public int $fromBranchNumber;
	public int $toBranchNumber;
	public int $employeeNumber;
	public ?string $reference = null;
	public string $interbranchOrderState;
	/** @var InterbranchOrderLine[] */
	public $interbranchOrderLineList = null;
	public ?string $scancode = null;
	public function __construct() {
		$this->interbranchOrderNumber = new YearNumber();
		$this->entryTimestamp = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->interbranchOrderNumber->write($gen, 'interbranchOrderNumber');
		(SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		$gen->writeInt('syncMarker', $this->syncMarker);
		$gen->writeInt('fromBranchNumber', $this->fromBranchNumber);
		$gen->writeInt('toBranchNumber', $this->toBranchNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		$gen->out->writeElementNs(self::TNS, 'interbranchOrderState', null, $this->interbranchOrderState);
		if ($this->interbranchOrderLineList !== null) {
$tmp_interbranchOrderLineList = new InterbranchOrderLineList($this->interbranchOrderLineList);
$tmp_interbranchOrderLineList->write($gen, 'interbranchOrderLineList');
}
		if ($this->scancode !== null) $gen->out->writeElementNs(self::TNS, 'scancode', null, $this->scancode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InterbranchOrderList extends SoapObject {
	/** @var InterbranchOrder[] */
	public $interbranchOrder = array();
	public function __construct($list = array()) { $this->interbranchOrder = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->interbranchOrder as $elem) $elem->write($gen, 'interbranchOrder');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetInterbranchOrdersRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public ?int $fromBranchNumber = null;
	public ?int $toBranchNumber = null;
	/** @var string[] */
	public $interbranchOrderState = array();
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
		if ($this->fromBranchNumber !== null) $gen->writeInt('fromBranchNumber', $this->fromBranchNumber);
		if ($this->toBranchNumber !== null) $gen->writeInt('toBranchNumber', $this->toBranchNumber);
		foreach ($this->interbranchOrderState as $elem) $gen->out->writeElementNs(self::TNS, 'interbranchOrderState', null, $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InterbranchOrderRequest extends SoapObject {
	public int $fromBranchNumber;
	public int $toBranchNumber;
	public int $employeeNumber;
	public ?string $reference = null;
	/** @var InterbranchOrderLine[] */
	public $interbranchOrderLineList = null;
	public ?string $scancode = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('fromBranchNumber', $this->fromBranchNumber);
		$gen->writeInt('toBranchNumber', $this->toBranchNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->interbranchOrderLineList !== null) {
$tmp_interbranchOrderLineList = new InterbranchOrderLineList($this->interbranchOrderLineList);
$tmp_interbranchOrderLineList->write($gen, 'interbranchOrderLineList');
}
		if ($this->scancode !== null) $gen->out->writeElementNs(self::TNS, 'scancode', null, $this->scancode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateInterbranchOrderRequest extends SoapObject {
	public InterbranchOrderRequest $interbranchOrderRequest;
	public int $branchNumber;
	public int $workplaceNumber;
	public function __construct() {
		$this->interbranchOrderRequest = new InterbranchOrderRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->interbranchOrderRequest->write($gen, 'interbranchOrderRequest');
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateInterbranchOrderRequest extends SoapObject {
	public YearNumber $interbranchOrderNumber;
	public int $branchNumber;
	public int $workplaceNumber;
	public int $employeeNumber;
	/** @var InterbranchOrderLine[] */
	public $interbranchOrderLineList = null;
	public ?string $reference = null;
	public ?string $scancode = null;
	public function __construct() {
		$this->interbranchOrderNumber = new YearNumber();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->interbranchOrderNumber->write($gen, 'interbranchOrderNumber');
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->interbranchOrderLineList !== null) {
$tmp_interbranchOrderLineList = new InterbranchOrderLineList($this->interbranchOrderLineList);
$tmp_interbranchOrderLineList->write($gen, 'interbranchOrderLineList');
}
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->scancode !== null) $gen->out->writeElementNs(self::TNS, 'scancode', null, $this->scancode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ClaimInterbranchOrderRequest extends SoapObject {
	public YearNumber $interbranchOrderNumber;
	public int $branchNumber;
	public int $workplaceNumber;
	public int $employeeNumber;
	public function __construct() {
		$this->interbranchOrderNumber = new YearNumber();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->interbranchOrderNumber->write($gen, 'interbranchOrderNumber');
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReleaseInterbranchOrderRequest extends SoapObject {
	public YearNumber $interbranchOrderNumber;
	public function __construct() {
		$this->interbranchOrderNumber = new YearNumber();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->interbranchOrderNumber->write($gen, 'interbranchOrderNumber');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InterbranchShipmentLine extends SoapObject {
	public int $articleNumber;
	public BigDecimal $quantity;
	public ?BigDecimal $cancelledQuantity = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeValueAndScale('quantity', 'decimalPlaces', $this->quantity, 2);
		if ($this->cancelledQuantity !== null) $gen->writeValueAndScale('cancelledQuantity', 'cancelledDecimalPlaces', $this->cancelledQuantity, 2);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InterbranchShipmentLineList extends SoapObject {
	/** @var InterbranchShipmentLine[] */
	public $interbranchShipmentLine = array();
	public function __construct($list = array()) { $this->interbranchShipmentLine = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->interbranchShipmentLine as $elem) $elem->write($gen, 'interbranchShipmentLine');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InterbranchShipment extends SoapObject {
	public YearNumber $interbranchShipmentNumber;
	public YearNumber $interbranchOrderNumber;
	public \DateTime $entryTimestamp;
	public int $syncMarker;
	public int $fromBranchNumber;
	public int $toBranchNumber;
	public int $employeeNumber;
	public ?string $reference = null;
	public string $interbranchShipmentState;
	/** @var InterbranchShipmentLine[] */
	public $interbranchShipmentLineList = null;
	public ?string $scancode = null;
	public function __construct() {
		$this->interbranchShipmentNumber = new YearNumber();
		$this->interbranchOrderNumber = new YearNumber();
		$this->entryTimestamp = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->interbranchShipmentNumber->write($gen, 'interbranchShipmentNumber');
		$this->interbranchOrderNumber->write($gen, 'interbranchOrderNumber');
		(SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		$gen->writeInt('syncMarker', $this->syncMarker);
		$gen->writeInt('fromBranchNumber', $this->fromBranchNumber);
		$gen->writeInt('toBranchNumber', $this->toBranchNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		$gen->out->writeElementNs(self::TNS, 'interbranchShipmentState', null, $this->interbranchShipmentState);
		if ($this->interbranchShipmentLineList !== null) {
$tmp_interbranchShipmentLineList = new InterbranchShipmentLineList($this->interbranchShipmentLineList);
$tmp_interbranchShipmentLineList->write($gen, 'interbranchShipmentLineList');
}
		if ($this->scancode !== null) $gen->out->writeElementNs(self::TNS, 'scancode', null, $this->scancode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InterbranchShipmentList extends SoapObject {
	/** @var InterbranchShipment[] */
	public $interbranchShipment = array();
	public function __construct($list = array()) { $this->interbranchShipment = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->interbranchShipment as $elem) $elem->write($gen, 'interbranchShipment');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetInterbranchShipmentsRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ShipInterbranchOrderRequest extends SoapObject {
	public YearNumber $interbranchOrderNumber;
	public int $branchNumber;
	public int $workplaceNumber;
	public ?int $employeeNumber = null;
	/** @var InterbranchOrderLine[] */
	public $interbranchOrderLineList = null;
	public ?string $reference = null;
	public ?string $scancode = null;
	public function __construct() {
		$this->interbranchOrderNumber = new YearNumber();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->interbranchOrderNumber->write($gen, 'interbranchOrderNumber');
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
		if ($this->employeeNumber !== null) $gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->interbranchOrderLineList !== null) {
$tmp_interbranchOrderLineList = new InterbranchOrderLineList($this->interbranchOrderLineList);
$tmp_interbranchOrderLineList->write($gen, 'interbranchOrderLineList');
}
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->scancode !== null) $gen->out->writeElementNs(self::TNS, 'scancode', null, $this->scancode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InterbranchDeliveryLine extends SoapObject {
	public int $articleNumber;
	public BigDecimal $quantity;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->writeValueAndScale('quantity', 'decimalPlaces', $this->quantity, 2);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InterbranchDeliveryLineList extends SoapObject {
	/** @var InterbranchDeliveryLine[] */
	public $interbranchDeliveryLine = array();
	public function __construct($list = array()) { $this->interbranchDeliveryLine = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->interbranchDeliveryLine as $elem) $elem->write($gen, 'interbranchDeliveryLine');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InterbranchDelivery extends SoapObject {
	public YearNumberPart $interbranchDeliveryNumber;
	public YearNumber $interbranchShipmentNumber;
	public YearNumber $interbranchOrderNumber;
	public \DateTime $entryTimestamp;
	public int $syncMarker;
	public int $fromBranchNumber;
	public int $toBranchNumber;
	public int $employeeNumber;
	public ?string $reference = null;
	/** @var InterbranchDeliveryLine[] */
	public $interbranchDeliveryLineList = null;
	public ?string $scancode = null;
	public function __construct() {
		$this->interbranchDeliveryNumber = new YearNumberPart();
		$this->interbranchShipmentNumber = new YearNumber();
		$this->interbranchOrderNumber = new YearNumber();
		$this->entryTimestamp = new \DateTime();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->interbranchDeliveryNumber->write($gen, 'interbranchDeliveryNumber');
		$this->interbranchShipmentNumber->write($gen, 'interbranchShipmentNumber');
		$this->interbranchOrderNumber->write($gen, 'interbranchOrderNumber');
		(SoapMplusDateTime::fromDateTime($this->entryTimestamp))->write($gen, 'entryTimestamp');
		$gen->writeInt('syncMarker', $this->syncMarker);
		$gen->writeInt('fromBranchNumber', $this->fromBranchNumber);
		$gen->writeInt('toBranchNumber', $this->toBranchNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->interbranchDeliveryLineList !== null) {
$tmp_interbranchDeliveryLineList = new InterbranchDeliveryLineList($this->interbranchDeliveryLineList);
$tmp_interbranchDeliveryLineList->write($gen, 'interbranchDeliveryLineList');
}
		if ($this->scancode !== null) $gen->out->writeElementNs(self::TNS, 'scancode', null, $this->scancode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InterbranchDeliveryList extends SoapObject {
	/** @var InterbranchDelivery[] */
	public $interbranchDelivery = array();
	public function __construct($list = array()) { $this->interbranchDelivery = $list; }
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->interbranchDelivery as $elem) $elem->write($gen, 'interbranchDelivery');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetInterbranchDeliveriesRequest extends SoapObject {
	public ?int $syncMarker = null;
	public ?int $syncMarkerLimit = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->syncMarker !== null) $gen->writeInt('syncMarker', $this->syncMarker);
		if ($this->syncMarkerLimit !== null) $gen->writeInt('syncMarkerLimit', $this->syncMarkerLimit);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeliverInterbranchShipmentRequest extends SoapObject {
	public YearNumber $interbranchShipmentNumber;
	public int $branchNumber;
	public int $workplaceNumber;
	public function __construct() {
		$this->interbranchShipmentNumber = new YearNumber();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->interbranchShipmentNumber->write($gen, 'interbranchShipmentNumber');
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InterbranchShipmentRequest extends SoapObject {
	public int $fromBranchNumber;
	public int $toBranchNumber;
	public int $employeeNumber;
	public ?string $reference = null;
	/** @var InterbranchOrderLine[] */
	public $interbranchOrderLineList = null;
	public ?string $scancode = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('fromBranchNumber', $this->fromBranchNumber);
		$gen->writeInt('toBranchNumber', $this->toBranchNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->interbranchOrderLineList !== null) {
$tmp_interbranchOrderLineList = new InterbranchOrderLineList($this->interbranchOrderLineList);
$tmp_interbranchOrderLineList->write($gen, 'interbranchOrderLineList');
}
		if ($this->scancode !== null) $gen->out->writeElementNs(self::TNS, 'scancode', null, $this->scancode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateInterbranchShipmentRequest extends SoapObject {
	public InterbranchShipmentRequest $interbranchShipmentRequest;
	public int $branchNumber;
	public int $workplaceNumber;
	public function __construct() {
		$this->interbranchShipmentRequest = new InterbranchShipmentRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->interbranchShipmentRequest->write($gen, 'interbranchShipmentRequest');
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InterbranchDeliveryRequest extends SoapObject {
	public int $fromBranchNumber;
	public int $toBranchNumber;
	public int $employeeNumber;
	public ?string $reference = null;
	/** @var InterbranchOrderLine[] */
	public $interbranchOrderLineList = null;
	public ?string $scancode = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('fromBranchNumber', $this->fromBranchNumber);
		$gen->writeInt('toBranchNumber', $this->toBranchNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		if ($this->reference !== null) $gen->out->writeElementNs(self::TNS, 'reference', null, $this->reference);
		if ($this->interbranchOrderLineList !== null) {
$tmp_interbranchOrderLineList = new InterbranchOrderLineList($this->interbranchOrderLineList);
$tmp_interbranchOrderLineList->write($gen, 'interbranchOrderLineList');
}
		if ($this->scancode !== null) $gen->out->writeElementNs(self::TNS, 'scancode', null, $this->scancode);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateInterbranchDeliveryRequest extends SoapObject {
	public InterbranchDeliveryRequest $interbranchDeliveryRequest;
	public int $branchNumber;
	public int $workplaceNumber;
	public function __construct() {
		$this->interbranchDeliveryRequest = new InterbranchDeliveryRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->interbranchDeliveryRequest->write($gen, 'interbranchDeliveryRequest');
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('workplaceNumber', $this->workplaceNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ArticleFilter extends SoapObject {
	/** @var int[] */
	public $articleNumbers = array();
	/** @var int[] */
	public $turnoverGroupNumbers = array();
	/** @var int[] */
	public $articleCategoryIds = array();
	public function writeProps(SoapGenerator $gen): void {
		foreach ($this->articleNumbers as $elem) $gen->writeInt('articleNumbers', $elem);
		foreach ($this->turnoverGroupNumbers as $elem) $gen->writeInt('turnoverGroupNumbers', $elem);
		foreach ($this->articleCategoryIds as $elem) $gen->writeInt('articleCategoryIds', $elem);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RunInterbranchPlannerRequest extends IdempotentReq {
	public string $mode;
	/** @var int[] */
	public $fromBranchNumbers = array();
	/** @var int[] */
	public $toBranchNumbers = array();
	public ?ArticleFilter $articleFilter = null;
	public ?bool $roundByPrimaryPackaging = null;
	public ?BigDecimal $defaultPrimaryPackaging = null;
	public ?BigDecimal $roundBySpecificPackaging = null;
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'mode', null, $this->mode);
		foreach ($this->fromBranchNumbers as $elem) $gen->writeInt('fromBranchNumbers', $elem);
		foreach ($this->toBranchNumbers as $elem) $gen->writeInt('toBranchNumbers', $elem);
		if ($this->articleFilter !== null) $this->articleFilter->write($gen, 'articleFilter');
		if ($this->roundByPrimaryPackaging !== null) $gen->writeBool('roundByPrimaryPackaging', $this->roundByPrimaryPackaging);
		if ($this->defaultPrimaryPackaging !== null) $gen->writeBigDecimal('defaultPrimaryPackaging', $this->defaultPrimaryPackaging);
		if ($this->roundBySpecificPackaging !== null) $gen->writeBigDecimal('roundBySpecificPackaging', $this->roundBySpecificPackaging);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class InterbranchPlannerMessage extends SoapObject {
	public int $fromBranchNumber;
	public int $toBranchNumber;
	public int $articleNumber;
	public string $type;
	public string $text;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('fromBranchNumber', $this->fromBranchNumber);
		$gen->writeInt('toBranchNumber', $this->toBranchNumber);
		$gen->writeInt('articleNumber', $this->articleNumber);
		$gen->out->writeElementNs(self::TNS, 'type', null, $this->type);
		$gen->out->writeElementNs(self::TNS, 'text', null, $this->text);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetInterbranchOrdersResponse extends SoapObject {
	/** @var InterbranchOrder[] */
	public $interbranchOrderList = array();
	public function __construct($list = array()) { $this->interbranchOrderList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_interbranchOrderList = new InterbranchOrderList($this->interbranchOrderList);
$tmp_interbranchOrderList->write($gen, 'interbranchOrderList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateInterbranchOrderResponse extends SoapObject {
	public string $result;
	public ?InterbranchOrder $interbranchOrder = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->interbranchOrder !== null) $this->interbranchOrder->write($gen, 'interbranchOrder');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class UpdateInterbranchOrderResponse extends SoapObject {
	public string $result;
	public ?InterbranchOrder $interbranchOrder = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->interbranchOrder !== null) $this->interbranchOrder->write($gen, 'interbranchOrder');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ClaimInterbranchOrderResponse extends SoapObject {
	public string $result;
	public ?InterbranchOrder $interbranchOrder = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->interbranchOrder !== null) $this->interbranchOrder->write($gen, 'interbranchOrder');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ReleaseInterbranchOrderResponse extends SoapObject {
	public string $result;
	public ?InterbranchOrder $interbranchOrder = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->interbranchOrder !== null) $this->interbranchOrder->write($gen, 'interbranchOrder');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetInterbranchShipmentsResponse extends SoapObject {
	/** @var InterbranchShipment[] */
	public $interbranchShipmentList = array();
	public function __construct($list = array()) { $this->interbranchShipmentList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_interbranchShipmentList = new InterbranchShipmentList($this->interbranchShipmentList);
$tmp_interbranchShipmentList->write($gen, 'interbranchShipmentList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class ShipInterbranchOrderResponse extends SoapObject {
	public string $result;
	public ?InterbranchShipment $interbranchShipment = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->interbranchShipment !== null) $this->interbranchShipment->write($gen, 'interbranchShipment');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class GetInterbranchDeliveriesResponse extends SoapObject {
	/** @var InterbranchDelivery[] */
	public $interbranchDeliveryList = array();
	public function __construct($list = array()) { $this->interbranchDeliveryList = $list; }
	public function writeProps(SoapGenerator $gen): void {
		$tmp_interbranchDeliveryList = new InterbranchDeliveryList($this->interbranchDeliveryList);
$tmp_interbranchDeliveryList->write($gen, 'interbranchDeliveryList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class DeliverInterbranchShipmentResponse extends SoapObject {
	public string $result;
	public ?InterbranchDelivery $interbranchDelivery = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->interbranchDelivery !== null) $this->interbranchDelivery->write($gen, 'interbranchDelivery');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateInterbranchShipmentResponse extends SoapObject {
	public string $result;
	public ?InterbranchShipment $interbranchShipment = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->interbranchShipment !== null) $this->interbranchShipment->write($gen, 'interbranchShipment');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class CreateInterbranchDeliveryResponse extends SoapObject {
	public string $result;
	public ?InterbranchDelivery $interbranchDelivery = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->interbranchDelivery !== null) $this->interbranchDelivery->write($gen, 'interbranchDelivery');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class RunInterbranchPlannerResponse extends IdempotentResp {
	public string $result;
	public ?string $errorMessage = null;
	/** @var YearNumber[] */
	public $createdInterbranchOrders = array();
	/** @var YearNumber[] */
	public $updatedInterbranchOrders = array();
	/** @var InterbranchPlannerMessage[] */
	public $messages = array();
	public function writeProps(SoapGenerator $gen): void {
	    parent::writeProps($gen);
		$gen->out->writeElementNs(self::TNS, 'result', null, $this->result);
		if ($this->errorMessage !== null) $gen->out->writeElementNs(self::TNS, 'errorMessage', null, $this->errorMessage);
		foreach ($this->createdInterbranchOrders as $elem) $elem->write($gen, 'createdInterbranchOrders');
		foreach ($this->updatedInterbranchOrders as $elem) $elem->write($gen, 'updatedInterbranchOrders');
		foreach ($this->messages as $elem) $elem->write($gen, 'messages');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getSalesPriceList extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPriceGroupList extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class logMistake extends SoapObject {
	public ?Terminal $terminal = null;
	public LogMistakeRequest $request;
	public function __construct() {
		$this->request = new LogMistakeRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		if ($this->terminal !== null) $this->terminal->write($gen, 'terminal');
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createRelation extends SoapObject {
	public ?Relation $relation = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->relation !== null) $this->relation->write($gen, 'relation');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateRelation extends SoapObject {
	public ?Relation $relation = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->relation !== null) $this->relation->write($gen, 'relation');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getRelation extends SoapObject {
	public int $relationNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('relationNumber', $this->relationNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class findRelation extends SoapObject {
	public ?Relation $relation = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->relation !== null) $this->relation->write($gen, 'relation');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getRelations extends SoapObject {
	public ?GetRelationsRequest $request = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->request !== null) $this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getCustomFieldLists extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getCardCategories extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class adjustPoints extends SoapObject {
	public AdjustPointsRequest $request;
	public function __construct() {
		$this->request = new AdjustPointsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getRelationPoints_ extends SoapObject {
	public GetRelationPointsRequest $request;
	public function __construct() {
		$this->request = new GetRelationPointsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getEmployees extends SoapObject {
	public ?getEmployeesRequest $request = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->request !== null) $this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getEmployee extends SoapObject {
	public int $employeeNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('employeeNumber', $this->employeeNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class findEmployee extends SoapObject {
	public ?Employee $employee = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->employee !== null) $this->employee->write($gen, 'employee');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createEmployee extends SoapObject {
	public ?Employee $employee = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->employee !== null) $this->employee->write($gen, 'employee');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateEmployee extends SoapObject {
	public ?Employee $employee = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->employee !== null) $this->employee->write($gen, 'employee');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getActiveEmployeeList extends SoapObject {
	public Terminal $terminal;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class verifyEmployeePassword extends SoapObject {
	public Terminal $terminal;
	public int $employee_number;
	public string $password;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$gen->writeInt('employee-number', $this->employee_number);
		$gen->out->writeElementNs(self::TNS, 'password', null, $this->password);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class verifyEmployeePasswordResponse extends SoapObject {
	public bool $response;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeBool('response', $this->response);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getMaxTableNumber extends SoapObject {
	public Terminal $terminal;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getMaxTableNumberResponse extends SoapObject {
	public int $maxTableNumber;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('maxTableNumber', $this->maxTableNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTableList extends SoapObject {
	public Terminal $terminal;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTableListV2 extends SoapObject {
	public Terminal $terminal;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTableListV3 extends SoapObject {
	public getTableListV3Request $request;
	public function __construct() {
		$this->request = new getTableListV3Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getMainTableList extends SoapObject {
	public getMainTableListRequest $request;
	public function __construct() {
		$this->request = new getMainTableListRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getSubTableList extends SoapObject {
	public getSubTableListRequest $request;
	public function __construct() {
		$this->request = new getSubTableListRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getCourseList extends SoapObject {
	public Terminal $terminal;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getCourseListV2 extends SoapObject {
	public GetCourseListV2Request $request;
	public function __construct() {
		$this->request = new GetCourseListV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getVatGroupList extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveTableOrder extends SoapObject {
	public Terminal $terminal;
	public ?Order $order = null;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		if ($this->order !== null) $this->order->write($gen, 'order');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveTableOrderV2 extends SoapObject {
	public Terminal $terminal;
	public SaveTableOrderRequest $request;
	public function __construct() {
		$this->terminal = new Terminal();
		$this->request = new SaveTableOrderRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createAndPayTableOrder extends SoapObject {
	public ?CreateAndPayTableOrderRequest $request = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->request !== null) $this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class moveTableOrder extends SoapObject {
	public Terminal $terminal;
	public ?Order $order = null;
	public int $tableNumber;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		if ($this->order !== null) $this->order->write($gen, 'order');
		$gen->writeInt('tableNumber', $this->tableNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class moveTableOrderV2 extends SoapObject {
	public Terminal $terminal;
	public MoveTableOrderRequest $request;
	public function __construct() {
		$this->terminal = new Terminal();
		$this->request = new MoveTableOrderRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class moveTableOrderV3 extends SoapObject {
	public MoveTableOrderV3Request $request;
	public function __construct() {
		$this->request = new MoveTableOrderV3Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTableOrder extends SoapObject {
	public Terminal $terminal;
	public int $branchNumber;
	public int $tableNumber;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('tableNumber', $this->tableNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTableOrderV2 extends SoapObject {
	public Terminal $terminal;
	public GetTableOrderRequest $request;
	public function __construct() {
		$this->terminal = new Terminal();
		$this->request = new GetTableOrderRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTableOrderV3 extends SoapObject {
	public GetTableOrderV3Request $request;
	public function __construct() {
		$this->request = new GetTableOrderV3Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class findTableOrder extends SoapObject {
	public Terminal $terminal;
	public string $extOrderId;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$gen->out->writeElementNs(self::TNS, 'extOrderId', null, $this->extOrderId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class releaseTable extends SoapObject {
	public Terminal $terminal;
	public ReleaseTableRequest $request;
	public function __construct() {
		$this->terminal = new Terminal();
		$this->request = new ReleaseTableRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class releaseTableV2 extends SoapObject {
	public ReleaseTableV2Request $request;
	public function __construct() {
		$this->request = new ReleaseTableV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class setSubTableCount extends SoapObject {
	public Terminal $terminal;
	public SetSubtableCountRequest $request;
	public function __construct() {
		$this->terminal = new Terminal();
		$this->request = new SetSubtableCountRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTableOrderCourseList extends SoapObject {
	public Terminal $terminal;
	public int $branchNumber;
	public int $tableNumber;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('tableNumber', $this->tableNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTableOrderCourseListV2 extends SoapObject {
	public Terminal $terminal;
	public GetTableOrderCourseListRequest $request;
	public function __construct() {
		$this->terminal = new Terminal();
		$this->request = new GetTableOrderCourseListRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTableOrderCourseListV3 extends SoapObject {
	public GetTableOrderCourseListRequest $request;
	public function __construct() {
		$this->request = new GetTableOrderCourseListRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class requestTableOrderCourse extends SoapObject {
	public Terminal $terminal;
	public int $branchNumber;
	public int $tableNumber;
	public int $employeeNumber;
	public int $courseNumber;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('tableNumber', $this->tableNumber);
		$gen->writeInt('employeeNumber', $this->employeeNumber);
		$gen->writeInt('courseNumber', $this->courseNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class requestNextTableOrderCourseV2 extends SoapObject {
	public Terminal $terminal;
	public RequestNextTableOrderCourseRequest $request;
	public function __construct() {
		$this->terminal = new Terminal();
		$this->request = new RequestNextTableOrderCourseRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class requestNextTableOrderCourseV3 extends SoapObject {
	public RequestNextTableOrderCourseV3Request $request;
	public function __construct() {
		$this->request = new RequestNextTableOrderCourseV3Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class storeSinglyEftTransaction extends SoapObject {
	public TerminalId $terminal;
	public EftTransactionDetails $eft_transaction;
	public function __construct() {
		$this->terminal = new TerminalId();
		$this->eft_transaction = new EftTransactionDetails();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$this->eft_transaction->write($gen, 'eft-transaction');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class queueBranchOrder extends SoapObject {
	public ?Order $order = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->order !== null) $this->order->write($gen, 'order');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class queueBranchOrderPayment extends SoapObject {
	public ?QueueBranchOrderPaymentRequest $paymentRequest = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->paymentRequest !== null) $this->paymentRequest->write($gen, 'paymentRequest');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getQueueBranchOrderPaymentStatus extends SoapObject {
	public string $queuedPaymentId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'queuedPaymentId', null, $this->queuedPaymentId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateOrder extends SoapObject {
	public ?Order $order = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->order !== null) $this->order->write($gen, 'order');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateOrderV2 extends SoapObject {
	public UpdateOrderV2Request $request;
	public function __construct() {
		$this->request = new UpdateOrderV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveOrder extends SoapObject {
	public ?Order $order = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->order !== null) $this->order->write($gen, 'order');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getOrder extends SoapObject {
	public string $orderId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPackingSlips extends SoapObject {
	public GetPackingSlipsRequest $request;
	public function __construct() {
		$this->request = new GetPackingSlipsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPackingSlipsByOrder extends SoapObject {
	public GetPackingSlipsByOrderRequest $request;
	public function __construct() {
		$this->request = new GetPackingSlipsByOrderRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getOrderChanges extends SoapObject {
	public GetOrderChangesRequest $request;
	public function __construct() {
		$this->request = new GetOrderChangesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getOrderHistory extends SoapObject {
	public GetOrderHistoryRequest $request;
	public function __construct() {
		$this->request = new GetOrderHistoryRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class findOrder extends SoapObject {
	public string $extOrderId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'extOrderId', null, $this->extOrderId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class cancelOrder extends SoapObject {
	public string $orderId;
	public ?CancelOrderRequest $request = null;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
		if ($this->request !== null) $this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class cancelOrderV2 extends SoapObject {
	public CancelOrderV2Request $request;
	public function __construct() {
		$this->request = new CancelOrderV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class cancelTableOrder extends SoapObject {
	public Terminal $terminal;
	public int $branchNumber;
	public int $tableNumber;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$gen->writeInt('branchNumber', $this->branchNumber);
		$gen->writeInt('tableNumber', $this->tableNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class cancelTableOrderV2 extends SoapObject {
	public Terminal $terminal;
	public CancelTableOrderRequest $request;
	public function __construct() {
		$this->terminal = new Terminal();
		$this->request = new CancelTableOrderRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class payInvoice extends SoapObject {
	public PayInvoiceRequest $request;
	public function __construct() {
		$this->request = new PayInvoiceRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class deliverOrder extends SoapObject {
	public DeliverOrderRequest $request;
	public function __construct() {
		$this->request = new DeliverOrderRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class deliverOrderV2 extends SoapObject {
	public DeliverOrderV2Request $request;
	public function __construct() {
		$this->request = new DeliverOrderV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getOrderCategories extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getReceipts extends SoapObject {
	public GetReceiptsRequest $request;
	public function __construct() {
		$this->request = new GetReceiptsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getReceipt extends SoapObject {
	public string $receiptId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'receiptId', null, $this->receiptId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getReceiptsByOrder extends SoapObject {
	public string $orderId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'orderId', null, $this->orderId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getReceiptsByCashCount extends SoapObject {
	public GetReceiptsByCashCountRequest $request;
	public function __construct() {
		$this->request = new GetReceiptsByCashCountRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class printReceipt extends SoapObject {
	public Terminal $terminal;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class printReceiptV2 extends SoapObject {
	public PrintReceiptV2Request $request;
	public function __construct() {
		$this->request = new PrintReceiptV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class printTableReceipt extends SoapObject {
	public Terminal $terminal;
	public int $tableNumber;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$gen->writeInt('tableNumber', $this->tableNumber);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class printTableReceiptV2 extends SoapObject {
	public Terminal $terminal;
	public PrintTableReceiptRequest $request;
	public function __construct() {
		$this->terminal = new Terminal();
		$this->request = new PrintTableReceiptRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class printTableReceiptV3 extends SoapObject {
	public PrintTableReceiptV3Request $request;
	public function __construct() {
		$this->request = new PrintTableReceiptV3Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getInvoices extends SoapObject {
	public GetInvoicesRequest $request;
	public function __construct() {
		$this->request = new GetInvoicesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveInvoice extends SoapObject {
	public Invoice $invoice;
	public function __construct() {
		$this->invoice = new Invoice();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->invoice->write($gen, 'invoice');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getInvoice extends SoapObject {
	public string $invoiceId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'invoiceId', null, $this->invoiceId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class findInvoice extends SoapObject {
	public string $extInvoiceId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'extInvoiceId', null, $this->extInvoiceId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class creditInvoice extends SoapObject {
	public string $invoiceId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'invoiceId', null, $this->invoiceId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getJournals extends SoapObject {
	public GetJournalsRequest $request;
	public function __construct() {
		$this->request = new GetJournalsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getFinancialJournal extends SoapObject {
	public GetFinancialJournalRequest $request;
	public function __construct() {
		$this->request = new GetFinancialJournalRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getFinancialJournalByCashCount extends SoapObject {
	public GetFinancialJournalByCashCountRequest $request;
	public function __construct() {
		$this->request = new GetFinancialJournalByCashCountRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getCashCountList extends SoapObject {
	public GetCashCountListRequest $request;
	public function __construct() {
		$this->request = new GetCashCountListRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getCashDrawerBalancingList extends SoapObject {
	public GetCashDrawerBalancingListRequest $request;
	public function __construct() {
		$this->request = new GetCashDrawerBalancingListRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTurnoverGroups extends SoapObject {
	public GetTurnoverGroupsRequest $request;
	public function __construct() {
		$this->request = new GetTurnoverGroupsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateTurnoverGroups extends SoapObject {
	public UpdateTurnoverGroupsRequest $request;
	public function __construct() {
		$this->request = new UpdateTurnoverGroupsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getProducts extends SoapObject {
	public GetProductsRequest $request;
	public function __construct() {
		$this->request = new GetProductsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createProduct extends SoapObject {
	public Product $product;
	public function __construct() {
		$this->product = new Product();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->product->write($gen, 'product');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateProduct extends SoapObject {
	public Product $product;
	public function __construct() {
		$this->product = new Product();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->product->write($gen, 'product');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getArticleVariants extends SoapObject {
	public GetArticleVariantsRequest $request;
	public function __construct() {
		$this->request = new GetArticleVariantsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getArticlesVariants extends SoapObject {
	public GetArticlesVariantsRequest $request;
	public function __construct() {
		$this->request = new GetArticlesVariantsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class newArticleVariant extends SoapObject {
	public NewArticleVariantRequest $request;
	public function __construct() {
		$this->request = new NewArticleVariantRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateArticleVariant extends SoapObject {
	public UpdateArticleVariantRequest $request;
	public function __construct() {
		$this->request = new UpdateArticleVariantRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class deleteArticleVariants extends SoapObject {
	public DeleteArticleVariantsRequest $request;
	public function __construct() {
		$this->request = new DeleteArticleVariantsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getStock extends SoapObject {
	public GetStockRequest $request;
	public function __construct() {
		$this->request = new GetStockRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getStockHistory extends SoapObject {
	public GetStockHistoryRequest $request;
	public function __construct() {
		$this->request = new GetStockHistoryRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getStockHistoryV2 extends SoapObject {
	public GetStockHistoryV2Request $request;
	public function __construct() {
		$this->request = new GetStockHistoryV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateStock extends SoapObject {
	public UpdateStockRequest $request;
	public function __construct() {
		$this->request = new UpdateStockRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class setStock extends SoapObject {
	public SetStockRequest $request;
	public function __construct() {
		$this->request = new SetStockRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getArticleGroups extends SoapObject {
	public GetArticleGroupsRequest $request;
	public function __construct() {
		$this->request = new GetArticleGroupsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getArticleGroupChanges extends SoapObject {
	public GetArticleGroupChangesRequest $request;
	public function __construct() {
		$this->request = new GetArticleGroupChangesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateArticleGroup extends SoapObject {
	public UpdateArticleGroupRequest $request;
	public function __construct() {
		$this->request = new UpdateArticleGroupRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class newArticleGroup extends SoapObject {
	public NewArticleGroupRequest $request;
	public function __construct() {
		$this->request = new NewArticleGroupRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class deleteArticleGroup extends SoapObject {
	public DeleteArticleGroupRequest $request;
	public function __construct() {
		$this->request = new DeleteArticleGroupRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class addProductsToArticleGroup extends SoapObject {
	public AddProductsToArticleGroupRequest $request;
	public function __construct() {
		$this->request = new AddProductsToArticleGroupRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class replaceProductsOfArticleGroup extends SoapObject {
	public ReplaceProductsOfArticleGroupRequest $request;
	public function __construct() {
		$this->request = new ReplaceProductsOfArticleGroupRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class deleteProductsFromArticleGroup extends SoapObject {
	public DeleteProductsFromArticleGroupRequest $request;
	public function __construct() {
		$this->request = new DeleteProductsFromArticleGroupRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class sendMessage extends SoapObject {
	public SendMessageRequest $request;
	public function __construct() {
		$this->request = new SendMessageRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class sendMessageResponse extends SoapObject {
	public bool $response;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeBool('response', $this->response);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getMessages extends SoapObject {
	public GetMessagesRequest $request;
	public function __construct() {
		$this->request = new GetMessagesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getShifts extends SoapObject {
	public GetShiftsRequest $request;
	public function __construct() {
		$this->request = new GetShiftsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPurchaseOrders extends SoapObject {
	public GetPurchaseOrdersRequest $request;
	public function __construct() {
		$this->request = new GetPurchaseOrdersRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class savePurchaseOrder extends SoapObject {
	public ?PurchaseOrder $purchaseOrder = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->purchaseOrder !== null) $this->purchaseOrder->write($gen, 'purchaseOrder');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPurchaseOrdersV2 extends SoapObject {
	public GetPurchaseOrdersV2Request $request;
	public function __construct() {
		$this->request = new GetPurchaseOrdersV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class savePurchaseOrderV2_ extends SoapObject {
	public SavePurchaseOrderV2Request $request;
	public function __construct() {
		$this->request = new SavePurchaseOrderV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPurchaseDeliveries extends SoapObject {
	public GetPurchaseDeliveriesRequest $request;
	public function __construct() {
		$this->request = new GetPurchaseDeliveriesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class savePurchaseDelivery extends SoapObject {
	public ?PurchaseDelivery $purchaseDelivery = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->purchaseDelivery !== null) $this->purchaseDelivery->write($gen, 'purchaseDelivery');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPurchaseDeliveriesV2 extends SoapObject {
	public GetPurchaseDeliveriesV2Request $request;
	public function __construct() {
		$this->request = new GetPurchaseDeliveriesV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class savePurchaseDeliveryV2_ extends SoapObject {
	public SavePurchaseDeliveryV2Request $request;
	public function __construct() {
		$this->request = new SavePurchaseDeliveryV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class encryptString extends SoapObject {
	public EncryptStringRequest $request;
	public function __construct() {
		$this->request = new EncryptStringRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getArticleCardLayout extends SoapObject {
	public GetArticleCardLayoutRequest $request;
	public function __construct() {
		$this->request = new GetArticleCardLayoutRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateArticleCardLayout extends SoapObject {
	public UpdateArticleCardLayoutRequest $request;
	public function __construct() {
		$this->request = new UpdateArticleCardLayoutRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getRetailSpaceRental extends SoapObject {
	public GetRetailSpaceRentalRequest $request;
	public function __construct() {
		$this->request = new GetRetailSpaceRentalRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getRetailSpaceRentals extends SoapObject {
	public GetRetailSpaceRentalsRequest $request;
	public function __construct() {
		$this->request = new GetRetailSpaceRentalsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class EidSearch extends SoapObject {
	public EidSearchRequest $request;
	public function __construct() {
		$this->request = new EidSearchRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getOverview extends SoapObject {
	public OverviewRequest $request;
	public function __construct() {
		$this->request = new OverviewRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getOverviewFields extends SoapObject {
	public GetOverviewFieldsRequest $request;
	public function __construct() {
		$this->request = new GetOverviewFieldsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateBatch extends SoapObject {
	public UpdateBatchRequest $request;
	public function __construct() {
		$this->request = new UpdateBatchRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class print_ extends SoapObject {
	public PrintRequest $request;
	public function __construct() {
		$this->request = new PrintRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getKitchenTickets extends SoapObject {
	public GetKitchenTicketsRequest $request;
	public function __construct() {
		$this->request = new GetKitchenTicketsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveStockCorrections extends SoapObject {
	public SaveStockCorrectionsRequest $request;
	public function __construct() {
		$this->request = new SaveStockCorrectionsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPurchaseBook extends SoapObject {
	public GetPurchaseBookRequest $request;
	public function __construct() {
		$this->request = new GetPurchaseBookRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class savePurchaseBook extends SoapObject {
	public PurchaseBook $request;
	public function __construct() {
		$this->request = new PurchaseBook();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class addToPurchaseBook extends SoapObject {
	public AddToPurchaseBookRequest $request;
	public function __construct() {
		$this->request = new AddToPurchaseBookRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getStockCorrections extends SoapObject {
	public GetStockCorrectionsRequest $request;
	public function __construct() {
		$this->request = new GetStockCorrectionsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getArticlesNutritionalCharacteristics extends SoapObject {
	public GetArticlesNutritionalCharacteristicsRequest $request;
	public function __construct() {
		$this->request = new GetArticlesNutritionalCharacteristicsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateArticleNutritionalCharacteristics extends SoapObject {
	public UpdateArticleNutritionalCharacteristicsRequest $request;
	public function __construct() {
		$this->request = new UpdateArticleNutritionalCharacteristicsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPreparationMethodGroups extends SoapObject {
	public GetPreparationMethodGroupsRequest $request;
	public function __construct() {
		$this->request = new GetPreparationMethodGroupsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class deletePreparationMethodGroup extends SoapObject {
	public DeletePreparationMethodGroupRequest $request;
	public function __construct() {
		$this->request = new DeletePreparationMethodGroupRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getArticlesPreparationMethodGroups extends SoapObject {
	public GetArticlesPreparationMethodGroupsRequest $request;
	public function __construct() {
		$this->request = new GetArticlesPreparationMethodGroupsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateArticlePreparationMethodGroups extends SoapObject {
	public UpdateArticlePreparationMethodGroupsRequest $request;
	public function __construct() {
		$this->request = new UpdateArticlePreparationMethodGroupsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class placeTableOrder extends SoapObject {
	public PlaceTableOrderReq $request;
	public function __construct() {
		$this->request = new PlaceTableOrderReq();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTapTickTotals extends SoapObject {
	public TapTickTotalsRequest $request;
	public function __construct() {
		$this->request = new TapTickTotalsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		($this->request)->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTapTickHistory extends SoapObject {
	public TapTickHistoryRequest $request;
	public function __construct() {
		$this->request = new TapTickHistoryRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class findRelationV2 extends SoapObject {
	public FindRelationV2Request $request;
	public function __construct() {
		$this->request = new FindRelationV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTodoLists extends SoapObject {
	public GetTodoListsRequest $request;
	public function __construct() {
		$this->request = new GetTodoListsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTodoList extends SoapObject {
	public int $id;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createTodoList extends SoapObject {
	public CreateTodoListRequest $request;
	public function __construct() {
		$this->request = new CreateTodoListRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveTodoList extends SoapObject {
	public SaveTodoListRequest $request;
	public function __construct() {
		$this->request = new SaveTodoListRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveTodoListResponse extends SoapObject {
	public ?Struct_1 $response = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->response !== null) $this->response->write($gen, 'response');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveTodoListV2 extends SoapObject {
	public SaveTodoListV2Request $request;
	public function __construct() {
		$this->request = new SaveTodoListV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class addToTodoList extends SoapObject {
	public AddToTodoListRequest $request;
	public function __construct() {
		$this->request = new AddToTodoListRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class addToTodoListResponse extends SoapObject {
	public ?Struct_2 $response = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->response !== null) $this->response->write($gen, 'response');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class removeTodoList extends SoapObject {
	public int $id;
	public function writeProps(SoapGenerator $gen): void {
		$gen->writeInt('id', $this->id);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class removeTodoListResponse extends SoapObject {
	public ?Struct_3 $response = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->response !== null) $this->response->write($gen, 'response');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getFilterProfiles extends SoapObject {
	public GetFilterProfilesRequest $request;
	public function __construct() {
		$this->request = new GetFilterProfilesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class savePreparationMethodGroup extends SoapObject {
	public SavePreparationMethodGroupRequest $request;
	public function __construct() {
		$this->request = new SavePreparationMethodGroupRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getNutritionalCharacteristics extends SoapObject {
	public GetNutritionalCharacteristicsRequest $request;
	public function __construct() {
		$this->request = new GetNutritionalCharacteristicsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateNutritionalCharacteristics extends SoapObject {
	public UpdateNutritionalCharacteristicsRequest $request;
	public function __construct() {
		$this->request = new UpdateNutritionalCharacteristicsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class determinePricing extends SoapObject {
	public DeterminePricingRequest $request;
	public function __construct() {
		$this->request = new DeterminePricingRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class setRelationPresence extends SoapObject {
	public SetRelationPresenceRequest $request;
	public function __construct() {
		$this->request = new SetRelationPresenceRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getRelationPresence extends SoapObject {
	public GetRelationPresenceRequest $request;
	public function __construct() {
		$this->request = new GetRelationPresenceRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getArticleBranchDeviations extends SoapObject {
	public GetArticleBranchDeviationsRequest $request;
	public function __construct() {
		$this->request = new GetArticleBranchDeviationsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveArticleBranchDeviations extends SoapObject {
	public SaveArticleBranchDeviationsRequest $request;
	public function __construct() {
		$this->request = new SaveArticleBranchDeviationsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateArticleNutrients extends SoapObject {
	public UpdateArticleNutrientsRequest $request;
	public function __construct() {
		$this->request = new UpdateArticleNutrientsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateArticleDynamicMinMaxStock extends SoapObject {
	public UpdateArticleDynamicMinMaxStockRequest $request;
	public function __construct() {
		$this->request = new UpdateArticleDynamicMinMaxStockRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getArticleDynamicMinMaxStock extends SoapObject {
	public GetArticleDynamicMinMaxStockRequest $request;
	public function __construct() {
		$this->request = new GetArticleDynamicMinMaxStockRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getCardFilterOptions extends SoapObject {
	public GetCardFilterOptionsRequest $request;
	public function __construct() {
		$this->request = new GetCardFilterOptionsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPlannedCycleCounts extends SoapObject {
	public GetPlannedCycleCountsRequest $request;
	public function __construct() {
		$this->request = new GetPlannedCycleCountsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getActiveCycleCount extends SoapObject {
	public GetActiveCycleCountRequest $request;
	public function __construct() {
		$this->request = new GetActiveCycleCountRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class setArticleRecalled extends SoapObject {
	public SetArticleRecalledRequest $request;
	public function __construct() {
		$this->request = new SetArticleRecalledRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getConfiguration extends SoapObject {
	public GetConfigurationRequest $request;
	public function __construct() {
		$this->request = new GetConfigurationRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateConfiguration extends SoapObject {
	public UpdateConfigurationRequest $request;
	public function __construct() {
		$this->request = new UpdateConfigurationRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getConfigurationTree extends SoapObject {
	public GetConfigurationTreeRequest $request;
	public function __construct() {
		$this->request = new GetConfigurationTreeRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getConfigurationValues extends SoapObject {
	public GetConfigurationValuesRequest $request;
	public function __construct() {
		$this->request = new GetConfigurationValuesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateConfigurationValues extends SoapObject {
	public UpdateConfigurationValuesRequest $request;
	public function __construct() {
		$this->request = new UpdateConfigurationValuesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		($this->request)->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getButtonLayout extends SoapObject {
	public Terminal $terminal;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getButtonLayoutGroupForBranch extends SoapObject {
	public ButtonLayoutGroupForBranchRequest $request;
	public function __construct() {
		$this->request = new ButtonLayoutGroupForBranchRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getButtonLayoutGroupsWithAssignedWorkplaces extends SoapObject {
	public GetButtonLayoutGroupsWithAssignedWorkplacesRequest $request;
	public function __construct() {
		$this->request = new GetButtonLayoutGroupsWithAssignedWorkplacesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getButtonLayoutGroupDetails extends SoapObject {
	public GetButtonLayoutGroupDetailsRequest $request;
	public function __construct() {
		$this->request = new GetButtonLayoutGroupDetailsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveButtonLayoutGroupDetails extends SoapObject {
	public SaveButtonLayoutGroupDetailsRequest $request;
	public function __construct() {
		$this->request = new SaveButtonLayoutGroupDetailsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class deleteButtonLayoutGroup extends SoapObject {
	public DeleteButtonLayoutGroupRequest $request;
	public function __construct() {
		$this->request = new DeleteButtonLayoutGroupRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class assignButtonLayoutGroupToWorkplaces extends SoapObject {
	public AssignButtonLayoutGroupToWorkplacesRequest $request;
	public function __construct() {
		$this->request = new AssignButtonLayoutGroupToWorkplacesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getArticlesInLayout extends SoapObject {
	public Terminal $terminal;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getDayStockConfiguration extends SoapObject {
	public GetDayStockConfigurationRequest $request;
	public function __construct() {
		$this->request = new GetDayStockConfigurationRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveDayStockConfiguration_ extends SoapObject {
	public SaveDayStockConfigurationRequest $request;
	public function __construct() {
		$this->request = new SaveDayStockConfigurationRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getActivities extends SoapObject {
	public GetActivitiesRequest $request;
	public function __construct() {
		$this->request = new GetActivitiesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getActivityTypes extends SoapObject {
	public GetActivityTypesRequest $request;
	public function __construct() {
		$this->request = new GetActivityTypesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveActivityTypes extends SoapObject {
	public SaveActivityTypesRequest $request;
	public function __construct() {
		$this->request = new SaveActivityTypesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createActivity_ extends SoapObject {
	public CreateActivityRequest $request;
	public function __construct() {
		$this->request = new CreateActivityRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateActivity_ extends SoapObject {
	public UpdateActivityRequest $request;
	public function __construct() {
		$this->request = new UpdateActivityRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveActivity_ extends SoapObject {
	public SaveActivityRequest $request;
	public function __construct() {
		$this->request = new SaveActivityRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class deleteActivity extends SoapObject {
	public DeleteActivityRequest $request;
	public function __construct() {
		$this->request = new DeleteActivityRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getGksInformation extends SoapObject {
	public GetGksInformationRequest $request;
	public function __construct() {
		$this->request = new GetGksInformationRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getMealplanMomentsConfiguration extends SoapObject {
	public GetMealplanMomentsConfigurationRequest $request;
	public function __construct() {
		$this->request = new GetMealplanMomentsConfigurationRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getScheduledMealPlans extends SoapObject {
	public GetScheduledMealPlansRequest $request;
	public function __construct() {
		$this->request = new GetScheduledMealPlansRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getArticleAlterationsGroups extends SoapObject {
	public GetArticleAlterationsGroupsRequest $request;
	public function __construct() {
		$this->request = new GetArticleAlterationsGroupsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveArticleAlterationsGroup extends SoapObject {
	public SaveArticleAlterationsGroupRequest $request;
	public function __construct() {
		$this->request = new SaveArticleAlterationsGroupRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class deleteArticleAlterationsGroup extends SoapObject {
	public DeleteArticleAlterationsGroupRequest $request;
	public function __construct() {
		$this->request = new DeleteArticleAlterationsGroupRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateAttachedArticleAlterationsGroups extends SoapObject {
	public UpdateAttachedArticleAlterationsGroupsRequest $request;
	public function __construct() {
		$this->request = new UpdateAttachedArticleAlterationsGroupsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateArticleMenu extends SoapObject {
	public UpdateArticleMenuRequest $request;
	public function __construct() {
		$this->request = new UpdateArticleMenuRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateOnlineAuthorizationTree extends SoapObject {
	public UpdateOnlineAuthorizationTreeRequest $request;
	public function __construct() {
		$this->request = new UpdateOnlineAuthorizationTreeRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getOwnerLabels extends SoapObject {
	public GetOwnerLabelsRequest $request;
	public function __construct() {
		$this->request = new GetOwnerLabelsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getWordAliases extends SoapObject {
	public GetWordAliasesRequest $request;
	public function __construct() {
		$this->request = new GetWordAliasesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getApiVersion extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getDatabaseVersion extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getLicenseInformation extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getAvailableTerminalList extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class registerTerminal extends SoapObject {
	public Terminal $terminal;
	public bool $forceRegistration;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$gen->writeBool('forceRegistration', $this->forceRegistration);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTerminalSettings extends SoapObject {
	public ?Terminal $terminal = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->terminal !== null) $this->terminal->write($gen, 'terminal');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getBranchInformation extends SoapObject {
	public GetBranchInformationRequest $request;
	public function __construct() {
		$this->request = new GetBranchInformationRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getBranchGroups extends SoapObject {
	public GetBranchGroupsRequest $request;
	public function __construct() {
		$this->request = new GetBranchGroupsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getDeliveryMethods extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getDeliveryMethodsV2 extends SoapObject {
	public GetDeliveryMethodsV2Request $request;
	public function __construct() {
		$this->request = new GetDeliveryMethodsV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createDeliveryMethod extends SoapObject {
	public CreateDeliveryMethodRequest $request;
	public function __construct() {
		$this->request = new CreateDeliveryMethodRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateDeliveryMethod extends SoapObject {
	public UpdateDeliveryMethodRequest $request;
	public function __construct() {
		$this->request = new UpdateDeliveryMethodRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getBranches extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getCurrentSyncMarkers extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getCurrentSyncMarkersV2 extends SoapObject {
	public GetCurrentSyncMarkersV2Request $request;
	public function __construct() {
		$this->request = new GetCurrentSyncMarkersV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getNutrientTypes extends SoapObject {
	public GetNutrientTypesRequest $request;
	public function __construct() {
		$this->request = new GetNutrientTypesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class verifyCredentials extends SoapObject {
	public VerifyCredentialsRequest $request;
	public function __construct() {
		$this->request = new VerifyCredentialsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveCredentials extends SoapObject {
	public SaveCredentialsRequest $request;
	public function __construct() {
		$this->request = new SaveCredentialsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPasswordRequirements extends SoapObject {
	public PasswordRequirementsRequest $request;
	public function __construct() {
		$this->request = new PasswordRequirementsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class passwordReset extends SoapObject {
	public PasswordResetRequest $request;
	public function __construct() {
		$this->request = new PasswordResetRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getFloorplans extends SoapObject {
	public GetFloorplansRequest $request;
	public function __construct() {
		$this->request = new GetFloorplansRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class changeTableProperty extends SoapObject {
	public ChangeTablePropertyReq $request;
	public function __construct() {
		$this->request = new ChangeTablePropertyReq();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getEmployeeAuthorizations extends SoapObject {
	public GetEmployeeAuthorizationsRequest $request;
	public function __construct() {
		$this->request = new GetEmployeeAuthorizationsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getGroupAuthorizations extends SoapObject {
	public GetGroupAuthorizationsRequest $request;
	public function __construct() {
		$this->request = new GetGroupAuthorizationsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateGroupAuthorizations extends SoapObject {
	public UpdateGroupAuthorizationsRequest $request;
	public function __construct() {
		$this->request = new UpdateGroupAuthorizationsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getAuthorizationGroups extends SoapObject {
	public GetAuthorizationGroupsRequest $request;
	public function __construct() {
		$this->request = new GetAuthorizationGroupsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getAuthorizationTree extends SoapObject {
	public GetAuthorizationTreeRequest $request;
	public function __construct() {
		$this->request = new GetAuthorizationTreeRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getEmployeeBranchAuthorizations extends SoapObject {
	public GetEmployeeBranchAuthorizationsRequest $request;
	public function __construct() {
		$this->request = new GetEmployeeBranchAuthorizationsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveAuthorizationGroup extends SoapObject {
	public SaveAuthorizationGroupRequest $request;
	public function __construct() {
		$this->request = new SaveAuthorizationGroupRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class deleteAuthorizationGroup extends SoapObject {
	public DeleteAuthorizationGroupRequest $request;
	public function __construct() {
		$this->request = new DeleteAuthorizationGroupRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getEmployeeAuthorizationGroups extends SoapObject {
	public GetEmployeeAuthorizationGroupsRequest $request;
	public function __construct() {
		$this->request = new GetEmployeeAuthorizationGroupsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateEmployeeAuthorizationGroups extends SoapObject {
	public UpdateEmployeeAuthorizationGroupsRequest $request;
	public function __construct() {
		$this->request = new UpdateEmployeeAuthorizationGroupsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getEmployeeAuthorizationSyncMarkers extends SoapObject {
	public GetEmployeeAuthorizationSyncMarkersRequest $request;
	public function __construct() {
		$this->request = new GetEmployeeAuthorizationSyncMarkersRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getSpecialBarcodePatterns extends SoapObject {
	public GetSpecialBarcodePatternsRequest $request;
	public function __construct() {
		$this->request = new GetSpecialBarcodePatternsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class parseSpecialBarcode extends SoapObject {
	public ParseSpecialBarcodeRequest $request;
	public function __construct() {
		$this->request = new ParseSpecialBarcodeRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createImage extends SoapObject {
	public CreateImageRequest $request;
	public function __construct() {
		$this->request = new CreateImageRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createImageFromUrl extends SoapObject {
	public CreateImageFromUrlRequest $request;
	public function __construct() {
		$this->request = new CreateImageFromUrlRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getCardImageLabels extends SoapObject {
	public GetCardImageLabelsRequest $request;
	public function __construct() {
		$this->request = new GetCardImageLabelsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getCardImages extends SoapObject {
	public GetCardImagesRequest $request;
	public function __construct() {
		$this->request = new GetCardImagesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveCardImages extends SoapObject {
	public SaveCardImagesRequest $request;
	public function __construct() {
		$this->request = new SaveCardImagesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getImages extends SoapObject {
	public ?GetImagesRequest $request = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->request !== null) $this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPrintLayouts extends SoapObject {
	public GetPrintLayoutsRequest $request;
	public function __construct() {
		$this->request = new GetPrintLayoutsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPrintLayoutAssignments extends SoapObject {
	public GetPrintLayoutAssignmentsRequest $request;
	public function __construct() {
		$this->request = new GetPrintLayoutAssignmentsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getRenderedPrintLayout extends SoapObject {
	public GetRenderedPrintLayoutRequest $request;
	public function __construct() {
		$this->request = new GetRenderedPrintLayoutRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPrintLayoutMarkup extends SoapObject {
	public GetPrintLayoutMarkupRequest $request;
	public function __construct() {
		$this->request = new GetPrintLayoutMarkupRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class printPrintLayout extends SoapObject {
	public PrintPrintLayoutRequest $request;
	public function __construct() {
		$this->request = new PrintPrintLayoutRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class checkGiftcardPayment extends SoapObject {
	public CheckGiftcardPaymentRequest $request;
	public function __construct() {
		$this->request = new CheckGiftcardPaymentRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class registerGiftcardPayment extends SoapObject {
	public RegisterGiftcardPaymentRequest $request;
	public function __construct() {
		$this->request = new RegisterGiftcardPaymentRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class registerGiftcardPaymentV2 extends SoapObject {
	public RegisterGiftcardPaymentV2Request $request;
	public function __construct() {
		$this->request = new RegisterGiftcardPaymentV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createGiftcard extends SoapObject {
	public CreateGiftcardRequest $request;
	public function __construct() {
		$this->request = new CreateGiftcardRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reloadGiftcard extends SoapObject {
	public ReloadGiftcardRequest $request;
	public function __construct() {
		$this->request = new ReloadGiftcardRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getGiftcardTypes extends SoapObject {
	public GetGiftcardTypesRequest $request;
	public function __construct() {
		$this->request = new GetGiftcardTypesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getRelationGiftcards extends SoapObject {
	public GetRelationGiftcardsRequest $request;
	public function __construct() {
		$this->request = new GetRelationGiftcardsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getGiftcard_ extends SoapObject {
	public GetGiftcardRequest $request;
	public function __construct() {
		$this->request = new GetGiftcardRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getGiftcardHistory extends SoapObject {
	public GetGiftcardHistoryRequest $request;
	public function __construct() {
		$this->request = new GetGiftcardHistoryRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getGiftcards extends SoapObject {
	public GetGiftcardsRequest $request;
	public function __construct() {
		$this->request = new GetGiftcardsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveGiftcards extends SoapObject {
	public SaveGiftcardsRequest $request;
	public function __construct() {
		$this->request = new SaveGiftcardsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class restituteGiftcards extends SoapObject {
	public RestituteGiftcardsRequest $request;
	public function __construct() {
		$this->request = new RestituteGiftcardsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class linkGiftcardsToRelation extends SoapObject {
	public LinkGiftcardsToRelationRequest $request;
	public function __construct() {
		$this->request = new LinkGiftcardsToRelationRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getVouchers extends SoapObject {
	public GetVouchersRequest $request;
	public function __construct() {
		$this->request = new GetVouchersRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getVoucher extends SoapObject {
	public GetVoucherRequest $request;
	public function __construct() {
		$this->request = new GetVoucherRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getVoucherCategories extends SoapObject {
	public GetVoucherCategoriesRequest $request;
	public function __construct() {
		$this->request = new GetVoucherCategoriesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getVoucherIssuances extends SoapObject {
	public GetVoucherIssuancesRequest $request;
	public function __construct() {
		$this->request = new GetVoucherIssuancesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getVoucherSettings extends SoapObject {
	public GetVoucherSettingsRequest $request;
	public function __construct() {
		$this->request = new GetVoucherSettingsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class issueVouchers extends SoapObject {
	public IssueVouchersRequest $request;
	public function __construct() {
		$this->request = new IssueVouchersRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class issueVoucherExternalScanCodes extends SoapObject {
	public IssueVoucherExternalScanCodesRequest $request;
	public function __construct() {
		$this->request = new IssueVoucherExternalScanCodesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getVoucherExternalScanCodes extends SoapObject {
	public GetVoucherExternalScanCodesRequest $request;
	public function __construct() {
		$this->request = new GetVoucherExternalScanCodesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getRedeemableVoucherIssuances extends SoapObject {
	public GetRedeemableVoucherIssuancesRequest $request;
	public function __construct() {
		$this->request = new GetRedeemableVoucherIssuancesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class redeemVoucherIssuance extends SoapObject {
	public RedeemVoucherIssuanceRequest $request;
	public function __construct() {
		$this->request = new RedeemVoucherIssuanceRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reportTurnoverByBranch_ extends SoapObject {
	public ReportTurnoverByBranchRequest $request;
	public function __construct() {
		$this->request = new ReportTurnoverByBranchRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reportTurnoverByEmployee_ extends SoapObject {
	public ReportTurnoverByEmployeeRequest $request;
	public function __construct() {
		$this->request = new ReportTurnoverByEmployeeRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reportTurnoverByActivity_ extends SoapObject {
	public ReportTurnoverByActivityRequest $request;
	public function __construct() {
		$this->request = new ReportTurnoverByActivityRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reportTurnoverByTurnoverGroup_ extends SoapObject {
	public ReportTurnoverByTurnoverGroupRequest $request;
	public function __construct() {
		$this->request = new ReportTurnoverByTurnoverGroupRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reportTurnoverByArticle_ extends SoapObject {
	public ReportTurnoverByArticleRequest $request;
	public function __construct() {
		$this->request = new ReportTurnoverByArticleRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reportHoursByEmployee_ extends SoapObject {
	public ReportHoursByEmployeeRequest $request;
	public function __construct() {
		$this->request = new ReportHoursByEmployeeRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reportPaymentMethods_ extends SoapObject {
	public ReportPaymentMethodsRequest $request;
	public function __construct() {
		$this->request = new ReportPaymentMethodsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reportTables_ extends SoapObject {
	public ReportTablesRequest $request;
	public function __construct() {
		$this->request = new ReportTablesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reportCancellations_ extends SoapObject {
	public ReportCancellationsRequest $request;
	public function __construct() {
		$this->request = new ReportCancellationsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reportBPE_ extends SoapObject {
	public ReportBPERequest $request;
	public function __construct() {
		$this->request = new ReportBPERequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reportBranchPerformance_ extends SoapObject {
	public ReportBranchPerformanceRequest $request;
	public function __construct() {
		$this->request = new ReportBranchPerformanceRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reportAverageSpending_ extends SoapObject {
	public ReportAverageSpendingRequest $request;
	public function __construct() {
		$this->request = new ReportAverageSpendingRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reportTurnover_ extends SoapObject {
	public ReportTurnoverRequest $request;
	public function __construct() {
		$this->request = new ReportTurnoverRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reportPaymentMethodDetails extends SoapObject {
	public ReportPaymentMethodDetailsRequest $request;
	public function __construct() {
		$this->request = new ReportPaymentMethodDetailsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reportPrintableFinancialTotals extends SoapObject {
	public ReportPrintableFinancialTotalsRequest $request;
	public function __construct() {
		$this->request = new ReportPrintableFinancialTotalsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class reportArticlePerformance_ extends SoapObject {
	public ReportArticlePerformanceRequest $request;
	public function __construct() {
		$this->request = new ReportArticlePerformanceRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getSalesRepeatTemplates extends SoapObject {
	public GetSalesRepeatTemplatesRequest $request;
	public function __construct() {
		$this->request = new GetSalesRepeatTemplatesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveSalesRepeatTemplate_ extends SoapObject {
	public SaveSalesRepeatTemplateRequest $request;
	public function __construct() {
		$this->request = new SaveSalesRepeatTemplateRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class performBpeBudgetChecks extends SoapObject {
	public PerformBpeBudgetChecksRequest $request;
	public function __construct() {
		$this->request = new PerformBpeBudgetChecksRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getTicketCounterSales extends SoapObject {
	public GetTicketCounterSalesRequest $request;
	public function __construct() {
		$this->request = new GetTicketCounterSalesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getSalePromotions extends SoapObject {
	public GetSalePromotionsRequest $request;
	public function __construct() {
		$this->request = new GetSalePromotionsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPaymentMethods extends SoapObject {
	public function writeProps(SoapGenerator $gen): void {
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getPaymentMethodsV2 extends SoapObject {
	public GetPaymentMethodsRequest $request;
	public function __construct() {
		$this->request = new GetPaymentMethodsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getAvailablePaymentMethods extends SoapObject {
	public ?Terminal $terminal = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->terminal !== null) $this->terminal->write($gen, 'terminal');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getAvailablePaymentMethodsV2 extends SoapObject {
	public GetAvailablePaymentMethodsV2Request $request;
	public function __construct() {
		$this->request = new GetAvailablePaymentMethodsV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createOrder extends SoapObject {
	public ?Order $order = null;
	public function writeProps(SoapGenerator $gen): void {
		if ($this->order !== null) $this->order->write($gen, 'order');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createOrderV2 extends SoapObject {
	public CreateOrderV2Request $request;
	public function __construct() {
		$this->request = new CreateOrderV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createOrderV3 extends SoapObject {
	public CreateOrderV3Request $request;
	public function __construct() {
		$this->request = new CreateOrderV3Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class payOrder extends SoapObject {
	public PayOrderRequest $request;
	public function __construct() {
		$this->request = new PayOrderRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class payOrderV2 extends SoapObject {
	public PayOrderV2Request $request;
	public function __construct() {
		$this->request = new PayOrderV2Request();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class payTableOrder extends SoapObject {
	public Terminal $terminal;
	public ?Order $order = null;
	/** @var Payment[] */
	public $paymentList = array();
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		if ($this->order !== null) $this->order->write($gen, 'order');
		$tmp_paymentList = new PaymentList($this->paymentList);
$tmp_paymentList->write($gen, 'paymentList');

	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class payTableOrderV2 extends SoapObject {
	public Terminal $terminal;
	public PayTableOrderRequest $request;
	public function __construct() {
		$this->terminal = new Terminal();
		$this->request = new PayTableOrderRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class prepayTableOrder extends SoapObject {
	public Terminal $terminal;
	public ?Order $order = null;
	/** @var Payment[] */
	public $paymentList = array();
	public BigDecimal $prepayAmount;
	public function __construct() {
		$this->terminal = new Terminal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		if ($this->order !== null) $this->order->write($gen, 'order');
		$tmp_paymentList = new PaymentList($this->paymentList);
$tmp_paymentList->write($gen, 'paymentList');

		$gen->writeValueAndScale('prepayAmount', '', $this->prepayAmount, 2);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class prepayTableOrderV2 extends SoapObject {
	public Terminal $terminal;
	public PrepayTableOrderRequest $request;
	public function __construct() {
		$this->terminal = new Terminal();
		$this->request = new PrepayTableOrderRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getOrdersByExtOrderIds extends SoapObject {
	public GetOrdersByExtOrderIdsRequest $request;
	public function __construct() {
		$this->request = new GetOrdersByExtOrderIdsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getProposals extends SoapObject {
	public GetProposalsRequest $request;
	public function __construct() {
		$this->request = new GetProposalsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getProposal extends SoapObject {
	public string $proposalId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'proposalId', null, $this->proposalId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveProposal extends SoapObject {
	public Proposal $proposal;
	public function __construct() {
		$this->proposal = new Proposal();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->proposal->write($gen, 'proposal');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class cancelProposal extends SoapObject {
	public string $proposalId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'proposalId', null, $this->proposalId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createOrderFromProposal extends SoapObject {
	public string $proposalId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'proposalId', null, $this->proposalId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createInvoiceFromProposal extends SoapObject {
	public string $proposalId;
	public function writeProps(SoapGenerator $gen): void {
		$gen->out->writeElementNs(self::TNS, 'proposalId', null, $this->proposalId);
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getOrdersByReceipts extends SoapObject {
	public GetOrdersByReceiptsRequest $request;
	public function __construct() {
		$this->request = new GetOrdersByReceiptsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getCurrentTableOrders extends SoapObject {
	public GetCurrentTableOrdersRequest $request;
	public function __construct() {
		$this->request = new GetCurrentTableOrdersRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getOrders extends SoapObject {
	public GetOrdersRequest $request;
	public function __construct() {
		$this->request = new GetOrdersRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class determineContractLines extends SoapObject {
	public DetermineContractLinesRequest $request;
	public function __construct() {
		$this->request = new DetermineContractLinesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createInvoiceFromPackingSlips extends SoapObject {
	public CreateInvoiceFromPackingSlipsRequest $request;
	public function __construct() {
		$this->request = new CreateInvoiceFromPackingSlipsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getCashCountInfo extends SoapObject {
	public GetCashCountInfoRequest $request;
	public function __construct() {
		$this->request = new GetCashCountInfoRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class saveCashCount extends SoapObject {
	public SaveCashCountRequest $request;
	public function __construct() {
		$this->request = new SaveCashCountRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getWebhookConsumers extends SoapObject {
	public GetWebhookConsumersRequest $request;
	public function __construct() {
		$this->request = new GetWebhookConsumersRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class startExternalPayment extends SoapObject {
	public Terminal $terminal;
	public StartExternalPaymentRequest $request;
	public function __construct() {
		$this->terminal = new Terminal();
		$this->request = new StartExternalPaymentRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class pollExternalPayment extends SoapObject {
	public Terminal $terminal;
	public PollExternalPaymentRequest $request;
	public function __construct() {
		$this->terminal = new Terminal();
		$this->request = new PollExternalPaymentRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class requestCancelExternalPayment extends SoapObject {
	public Terminal $terminal;
	public RequestCancelExternalPaymentRequest $request;
	public function __construct() {
		$this->terminal = new Terminal();
		$this->request = new RequestCancelExternalPaymentRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class cancelExternalPayment extends SoapObject {
	public Terminal $terminal;
	public CancelExternalPaymentRequest $request;
	public function __construct() {
		$this->terminal = new Terminal();
		$this->request = new CancelExternalPaymentRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->terminal->write($gen, 'terminal');
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class startExternalPaymentV2 extends SoapObject {
	public ExternalPaymentWebhookRequest $request;
	public function __construct() {
		$this->request = new ExternalPaymentWebhookRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class pollExternalPaymentV2 extends SoapObject {
	public ExternalPaymentWebhookRequest $request;
	public function __construct() {
		$this->request = new ExternalPaymentWebhookRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class requestCancelExternalPaymentV2 extends SoapObject {
	public ExternalPaymentWebhookRequest $request;
	public function __construct() {
		$this->request = new ExternalPaymentWebhookRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class cancelExternalPaymentV2 extends SoapObject {
	public ExternalPaymentWebhookRequest $request;
	public function __construct() {
		$this->request = new ExternalPaymentWebhookRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class sendWebhook extends SoapObject {
	public SendWebhookRequest $request;
	public function __construct() {
		$this->request = new SendWebhookRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getInterbranchOrders extends SoapObject {
	public GetInterbranchOrdersRequest $request;
	public function __construct() {
		$this->request = new GetInterbranchOrdersRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createInterbranchOrder extends SoapObject {
	public CreateInterbranchOrderRequest $request;
	public function __construct() {
		$this->request = new CreateInterbranchOrderRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class updateInterbranchOrder extends SoapObject {
	public UpdateInterbranchOrderRequest $request;
	public function __construct() {
		$this->request = new UpdateInterbranchOrderRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class claimInterbranchOrder extends SoapObject {
	public ClaimInterbranchOrderRequest $request;
	public function __construct() {
		$this->request = new ClaimInterbranchOrderRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class releaseInterbranchOrder extends SoapObject {
	public ReleaseInterbranchOrderRequest $request;
	public function __construct() {
		$this->request = new ReleaseInterbranchOrderRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getInterbranchShipments extends SoapObject {
	public GetInterbranchShipmentsRequest $request;
	public function __construct() {
		$this->request = new GetInterbranchShipmentsRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class shipInterbranchOrder extends SoapObject {
	public ShipInterbranchOrderRequest $request;
	public function __construct() {
		$this->request = new ShipInterbranchOrderRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class getInterbranchDeliveries extends SoapObject {
	public GetInterbranchDeliveriesRequest $request;
	public function __construct() {
		$this->request = new GetInterbranchDeliveriesRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class deliverInterbranchShipment extends SoapObject {
	public DeliverInterbranchShipmentRequest $request;
	public function __construct() {
		$this->request = new DeliverInterbranchShipmentRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createInterbranchShipment extends SoapObject {
	public CreateInterbranchShipmentRequest $request;
	public function __construct() {
		$this->request = new CreateInterbranchShipmentRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class createInterbranchDelivery extends SoapObject {
	public CreateInterbranchDeliveryRequest $request;
	public function __construct() {
		$this->request = new CreateInterbranchDeliveryRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

class runInterbranchPlanner extends SoapObject {
	public RunInterbranchPlannerRequest $request;
	public function __construct() {
		$this->request = new RunInterbranchPlannerRequest();
	}
	public function writeProps(SoapGenerator $gen): void {
		$this->request->write($gen, 'request');
	}
	public function write(SoapGenerator $gen, string $elemName): void {
		$gen->out->startElementNs(self::TNS, $elemName, null);
		$this->writeProps($gen);
		$gen->out->endElement();
	}
}

